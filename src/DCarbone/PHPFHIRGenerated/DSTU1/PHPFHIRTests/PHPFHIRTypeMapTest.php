<?php

namespace DCarbone\PHPFHIRGenerated\DSTU1\PHPFHIRTests;

/*!
 * This class was generated with the PHPFHIR library (https://github.com/dcarbone/php-fhir) using
 * class definitions from HL7 FHIR (https://www.hl7.org/fhir/)
 * 
 * Class creation date: October 21st, 2019 04:04+0000
 * 
 * PHPFHIR Copyright:
 * 
 * Copyright 2016-2019 Daniel Carbone (daniel.p.carbone@gmail.com)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 *
 * FHIR Copyright Notice:
 *
 *   Copyright (c) 2011-2013, HL7, Inc.
 *   All rights reserved.
 * 
 *   Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *    * Neither the name of HL7 nor the names of its contributors may be used to
 *      endorse or promote products derived from this software without specific
 *      prior written permission.
 * 
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *   IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 * 
 * 
 *   Generated on Tue, Sep 30, 2014 18:08+1000 for FHIR v0.0.82
 */
use DCarbone\PHPFHIRGenerated\DSTU1\PHPFHIRTypeMap;
use PHPUnit\Framework\TestCase;

/**
 * Class PHPFHIRTypeMapTest
 * @package \DCarbone\PHPFHIRGenerated\DSTU1\PHPFHIRTests
 */
class PHPFHIRTypeMapTest extends TestCase
{
    public function testGetTypeClassWithNonStringReturnsNull()
    {
        $this->assertNull(PHPFHIRTypeMap::getTypeClass(1));
    }

    public function testGetContainedTypeClassName()
    {
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Address'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AddressUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AddressUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAdverseReaction', PHPFHIRTypeMap::getContainedTypeClassName('AdverseReaction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdverseReaction.Exposure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdverseReaction.Symptom'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Age'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AggregationMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AggregationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAlert', PHPFHIRTypeMap::getContainedTypeClassName('Alert'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AlertStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AlertStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAllergyIntolerance', PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntolerance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Attachment'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BackboneElement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('base64Binary'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('base64Binary-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRBinary', PHPFHIRTypeMap::getContainedTypeClassName('Binary'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BindingConformance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BindingConformance-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('boolean'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('boolean-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCarePlan', PHPFHIRTypeMap::getContainedTypeClassName('CarePlan'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlan.Activity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlan.Goal'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlan.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlan.Simple'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanActivityCategory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanActivityCategory-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanActivityStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanActivityStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanGoalStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanGoalStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CausalityExpectation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CausalityExpectation-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('code'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('code-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeableConcept'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Coding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRComposition', PHPFHIRTypeMap::getContainedTypeClassName('Composition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Composition.Attester'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Composition.Event'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Composition.Section'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompositionAttestationMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompositionAttestationMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompositionStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompositionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConceptMap', PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.Concept'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.DependsOn'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.Map'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMapEquivalence'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMapEquivalence-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCondition', PHPFHIRTypeMap::getContainedTypeClassName('Condition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Condition.Evidence'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Condition.Location'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Condition.RelatedItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Condition.Stage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionRelationshipType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionRelationshipType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConformance', PHPFHIRTypeMap::getContainedTypeClassName('Conformance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Certificate'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Document'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Event'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Implementation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Messaging'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Operation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Operation1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Query'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Resource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Rest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.SearchParam'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Security'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Software'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConformanceEventMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConformanceEventMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConformanceStatementStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConformanceStatementStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConstraintSeverity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConstraintSeverity-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactSystem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactSystem-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactUse-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Count'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Criticality'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Criticality-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('date'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('date-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('dateTime'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('dateTime-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('decimal'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('decimal-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDevice', PHPFHIRTypeMap::getContainedTypeClassName('Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDeviceObservationReport', PHPFHIRTypeMap::getContainedTypeClassName('DeviceObservationReport'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceObservationReport.Channel'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceObservationReport.Metric'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceObservationReport.VirtualDevice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticOrder', PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticOrder'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticOrder.Event'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticOrder.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticOrderPriority'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticOrderPriority-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticOrderStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticReport', PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticReport'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticReport.Image'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticReportStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticReportStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Distance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentManifest', PHPFHIRTypeMap::getContainedTypeClassName('DocumentManifest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentReference', PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference.Context'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference.RelatesTo'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference.Service'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReferenceStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReferenceStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentRelationshipType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentRelationshipType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Duration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIREncounter', PHPFHIRTypeMap::getContainedTypeClassName('Encounter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.Accomodation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.Hospitalization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.Location'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterClass'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterClass-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterState'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterState-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventTiming'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventTiming-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExposureType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExposureType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Extension'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExtensionContext'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExtensionContext-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRFamilyHistory', PHPFHIRTypeMap::getContainedTypeClassName('FamilyHistory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FamilyHistory.Condition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FamilyHistory.Relation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FilterOperator'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FilterOperator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRGroup', PHPFHIRTypeMap::getContainedTypeClassName('Group'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Group.Characteristic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GroupType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GroupType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HierarchicalRelationshipType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HierarchicalRelationshipType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HumanName'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('id'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('id-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Identifier'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IdentifierUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IdentifierUse-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingModality'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingModality-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImagingStudy', PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudy'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudy.Instance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudy.Series'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunization', PHPFHIRTypeMap::getContainedTypeClassName('Immunization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Immunization.Explanation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Immunization.Reaction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Immunization.VaccinationProtocol'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunizationRecommendation', PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationRecommendation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationRecommendation.DateCriterion'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationRecommendation.Protocol'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationRecommendation.Recommendation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InstanceAvailability'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InstanceAvailability-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('instant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('instant-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('integer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('integer-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IssueSeverity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IssueSeverity-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LinkType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LinkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRList', PHPFHIRTypeMap::getContainedTypeClassName('List'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('List.Entry'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ListMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ListMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRLocation', PHPFHIRTypeMap::getContainedTypeClassName('Location'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Location.Position'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LocationMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LocationMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LocationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LocationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedia', PHPFHIRTypeMap::getContainedTypeClassName('Media'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MediaType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MediaType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedication', PHPFHIRTypeMap::getContainedTypeClassName('Medication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Medication.Content'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Medication.Ingredient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Medication.Package'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Medication.Product'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationAdministration', PHPFHIRTypeMap::getContainedTypeClassName('MedicationAdministration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationAdministration.Dosage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationAdministrationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationAdministrationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationDispense', PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispense'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispense.Dispense'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispense.Dosage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispense.Substitution'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispenseStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispenseStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKind'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationPrescription', PHPFHIRTypeMap::getContainedTypeClassName('MedicationPrescription'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationPrescription.Dispense'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationPrescription.DosageInstruction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationPrescription.Substitution'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationPrescriptionStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationPrescriptionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationStatement', PHPFHIRTypeMap::getContainedTypeClassName('MedicationStatement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationStatement.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMessageHeader', PHPFHIRTypeMap::getContainedTypeClassName('MessageHeader'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageHeader.Destination'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageHeader.Response'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageHeader.Source'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageSignificanceCategory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageSignificanceCategory-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Modality'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Modality-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Money'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NameUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NameUse-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Narrative'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NarrativeStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NarrativeStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRObservation', PHPFHIRTypeMap::getContainedTypeClassName('Observation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Observation.ReferenceRange'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Observation.Related'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationRelationshipType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationRelationshipType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationReliability'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationReliability-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('oid'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('oid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROperationOutcome', PHPFHIRTypeMap::getContainedTypeClassName('OperationOutcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationOutcome.Issue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrder', PHPFHIRTypeMap::getContainedTypeClassName('Order'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Order.When'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OrderOutcomeStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OrderOutcomeStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrderResponse', PHPFHIRTypeMap::getContainedTypeClassName('OrderResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrganization', PHPFHIRTypeMap::getContainedTypeClassName('Organization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Organization.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROther', PHPFHIRTypeMap::getContainedTypeClassName('Other'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPatient', PHPFHIRTypeMap::getContainedTypeClassName('Patient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Patient.Animal'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Patient.Contact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Patient.Link'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Period'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPractitioner', PHPFHIRTypeMap::getContainedTypeClassName('Practitioner'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Practitioner.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProcedure', PHPFHIRTypeMap::getContainedTypeClassName('Procedure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Procedure.Performer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Procedure.RelatedItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProcedureRelationshipType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProcedureRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProfile', PHPFHIRTypeMap::getContainedTypeClassName('Profile'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Profile.Binding'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Profile.Constraint'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Profile.Definition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Profile.Element'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Profile.ExtensionDefn'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Profile.Mapping'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Profile.Mapping1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Profile.Query'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Profile.SearchParam'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Profile.Slicing'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Profile.Structure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Profile.Type'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PropertyRepresentation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PropertyRepresentation-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProvenance', PHPFHIRTypeMap::getContainedTypeClassName('Provenance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Provenance.Agent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Provenance.Entity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProvenanceEntityRole'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProvenanceEntityRole-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Quantity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuantityCompararator'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuantityCompararator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuery', PHPFHIRTypeMap::getContainedTypeClassName('Query'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Query.Response'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QueryOutcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QueryOutcome-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuestionnaire', PHPFHIRTypeMap::getContainedTypeClassName('Questionnaire'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Questionnaire.Group'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Questionnaire.Question'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Range'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Ratio'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ReactionSeverity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ReactionSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRRelatedPerson', PHPFHIRTypeMap::getContainedTypeClassName('RelatedPerson'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Resource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Resource.Inline'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceNamesPlusBinary'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceProfileStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceProfileStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceReference'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResponseType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResponseType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RestfulConformanceMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RestfulConformanceMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RestfulOperationSystem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RestfulOperationSystem-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RestfulOperationType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RestfulOperationType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SampledData'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SampledDataDataType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SampledDataDataType-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Schedule'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Schedule.Repeat'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('score'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchParamType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchParamType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSecurityEvent', PHPFHIRTypeMap::getContainedTypeClassName('SecurityEvent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEvent.Detail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEvent.Event'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEvent.Network'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEvent.Object'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEvent.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEvent.Source'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEventAction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEventAction-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEventObjectLifecycle'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEventObjectLifecycle-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEventObjectRole'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEventObjectRole-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEventObjectType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEventObjectType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEventOutcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEventOutcome-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEventParticipantNetworkType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SecurityEventParticipantNetworkType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SensitivityStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SensitivityStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SensitivityType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SensitivityType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SlicingRules'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SlicingRules-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSpecimen', PHPFHIRTypeMap::getContainedTypeClassName('Specimen'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Specimen.Collection'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Specimen.Container'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Specimen.Source'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Specimen.Treatment'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('string'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('string-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSubstance', PHPFHIRTypeMap::getContainedTypeClassName('Substance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Substance.Ingredient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Substance.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSupply', PHPFHIRTypeMap::getContainedTypeClassName('Supply'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Supply.Dispense'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyDispenseStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyDispenseStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('totalResults'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('UnitsOfTime'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('UnitsOfTime-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('uri'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('uri-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('uuid'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('uuid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRValueSet', PHPFHIRTypeMap::getContainedTypeClassName('ValueSet'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Compose'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Concept'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Contains'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Define'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Expansion'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Filter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Include'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSetStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSetStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('xmlIdRef'));
    }

    public function testIsContainableResourceWithClassname()
    {
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAddress'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAddress'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRAddressUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRAddressUseList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAdverseReaction'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAdverseReaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionExposure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionExposure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionSymptom'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionSymptom'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRAggregationModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRAggregationModeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAlert'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAlert'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAlertStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAlertStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRAlertStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRAlertStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAllergyIntolerance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAllergyIntolerance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAttachment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAttachment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRBase64BinaryPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRBase64BinaryPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRBinary'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRBinary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBindingConformance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBindingConformance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRBindingConformanceList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRBindingConformanceList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBoolean'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBoolean'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRBooleanPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRBooleanPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCarePlan'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCarePlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanGoal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanGoal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanSimple'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanSimple'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCarePlanActivityCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCarePlanActivityCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRCarePlanActivityCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCarePlanActivityCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCarePlanGoalStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCarePlanGoalStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRCarePlanGoalStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCarePlanGoalStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCarePlanStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCarePlanStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRCarePlanStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCarePlanStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCausalityExpectation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCausalityExpectation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRCausalityExpectationList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCausalityExpectationList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRCodePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCodePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCoding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCoding'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRComposition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRComposition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRCompositionAttestationModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCompositionAttestationModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRCompositionStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCompositionStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConceptMap'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConceptMap'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapMap'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapMap'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRConceptMapEquivalenceList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRConceptMapEquivalenceList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCondition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionLocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionLocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionRelatedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionRelatedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConditionRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConditionRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRConditionRelationshipTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRConditionRelationshipTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConditionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConditionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRConditionStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRConditionStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConformance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConformance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceQuery'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceQuery'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConformanceEventMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConformanceEventMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRConformanceEventModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRConformanceEventModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConformanceStatementStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConformanceStatementStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRConformanceStatementStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRConformanceStatementStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRConstraintSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRConstraintSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRContactSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRContactSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRContactSystemList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRContactSystemList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRContactUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRContactUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRContactUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRContactUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCriticality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCriticality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRCriticalityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCriticalityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRDatePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDatePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDateTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDateTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRDateTimePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDateTimePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDecimal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDecimal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRDecimalPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDecimalPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDevice'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDevice'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDeviceObservationReport'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDeviceObservationReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportChannel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportChannel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportMetric'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportMetric'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportVirtualDevice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportVirtualDevice'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticOrder'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticOrder'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDiagnosticOrderPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDiagnosticOrderPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRDiagnosticOrderPriorityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDiagnosticOrderPriorityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDiagnosticOrderStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDiagnosticOrderStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRDiagnosticOrderStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDiagnosticOrderStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticReport'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentManifest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentManifest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRDocumentModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDocumentModeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentReference'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceService'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceService'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIREncounter'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIREncounter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAccomodation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAccomodation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIREncounterClass'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIREncounterClass'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIREncounterClassList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIREncounterClassList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIREncounterState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIREncounterState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIREncounterStateList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIREncounterStateList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIREventTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIREventTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIREventTimingList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIREventTimingList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRExposureType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRExposureType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRExposureTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRExposureTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRExtension'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRExtension'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRExtensionContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRExtensionContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRExtensionContextList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRExtensionContextList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRFamilyHistory'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRFamilyHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryRelation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryRelation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRFilterOperatorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRFilterOperatorList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRGroup'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRGroupType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRGroupType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRGroupTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRGroupTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRHierarchicalRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRHierarchicalRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRHierarchicalRelationshipTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRHierarchicalRelationshipTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRHumanName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRHumanName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRId'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRId'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRIdPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRIdPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRIdentifierUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRIdentifierUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRImagingModality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRImagingModality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRImagingModalityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRImagingModalityList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImagingStudy'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImagingStudy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunization'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunizationRecommendation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunizationRecommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRInstanceAvailability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRInstanceAvailability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRInstanceAvailabilityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRInstanceAvailabilityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRInstant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRInstant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRInstantPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRInstantPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRInteger'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRInteger'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRIntegerPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRIntegerPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRIssueSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRIssueSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRLinkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRLinkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRLinkTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRLinkTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRListModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRListModeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRLocation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRLocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRLocationModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRLocationModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRLocationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRLocationStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedia'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedia'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMediaType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMediaType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRMediaTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRMediaTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedication'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationAdministration'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMedicationAdministrationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMedicationAdministrationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRMedicationAdministrationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRMedicationAdministrationStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationDispense'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMedicationDispenseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMedicationDispenseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRMedicationDispenseStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRMedicationDispenseStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMedicationKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMedicationKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRMedicationKindList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRMedicationKindList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationPrescription'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationPrescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDosageInstruction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDosageInstruction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMedicationPrescriptionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMedicationPrescriptionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRMedicationPrescriptionStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRMedicationPrescriptionStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationStatement'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationStatement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMessageHeader'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMessageHeader'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRModality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRModality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRModalityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRModalityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRMoney'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRMoney'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRNameUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRNameUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRNameUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRNameUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRNarrative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRNarrative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRNarrativeStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRNarrativeStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRObservation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRObservation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRObservationRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRObservationRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRObservationRelationshipTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRObservationRelationshipTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRObservationReliability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRObservationReliability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRObservationReliabilityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRObservationReliabilityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRObservationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRObservationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIROid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIROid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIROidPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIROidPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROperationOutcome'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROperationOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrder'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrder'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIROrderOutcomeStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIROrderOutcomeStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIROrderOutcomeStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIROrderOutcomeStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrderResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrderResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrganization'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrganization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROther'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROther'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPatient'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPatient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRPeriod'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRPeriod'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPractitioner'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPractitioner'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProcedure'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProcedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureRelatedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureRelatedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRProcedureRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRProcedureRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRProcedureRelationshipTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRProcedureRelationshipTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProfile'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProfile'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileBinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileBinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileConstraint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileConstraint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileExtensionDefn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileExtensionDefn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileQuery'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileQuery'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSearchParam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSearchParam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSlicing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSlicing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileStructure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileStructure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRPropertyRepresentationList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRPropertyRepresentationList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProvenance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProvenance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantityCompararator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantityCompararator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRQuantityCompararatorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRQuantityCompararatorList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuery'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuery'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRQuery\FHIRQueryResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRQuery\FHIRQueryResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQueryOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQueryOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRQueryOutcomeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRQueryOutcomeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuestionnaire'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuestionnaire'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuestionnaireStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuestionnaireStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRQuestionnaireStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRQuestionnaireStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRatio'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRatio'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRReactionSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRReactionSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRReactionSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRReactionSeverityList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRRelatedPerson'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRRelatedPerson'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRResourceInline'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRResourceInline'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRResourceType\FHIRResourceNamesPlusBinary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRResourceType\FHIRResourceNamesPlusBinary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRResourceProfileStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRResourceProfileStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRResourceProfileStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRResourceProfileStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRResourceReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRResourceReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRResourceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRResourceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRResponseType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRResponseType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRResponseTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRResponseTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRestfulConformanceMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRestfulConformanceMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRRestfulConformanceModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRRestfulConformanceModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRestfulOperationSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRestfulOperationSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRRestfulOperationSystemList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRRestfulOperationSystemList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRestfulOperationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRestfulOperationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRRestfulOperationTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRRestfulOperationTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSampledData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSampledData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSchedule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSchedule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSchedule\FHIRScheduleRepeat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSchedule\FHIRScheduleRepeat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDecimal\FHIRScore'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDecimal\FHIRScore'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRSearchParamTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSearchParamTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSecurityEvent'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSecurityEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventNetwork'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventNetwork'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventObject'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventObject'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventActionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventActionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventObjectLifecycle'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventObjectLifecycle'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventObjectLifecycleList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventObjectLifecycleList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventObjectRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventObjectRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventObjectRoleList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventObjectRoleList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventObjectType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventObjectType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventObjectTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventObjectTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventOutcomeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventOutcomeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventParticipantNetworkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventParticipantNetworkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventParticipantNetworkTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventParticipantNetworkTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSensitivityStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSensitivityStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRSensitivityStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSensitivityStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSensitivityType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSensitivityType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRSensitivityTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSensitivityTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRSlicingRulesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSlicingRulesList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSpecimen'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSpecimen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRString'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRString'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRStringPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRStringPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSubstance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSubstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSupply'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSupply'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSupply\FHIRSupplyDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSupply\FHIRSupplyDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSupplyDispenseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSupplyDispenseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRSupplyDispenseStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSupplyDispenseStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSupplyStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSupplyStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRSupplyStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSupplyStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRInteger\FHIRTotalResults'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRInteger\FHIRTotalResults'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRUnitsOfTimeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRUnitsOfTimeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRUri'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRUri'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRUriPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRUriPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRUuid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRUuid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRUuidPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRUuidPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRValueSet'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRValueSet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDefine'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDefine'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRValueSetStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRValueSetStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRValueSetStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRValueSetStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU1\FHIRIdPrimitive\FHIRXmlIdRef'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRIdPrimitive\FHIRXmlIdRef'));
    }

    public function testIsContainableResourceWithTypeName()
    {
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Address'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AddressUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AddressUse-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('AdverseReaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdverseReaction.Exposure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdverseReaction.Symptom'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Age'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AggregationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AggregationMode-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Alert'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AlertStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AlertStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('AllergyIntolerance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Attachment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BackboneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('base64Binary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('base64Binary-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Binary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BindingConformance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BindingConformance-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('boolean'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('boolean-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CarePlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlan.Activity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlan.Goal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlan.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlan.Simple'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanActivityCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanActivityCategory-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanActivityStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanActivityStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanGoalStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanGoalStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CausalityExpectation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CausalityExpectation-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('code'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('code-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeableConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Coding'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Composition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Composition.Attester'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Composition.Event'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Composition.Section'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompositionAttestationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompositionAttestationMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompositionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompositionStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ConceptMap'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.Concept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.DependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.Map'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMapEquivalence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMapEquivalence-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Condition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Condition.Evidence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Condition.Location'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Condition.RelatedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Condition.Stage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionRelationshipType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Conformance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Certificate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Document'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Event'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Implementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Messaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Operation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Operation1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Query'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Resource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Rest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.SearchParam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Security'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Software'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConformanceEventMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConformanceEventMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConformanceStatementStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConformanceStatementStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConstraintSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConstraintSeverity-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactSystem-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactUse-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Count'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Criticality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Criticality-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('date'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('date-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('dateTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('dateTime-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('decimal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('decimal-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Device'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DeviceObservationReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceObservationReport.Channel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceObservationReport.Metric'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceObservationReport.VirtualDevice'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DiagnosticOrder'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticOrder.Event'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticOrder.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticOrderPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticOrderPriority-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticOrderStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticOrderStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DiagnosticReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticReport.Image'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticReportStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Distance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DocumentManifest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentMode-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DocumentReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReference.Context'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReference.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReference.RelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReference.Service'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReferenceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReferenceStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentRelationshipType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Duration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Element'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Encounter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.Accomodation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.Hospitalization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.Location'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterClass'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterClass-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterState-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventTiming-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExposureType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExposureType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Extension'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExtensionContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExtensionContext-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('FamilyHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FamilyHistory.Condition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FamilyHistory.Relation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FilterOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FilterOperator-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Group'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Group.Characteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GroupType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GroupType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HierarchicalRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HierarchicalRelationshipType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HumanName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('id'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('id-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Identifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IdentifierUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IdentifierUse-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingModality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingModality-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ImagingStudy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingStudy.Instance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingStudy.Series'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Immunization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Immunization.Explanation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Immunization.Reaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Immunization.VaccinationProtocol'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ImmunizationRecommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationRecommendation.DateCriterion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationRecommendation.Protocol'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationRecommendation.Recommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InstanceAvailability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InstanceAvailability-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('instant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('instant-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('integer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('integer-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IssueSeverity-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LinkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LinkType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('List'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('List.Entry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ListMode-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Location'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Location.Position'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LocationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LocationMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LocationStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Media'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MediaType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MediaType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Medication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Medication.Content'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Medication.Ingredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Medication.Package'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Medication.Product'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationAdministration.Dosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationAdministrationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationAdministrationStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationDispense.Dispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationDispense.Dosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationDispense.Substitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationDispenseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationDispenseStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKind-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationPrescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationPrescription.Dispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationPrescription.DosageInstruction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationPrescription.Substitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationPrescriptionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationPrescriptionStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationStatement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationStatement.Dosage'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MessageHeader'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageHeader.Destination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageHeader.Response'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageHeader.Source'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageSignificanceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageSignificanceCategory-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Modality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Modality-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Money'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NameUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NameUse-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Narrative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NarrativeStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NarrativeStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Observation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Observation.ReferenceRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Observation.Related'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationRelationshipType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationReliability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationReliability-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('oid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('oid-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('OperationOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationOutcome.Issue'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Order'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Order.When'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OrderOutcomeStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OrderOutcomeStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('OrderResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Organization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Organization.Contact'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Other'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Patient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Patient.Animal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Patient.Contact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Patient.Link'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Period'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Practitioner'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Practitioner.Qualification'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Procedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Procedure.Performer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Procedure.RelatedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProcedureRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProcedureRelationshipType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Profile'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Profile.Binding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Profile.Constraint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Profile.Definition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Profile.Element'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Profile.ExtensionDefn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Profile.Mapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Profile.Mapping1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Profile.Query'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Profile.SearchParam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Profile.Slicing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Profile.Structure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Profile.Type'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PropertyRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PropertyRepresentation-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Provenance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Provenance.Agent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Provenance.Entity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProvenanceEntityRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProvenanceEntityRole-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Quantity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuantityCompararator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuantityCompararator-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Query'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Query.Response'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QueryOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QueryOutcome-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Questionnaire'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Questionnaire.Group'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Questionnaire.Question'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Range'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Ratio'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ReactionSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ReactionSeverity-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('RelatedPerson'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Resource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Resource.Inline'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceNamesPlusBinary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceProfileStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceProfileStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResponseType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResponseType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RestfulConformanceMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RestfulConformanceMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RestfulOperationSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RestfulOperationSystem-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RestfulOperationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RestfulOperationType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SampledData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SampledDataDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SampledDataDataType-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Schedule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Schedule.Repeat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('score'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchParamType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchParamType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SecurityEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEvent.Detail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEvent.Event'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEvent.Network'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEvent.Object'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEvent.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEvent.Source'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEventAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEventAction-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEventObjectLifecycle'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEventObjectLifecycle-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEventObjectRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEventObjectRole-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEventObjectType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEventObjectType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEventOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEventOutcome-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEventParticipantNetworkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SecurityEventParticipantNetworkType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SensitivityStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SensitivityStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SensitivityType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SensitivityType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SlicingRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SlicingRules-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Specimen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Specimen.Collection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Specimen.Container'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Specimen.Source'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Specimen.Treatment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('string'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('string-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Substance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Substance.Ingredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Substance.Instance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Supply'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Supply.Dispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyDispenseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyDispenseStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('totalResults'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('UnitsOfTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('UnitsOfTime-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('uri'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('uri-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('uuid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('uuid-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ValueSet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Compose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Concept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Contains'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Define'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Expansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Filter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Include'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSetStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSetStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('xmlIdRef'));
    }

    public function testIsContainableResourceWithInstance()
    {
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAddress;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAddressUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRAddressUseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAdverseReaction;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionExposure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionSymptom;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRAge;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAggregationMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRAggregationModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAlert;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAlertStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRAlertStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAllergyIntolerance;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAttachment;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBase64Binary;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRBase64BinaryPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRBinary;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBindingConformance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRBindingConformanceList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBoolean;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRBooleanPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCarePlan;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanGoal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanSimple;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCarePlanActivityCategory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRCarePlanActivityCategoryList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCarePlanActivityStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRCarePlanActivityStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCarePlanGoalStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRCarePlanGoalStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCarePlanStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRCarePlanStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCausalityExpectation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRCausalityExpectationList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRCodePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCodeableConcept;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCoding;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRComposition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCompositionAttestationMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRCompositionAttestationModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCompositionStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRCompositionStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConceptMap;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapConcept;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapMap;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConceptMapEquivalence;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRConceptMapEquivalenceList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCondition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionLocation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionRelatedItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConditionRelationshipType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRConditionRelationshipTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConditionStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRConditionStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConformance;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceQuery;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConformanceEventMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRConformanceEventModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConformanceStatementStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRConformanceStatementStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConstraintSeverity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRConstraintSeverityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRContactSystem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRContactSystemList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRContactUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRContactUseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRCount;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCriticality;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRCriticalityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRDatePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDateTime;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRDateTimePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDecimal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRDecimalPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDevice;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDeviceObservationReport;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportChannel;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportMetric;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportVirtualDevice;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticOrder;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDiagnosticOrderPriority;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRDiagnosticOrderPriorityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDiagnosticOrderStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRDiagnosticOrderStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticReport;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDiagnosticReportStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRDiagnosticReportStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRDistance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentManifest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDocumentMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRDocumentModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentReference;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceService;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDocumentReferenceStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRDocumentReferenceStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDocumentRelationshipType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRDocumentRelationshipTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRDuration;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIREncounter;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAccomodation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIREncounterClass;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIREncounterClassList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIREncounterState;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIREncounterStateList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIREventTiming;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIREventTimingList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRExposureType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRExposureTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRExtension;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRExtensionContext;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRExtensionContextList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRFamilyHistory;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryCondition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryRelation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRFilterOperator;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRFilterOperatorList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRGroup;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRGroupType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRGroupTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRHierarchicalRelationshipType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRHierarchicalRelationshipTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRHumanName;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRId;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRIdPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRIdentifier;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRIdentifierUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRIdentifierUseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRImagingModality;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRImagingModalityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImagingStudy;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunization;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunizationRecommendation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRInstanceAvailability;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRInstanceAvailabilityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRInstant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRInstantPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRInteger;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRIntegerPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRIssueSeverity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRIssueSeverityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRLinkType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRLinkTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRList;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRListMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRListModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRLocation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRLocationMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRLocationModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRLocationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRLocationStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedia;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMediaType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRMediaTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedication;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationAdministration;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMedicationAdministrationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRMedicationAdministrationStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationDispense;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDispense;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMedicationDispenseStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRMedicationDispenseStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMedicationKind;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRMedicationKindList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationPrescription;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDispense;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDosageInstruction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionSubstitution;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMedicationPrescriptionStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRMedicationPrescriptionStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationStatement;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMessageHeader;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMessageSignificanceCategory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRMessageSignificanceCategoryList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRModality;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRModalityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRMoney;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRNameUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRNameUseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRNarrative;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRNarrativeStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRNarrativeStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRObservation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRObservationRelationshipType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRObservationRelationshipTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRObservationReliability;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRObservationReliabilityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRObservationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRObservationStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIROid;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIROidPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROperationOutcome;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrder;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIROrderOutcomeStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIROrderOutcomeStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrderResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrganization;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROther;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPatient;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRPeriod;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPractitioner;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProcedure;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureRelatedItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRProcedureRelationshipType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRProcedureRelationshipTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProfile;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileBinding;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileConstraint;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileDefinition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileElement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileExtensionDefn;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileQuery;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSearchParam;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSlicing;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileStructure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRPropertyRepresentation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRPropertyRepresentationList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProvenance;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRProvenanceEntityRole;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRProvenanceEntityRoleList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantityCompararator;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRQuantityCompararatorList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuery;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRQuery\FHIRQueryResponse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQueryOutcome;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRQueryOutcomeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuestionnaire;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuestionnaireStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRQuestionnaireStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRange;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRatio;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRReactionSeverity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRReactionSeverityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRRelatedPerson;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRResourceInline;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRResourceType\FHIRResourceNamesPlusBinary;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRResourceProfileStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRResourceProfileStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRResourceReference;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRResourceType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRResponseType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRResponseTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRestfulConformanceMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRRestfulConformanceModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRestfulOperationSystem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRRestfulOperationSystemList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRestfulOperationType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRRestfulOperationTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSampledData;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSampledDataDataType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRSampledDataDataTypePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSchedule;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSchedule\FHIRScheduleRepeat;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDecimal\FHIRScore;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSearchParamType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRSearchParamTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSecurityEvent;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventEvent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventNetwork;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventObject;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventSource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventActionList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventObjectLifecycle;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventObjectLifecycleList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventObjectRole;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventObjectRoleList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventObjectType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventObjectTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventOutcome;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventOutcomeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventParticipantNetworkType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventParticipantNetworkTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSensitivityStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRSensitivityStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSensitivityType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRSensitivityTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSlicingRules;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRSlicingRulesList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSpecimen;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenSource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRString;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRStringPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSubstance;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSupply;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSupply\FHIRSupplyDispense;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSupplyDispenseStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRSupplyDispenseStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSupplyStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRSupplyStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRInteger\FHIRTotalResults;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRUnitsOfTime;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRUnitsOfTimeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRUri;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRUriPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRUuid;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRUuidPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRValueSet;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDefine;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRValueSetStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRValueSetStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU1\FHIRIdPrimitive\FHIRXmlIdRef;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
    }

    public function testGetTypeClass()
    {
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRAddressUseList', PHPFHIRTypeMap::getTypeClass('AddressUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRAggregationModeList', PHPFHIRTypeMap::getTypeClass('AggregationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRAlertStatusList', PHPFHIRTypeMap::getTypeClass('AlertStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRBase64BinaryPrimitive', PHPFHIRTypeMap::getTypeClass('base64Binary-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRBinary', PHPFHIRTypeMap::getTypeClass('Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRBindingConformanceList', PHPFHIRTypeMap::getTypeClass('BindingConformance-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRBooleanPrimitive', PHPFHIRTypeMap::getTypeClass('boolean-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCarePlanActivityCategoryList', PHPFHIRTypeMap::getTypeClass('CarePlanActivityCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCarePlanActivityStatusList', PHPFHIRTypeMap::getTypeClass('CarePlanActivityStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCarePlanGoalStatusList', PHPFHIRTypeMap::getTypeClass('CarePlanGoalStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCarePlanStatusList', PHPFHIRTypeMap::getTypeClass('CarePlanStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCausalityExpectationList', PHPFHIRTypeMap::getTypeClass('CausalityExpectation-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCodePrimitive', PHPFHIRTypeMap::getTypeClass('code-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCompositionAttestationModeList', PHPFHIRTypeMap::getTypeClass('CompositionAttestationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCompositionStatusList', PHPFHIRTypeMap::getTypeClass('CompositionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRConceptMapEquivalenceList', PHPFHIRTypeMap::getTypeClass('ConceptMapEquivalence-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRConditionRelationshipTypeList', PHPFHIRTypeMap::getTypeClass('ConditionRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRConditionStatusList', PHPFHIRTypeMap::getTypeClass('ConditionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRConformanceEventModeList', PHPFHIRTypeMap::getTypeClass('ConformanceEventMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRConformanceStatementStatusList', PHPFHIRTypeMap::getTypeClass('ConformanceStatementStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRConstraintSeverityList', PHPFHIRTypeMap::getTypeClass('ConstraintSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRContactSystemList', PHPFHIRTypeMap::getTypeClass('ContactSystem-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRContactUseList', PHPFHIRTypeMap::getTypeClass('ContactUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRCriticalityList', PHPFHIRTypeMap::getTypeClass('Criticality-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDatePrimitive', PHPFHIRTypeMap::getTypeClass('date-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDateTimePrimitive', PHPFHIRTypeMap::getTypeClass('dateTime-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDecimalPrimitive', PHPFHIRTypeMap::getTypeClass('decimal-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDiagnosticOrderPriorityList', PHPFHIRTypeMap::getTypeClass('DiagnosticOrderPriority-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDiagnosticOrderStatusList', PHPFHIRTypeMap::getTypeClass('DiagnosticOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDiagnosticReportStatusList', PHPFHIRTypeMap::getTypeClass('DiagnosticReportStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDocumentModeList', PHPFHIRTypeMap::getTypeClass('DocumentMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDocumentReferenceStatusList', PHPFHIRTypeMap::getTypeClass('DocumentReferenceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRDocumentRelationshipTypeList', PHPFHIRTypeMap::getTypeClass('DocumentRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement', PHPFHIRTypeMap::getTypeClass('Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAddress', PHPFHIRTypeMap::getTypeClass('Address'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAddressUse', PHPFHIRTypeMap::getTypeClass('AddressUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAggregationMode', PHPFHIRTypeMap::getTypeClass('AggregationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAlertStatus', PHPFHIRTypeMap::getTypeClass('AlertStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRAttachment', PHPFHIRTypeMap::getTypeClass('Attachment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement', PHPFHIRTypeMap::getTypeClass('BackboneElement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionExposure', PHPFHIRTypeMap::getTypeClass('AdverseReaction.Exposure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionSymptom', PHPFHIRTypeMap::getTypeClass('AdverseReaction.Symptom'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity', PHPFHIRTypeMap::getTypeClass('CarePlan.Activity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanGoal', PHPFHIRTypeMap::getTypeClass('CarePlan.Goal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant', PHPFHIRTypeMap::getTypeClass('CarePlan.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanSimple', PHPFHIRTypeMap::getTypeClass('CarePlan.Simple'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester', PHPFHIRTypeMap::getTypeClass('Composition.Attester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent', PHPFHIRTypeMap::getTypeClass('Composition.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection', PHPFHIRTypeMap::getTypeClass('Composition.Section'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapConcept', PHPFHIRTypeMap::getTypeClass('ConceptMap.Concept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn', PHPFHIRTypeMap::getTypeClass('ConceptMap.DependsOn'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapMap', PHPFHIRTypeMap::getTypeClass('ConceptMap.Map'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence', PHPFHIRTypeMap::getTypeClass('Condition.Evidence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionLocation', PHPFHIRTypeMap::getTypeClass('Condition.Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionRelatedItem', PHPFHIRTypeMap::getTypeClass('Condition.RelatedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage', PHPFHIRTypeMap::getTypeClass('Condition.Stage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate', PHPFHIRTypeMap::getTypeClass('Conformance.Certificate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument', PHPFHIRTypeMap::getTypeClass('Conformance.Document'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent', PHPFHIRTypeMap::getTypeClass('Conformance.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation', PHPFHIRTypeMap::getTypeClass('Conformance.Implementation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging', PHPFHIRTypeMap::getTypeClass('Conformance.Messaging'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation', PHPFHIRTypeMap::getTypeClass('Conformance.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation1', PHPFHIRTypeMap::getTypeClass('Conformance.Operation1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceQuery', PHPFHIRTypeMap::getTypeClass('Conformance.Query'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource', PHPFHIRTypeMap::getTypeClass('Conformance.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest', PHPFHIRTypeMap::getTypeClass('Conformance.Rest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam', PHPFHIRTypeMap::getTypeClass('Conformance.SearchParam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity', PHPFHIRTypeMap::getTypeClass('Conformance.Security'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware', PHPFHIRTypeMap::getTypeClass('Conformance.Software'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportChannel', PHPFHIRTypeMap::getTypeClass('DeviceObservationReport.Channel'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportMetric', PHPFHIRTypeMap::getTypeClass('DeviceObservationReport.Metric'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportVirtualDevice', PHPFHIRTypeMap::getTypeClass('DeviceObservationReport.VirtualDevice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent', PHPFHIRTypeMap::getTypeClass('DiagnosticOrder.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem', PHPFHIRTypeMap::getTypeClass('DiagnosticOrder.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage', PHPFHIRTypeMap::getTypeClass('DiagnosticReport.Image'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext', PHPFHIRTypeMap::getTypeClass('DocumentReference.Context'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceParameter', PHPFHIRTypeMap::getTypeClass('DocumentReference.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo', PHPFHIRTypeMap::getTypeClass('DocumentReference.RelatesTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceService', PHPFHIRTypeMap::getTypeClass('DocumentReference.Service'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAccomodation', PHPFHIRTypeMap::getTypeClass('Encounter.Accomodation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization', PHPFHIRTypeMap::getTypeClass('Encounter.Hospitalization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation', PHPFHIRTypeMap::getTypeClass('Encounter.Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant', PHPFHIRTypeMap::getTypeClass('Encounter.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryCondition', PHPFHIRTypeMap::getTypeClass('FamilyHistory.Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryRelation', PHPFHIRTypeMap::getTypeClass('FamilyHistory.Relation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic', PHPFHIRTypeMap::getTypeClass('Group.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance', PHPFHIRTypeMap::getTypeClass('ImagingStudy.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries', PHPFHIRTypeMap::getTypeClass('ImagingStudy.Series'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion', PHPFHIRTypeMap::getTypeClass('ImmunizationRecommendation.DateCriterion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol', PHPFHIRTypeMap::getTypeClass('ImmunizationRecommendation.Protocol'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation', PHPFHIRTypeMap::getTypeClass('ImmunizationRecommendation.Recommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation', PHPFHIRTypeMap::getTypeClass('Immunization.Explanation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction', PHPFHIRTypeMap::getTypeClass('Immunization.Reaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol', PHPFHIRTypeMap::getTypeClass('Immunization.VaccinationProtocol'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry', PHPFHIRTypeMap::getTypeClass('List.Entry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition', PHPFHIRTypeMap::getTypeClass('Location.Position'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage', PHPFHIRTypeMap::getTypeClass('MedicationAdministration.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDispense', PHPFHIRTypeMap::getTypeClass('MedicationDispense.Dispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosage', PHPFHIRTypeMap::getTypeClass('MedicationDispense.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution', PHPFHIRTypeMap::getTypeClass('MedicationDispense.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDispense', PHPFHIRTypeMap::getTypeClass('MedicationPrescription.Dispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDosageInstruction', PHPFHIRTypeMap::getTypeClass('MedicationPrescription.DosageInstruction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionSubstitution', PHPFHIRTypeMap::getTypeClass('MedicationPrescription.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage', PHPFHIRTypeMap::getTypeClass('MedicationStatement.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent', PHPFHIRTypeMap::getTypeClass('Medication.Content'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient', PHPFHIRTypeMap::getTypeClass('Medication.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage', PHPFHIRTypeMap::getTypeClass('Medication.Package'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct', PHPFHIRTypeMap::getTypeClass('Medication.Product'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination', PHPFHIRTypeMap::getTypeClass('MessageHeader.Destination'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse', PHPFHIRTypeMap::getTypeClass('MessageHeader.Response'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource', PHPFHIRTypeMap::getTypeClass('MessageHeader.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange', PHPFHIRTypeMap::getTypeClass('Observation.ReferenceRange'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated', PHPFHIRTypeMap::getTypeClass('Observation.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue', PHPFHIRTypeMap::getTypeClass('OperationOutcome.Issue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen', PHPFHIRTypeMap::getTypeClass('Order.When'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact', PHPFHIRTypeMap::getTypeClass('Organization.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal', PHPFHIRTypeMap::getTypeClass('Patient.Animal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact', PHPFHIRTypeMap::getTypeClass('Patient.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink', PHPFHIRTypeMap::getTypeClass('Patient.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification', PHPFHIRTypeMap::getTypeClass('Practitioner.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer', PHPFHIRTypeMap::getTypeClass('Procedure.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureRelatedItem', PHPFHIRTypeMap::getTypeClass('Procedure.RelatedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileBinding', PHPFHIRTypeMap::getTypeClass('Profile.Binding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileConstraint', PHPFHIRTypeMap::getTypeClass('Profile.Constraint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileDefinition', PHPFHIRTypeMap::getTypeClass('Profile.Definition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileElement', PHPFHIRTypeMap::getTypeClass('Profile.Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileExtensionDefn', PHPFHIRTypeMap::getTypeClass('Profile.ExtensionDefn'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping', PHPFHIRTypeMap::getTypeClass('Profile.Mapping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping1', PHPFHIRTypeMap::getTypeClass('Profile.Mapping1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileQuery', PHPFHIRTypeMap::getTypeClass('Profile.Query'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSearchParam', PHPFHIRTypeMap::getTypeClass('Profile.SearchParam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSlicing', PHPFHIRTypeMap::getTypeClass('Profile.Slicing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileStructure', PHPFHIRTypeMap::getTypeClass('Profile.Structure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileType', PHPFHIRTypeMap::getTypeClass('Profile.Type'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent', PHPFHIRTypeMap::getTypeClass('Provenance.Agent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity', PHPFHIRTypeMap::getTypeClass('Provenance.Entity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRQuery\FHIRQueryResponse', PHPFHIRTypeMap::getTypeClass('Query.Response'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup', PHPFHIRTypeMap::getTypeClass('Questionnaire.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion', PHPFHIRTypeMap::getTypeClass('Questionnaire.Question'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource', PHPFHIRTypeMap::getTypeClass('Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAdverseReaction', PHPFHIRTypeMap::getTypeClass('AdverseReaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAlert', PHPFHIRTypeMap::getTypeClass('Alert'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAllergyIntolerance', PHPFHIRTypeMap::getTypeClass('AllergyIntolerance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCarePlan', PHPFHIRTypeMap::getTypeClass('CarePlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRComposition', PHPFHIRTypeMap::getTypeClass('Composition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConceptMap', PHPFHIRTypeMap::getTypeClass('ConceptMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCondition', PHPFHIRTypeMap::getTypeClass('Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConformance', PHPFHIRTypeMap::getTypeClass('Conformance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDevice', PHPFHIRTypeMap::getTypeClass('Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDeviceObservationReport', PHPFHIRTypeMap::getTypeClass('DeviceObservationReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticOrder', PHPFHIRTypeMap::getTypeClass('DiagnosticOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticReport', PHPFHIRTypeMap::getTypeClass('DiagnosticReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentManifest', PHPFHIRTypeMap::getTypeClass('DocumentManifest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentReference', PHPFHIRTypeMap::getTypeClass('DocumentReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIREncounter', PHPFHIRTypeMap::getTypeClass('Encounter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRFamilyHistory', PHPFHIRTypeMap::getTypeClass('FamilyHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRGroup', PHPFHIRTypeMap::getTypeClass('Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImagingStudy', PHPFHIRTypeMap::getTypeClass('ImagingStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunization', PHPFHIRTypeMap::getTypeClass('Immunization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunizationRecommendation', PHPFHIRTypeMap::getTypeClass('ImmunizationRecommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRList', PHPFHIRTypeMap::getTypeClass('List'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRLocation', PHPFHIRTypeMap::getTypeClass('Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedia', PHPFHIRTypeMap::getTypeClass('Media'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedication', PHPFHIRTypeMap::getTypeClass('Medication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationAdministration', PHPFHIRTypeMap::getTypeClass('MedicationAdministration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationDispense', PHPFHIRTypeMap::getTypeClass('MedicationDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationPrescription', PHPFHIRTypeMap::getTypeClass('MedicationPrescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationStatement', PHPFHIRTypeMap::getTypeClass('MedicationStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMessageHeader', PHPFHIRTypeMap::getTypeClass('MessageHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRObservation', PHPFHIRTypeMap::getTypeClass('Observation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROperationOutcome', PHPFHIRTypeMap::getTypeClass('OperationOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrder', PHPFHIRTypeMap::getTypeClass('Order'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrderResponse', PHPFHIRTypeMap::getTypeClass('OrderResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrganization', PHPFHIRTypeMap::getTypeClass('Organization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROther', PHPFHIRTypeMap::getTypeClass('Other'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPatient', PHPFHIRTypeMap::getTypeClass('Patient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPractitioner', PHPFHIRTypeMap::getTypeClass('Practitioner'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProcedure', PHPFHIRTypeMap::getTypeClass('Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProfile', PHPFHIRTypeMap::getTypeClass('Profile'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProvenance', PHPFHIRTypeMap::getTypeClass('Provenance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuery', PHPFHIRTypeMap::getTypeClass('Query'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuestionnaire', PHPFHIRTypeMap::getTypeClass('Questionnaire'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRRelatedPerson', PHPFHIRTypeMap::getTypeClass('RelatedPerson'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSecurityEvent', PHPFHIRTypeMap::getTypeClass('SecurityEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSpecimen', PHPFHIRTypeMap::getTypeClass('Specimen'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSubstance', PHPFHIRTypeMap::getTypeClass('Substance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSupply', PHPFHIRTypeMap::getTypeClass('Supply'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRValueSet', PHPFHIRTypeMap::getTypeClass('ValueSet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventDetail', PHPFHIRTypeMap::getTypeClass('SecurityEvent.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventEvent', PHPFHIRTypeMap::getTypeClass('SecurityEvent.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventNetwork', PHPFHIRTypeMap::getTypeClass('SecurityEvent.Network'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventObject', PHPFHIRTypeMap::getTypeClass('SecurityEvent.Object'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventParticipant', PHPFHIRTypeMap::getTypeClass('SecurityEvent.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventSource', PHPFHIRTypeMap::getTypeClass('SecurityEvent.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection', PHPFHIRTypeMap::getTypeClass('Specimen.Collection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer', PHPFHIRTypeMap::getTypeClass('Specimen.Container'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenSource', PHPFHIRTypeMap::getTypeClass('Specimen.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment', PHPFHIRTypeMap::getTypeClass('Specimen.Treatment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient', PHPFHIRTypeMap::getTypeClass('Substance.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance', PHPFHIRTypeMap::getTypeClass('Substance.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRSupply\FHIRSupplyDispense', PHPFHIRTypeMap::getTypeClass('Supply.Dispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose', PHPFHIRTypeMap::getTypeClass('ValueSet.Compose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept', PHPFHIRTypeMap::getTypeClass('ValueSet.Concept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains', PHPFHIRTypeMap::getTypeClass('ValueSet.Contains'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDefine', PHPFHIRTypeMap::getTypeClass('ValueSet.Define'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion', PHPFHIRTypeMap::getTypeClass('ValueSet.Expansion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter', PHPFHIRTypeMap::getTypeClass('ValueSet.Filter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude', PHPFHIRTypeMap::getTypeClass('ValueSet.Include'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBase64Binary', PHPFHIRTypeMap::getTypeClass('base64Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBindingConformance', PHPFHIRTypeMap::getTypeClass('BindingConformance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRBoolean', PHPFHIRTypeMap::getTypeClass('boolean'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCarePlanActivityCategory', PHPFHIRTypeMap::getTypeClass('CarePlanActivityCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCarePlanActivityStatus', PHPFHIRTypeMap::getTypeClass('CarePlanActivityStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCarePlanGoalStatus', PHPFHIRTypeMap::getTypeClass('CarePlanGoalStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCarePlanStatus', PHPFHIRTypeMap::getTypeClass('CarePlanStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCausalityExpectation', PHPFHIRTypeMap::getTypeClass('CausalityExpectation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCode', PHPFHIRTypeMap::getTypeClass('code'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCodeableConcept', PHPFHIRTypeMap::getTypeClass('CodeableConcept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCoding', PHPFHIRTypeMap::getTypeClass('Coding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCompositionAttestationMode', PHPFHIRTypeMap::getTypeClass('CompositionAttestationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCompositionStatus', PHPFHIRTypeMap::getTypeClass('CompositionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConceptMapEquivalence', PHPFHIRTypeMap::getTypeClass('ConceptMapEquivalence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConditionRelationshipType', PHPFHIRTypeMap::getTypeClass('ConditionRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConditionStatus', PHPFHIRTypeMap::getTypeClass('ConditionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConformanceEventMode', PHPFHIRTypeMap::getTypeClass('ConformanceEventMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConformanceStatementStatus', PHPFHIRTypeMap::getTypeClass('ConformanceStatementStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRConstraintSeverity', PHPFHIRTypeMap::getTypeClass('ConstraintSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRContact', PHPFHIRTypeMap::getTypeClass('Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRContactSystem', PHPFHIRTypeMap::getTypeClass('ContactSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRContactUse', PHPFHIRTypeMap::getTypeClass('ContactUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRCriticality', PHPFHIRTypeMap::getTypeClass('Criticality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDate', PHPFHIRTypeMap::getTypeClass('date'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDateTime', PHPFHIRTypeMap::getTypeClass('dateTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDecimal', PHPFHIRTypeMap::getTypeClass('decimal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDecimal\FHIRScore', PHPFHIRTypeMap::getTypeClass('score'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDiagnosticOrderPriority', PHPFHIRTypeMap::getTypeClass('DiagnosticOrderPriority'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDiagnosticOrderStatus', PHPFHIRTypeMap::getTypeClass('DiagnosticOrderStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDiagnosticReportStatus', PHPFHIRTypeMap::getTypeClass('DiagnosticReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDocumentMode', PHPFHIRTypeMap::getTypeClass('DocumentMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDocumentReferenceStatus', PHPFHIRTypeMap::getTypeClass('DocumentReferenceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRDocumentRelationshipType', PHPFHIRTypeMap::getTypeClass('DocumentRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIREncounterClass', PHPFHIRTypeMap::getTypeClass('EncounterClass'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIREncounterState', PHPFHIRTypeMap::getTypeClass('EncounterState'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIREventTiming', PHPFHIRTypeMap::getTypeClass('EventTiming'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRExposureType', PHPFHIRTypeMap::getTypeClass('ExposureType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRExtension', PHPFHIRTypeMap::getTypeClass('Extension'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRExtensionContext', PHPFHIRTypeMap::getTypeClass('ExtensionContext'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRFilterOperator', PHPFHIRTypeMap::getTypeClass('FilterOperator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRGroupType', PHPFHIRTypeMap::getTypeClass('GroupType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRHierarchicalRelationshipType', PHPFHIRTypeMap::getTypeClass('HierarchicalRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRHumanName', PHPFHIRTypeMap::getTypeClass('HumanName'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRId', PHPFHIRTypeMap::getTypeClass('id'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRIdentifier', PHPFHIRTypeMap::getTypeClass('Identifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRIdentifierUse', PHPFHIRTypeMap::getTypeClass('IdentifierUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRImagingModality', PHPFHIRTypeMap::getTypeClass('ImagingModality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRInstanceAvailability', PHPFHIRTypeMap::getTypeClass('InstanceAvailability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRInstant', PHPFHIRTypeMap::getTypeClass('instant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRInteger', PHPFHIRTypeMap::getTypeClass('integer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRInteger\FHIRTotalResults', PHPFHIRTypeMap::getTypeClass('totalResults'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRIssueSeverity', PHPFHIRTypeMap::getTypeClass('IssueSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRLinkType', PHPFHIRTypeMap::getTypeClass('LinkType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRListMode', PHPFHIRTypeMap::getTypeClass('ListMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRLocationMode', PHPFHIRTypeMap::getTypeClass('LocationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRLocationStatus', PHPFHIRTypeMap::getTypeClass('LocationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMediaType', PHPFHIRTypeMap::getTypeClass('MediaType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMedicationAdministrationStatus', PHPFHIRTypeMap::getTypeClass('MedicationAdministrationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMedicationDispenseStatus', PHPFHIRTypeMap::getTypeClass('MedicationDispenseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMedicationKind', PHPFHIRTypeMap::getTypeClass('MedicationKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMedicationPrescriptionStatus', PHPFHIRTypeMap::getTypeClass('MedicationPrescriptionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRMessageSignificanceCategory', PHPFHIRTypeMap::getTypeClass('MessageSignificanceCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRModality', PHPFHIRTypeMap::getTypeClass('Modality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRNameUse', PHPFHIRTypeMap::getTypeClass('NameUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRNarrative', PHPFHIRTypeMap::getTypeClass('Narrative'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRNarrativeStatus', PHPFHIRTypeMap::getTypeClass('NarrativeStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRObservationRelationshipType', PHPFHIRTypeMap::getTypeClass('ObservationRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRObservationReliability', PHPFHIRTypeMap::getTypeClass('ObservationReliability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRObservationStatus', PHPFHIRTypeMap::getTypeClass('ObservationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIROid', PHPFHIRTypeMap::getTypeClass('oid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIROrderOutcomeStatus', PHPFHIRTypeMap::getTypeClass('OrderOutcomeStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRPeriod', PHPFHIRTypeMap::getTypeClass('Period'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRProcedureRelationshipType', PHPFHIRTypeMap::getTypeClass('ProcedureRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRPropertyRepresentation', PHPFHIRTypeMap::getTypeClass('PropertyRepresentation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRProvenanceEntityRole', PHPFHIRTypeMap::getTypeClass('ProvenanceEntityRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity', PHPFHIRTypeMap::getTypeClass('Quantity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantityCompararator', PHPFHIRTypeMap::getTypeClass('QuantityCompararator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRAge', PHPFHIRTypeMap::getTypeClass('Age'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRCount', PHPFHIRTypeMap::getTypeClass('Count'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRDistance', PHPFHIRTypeMap::getTypeClass('Distance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRDuration', PHPFHIRTypeMap::getTypeClass('Duration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuantity\FHIRMoney', PHPFHIRTypeMap::getTypeClass('Money'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQueryOutcome', PHPFHIRTypeMap::getTypeClass('QueryOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRQuestionnaireStatus', PHPFHIRTypeMap::getTypeClass('QuestionnaireStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRange', PHPFHIRTypeMap::getTypeClass('Range'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRatio', PHPFHIRTypeMap::getTypeClass('Ratio'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRReactionSeverity', PHPFHIRTypeMap::getTypeClass('ReactionSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRResourceProfileStatus', PHPFHIRTypeMap::getTypeClass('ResourceProfileStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRResourceReference', PHPFHIRTypeMap::getTypeClass('ResourceReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRResponseType', PHPFHIRTypeMap::getTypeClass('ResponseType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRestfulConformanceMode', PHPFHIRTypeMap::getTypeClass('RestfulConformanceMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRestfulOperationSystem', PHPFHIRTypeMap::getTypeClass('RestfulOperationSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRRestfulOperationType', PHPFHIRTypeMap::getTypeClass('RestfulOperationType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSampledData', PHPFHIRTypeMap::getTypeClass('SampledData'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSampledDataDataType', PHPFHIRTypeMap::getTypeClass('SampledDataDataType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSchedule', PHPFHIRTypeMap::getTypeClass('Schedule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSchedule\FHIRScheduleRepeat', PHPFHIRTypeMap::getTypeClass('Schedule.Repeat'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSearchParamType', PHPFHIRTypeMap::getTypeClass('SearchParamType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventAction', PHPFHIRTypeMap::getTypeClass('SecurityEventAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventObjectLifecycle', PHPFHIRTypeMap::getTypeClass('SecurityEventObjectLifecycle'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventObjectRole', PHPFHIRTypeMap::getTypeClass('SecurityEventObjectRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventObjectType', PHPFHIRTypeMap::getTypeClass('SecurityEventObjectType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventOutcome', PHPFHIRTypeMap::getTypeClass('SecurityEventOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSecurityEventParticipantNetworkType', PHPFHIRTypeMap::getTypeClass('SecurityEventParticipantNetworkType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSensitivityStatus', PHPFHIRTypeMap::getTypeClass('SensitivityStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSensitivityType', PHPFHIRTypeMap::getTypeClass('SensitivityType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSlicingRules', PHPFHIRTypeMap::getTypeClass('SlicingRules'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRString', PHPFHIRTypeMap::getTypeClass('string'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSupplyDispenseStatus', PHPFHIRTypeMap::getTypeClass('SupplyDispenseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRSupplyStatus', PHPFHIRTypeMap::getTypeClass('SupplyStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRUnitsOfTime', PHPFHIRTypeMap::getTypeClass('UnitsOfTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRUri', PHPFHIRTypeMap::getTypeClass('uri'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRUuid', PHPFHIRTypeMap::getTypeClass('uuid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRElement\FHIRValueSetStatus', PHPFHIRTypeMap::getTypeClass('ValueSetStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIREncounterClassList', PHPFHIRTypeMap::getTypeClass('EncounterClass-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIREncounterStateList', PHPFHIRTypeMap::getTypeClass('EncounterState-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIREventTimingList', PHPFHIRTypeMap::getTypeClass('EventTiming-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRExposureTypeList', PHPFHIRTypeMap::getTypeClass('ExposureType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRExtensionContextList', PHPFHIRTypeMap::getTypeClass('ExtensionContext-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRFilterOperatorList', PHPFHIRTypeMap::getTypeClass('FilterOperator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRGroupTypeList', PHPFHIRTypeMap::getTypeClass('GroupType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRHierarchicalRelationshipTypeList', PHPFHIRTypeMap::getTypeClass('HierarchicalRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRIdentifierUseList', PHPFHIRTypeMap::getTypeClass('IdentifierUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRIdPrimitive', PHPFHIRTypeMap::getTypeClass('id-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRIdPrimitive\FHIRXmlIdRef', PHPFHIRTypeMap::getTypeClass('xmlIdRef'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRImagingModalityList', PHPFHIRTypeMap::getTypeClass('ImagingModality-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRInstanceAvailabilityList', PHPFHIRTypeMap::getTypeClass('InstanceAvailability-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRInstantPrimitive', PHPFHIRTypeMap::getTypeClass('instant-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRIntegerPrimitive', PHPFHIRTypeMap::getTypeClass('integer-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRIssueSeverityList', PHPFHIRTypeMap::getTypeClass('IssueSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRLinkTypeList', PHPFHIRTypeMap::getTypeClass('LinkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRListModeList', PHPFHIRTypeMap::getTypeClass('ListMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRLocationModeList', PHPFHIRTypeMap::getTypeClass('LocationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRLocationStatusList', PHPFHIRTypeMap::getTypeClass('LocationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRMediaTypeList', PHPFHIRTypeMap::getTypeClass('MediaType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRMedicationAdministrationStatusList', PHPFHIRTypeMap::getTypeClass('MedicationAdministrationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRMedicationDispenseStatusList', PHPFHIRTypeMap::getTypeClass('MedicationDispenseStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRMedicationKindList', PHPFHIRTypeMap::getTypeClass('MedicationKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRMedicationPrescriptionStatusList', PHPFHIRTypeMap::getTypeClass('MedicationPrescriptionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRMessageSignificanceCategoryList', PHPFHIRTypeMap::getTypeClass('MessageSignificanceCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRModalityList', PHPFHIRTypeMap::getTypeClass('Modality-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRNameUseList', PHPFHIRTypeMap::getTypeClass('NameUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRNarrativeStatusList', PHPFHIRTypeMap::getTypeClass('NarrativeStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRObservationRelationshipTypeList', PHPFHIRTypeMap::getTypeClass('ObservationRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRObservationReliabilityList', PHPFHIRTypeMap::getTypeClass('ObservationReliability-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRObservationStatusList', PHPFHIRTypeMap::getTypeClass('ObservationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIROidPrimitive', PHPFHIRTypeMap::getTypeClass('oid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIROrderOutcomeStatusList', PHPFHIRTypeMap::getTypeClass('OrderOutcomeStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRProcedureRelationshipTypeList', PHPFHIRTypeMap::getTypeClass('ProcedureRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRPropertyRepresentationList', PHPFHIRTypeMap::getTypeClass('PropertyRepresentation-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRProvenanceEntityRoleList', PHPFHIRTypeMap::getTypeClass('ProvenanceEntityRole-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRQuantityCompararatorList', PHPFHIRTypeMap::getTypeClass('QuantityCompararator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRQueryOutcomeList', PHPFHIRTypeMap::getTypeClass('QueryOutcome-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRQuestionnaireStatusList', PHPFHIRTypeMap::getTypeClass('QuestionnaireStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRReactionSeverityList', PHPFHIRTypeMap::getTypeClass('ReactionSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRResourceInline', PHPFHIRTypeMap::getTypeClass('Resource.Inline'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRResourceProfileStatusList', PHPFHIRTypeMap::getTypeClass('ResourceProfileStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRResourceType', PHPFHIRTypeMap::getTypeClass('ResourceType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRResourceType\FHIRResourceNamesPlusBinary', PHPFHIRTypeMap::getTypeClass('ResourceNamesPlusBinary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRResponseTypeList', PHPFHIRTypeMap::getTypeClass('ResponseType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRRestfulConformanceModeList', PHPFHIRTypeMap::getTypeClass('RestfulConformanceMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRRestfulOperationSystemList', PHPFHIRTypeMap::getTypeClass('RestfulOperationSystem-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRRestfulOperationTypeList', PHPFHIRTypeMap::getTypeClass('RestfulOperationType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSampledDataDataTypePrimitive', PHPFHIRTypeMap::getTypeClass('SampledDataDataType-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSearchParamTypeList', PHPFHIRTypeMap::getTypeClass('SearchParamType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventActionList', PHPFHIRTypeMap::getTypeClass('SecurityEventAction-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventObjectLifecycleList', PHPFHIRTypeMap::getTypeClass('SecurityEventObjectLifecycle-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventObjectRoleList', PHPFHIRTypeMap::getTypeClass('SecurityEventObjectRole-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventObjectTypeList', PHPFHIRTypeMap::getTypeClass('SecurityEventObjectType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventOutcomeList', PHPFHIRTypeMap::getTypeClass('SecurityEventOutcome-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSecurityEventParticipantNetworkTypeList', PHPFHIRTypeMap::getTypeClass('SecurityEventParticipantNetworkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSensitivityStatusList', PHPFHIRTypeMap::getTypeClass('SensitivityStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSensitivityTypeList', PHPFHIRTypeMap::getTypeClass('SensitivityType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSlicingRulesList', PHPFHIRTypeMap::getTypeClass('SlicingRules-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRStringPrimitive', PHPFHIRTypeMap::getTypeClass('string-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSupplyDispenseStatusList', PHPFHIRTypeMap::getTypeClass('SupplyDispenseStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRSupplyStatusList', PHPFHIRTypeMap::getTypeClass('SupplyStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRUnitsOfTimeList', PHPFHIRTypeMap::getTypeClass('UnitsOfTime-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRUriPrimitive', PHPFHIRTypeMap::getTypeClass('uri-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRUuidPrimitive', PHPFHIRTypeMap::getTypeClass('uuid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU1\FHIRValueSetStatusList', PHPFHIRTypeMap::getTypeClass('ValueSetStatus-list'));
    }
}
