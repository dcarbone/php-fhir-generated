<?php

namespace DCarbone\PHPFHIRGenerated\R5\PHPFHIRTests;

/*!
 * This class was generated with the PHPFHIR library (https://github.com/dcarbone/php-fhir) using
 * class definitions from HL7 FHIR (https://www.hl7.org/fhir/)
 * 
 * Class creation date: August 22nd, 2024 02:47+0000
 * 
 * PHPFHIR Copyright:
 * 
 * Copyright 2016-2024 Daniel Carbone (daniel.p.carbone@gmail.com)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 *
 * FHIR Copyright Notice:
 *
 *  * #%L
 *  * org.hl7.fhir.r5
 *  * %%
 *  * Copyright (C) 2014 - 2019 Health Level 7
 *  * %%
 *  * Licensed under the Apache License, Version 2.0 (the "License");
 *  * you may not use this file except in compliance with the License.
 *  * You may obtain a copy of the License at
 *  *
 *  *      http://www.apache.org/licenses/LICENSE-2.0
 *  *
 *  * Unless required by applicable law or agreed to in writing, software
 *  * distributed under the License is distributed on an "AS IS" BASIS,
 *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  * See the License for the specific language governing permissions and
 *  * limitations under the License.
 *  * #L%
 *  
 * 
 * 
 *   Copyright (c) 2011+, HL7, Inc.
 *   All rights reserved.
 * 
 *   Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *    * Neither the name of HL7 nor the names of its contributors may be used to
 *      endorse or promote products derived from this software without specific
 *      prior written permission.
 * 
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *   IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 * 
 * 
 *   Generated on Sun, Mar 26, 2023 15:21+1100 for FHIR v5.0.0
 * 
 *   Note: the schemas & schematrons do not contain all of the rules about what makes resources
 *   valid. Implementers will still need to be familiar with the content of the specification and with
 *   any profiles that apply to the resources in order to make a conformant implementation.
 * 
 */
use DCarbone\PHPFHIRGenerated\R5\PHPFHIRTypeMap;
use PHPUnit\Framework\TestCase;

/**
 * Class PHPFHIRTypeMapTest
 * @package \DCarbone\PHPFHIRGenerated\R5\PHPFHIRTests
 */
class PHPFHIRTypeMapTest extends TestCase
{
    public function testGetTypeClassWithNonStringReturnsNull()
    {
        $this->assertNull(PHPFHIRTypeMap::getTypeClass(1));
    }

    public function testGetContainedTypeClassName()
    {
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAccount', PHPFHIRTypeMap::getContainedTypeClassName('Account'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Account.Balance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Account.Coverage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Account.Diagnosis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Account.Guarantor'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Account.Procedure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Account.RelatedAccount'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AccountStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AccountStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionCardinalityBehavior'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionCardinalityBehaviorEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionConditionKind'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionConditionKindEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionGroupingBehavior'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionGroupingBehaviorEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionParticipantType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionParticipantTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionPrecheckBehavior'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionPrecheckBehaviorEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionRelationshipType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionRelationshipTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionRequiredBehavior'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionRequiredBehaviorEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionSelectionBehavior'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionSelectionBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRActivityDefinition', PHPFHIRTypeMap::getContainedTypeClassName('ActivityDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActivityDefinition.DynamicValue'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActivityDefinition.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRActorDefinition', PHPFHIRTypeMap::getContainedTypeClassName('ActorDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Address'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AddressType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AddressTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AddressUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AddressUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdministrableProductDefinition', PHPFHIRTypeMap::getContainedTypeClassName('AdministrableProductDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdministrableProductDefinition.Property'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdministrableProductDefinition.RouteOfAdministration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdministrableProductDefinition.TargetSpecies'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdministrableProductDefinition.WithdrawalPeriod'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdministrativeGender'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdministrativeGenderEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdverseEvent', PHPFHIRTypeMap::getContainedTypeClassName('AdverseEvent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdverseEvent.Causality'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdverseEvent.ContributingFactor'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdverseEvent.MitigatingAction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdverseEvent.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdverseEvent.PreventiveAction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdverseEvent.SupportingInfo'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdverseEvent.SuspectEntity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdverseEventActuality'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdverseEventActualityEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdverseEventStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdverseEventStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Age'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AgeUnits'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AgeUnitsEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AggregationMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AggregationModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntolerance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntolerance.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntolerance.Reaction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceCategory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceCategoryEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceCriticality'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceCriticalityEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceSeverity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceSeverityEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllResourceTypes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllResourceTypesEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Annotation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointment', PHPFHIRTypeMap::getContainedTypeClassName('Appointment'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Appointment.MonthlyTemplate'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Appointment.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Appointment.RecurrenceTemplate'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Appointment.WeeklyTemplate'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Appointment.YearlyTemplate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', PHPFHIRTypeMap::getContainedTypeClassName('AppointmentResponse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AppointmentResponseStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AppointmentResponseStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AppointmentStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AppointmentStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRArtifactAssessment', PHPFHIRTypeMap::getContainedTypeClassName('ArtifactAssessment'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ArtifactAssessment.Content'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ArtifactAssessmentDisposition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ArtifactAssessmentDispositionEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ArtifactAssessmentInformationType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ArtifactAssessmentInformationTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ArtifactAssessmentWorkflowStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ArtifactAssessmentWorkflowStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionDirectionType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionDirectionTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionManualCompletionType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionManualCompletionTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionOperatorType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionOperatorTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionResponseTypes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionResponseTypesEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Attachment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAuditEvent', PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent.Agent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent.Detail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent.Entity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent.Outcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent.Source'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEventAction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEventActionEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEventSeverity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEventSeverityEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Availability'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Availability.AvailableTime'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Availability.NotAvailableTime'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BackboneElement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BackboneType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Base'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('base64Binary'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('base64Binary-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBasic', PHPFHIRTypeMap::getContainedTypeClassName('Basic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRBinary', PHPFHIRTypeMap::getContainedTypeClassName('Binary'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BindingStrength'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BindingStrengthEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct', PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProduct'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProduct.Collection'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProduct.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProductDispense', PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProductDispense'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProductDispense.Performer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProductDispenseCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProductDispenseCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBodyStructure', PHPFHIRTypeMap::getContainedTypeClassName('BodyStructure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BodyStructure.BodyLandmarkOrientation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BodyStructure.DistanceFromLandmark'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BodyStructure.IncludedStructure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('boolean'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('boolean-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRBundle', PHPFHIRTypeMap::getContainedTypeClassName('Bundle'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Bundle.Entry'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Bundle.Link'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Bundle.Request'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Bundle.Response'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Bundle.Search'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BundleType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BundleTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('canonical'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('canonical-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CanonicalResource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCapabilityStatement', PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Document'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Endpoint'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Implementation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Interaction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Interaction1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Messaging'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Operation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Resource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Rest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.SearchParam'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Security'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Software'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.SupportedMessage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatementKind'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatementKindEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCarePlan', PHPFHIRTypeMap::getContainedTypeClassName('CarePlan'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlan.Activity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanIntent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanIntentEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCareTeam', PHPFHIRTypeMap::getContainedTypeClassName('CareTeam'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CareTeam.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CareTeamStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CareTeamStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CharacteristicCombination'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CharacteristicCombinationEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRChargeItem', PHPFHIRTypeMap::getContainedTypeClassName('ChargeItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ChargeItem.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRChargeItemDefinition', PHPFHIRTypeMap::getContainedTypeClassName('ChargeItemDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ChargeItemDefinition.Applicability'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ChargeItemDefinition.PropertyGroup'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ChargeItemStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ChargeItemStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCitation', PHPFHIRTypeMap::getContainedTypeClassName('Citation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.Abstract'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.CitedArtifact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.Classification'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.Classification1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.ContributionInstance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.Contributorship'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.Entry'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.Part'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.PublicationForm'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.PublishedIn'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.RelatesTo'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.StatusDate'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.StatusDate1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.Summary'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.Summary1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.Title'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.Version'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Citation.WebLocation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaim', PHPFHIRTypeMap::getContainedTypeClassName('Claim'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Accident'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.BodySite'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.CareTeam'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Detail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Diagnosis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Event'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Insurance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Payee'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Procedure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Related'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.SubDetail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.SupportingInfo'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimProcessingCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimProcessingCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaimResponse', PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.AddItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Adjudication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.BodySite'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Detail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Detail1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Error'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Event'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Insurance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Payment'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.ProcessNote'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.ReviewOutcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.SubDetail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.SubDetail1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Total'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', PHPFHIRTypeMap::getContainedTypeClassName('ClinicalImpression'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalImpression.Finding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalUseDefinition', PHPFHIRTypeMap::getContainedTypeClassName('ClinicalUseDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalUseDefinition.Contraindication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalUseDefinition.Indication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalUseDefinition.Interactant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalUseDefinition.Interaction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalUseDefinition.OtherTherapy'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalUseDefinition.UndesirableEffect'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalUseDefinition.Warning'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalUseDefinitionType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalUseDefinitionTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('code'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('code-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeableConcept'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeableReference'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSearchSupport'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSearchSupportEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCodeSystem', PHPFHIRTypeMap::getContainedTypeClassName('CodeSystem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystem.Concept'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystem.Designation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystem.Filter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystem.Property'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystem.Property1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystemContentMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystemContentModeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystemHierarchyMeaning'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystemHierarchyMeaningEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Coding'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ColorCodesOrRGB'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ColorCodesOrRGBEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CommonLanguages'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CommonLanguagesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunication', PHPFHIRTypeMap::getContainedTypeClassName('Communication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Communication.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', PHPFHIRTypeMap::getContainedTypeClassName('CommunicationRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CommunicationRequest.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCompartmentDefinition', PHPFHIRTypeMap::getContainedTypeClassName('CompartmentDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompartmentDefinition.Resource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompartmentType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompartmentTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRComposition', PHPFHIRTypeMap::getContainedTypeClassName('Composition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Composition.Attester'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Composition.Event'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Composition.Section'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompositionStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompositionStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConceptMap', PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.AdditionalAttribute'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.DependsOn'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.Element'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.Group'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.Property'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.Property1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.Target'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.Unmapped'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMapAttributeType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMapAttributeTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMapGroupUnmappedMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMapGroupUnmappedModeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMapPropertyType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMapPropertyTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMapRelationship'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMapRelationshipEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConcreteFHIRTypes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConcreteFHIRTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCondition', PHPFHIRTypeMap::getContainedTypeClassName('Condition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Condition.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Condition.Stage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionalDeleteStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionalDeleteStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionalReadStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionalReadStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConditionDefinition', PHPFHIRTypeMap::getContainedTypeClassName('ConditionDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionDefinition.Medication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionDefinition.Observation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionDefinition.Plan'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionDefinition.Precondition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionDefinition.Questionnaire'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionPreconditionType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionPreconditionTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionQuestionnairePurpose'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionQuestionnairePurposeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConformanceExpectation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConformanceExpectationEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRConsent', PHPFHIRTypeMap::getContainedTypeClassName('Consent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Consent.Actor'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Consent.Data'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Consent.PolicyBasis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Consent.Provision'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Consent.Verification'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConsentDataMeaning'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConsentDataMeaningEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConsentProvisionType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConsentProvisionTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConsentState'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConsentStateEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConstraintSeverity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConstraintSeverityEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactDetail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactPoint'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactPointSystem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactPointSystemEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactPointUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactPointUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRContract', PHPFHIRTypeMap::getContainedTypeClassName('Contract'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Action'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Answer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Asset'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.ContentDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Context'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Friendly'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Legal'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Offer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Party'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Rule'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.SecurityLabel'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Signer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Subject'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Term'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.ValuedItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContractResourcePublicationStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContractResourcePublicationStatusCodesEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContractResourceStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContractResourceStatusCodesEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contributor'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContributorType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContributorTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Count'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverage', PHPFHIRTypeMap::getContainedTypeClassName('Coverage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Coverage.Class'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Coverage.CostToBeneficiary'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Coverage.Exception'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Coverage.PaymentBy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest', PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityRequest.Diagnosis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityRequest.Event'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityRequest.Insurance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityRequest.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityRequest.SupportingInfo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse', PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityResponse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityResponse.Benefit'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityResponse.Error'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityResponse.Event'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityResponse.Insurance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityResponse.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CriteriaNotExistsBehavior'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CriteriaNotExistsBehaviorEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DataRequirement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DataRequirement.CodeFilter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DataRequirement.DateFilter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DataRequirement.Sort'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DataRequirement.ValueFilter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DataType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('date'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('date-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('dateTime'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('dateTime-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('decimal'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('decimal-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DefinitionResourceTypes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DefinitionResourceTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', PHPFHIRTypeMap::getContainedTypeClassName('DetectedIssue'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DetectedIssue.Evidence'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DetectedIssue.Mitigation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DetectedIssueSeverity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DetectedIssueSeverityEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DetectedIssueStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DetectedIssueStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDevice', PHPFHIRTypeMap::getContainedTypeClassName('Device'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Device.ConformsTo'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Device.Name'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Device.Property'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Device.UdiCarrier'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Device.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceAssociation', PHPFHIRTypeMap::getContainedTypeClassName('DeviceAssociation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceAssociation.Operation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceCorrectiveActionScope'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceCorrectiveActionScopeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition', PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.ChargeItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.Classification'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.ConformsTo'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.CorrectiveAction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.DeviceName'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.Distributor'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.Guideline'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.HasPart'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.Link'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.MarketDistribution'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.Material'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.Packaging'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.Property'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.RegulatoryIdentifier'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.UdiDeviceIdentifier'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.Version'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinitionRegulatoryIdentifierType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinitionRegulatoryIdentifierTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDispense', PHPFHIRTypeMap::getContainedTypeClassName('DeviceDispense'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDispense.Performer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDispenseStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDispenseStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetric'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetric.Calibration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCalibrationState'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCalibrationStateEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCalibrationType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCalibrationTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCategory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCategoryEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricOperationalStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricOperationalStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceNameType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceNameTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceProductionIdentifierInUDI'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceProductionIdentifierInUDIEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceRequest', PHPFHIRTypeMap::getContainedTypeClassName('DeviceRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceRequest.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceUsage', PHPFHIRTypeMap::getContainedTypeClassName('DeviceUsage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceUsage.Adherence'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceUsageStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceUsageStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticReport'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticReport.Media'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticReport.SupportingInfo'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticReportStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticReportStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiscriminatorType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiscriminatorTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Distance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDocumentReference', PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference.Attester'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference.Content'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference.Profile'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference.RelatesTo'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReferenceStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReferenceStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DomainResource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Dosage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Dosage.DoseAndRate'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Duration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Element'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Additional'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Base'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Binding'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Constraint'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Discriminator'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Example'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Mapping'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Slicing'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Type'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EligibilityOutcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EligibilityOutcomeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EligibilityRequestPurpose'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EligibilityRequestPurposeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EligibilityResponsePurpose'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EligibilityResponsePurposeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EnableWhenBehavior'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EnableWhenBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounter', PHPFHIRTypeMap::getContainedTypeClassName('Encounter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.Admission'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.Diagnosis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.Location'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.Reason'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounterHistory', PHPFHIRTypeMap::getContainedTypeClassName('EncounterHistory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterHistory.Location'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterLocationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterLocationStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREndpoint', PHPFHIRTypeMap::getContainedTypeClassName('Endpoint'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Endpoint.Payload'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EndpointStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EndpointStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EnrollmentOutcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EnrollmentOutcomeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', PHPFHIRTypeMap::getContainedTypeClassName('EnrollmentRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', PHPFHIRTypeMap::getContainedTypeClassName('EnrollmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', PHPFHIRTypeMap::getContainedTypeClassName('EpisodeOfCare'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EpisodeOfCare.Diagnosis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EpisodeOfCare.Reason'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EpisodeOfCare.StatusHistory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EpisodeOfCareStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EpisodeOfCareStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventCapabilityMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventCapabilityModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREventDefinition', PHPFHIRTypeMap::getContainedTypeClassName('EventDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventResourceTypes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventResourceTypesEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventTiming'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventTimingEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidence', PHPFHIRTypeMap::getContainedTypeClassName('Evidence'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Evidence.AttributeEstimate'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Evidence.Certainty'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Evidence.ModelCharacteristic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Evidence.SampleSize'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Evidence.Statistic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Evidence.Variable'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Evidence.VariableDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceReport', PHPFHIRTypeMap::getContainedTypeClassName('EvidenceReport'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EvidenceReport.Characteristic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EvidenceReport.RelatesTo'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EvidenceReport.Section'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EvidenceReport.Subject'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EvidenceReport.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceVariable', PHPFHIRTypeMap::getContainedTypeClassName('EvidenceVariable'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EvidenceVariable.Category'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EvidenceVariable.Characteristic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EvidenceVariable.DefinitionByCombination'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EvidenceVariable.DefinitionByTypeAndValue'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EvidenceVariable.TimeFromEvent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EvidenceVariableHandling'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EvidenceVariableHandlingEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRExampleScenario', PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario.Actor'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario.Alternative'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario.ContainedInstance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario.Instance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario.Operation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario.Process'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario.Step'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario.Version'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenarioActorType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenarioActorTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Accident'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.AddItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Adjudication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.BenefitBalance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.BodySite'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.BodySite1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.CareTeam'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Detail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Detail1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Diagnosis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Event'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Financial'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Insurance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Payee'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Payment'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Procedure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.ProcessNote'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Related'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.ReviewOutcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.SubDetail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.SubDetail1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.SupportingInfo'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Total'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefitStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefitStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Expression'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExtendedContactDetail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Extension'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExtensionContextType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExtensionContextTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FamilyHistoryStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FamilyHistoryStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', PHPFHIRTypeMap::getContainedTypeClassName('FamilyMemberHistory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FamilyMemberHistory.Condition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FamilyMemberHistory.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FamilyMemberHistory.Procedure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FHIRDeviceStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FHIRDeviceStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FHIRPathTypes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FHIRPathTypesEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FHIRSubstanceStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FHIRSubstanceStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FHIRTypes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FHIRTypesEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FHIRVersion'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FHIRVersionEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FilterOperator'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FilterOperatorEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FinancialResourceStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FinancialResourceStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFlag', PHPFHIRTypeMap::getContainedTypeClassName('Flag'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FlagStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FlagStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFormularyItem', PHPFHIRTypeMap::getContainedTypeClassName('FormularyItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FormularyItemStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FormularyItemStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGenomicStudy', PHPFHIRTypeMap::getContainedTypeClassName('GenomicStudy'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GenomicStudy.Analysis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GenomicStudy.Device'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GenomicStudy.Input'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GenomicStudy.Output'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GenomicStudy.Performer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GenomicStudyStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GenomicStudyStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGoal', PHPFHIRTypeMap::getContainedTypeClassName('Goal'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Goal.Target'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GoalLifecycleStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GoalLifecycleStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GraphCompartmentRule'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GraphCompartmentRuleEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GraphCompartmentUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GraphCompartmentUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRGraphDefinition', PHPFHIRTypeMap::getContainedTypeClassName('GraphDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GraphDefinition.Compartment'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GraphDefinition.Link'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GraphDefinition.Node'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGroup', PHPFHIRTypeMap::getContainedTypeClassName('Group'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Group.Characteristic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Group.Member'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GroupMembershipBasis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GroupMembershipBasisEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GroupType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GroupTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse', PHPFHIRTypeMap::getContainedTypeClassName('GuidanceResponse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GuidanceResponseStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GuidanceResponseStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GuidePageGeneration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GuidePageGenerationEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRHealthcareService', PHPFHIRTypeMap::getContainedTypeClassName('HealthcareService'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HealthcareService.Eligibility'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HTTPVerb'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HTTPVerbEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HumanName'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('id'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('id-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Identifier'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IdentifierUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IdentifierUseEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IdentityAssuranceLevel'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IdentityAssuranceLevelEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingSelection', PHPFHIRTypeMap::getContainedTypeClassName('ImagingSelection'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingSelection.ImageRegion2D'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingSelection.ImageRegion3D'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingSelection.Instance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingSelection.Performer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingSelectionDGraphicType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingSelectionDGraphicTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingSelectionStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingSelectionStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingStudy', PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudy'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudy.Instance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudy.Performer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudy.Series'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudyStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudyStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunization', PHPFHIRTypeMap::getContainedTypeClassName('Immunization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Immunization.Performer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Immunization.ProgramEligibility'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Immunization.ProtocolApplied'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Immunization.Reaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation', PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationEvaluation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationEvaluationStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationEvaluationStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationRecommendation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationRecommendation.DateCriterion'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationRecommendation.Recommendation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRImplementationGuide', PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Definition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.DependsOn'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Global'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Grouping'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Manifest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Page'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Page1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Resource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Resource1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Template'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRIngredient', PHPFHIRTypeMap::getContainedTypeClassName('Ingredient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Ingredient.Manufacturer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Ingredient.ReferenceStrength'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Ingredient.Strength'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Ingredient.Substance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IngredientManufacturerRole'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IngredientManufacturerRoleEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('instant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('instant-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInsurancePlan', PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan.Benefit'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan.Benefit1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan.Cost'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan.Coverage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan.GeneralCost'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan.Limit'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan.Plan'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan.SpecificCost'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('integer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('integer-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('integer64'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('integer64-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InteractionTrigger'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InteractionTriggerEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InventoryCountType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InventoryCountTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryItem', PHPFHIRTypeMap::getContainedTypeClassName('InventoryItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InventoryItem.Association'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InventoryItem.Characteristic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InventoryItem.Description'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InventoryItem.Instance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InventoryItem.Name'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InventoryItem.ResponsibleOrganization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InventoryItemStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InventoryItemStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryReport', PHPFHIRTypeMap::getContainedTypeClassName('InventoryReport'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InventoryReport.InventoryListing'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InventoryReport.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InventoryReportStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InventoryReportStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInvoice', PHPFHIRTypeMap::getContainedTypeClassName('Invoice'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Invoice.LineItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Invoice.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InvoiceStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InvoiceStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IssueSeverity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IssueSeverityEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IssueType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IssueTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('JurisdictionValueSet'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('JurisdictionValueSetEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Kind'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('KindEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRLibrary', PHPFHIRTypeMap::getContainedTypeClassName('Library'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLinkage', PHPFHIRTypeMap::getContainedTypeClassName('Linkage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Linkage.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LinkageType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LinkageTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LinkRelationTypes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LinkRelationTypesEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LinkType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LinkTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRList', PHPFHIRTypeMap::getContainedTypeClassName('List'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('List.Entry'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ListMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ListModeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ListStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ListStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLocation', PHPFHIRTypeMap::getContainedTypeClassName('Location'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Location.Position'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LocationMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LocationModeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LocationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LocationStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRManufacturedItemDefinition', PHPFHIRTypeMap::getContainedTypeClassName('ManufacturedItemDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ManufacturedItemDefinition.Component'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ManufacturedItemDefinition.Constituent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ManufacturedItemDefinition.Property'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('markdown'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('markdown-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MarketingStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMeasure', PHPFHIRTypeMap::getContainedTypeClassName('Measure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Measure.Component'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Measure.Group'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Measure.Population'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Measure.Stratifier'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Measure.SupplementalData'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Measure.Term'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMeasureReport', PHPFHIRTypeMap::getContainedTypeClassName('MeasureReport'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReport.Component'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReport.Group'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReport.Population'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReport.Population1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReport.Stratifier'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReport.Stratum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReportStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReportStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReportType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReportTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedication', PHPFHIRTypeMap::getContainedTypeClassName('Medication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Medication.Batch'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Medication.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', PHPFHIRTypeMap::getContainedTypeClassName('MedicationAdministration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationAdministration.Dosage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationAdministration.Performer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationAdministrationStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationAdministrationStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispense'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispense.Performer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispense.Substitution'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispenseStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispenseStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMedicationKnowledge', PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.Cost'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.Definitional'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.Dosage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.DosingGuideline'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.DrugCharacteristic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.EnvironmentalSetting'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.IndicationGuideline'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.Ingredient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.MaxDispense'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.MedicineClassification'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.MonitoringProgram'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.Monograph'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.Packaging'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.PatientCharacteristic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.Regulatory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.RelatedMedicationKnowledge'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.StorageGuideline'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.Substitution'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledgeStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledgeStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationRequest', PHPFHIRTypeMap::getContainedTypeClassName('MedicationRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationRequest.DispenseRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationRequest.InitialFill'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationRequest.Substitution'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationRequestIntent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationRequestIntentEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationrequestStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationrequestStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', PHPFHIRTypeMap::getContainedTypeClassName('MedicationStatement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationStatement.Adherence'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationStatementStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationStatementStatusCodesEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicinalProductDefinition', PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductDefinition.Characteristic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductDefinition.Contact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductDefinition.CrossReference'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductDefinition.Name'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductDefinition.Operation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductDefinition.Part'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductDefinition.Usage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMessageDefinition', PHPFHIRTypeMap::getContainedTypeClassName('MessageDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageDefinition.AllowedResponse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageDefinition.Focus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMessageHeader', PHPFHIRTypeMap::getContainedTypeClassName('MessageHeader'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageHeader.Destination'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageHeader.Response'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageHeader.Source'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageheaderResponseRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageheaderResponseRequestEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageSignificanceCategory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageSignificanceCategoryEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Meta'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MetadataResource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMolecularSequence', PHPFHIRTypeMap::getContainedTypeClassName('MolecularSequence'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MolecularSequence.Edit'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MolecularSequence.Relative'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MolecularSequence.StartingSequence'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MonetaryComponent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Money'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NameUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NameUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRNamingSystem', PHPFHIRTypeMap::getContainedTypeClassName('NamingSystem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NamingSystem.UniqueId'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NamingSystemIdentifierType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NamingSystemIdentifierTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NamingSystemType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NamingSystemTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Narrative'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NarrativeStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NarrativeStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NoteType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NoteTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionIntake', PHPFHIRTypeMap::getContainedTypeClassName('NutritionIntake'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionIntake.ConsumedItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionIntake.IngredientLabel'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionIntake.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.Additive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.Administration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.EnteralFormula'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.Nutrient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.OralDiet'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.Schedule'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.Schedule1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.Schedule2'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.Supplement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.Texture'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionProduct', PHPFHIRTypeMap::getContainedTypeClassName('NutritionProduct'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionProduct.Characteristic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionProduct.Ingredient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionProduct.Instance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionProduct.Nutrient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionProductStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionProductStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRObservation', PHPFHIRTypeMap::getContainedTypeClassName('Observation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Observation.Component'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Observation.ReferenceRange'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Observation.TriggeredBy'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationDataType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationDataTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRObservationDefinition', PHPFHIRTypeMap::getContainedTypeClassName('ObservationDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationDefinition.Component'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationDefinition.QualifiedValue'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationRangeCategory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationRangeCategoryEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('oid'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('oid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIROperationDefinition', PHPFHIRTypeMap::getContainedTypeClassName('OperationDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationDefinition.Binding'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationDefinition.Overload'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationDefinition.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationDefinition.ReferencedFrom'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationKind'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationKindEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIROperationOutcome', PHPFHIRTypeMap::getContainedTypeClassName('OperationOutcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationOutcome.Issue'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationOutcomeCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationOutcomeCodesEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationParameterScope'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationParameterScopeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationParameterUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationParameterUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganization', PHPFHIRTypeMap::getContainedTypeClassName('Organization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Organization.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation', PHPFHIRTypeMap::getContainedTypeClassName('OrganizationAffiliation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OrientationType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OrientationTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPackagedProductDefinition', PHPFHIRTypeMap::getContainedTypeClassName('PackagedProductDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PackagedProductDefinition.ContainedItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PackagedProductDefinition.LegalStatusOfSupply'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PackagedProductDefinition.Packaging'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PackagedProductDefinition.Property'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ParameterDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRParameters', PHPFHIRTypeMap::getContainedTypeClassName('Parameters'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Parameters.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ParticipantResourceTypes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ParticipantResourceTypesEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ParticipationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ParticipationStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPatient', PHPFHIRTypeMap::getContainedTypeClassName('Patient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Patient.Communication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Patient.Contact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Patient.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', PHPFHIRTypeMap::getContainedTypeClassName('PaymentNotice'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PaymentOutcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PaymentOutcomeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', PHPFHIRTypeMap::getContainedTypeClassName('PaymentReconciliation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PaymentReconciliation.Allocation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PaymentReconciliation.ProcessNote'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Period'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPermission', PHPFHIRTypeMap::getContainedTypeClassName('Permission'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Permission.Activity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Permission.Data'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Permission.Justification'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Permission.Resource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Permission.Rule'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PermissionRuleCombining'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PermissionRuleCombiningEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PermissionStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PermissionStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPerson', PHPFHIRTypeMap::getContainedTypeClassName('Person'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Person.Communication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Person.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRPlanDefinition', PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.Action'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.Actor'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.Condition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.DynamicValue'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.Goal'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.Input'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.Option'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.Output'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.RelatedAction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.Target'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('positiveInt'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('positiveInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitioner', PHPFHIRTypeMap::getContainedTypeClassName('Practitioner'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Practitioner.Communication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Practitioner.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitionerRole', PHPFHIRTypeMap::getContainedTypeClassName('PractitionerRole'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PrimitiveType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProcedure', PHPFHIRTypeMap::getContainedTypeClassName('Procedure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Procedure.FocalDevice'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Procedure.Performer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProductShelfLife'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PropertyRepresentation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PropertyRepresentationEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PropertyType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PropertyTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProvenance', PHPFHIRTypeMap::getContainedTypeClassName('Provenance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Provenance.Agent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Provenance.Entity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProvenanceEntityRole'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProvenanceEntityRoleEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PublicationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PublicationStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Quantity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuantityComparator'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuantityComparatorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRQuestionnaire', PHPFHIRTypeMap::getContainedTypeClassName('Questionnaire'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Questionnaire.AnswerOption'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Questionnaire.EnableWhen'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Questionnaire.Initial'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Questionnaire.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireAnswerConstraint'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireAnswerConstraintEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireItemDisabledDisplay'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireItemDisabledDisplayEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireItemOperator'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireItemOperatorEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireItemType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireItemTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireResponse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireResponse.Answer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireResponse.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireResponseStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireResponseStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Range'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Ratio'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RatioRange'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Reference'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ReferenceHandlingPolicy'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ReferenceHandlingPolicyEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ReferenceVersionRules'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ReferenceVersionRulesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRegulatedAuthorization', PHPFHIRTypeMap::getContainedTypeClassName('RegulatedAuthorization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RegulatedAuthorization.Case'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RelatedArtifact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RelatedArtifactType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RelatedArtifactTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RelatedArtifactTypeExpanded'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RelatedArtifactTypeExpandedEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', PHPFHIRTypeMap::getContainedTypeClassName('RelatedPerson'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RelatedPerson.Communication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RemittanceOutcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RemittanceOutcomeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ReportRelationshipType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ReportRelationshipTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestIntent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestIntentEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRequestOrchestration', PHPFHIRTypeMap::getContainedTypeClassName('RequestOrchestration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestOrchestration.Action'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestOrchestration.Condition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestOrchestration.DynamicValue'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestOrchestration.Input'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestOrchestration.Output'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestOrchestration.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestOrchestration.RelatedAction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestPriority'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestPriorityEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestResourceTypes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestResourceTypesEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRRequirements', PHPFHIRTypeMap::getContainedTypeClassName('Requirements'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Requirements.Statement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchStudy', PHPFHIRTypeMap::getContainedTypeClassName('ResearchStudy'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResearchStudy.AssociatedParty'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResearchStudy.ComparisonGroup'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResearchStudy.Label'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResearchStudy.Objective'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResearchStudy.OutcomeMeasure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResearchStudy.ProgressStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResearchStudy.Recruitment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchSubject', PHPFHIRTypeMap::getContainedTypeClassName('ResearchSubject'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResearchSubject.Progress'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Resource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceContainer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceVersionPolicy'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceVersionPolicyEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResponseType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResponseTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RestfulCapabilityMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RestfulCapabilityModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', PHPFHIRTypeMap::getContainedTypeClassName('RiskAssessment'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RiskAssessment.Prediction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SampledData'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SampledDataDataType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SampledDataDataType-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSchedule', PHPFHIRTypeMap::getContainedTypeClassName('Schedule'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchComparator'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchComparatorEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchEntryMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchEntryModeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchModifierCode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchModifierCodeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSearchParameter', PHPFHIRTypeMap::getContainedTypeClassName('SearchParameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchParameter.Component'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchParamType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchParamTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchProcessingModeType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchProcessingModeTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SequenceType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SequenceTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRServiceRequest', PHPFHIRTypeMap::getContainedTypeClassName('ServiceRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ServiceRequest.OrderDetail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ServiceRequest.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ServiceRequest.PatientInstruction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Signature'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SlicingRules'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SlicingRulesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSlot', PHPFHIRTypeMap::getContainedTypeClassName('Slot'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SlotStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SlotStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SortDirection'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SortDirectionEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SPDXLicense'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SPDXLicenseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSpecimen', PHPFHIRTypeMap::getContainedTypeClassName('Specimen'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Specimen.Collection'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Specimen.Container'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Specimen.Feature'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Specimen.Processing'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenCombined'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenCombinedEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenContainedPreference'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenContainedPreferenceEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRSpecimenDefinition', PHPFHIRTypeMap::getContainedTypeClassName('SpecimenDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenDefinition.Additive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenDefinition.Container'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenDefinition.Handling'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenDefinition.TypeTested'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StrandType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StrandTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('string'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('string-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureDefinition', PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinition.Context'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinition.Differential'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinition.Mapping'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinition.Snapshot'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinitionKind'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinitionKindEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureMap', PHPFHIRTypeMap::getContainedTypeClassName('StructureMap'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMap.Const'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMap.Dependent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMap.Group'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMap.Input'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMap.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMap.Rule'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMap.Source'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMap.Structure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMap.Target'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapGroupTypeMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapGroupTypeModeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapInputMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapInputModeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapModelMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapModelModeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapSourceListMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapSourceListModeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapTargetListMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapTargetListModeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapTransform'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapTransformEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubmitDataUpdateType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubmitDataUpdateTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscription', PHPFHIRTypeMap::getContainedTypeClassName('Subscription'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Subscription.FilterBy'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Subscription.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionNotificationType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionNotificationTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionPayloadContent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionPayloadContentEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscriptionStatus', PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionStatus.NotificationEvent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSubscriptionTopic', PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionTopic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionTopic.CanFilterBy'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionTopic.EventTrigger'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionTopic.NotificationShape'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionTopic.QueryCriteria'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionTopic.ResourceTrigger'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstance', PHPFHIRTypeMap::getContainedTypeClassName('Substance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Substance.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceDefinition', PHPFHIRTypeMap::getContainedTypeClassName('SubstanceDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceDefinition.Characterization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceDefinition.Code'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceDefinition.Moiety'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceDefinition.MolecularWeight'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceDefinition.Name'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceDefinition.Official'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceDefinition.Property'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceDefinition.Relationship'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceDefinition.Representation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceDefinition.SourceMaterial'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceDefinition.Structure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceNucleicAcid', PHPFHIRTypeMap::getContainedTypeClassName('SubstanceNucleicAcid'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceNucleicAcid.Linkage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceNucleicAcid.Subunit'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceNucleicAcid.Sugar'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstancePolymer', PHPFHIRTypeMap::getContainedTypeClassName('SubstancePolymer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstancePolymer.DegreeOfPolymerisation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstancePolymer.MonomerSet'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstancePolymer.Repeat'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstancePolymer.RepeatUnit'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstancePolymer.StartingMaterial'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstancePolymer.StructuralRepresentation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceProtein', PHPFHIRTypeMap::getContainedTypeClassName('SubstanceProtein'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceProtein.Subunit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceReferenceInformation', PHPFHIRTypeMap::getContainedTypeClassName('SubstanceReferenceInformation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceReferenceInformation.Gene'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceReferenceInformation.GeneElement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceReferenceInformation.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceSourceMaterial', PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSourceMaterial'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSourceMaterial.Author'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSourceMaterial.FractionDescription'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSourceMaterial.Hybrid'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSourceMaterial.Organism'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSourceMaterial.OrganismGeneral'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSourceMaterial.PartDescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', PHPFHIRTypeMap::getContainedTypeClassName('SupplyDelivery'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyDelivery.SuppliedItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyDeliveryStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyDeliveryStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', PHPFHIRTypeMap::getContainedTypeClassName('SupplyRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyRequest.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyRequestStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyRequestStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SystemRestfulInteraction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SystemRestfulInteractionEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTask', PHPFHIRTypeMap::getContainedTypeClassName('Task'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Task.Input'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Task.Output'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Task.Performer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Task.Restriction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TaskIntent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TaskIntentEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TaskStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TaskStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTerminologyCapabilities', PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.Closure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.CodeSystem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.Expansion'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.Filter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.Implementation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.Software'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.Translation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.ValidateCode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestPlan', PHPFHIRTypeMap::getContainedTypeClassName('TestPlan'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestPlan.Assertion'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestPlan.Dependency'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestPlan.Dependency1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestPlan.Script'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestPlan.TestCase'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestPlan.TestData'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestPlan.TestRun'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTestReport', PHPFHIRTypeMap::getContainedTypeClassName('TestReport'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Action'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Action1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Action2'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Assert'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Operation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Requirement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Setup'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Teardown'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Test'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReportActionResult'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReportActionResultEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReportParticipantType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReportParticipantTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReportResult'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReportResultEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReportStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReportStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestScript', PHPFHIRTypeMap::getContainedTypeClassName('TestScript'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Action'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Action1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Action2'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Assert'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Capability'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Destination'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Fixture'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Link'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Metadata'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Operation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Origin'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.RequestHeader'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Requirement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Scope'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Setup'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Teardown'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Test'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Variable'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScriptRequestMethodCode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScriptRequestMethodCodeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('time'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('time-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Timing'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Timing.Repeat'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTransport', PHPFHIRTypeMap::getContainedTypeClassName('Transport'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Transport.Input'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Transport.Output'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Transport.Restriction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TransportIntent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TransportIntentEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TransportStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TransportStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TriggerDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TriggeredBytype'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TriggeredBytypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TriggerType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TriggerTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TypeDerivationRule'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TypeDerivationRuleEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TypeRestfulInteraction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TypeRestfulInteractionEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('UDIEntryType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('UDIEntryTypeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('UnitsOfTime'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('UnitsOfTimeEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('unsignedInt'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('unsignedInt-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('uri'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('uri-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('url'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('url-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('UsageContext'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Use'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('UseEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('uuid'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('uuid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRValueSet', PHPFHIRTypeMap::getContainedTypeClassName('ValueSet'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Compose'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Concept'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Contains'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Designation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Expansion'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Filter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Include'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Property'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Property1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Scope'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.SubProperty'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVerificationResult', PHPFHIRTypeMap::getContainedTypeClassName('VerificationResult'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VerificationResult.Attestation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VerificationResult.PrimarySource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VerificationResult.Validator'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VerificationResultStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VerificationResultStatusEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VersionIndependentResourceTypesAll'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VersionIndependentResourceTypesAllEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VirtualServiceDetail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VisionBase'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VisionBaseEnum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VisionEyes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VisionEyesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', PHPFHIRTypeMap::getContainedTypeClassName('VisionPrescription'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VisionPrescription.LensSpecification'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VisionPrescription.Prism'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Xhtml'));
    }

    public function testIsContainableResourceWithClassname()
    {
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountBalance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountBalance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountProcedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountProcedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountRelatedAccount'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountRelatedAccount'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAccountStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAccountStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionCardinalityBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionCardinalityBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionCardinalityBehaviorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionCardinalityBehaviorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionConditionKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionConditionKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionConditionKindEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionConditionKindEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionGroupingBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionGroupingBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionGroupingBehaviorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionGroupingBehaviorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionParticipantType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionParticipantType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionParticipantTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionParticipantTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionPrecheckBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionPrecheckBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionPrecheckBehaviorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionPrecheckBehaviorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionRelationshipTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionRelationshipTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionRequiredBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionRequiredBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionRequiredBehaviorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionRequiredBehaviorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionSelectionBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionSelectionBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionSelectionBehaviorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionSelectionBehaviorEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRActivityDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRActivityDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRActorDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRActorDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAddress'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAddress'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAddressType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAddressType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAddressTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAddressTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAddressUseEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAddressUseEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdministrableProductDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdministrableProductDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionRouteOfAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionRouteOfAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionTargetSpecies'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionTargetSpecies'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionWithdrawalPeriod'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionWithdrawalPeriod'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAdministrativeGenderEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAdministrativeGenderEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdverseEvent'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdverseEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventContributingFactor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventContributingFactor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventMitigatingAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventMitigatingAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventPreventiveAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventPreventiveAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAdverseEventActuality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAdverseEventActuality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAdverseEventActualityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAdverseEventActualityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAdverseEventStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAdverseEventStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAdverseEventStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAdverseEventStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRAge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRAge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAgeUnits'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAgeUnits'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAgeUnitsEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAgeUnitsEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAggregationModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAggregationModeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAllResourceTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAllResourceTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAllResourceTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAllResourceTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAnnotation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAnnotation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentMonthlyTemplate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentMonthlyTemplate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentRecurrenceTemplate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentRecurrenceTemplate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentWeeklyTemplate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentWeeklyTemplate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentYearlyTemplate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentYearlyTemplate'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAppointmentResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAppointmentResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAppointmentResponseStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAppointmentResponseStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAppointmentStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAppointmentStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRArtifactAssessment'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRArtifactAssessment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRArtifactAssessment\FHIRArtifactAssessmentContent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRArtifactAssessment\FHIRArtifactAssessmentContent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRArtifactAssessmentDisposition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRArtifactAssessmentDisposition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRArtifactAssessmentDispositionEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRArtifactAssessmentDispositionEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRArtifactAssessmentInformationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRArtifactAssessmentInformationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRArtifactAssessmentInformationTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRArtifactAssessmentInformationTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRArtifactAssessmentWorkflowStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRArtifactAssessmentWorkflowStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRArtifactAssessmentWorkflowStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRArtifactAssessmentWorkflowStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAssertionDirectionTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAssertionDirectionTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAssertionManualCompletionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAssertionManualCompletionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAssertionManualCompletionTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAssertionManualCompletionTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAssertionOperatorTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAssertionOperatorTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAssertionResponseTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAssertionResponseTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAttachment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAttachment'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAuditEventActionEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAuditEventActionEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAuditEventSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAuditEventSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAuditEventSeverityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAuditEventSeverityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityAvailableTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityAvailableTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityNotAvailableTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityNotAvailableTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase64BinaryPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase64BinaryPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRBinary'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRBinary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRBindingStrengthEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRBindingStrengthEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProperty'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProductDispense'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProductDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProductDispense\FHIRBiologicallyDerivedProductDispensePerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProductDispense\FHIRBiologicallyDerivedProductDispensePerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBiologicallyDerivedProductDispenseCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBiologicallyDerivedProductDispenseCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRBiologicallyDerivedProductDispenseCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRBiologicallyDerivedProductDispenseCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBodyStructure'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBodyStructure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureBodyLandmarkOrientation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureBodyLandmarkOrientation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureDistanceFromLandmark'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureDistanceFromLandmark'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureIncludedStructure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureIncludedStructure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBoolean'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBoolean'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBooleanPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBooleanPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRBundle'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRBundle'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBundleType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBundleType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRBundleTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRBundleTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCanonical'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCanonical'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCanonicalPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCanonicalPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCapabilityStatement'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCapabilityStatement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCapabilityStatementKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCapabilityStatementKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCapabilityStatementKindEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCapabilityStatementKindEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCarePlanIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCarePlanIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCarePlanIntentEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCarePlanIntentEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCareTeam'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCareTeamStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCareTeamStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCareTeamStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCareTeamStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCharacteristicCombination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCharacteristicCombination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCharacteristicCombinationEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCharacteristicCombinationEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRChargeItem'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRChargeItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRChargeItemDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRChargeItemDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRChargeItemStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRChargeItemStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRChargeItemStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRChargeItemStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCitation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCitation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAbstract'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAbstract'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationCitedArtifact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationCitedArtifact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributionInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributionInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributorship'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributorship'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPart'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPart'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublicationForm'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublicationForm'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublishedIn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublishedIn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationTitle'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationTitle'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWebLocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWebLocation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimBodySite'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimBodySite'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRClaimProcessingCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRClaimProcessingCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRClaimProcessingCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRClaimProcessingCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseBodySite'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseBodySite'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseReviewOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseReviewOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalUseDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalUseDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionContraindication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionContraindication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionIndication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionIndication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteractant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteractant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionOtherTherapy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionOtherTherapy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionUndesirableEffect'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionUndesirableEffect'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionWarning'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionWarning'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRClinicalUseDefinitionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRClinicalUseDefinitionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRClinicalUseDefinitionTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRClinicalUseDefinitionTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCodeSearchSupport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCodeSearchSupport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCodeSearchSupportEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCodeSearchSupportEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCodeSystem'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCodeSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCodeSystemContentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCodeSystemContentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCodeSystemContentModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCodeSystemContentModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCodeSystemHierarchyMeaning'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCodeSystemHierarchyMeaning'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRCoding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRCoding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRColorCodesOrRGB'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRColorCodesOrRGB'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRStringPrimitive\FHIRColorCodesOrRGBEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRStringPrimitive\FHIRColorCodesOrRGBEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCommonLanguages'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCommonLanguages'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCommonLanguagesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCommonLanguagesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCompartmentDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCompartmentDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCompartmentType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCompartmentType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCompartmentTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCompartmentTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCompositionStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCompositionStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConceptMap'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConceptMap'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapAdditionalAttribute'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapAdditionalAttribute'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConceptMapAttributeType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConceptMapAttributeType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConceptMapAttributeTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConceptMapAttributeTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConceptMapGroupUnmappedMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConceptMapGroupUnmappedMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConceptMapPropertyType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConceptMapPropertyType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConceptMapPropertyTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConceptMapPropertyTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConceptMapRelationship'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConceptMapRelationship'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConceptMapRelationshipEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConceptMapRelationshipEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConcreteFHIRTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConcreteFHIRTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConcreteFHIRTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConcreteFHIRTypesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConditionalDeleteStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConditionalDeleteStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConditionalReadStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConditionalReadStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConditionalReadStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConditionalReadStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConditionDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConditionDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionMedication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionMedication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionObservation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionObservation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPrecondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPrecondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionQuestionnaire'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionQuestionnaire'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConditionPreconditionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConditionPreconditionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConditionPreconditionTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConditionPreconditionTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConditionQuestionnairePurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConditionQuestionnairePurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConditionQuestionnairePurposeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConditionQuestionnairePurposeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConformanceExpectation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConformanceExpectation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConformanceExpectationEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConformanceExpectationEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRConsent'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRConsent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicyBasis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicyBasis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConsentDataMeaning'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConsentDataMeaning'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConsentDataMeaningEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConsentDataMeaningEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConsentProvisionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConsentProvisionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConsentProvisionTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConsentProvisionTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConsentState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConsentState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConsentStateEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConsentStateEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConstraintSeverityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConstraintSeverityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRContactDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRContactDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRContactPoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRContactPoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContactPointSystemEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContactPointSystemEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContactPointUseEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContactPointUseEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContractResourcePublicationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContractResourcePublicationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContractResourcePublicationStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContractResourcePublicationStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContractResourceStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContractResourceStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContractResourceStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContractResourceStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRContributor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRContributor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContributorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContributorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContributorTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContributorTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRCount'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRCount'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoveragePaymentBy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoveragePaymentBy'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCriteriaNotExistsBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCriteriaNotExistsBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCriteriaNotExistsBehaviorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCriteriaNotExistsBehaviorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementCodeFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementCodeFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementDateFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementDateFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementSort'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementSort'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementValueFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementValueFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRDatePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRDatePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDateTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDateTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRDateTimePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRDateTimePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDecimal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDecimal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRDecimalPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRDecimalPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDefinitionResourceTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDefinitionResourceTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDefinitionResourceTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDefinitionResourceTypesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDetectedIssueSeverityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDetectedIssueSeverityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDetectedIssueStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDetectedIssueStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDetectedIssueStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDetectedIssueStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceConformsTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceConformsTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceAssociation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceAssociation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceAssociation\FHIRDeviceAssociationOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceAssociation\FHIRDeviceAssociationOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceCorrectiveActionScope'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceCorrectiveActionScope'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceCorrectiveActionScopeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceCorrectiveActionScopeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionChargeItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionChargeItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionClassification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionClassification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionConformsTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionConformsTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCorrectiveAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCorrectiveAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDistributor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDistributor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionGuideline'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionGuideline'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionHasPart'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionHasPart'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMarketDistribution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMarketDistribution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionPackaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionPackaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionRegulatoryIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionRegulatoryIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceDefinitionRegulatoryIdentifierType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceDefinitionRegulatoryIdentifierType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceDefinitionRegulatoryIdentifierTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceDefinitionRegulatoryIdentifierTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDispense'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDispense\FHIRDeviceDispensePerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDispense\FHIRDeviceDispensePerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceDispenseStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceDispenseStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceDispenseStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceDispenseStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceMetricCategoryEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceMetricCategoryEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceNameType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceNameType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceNameTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceNameTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceProductionIdentifierInUDI'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceProductionIdentifierInUDI'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceProductionIdentifierInUDIEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceProductionIdentifierInUDIEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceUsage'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceUsage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceUsage\FHIRDeviceUsageAdherence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceUsage\FHIRDeviceUsageAdherence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceUsageStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceUsageStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceUsageStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceUsageStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportSupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportSupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDiagnosticReportStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDiagnosticReportStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDiscriminatorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDiscriminatorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDiscriminatorTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDiscriminatorTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDistance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDistance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDocumentModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDocumentModeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceAttester'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceAttester'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceProfile'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceProfile'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDocumentReferenceStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDocumentReferenceStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage\FHIRDosageDoseAndRate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage\FHIRDosageDoseAndRate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionAdditional'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionAdditional'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionDiscriminator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionDiscriminator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionExample'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionExample'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREligibilityOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREligibilityOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREligibilityOutcomeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREligibilityOutcomeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREligibilityRequestPurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREligibilityRequestPurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREligibilityRequestPurposeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREligibilityRequestPurposeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREligibilityResponsePurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREligibilityResponsePurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREligibilityResponsePurposeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREligibilityResponsePurposeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREnableWhenBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREnableWhenBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREnableWhenBehaviorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREnableWhenBehaviorEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAdmission'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAdmission'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterReason'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterReason'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounterHistory'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounterHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounterHistory\FHIREncounterHistoryLocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounterHistory\FHIREncounterHistoryLocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREncounterLocationStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREncounterLocationStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREncounterStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREncounterStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREncounterStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREncounterStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREndpoint'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREndpoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREndpoint\FHIREndpointPayload'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREndpoint\FHIREndpointPayload'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREndpointStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREndpointStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREndpointStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREndpointStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREnrollmentOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREnrollmentOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREnrollmentOutcomeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREnrollmentOutcomeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareReason'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareReason'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREpisodeOfCareStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREpisodeOfCareStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREventCapabilityMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREventCapabilityMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREventCapabilityModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREventCapabilityModeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREventDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREventDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREventResourceTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREventResourceTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREventResourceTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREventResourceTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREventStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREventStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREventStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREventStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREventTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREventTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREventTimingEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREventTimingEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidence'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceAttributeEstimate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceAttributeEstimate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceCertainty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceCertainty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceModelCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceModelCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceSampleSize'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceSampleSize'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceStatistic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceStatistic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariableDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariableDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceReport'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportRelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportRelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSubject'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSubject'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportTarget'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceVariable'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceVariable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByCombination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByCombination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByTypeAndValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByTypeAndValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableTimeFromEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableTimeFromEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREvidenceVariableHandling'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREvidenceVariableHandling'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREvidenceVariableHandlingEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREvidenceVariableHandlingEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRExampleScenario'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRExampleScenario'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRExampleScenarioActorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRExampleScenarioActorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRExampleScenarioActorTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRExampleScenarioActorTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitReviewOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitReviewOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRExplanationOfBenefitStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRExplanationOfBenefitStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRExpression'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRExpression'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRExtendedContactDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRExtendedContactDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRExtension'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRExtension'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRExtensionContextType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRExtensionContextType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRExtensionContextTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRExtensionContextTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFamilyHistoryStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFamilyHistoryStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryProcedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryProcedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRDeviceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRDeviceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRDeviceStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRDeviceStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRPathTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRPathTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRPathTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRPathTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRSubstanceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRSubstanceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRSubstanceStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRSubstanceStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRVersionEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRVersionEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFilterOperatorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFilterOperatorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFinancialResourceStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFinancialResourceStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFlagStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFlagStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFormularyItem'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFormularyItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFormularyItemStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFormularyItemStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFormularyItemStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFormularyItemStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGenomicStudy'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGenomicStudy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyAnalysis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyAnalysis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyDevice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyDevice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyInput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyInput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyOutput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyOutput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGenomicStudyStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGenomicStudyStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGenomicStudyStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGenomicStudyStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGoalLifecycleStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGoalLifecycleStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGoalLifecycleStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGoalLifecycleStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGraphCompartmentRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGraphCompartmentRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGraphCompartmentRuleEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGraphCompartmentRuleEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGraphCompartmentUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGraphCompartmentUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGraphCompartmentUseEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGraphCompartmentUseEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRGraphDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRGraphDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionNode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionNode'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGroupMembershipBasis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGroupMembershipBasis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGroupMembershipBasisEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGroupMembershipBasisEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGroupType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGroupType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGroupTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGroupTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGuidanceResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGuidanceResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGuidanceResponseStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGuidanceResponseStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGuidePageGeneration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGuidePageGeneration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGuidePageGenerationEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGuidePageGenerationEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRHTTPVerbEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRHTTPVerbEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRHumanName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRHumanName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRId'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRId'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRIdPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRIdPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIdentifierUseEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIdentifierUseEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIdentityAssuranceLevelEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIdentityAssuranceLevelEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingSelection'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingSelection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion2D'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion2D'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion3D'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion3D'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImagingSelectionDGraphicType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImagingSelectionDGraphicType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImagingSelectionDGraphicTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImagingSelectionDGraphicTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImagingSelectionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImagingSelectionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImagingSelectionStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImagingSelectionStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImagingStudyStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImagingStudyStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImagingStudyStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImagingStudyStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProgramEligibility'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProgramEligibility'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImmunizationEvaluationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImmunizationEvaluationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImmunizationEvaluationStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImmunizationEvaluationStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImmunizationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImmunizationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImmunizationStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImmunizationStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRImplementationGuide'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRImplementationGuide'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRIngredient'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientManufacturer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientManufacturer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientReferenceStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientReferenceStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientSubstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientSubstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIngredientManufacturerRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIngredientManufacturerRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIngredientManufacturerRoleEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIngredientManufacturerRoleEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInstant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInstant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRInstantPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRInstantPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInsurancePlan'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInsurancePlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInteger'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInteger'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRIntegerPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRIntegerPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInteger64'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInteger64'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRInteger64Primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRInteger64Primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInteractionTrigger'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInteractionTrigger'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInteractionTriggerEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInteractionTriggerEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInventoryCountType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInventoryCountType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInventoryCountTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInventoryCountTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryItem'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemAssociation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemAssociation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemDescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemDescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemResponsibleOrganization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemResponsibleOrganization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInventoryItemStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInventoryItemStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInventoryItemStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInventoryItemStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryReport'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportInventoryListing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportInventoryListing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInventoryReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInventoryReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInventoryReportStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInventoryReportStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInvoice'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInvoice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInvoiceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInvoiceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInvoiceStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInvoiceStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIssueSeverityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIssueSeverityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIssueType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIssueType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIssueTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIssueTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRJurisdictionValueSet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRJurisdictionValueSet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRJurisdictionValueSetEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRJurisdictionValueSetEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRKindEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRKindEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRLibrary'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRLibrary'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLinkage'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLinkage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLinkageType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLinkageType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLinkageTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLinkageTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLinkRelationTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLinkRelationTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLinkRelationTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLinkRelationTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLinkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLinkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLinkTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLinkTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRListModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRListModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRListStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRListStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRListStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRListStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLocationModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLocationModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLocationStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLocationStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRManufacturedItemDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRManufacturedItemDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionConstituent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionConstituent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRMarkdownPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRMarkdownPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRMarketingStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRMarketingStatus'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMeasure'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMeasure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureTerm'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureTerm'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMeasureReport'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMeasureReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMeasureReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMeasureReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMeasureReportStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMeasureReportStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMeasureReportType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMeasureReportType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMeasureReportTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMeasureReportTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationAdministrationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationAdministrationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationAdministrationStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationAdministrationStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationDispenseStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationDispenseStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationDispenseStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationDispenseStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMedicationKnowledge'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMedicationKnowledge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDefinitional'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDefinitional'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosingGuideline'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosingGuideline'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeEnvironmentalSetting'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeEnvironmentalSetting'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIndicationGuideline'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIndicationGuideline'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeStorageGuideline'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeStorageGuideline'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationKnowledgeStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationKnowledgeStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationKnowledgeStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationKnowledgeStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationRequestIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationRequestIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationRequestIntentEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationRequestIntentEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationrequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationrequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationrequestStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationrequestStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementAdherence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementAdherence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationStatementStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationStatementStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationStatementStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationStatementStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicinalProductDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicinalProductDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCrossReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCrossReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionPart'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionPart'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionUsage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionUsage'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMessageDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMessageDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMessageheaderResponseRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMessageheaderResponseRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMessageheaderResponseRequestEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMessageheaderResponseRequestEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMessageSignificanceCategoryEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMessageSignificanceCategoryEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRMeta'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRMeta'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMolecularSequence'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMolecularSequence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceEdit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceEdit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRelative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRelative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStartingSequence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStartingSequence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRMonetaryComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRMonetaryComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRMoney'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRMoney'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNameUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNameUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNameUseEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNameUseEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRNamingSystem'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRNamingSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNamingSystemTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNamingSystemTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRNarrative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRNarrative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNarrativeStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNarrativeStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNoteType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNoteType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNoteTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNoteTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionIntake'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionIntake'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeConsumedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeConsumedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeIngredientLabel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeIngredientLabel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakePerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakePerformer'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdditive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdditive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionProduct'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionProduct'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductNutrient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductNutrient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNutritionProductStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNutritionProductStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNutritionProductStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNutritionProductStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationTriggeredBy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationTriggeredBy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRObservationDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRObservationDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRObservationDataTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRObservationDataTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRObservationDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRObservationDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRObservationRangeCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRObservationRangeCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRObservationRangeCategoryEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRObservationRangeCategoryEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRObservationStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRObservationStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIROidPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIROidPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIROperationDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIROperationDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROperationKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROperationKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROperationKindEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROperationKindEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROperationOutcomeCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROperationOutcomeCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROperationOutcomeCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROperationOutcomeCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROperationParameterScope'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROperationParameterScope'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROperationParameterScopeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROperationParameterScopeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROperationParameterUseEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROperationParameterUseEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationQualification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationQualification'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROrientationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROrientationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROrientationTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROrientationTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPackagedProductDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPackagedProductDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionContainedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionContainedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionLegalStatusOfSupply'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionLegalStatusOfSupply'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionPackaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionPackaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRParameterDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRParameterDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRParameters'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRParameters'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRParticipantResourceTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRParticipantResourceTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRParticipantResourceTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRParticipantResourceTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRParticipationStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRParticipationStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPaymentOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPaymentOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPaymentOutcomeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPaymentOutcomeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationAllocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationAllocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRPeriod'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRPeriod'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPermission'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPermission'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionActivity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionActivity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionJustification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionJustification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPermissionRuleCombining'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPermissionRuleCombining'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPermissionRuleCombiningEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPermissionRuleCombiningEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPermissionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPermissionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPermissionStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPermissionStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonCommunication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonCommunication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRPlanDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRPlanDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionActor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionActor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionInput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionInput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOption'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOption'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOutput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOutput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRPositiveIntPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRPositiveIntPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerCommunication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerCommunication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitionerRole'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitionerRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRPrimitiveType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRPrimitiveType'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRProductShelfLife'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRProductShelfLife'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPropertyRepresentationEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPropertyRepresentationEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPropertyType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPropertyType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPropertyTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPropertyTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRProvenanceEntityRoleEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRProvenanceEntityRoleEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPublicationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPublicationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPublicationStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPublicationStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuantityComparatorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuantityComparatorEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRQuestionnaire'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRQuestionnaire'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireAnswerConstraint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireAnswerConstraint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireAnswerConstraintEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireAnswerConstraintEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireItemDisabledDisplay'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireItemDisabledDisplay'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireItemDisabledDisplayEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireItemDisabledDisplayEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireItemOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireItemOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireItemOperatorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireItemOperatorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireItemType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireItemType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireItemTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireItemTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRRatio'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRRatio'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRRatioRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRRatioRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRReferenceHandlingPolicy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRReferenceHandlingPolicy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRReferenceHandlingPolicyEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRReferenceHandlingPolicyEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRReferenceVersionRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRReferenceVersionRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRReferenceVersionRulesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRReferenceVersionRulesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRegulatedAuthorization'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRegulatedAuthorization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRegulatedAuthorization\FHIRRegulatedAuthorizationCase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRegulatedAuthorization\FHIRRegulatedAuthorizationCase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRRelatedArtifact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRRelatedArtifact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRelatedArtifactType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRelatedArtifactType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRelatedArtifactTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRelatedArtifactTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRelatedArtifactTypeExpanded'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRelatedArtifactTypeExpanded'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRelatedArtifactTypeExpandedEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRelatedArtifactTypeExpandedEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRemittanceOutcomeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRemittanceOutcomeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRReportRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRReportRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRReportRelationshipTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRReportRelationshipTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRequestIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRequestIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRequestIntentEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRequestIntentEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRequestOrchestration'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRequestOrchestration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationDynamicValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationDynamicValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationInput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationInput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationOutput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationOutput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationRelatedAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationRelatedAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRequestPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRequestPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRequestPriorityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRequestPriorityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRequestResourceTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRequestResourceTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRequestResourceTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRequestResourceTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRequestStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRequestStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRRequirements'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRRequirements'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequirements\FHIRRequirementsStatement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequirements\FHIRRequirementsStatement'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchStudy'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchStudy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyAssociatedParty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyAssociatedParty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyComparisonGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyComparisonGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyLabel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyLabel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyOutcomeMeasure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyOutcomeMeasure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyProgressStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyProgressStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyRecruitment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyRecruitment'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchSubject'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchSubject'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchSubject\FHIRResearchSubjectProgress'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchSubject\FHIRResearchSubjectProgress'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRResourceContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRResourceContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRResourceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRResourceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRResourceTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRResourceTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRResourceVersionPolicyEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRResourceVersionPolicyEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRResponseType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRResponseType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRResponseTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRResponseTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRestfulCapabilityMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRestfulCapabilityMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRestfulCapabilityModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRestfulCapabilityModeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRSampledData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRSampledData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRSampledDataDataTypePrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchComparator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchComparator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchComparatorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchComparatorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchEntryModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchEntryModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchModifierCodeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchModifierCodeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSearchParameter'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSearchParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchParamTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchParamTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchProcessingModeType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchProcessingModeType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchProcessingModeTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchProcessingModeTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSequenceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSequenceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSequenceTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSequenceTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRServiceRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRServiceRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestOrderDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestOrderDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestPatientInstruction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestPatientInstruction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRSignature'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRSignature'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSlicingRulesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSlicingRulesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSlotStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSlotStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSortDirection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSortDirection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSortDirectionEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSortDirectionEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSPDXLicense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSPDXLicense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSPDXLicenseEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSPDXLicenseEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenFeature'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenFeature'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSpecimenCombined'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSpecimenCombined'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSpecimenCombinedEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSpecimenCombinedEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSpecimenContainedPreference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSpecimenContainedPreference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSpecimenContainedPreferenceEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSpecimenContainedPreferenceEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRSpecimenDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRSpecimenDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSpecimenStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSpecimenStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStrandType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStrandType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStrandTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStrandTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRString'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRString'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRStringPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRStringPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureDefinitionKindEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureDefinitionKindEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureMap'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureMap'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapConst'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapConst'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapGroupTypeMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapGroupTypeMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapInputMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapInputMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapInputModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapInputModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapModelMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapModelMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapModelModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapModelModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapSourceListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapSourceListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapSourceListModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapSourceListModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapTargetListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapTargetListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapTargetListModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapTargetListModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapTransform'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapTransform'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapTransformEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapTransformEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSubmitDataUpdateType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSubmitDataUpdateType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSubmitDataUpdateTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSubmitDataUpdateTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionFilterBy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionFilterBy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSubscriptionNotificationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSubscriptionNotificationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSubscriptionNotificationTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSubscriptionNotificationTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSubscriptionPayloadContent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSubscriptionPayloadContent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSubscriptionPayloadContentEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSubscriptionPayloadContentEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscriptionStatus'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscriptionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionStatus\FHIRSubscriptionStatusNotificationEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionStatus\FHIRSubscriptionStatusNotificationEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSubscriptionStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSubscriptionStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSubscriptionStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSubscriptionStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSubscriptionTopic'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSubscriptionTopic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicCanFilterBy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicCanFilterBy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicEventTrigger'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicEventTrigger'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicNotificationShape'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicNotificationShape'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicQueryCriteria'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicQueryCriteria'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicResourceTrigger'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicResourceTrigger'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCharacterization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCharacterization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMoiety'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMoiety'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMolecularWeight'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMolecularWeight'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionOfficial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionOfficial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRelationship'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRelationship'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionSourceMaterial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionSourceMaterial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionStructure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionStructure'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceNucleicAcid'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceNucleicAcid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidLinkage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidLinkage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSubunit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSubunit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSugar'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSugar'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstancePolymer'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstancePolymer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerDegreeOfPolymerisation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerDegreeOfPolymerisation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerMonomerSet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerMonomerSet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeatUnit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeatUnit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStartingMaterial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStartingMaterial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStructuralRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStructuralRepresentation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceProtein'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceProtein'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceProtein\FHIRSubstanceProteinSubunit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceProtein\FHIRSubstanceProteinSubunit'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceReferenceInformation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceReferenceInformation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGene'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGene'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGeneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGeneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationTarget'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceSourceMaterial'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceSourceMaterial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialAuthor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialAuthor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialFractionDescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialFractionDescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialHybrid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialHybrid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganism'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganism'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganismGeneral'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganismGeneral'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialPartDescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialPartDescription'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSupplyDeliveryStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSupplyDeliveryStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSupplyRequestStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSupplyRequestStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSystemRestfulInteractionEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSystemRestfulInteractionEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTask'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTask'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTaskIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTaskIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTaskIntentEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTaskIntentEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTaskStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTaskStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTaskStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTaskStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTerminologyCapabilities'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTerminologyCapabilities'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestPlan'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestPlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanAssertion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanAssertion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanScript'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanScript'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestCase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestCase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestRun'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestRun'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTestReport'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTestReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportRequirement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportRequirement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestReportActionResult'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestReportActionResult'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestReportActionResultEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestReportActionResultEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestReportParticipantType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestReportParticipantType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestReportParticipantTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestReportParticipantTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestReportResult'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestReportResult'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestReportResultEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestReportResultEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestReportStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestReportStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestScript'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestScript'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequirement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequirement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptScope'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptScope'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestScriptRequestMethodCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestScriptRequestMethodCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRTimePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRTimePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming\FHIRTimingRepeat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming\FHIRTimingRepeat'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTransport'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTransport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportInput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportInput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportOutput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportOutput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportRestriction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportRestriction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTransportIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTransportIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTransportIntentEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTransportIntentEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTransportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTransportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTransportStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTransportStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRTriggerDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRTriggerDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTriggeredBytype'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTriggeredBytype'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTriggeredBytypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTriggeredBytypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTriggerType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTriggerType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTriggerTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTriggerTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTypeDerivationRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTypeDerivationRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTypeDerivationRuleEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTypeDerivationRuleEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTypeRestfulInteractionEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTypeRestfulInteractionEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUDIEntryType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUDIEntryType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRUDIEntryTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRUDIEntryTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRUnitsOfTimeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRUnitsOfTimeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUri'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUri'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRUriPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRUriPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUrl'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUrl'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRUrlPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRUrlPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRUsageContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRUsageContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRUseEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRUseEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUuid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUuid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRUuidPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRUuidPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRValueSet'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRValueSet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetScope'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetScope'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetSubProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetSubProperty'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVerificationResult'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVerificationResult'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRVerificationResultStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRVerificationResultStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRVerificationResultStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRVerificationResultStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRVersionIndependentResourceTypesAll'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRVersionIndependentResourceTypesAll'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRVersionIndependentResourceTypesAllEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRVersionIndependentResourceTypesAllEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRVirtualServiceDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRVirtualServiceDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRVisionBaseEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRVisionBaseEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRVisionEyesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRVisionEyesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism'));
    }

    public function testIsContainableResourceWithTypeName()
    {
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Account'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Account.Balance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Account.Coverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Account.Diagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Account.Guarantor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Account.Procedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Account.RelatedAccount'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AccountStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AccountStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionCardinalityBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionCardinalityBehaviorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionConditionKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionConditionKindEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionGroupingBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionGroupingBehaviorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionParticipantType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionParticipantTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionPrecheckBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionPrecheckBehaviorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionRelationshipTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionRequiredBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionRequiredBehaviorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionSelectionBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionSelectionBehaviorEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ActivityDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActivityDefinition.DynamicValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActivityDefinition.Participant'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ActorDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Address'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AddressType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AddressTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AddressUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AddressUseEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('AdministrableProductDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdministrableProductDefinition.Property'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdministrableProductDefinition.RouteOfAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdministrableProductDefinition.TargetSpecies'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdministrableProductDefinition.WithdrawalPeriod'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdministrativeGender'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdministrativeGenderEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('AdverseEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdverseEvent.Causality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdverseEvent.ContributingFactor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdverseEvent.MitigatingAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdverseEvent.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdverseEvent.PreventiveAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdverseEvent.SupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdverseEvent.SuspectEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdverseEventActuality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdverseEventActualityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdverseEventStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdverseEventStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Age'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AgeUnits'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AgeUnitsEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AggregationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AggregationModeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('AllergyIntolerance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntolerance.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntolerance.Reaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceCategoryEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceCriticality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceCriticalityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceSeverityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllResourceTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllResourceTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Annotation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Appointment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Appointment.MonthlyTemplate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Appointment.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Appointment.RecurrenceTemplate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Appointment.WeeklyTemplate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Appointment.YearlyTemplate'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('AppointmentResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AppointmentResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AppointmentResponseStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AppointmentStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AppointmentStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ArtifactAssessment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ArtifactAssessment.Content'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ArtifactAssessmentDisposition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ArtifactAssessmentDispositionEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ArtifactAssessmentInformationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ArtifactAssessmentInformationTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ArtifactAssessmentWorkflowStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ArtifactAssessmentWorkflowStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionDirectionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionDirectionTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionManualCompletionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionManualCompletionTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionOperatorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionOperatorTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionResponseTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionResponseTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Attachment'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('AuditEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEvent.Agent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEvent.Detail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEvent.Entity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEvent.Outcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEvent.Source'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEventAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEventActionEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEventSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEventSeverityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Availability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Availability.AvailableTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Availability.NotAvailableTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BackboneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BackboneType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('base64Binary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('base64Binary-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Basic'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Binary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BindingStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BindingStrengthEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProduct'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProduct.Collection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProduct.Property'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProductDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProductDispense.Performer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProductDispenseCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProductDispenseCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('BodyStructure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BodyStructure.BodyLandmarkOrientation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BodyStructure.DistanceFromLandmark'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BodyStructure.IncludedStructure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('boolean'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('boolean-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Bundle'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Bundle.Entry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Bundle.Link'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Bundle.Request'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Bundle.Response'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Bundle.Search'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BundleType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BundleTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('canonical'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('canonical-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CanonicalResource'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CapabilityStatement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Document'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Endpoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Implementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Interaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Interaction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Messaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Operation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Resource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Rest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.SearchParam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Security'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Software'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.SupportedMessage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatementKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatementKindEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CarePlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlan.Activity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanIntentEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CareTeam.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CareTeamStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CareTeamStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CharacteristicCombination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CharacteristicCombinationEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ChargeItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ChargeItem.Performer'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ChargeItemDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ChargeItemDefinition.Applicability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ChargeItemDefinition.PropertyGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ChargeItemStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ChargeItemStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Citation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.Abstract'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.CitedArtifact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.Classification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.Classification1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.ContributionInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.Contributorship'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.Entry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.Part'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.PublicationForm'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.PublishedIn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.RelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.StatusDate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.StatusDate1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.Summary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.Summary1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.Title'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.Version'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Citation.WebLocation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Claim'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Accident'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.BodySite'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.CareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Detail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Diagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Event'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Insurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Payee'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Procedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Related'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.SubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.SupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimProcessingCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimProcessingCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ClaimResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.AddItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Adjudication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.BodySite'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Detail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Detail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Error'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Event'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Insurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Payment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.ProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.ReviewOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.SubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.SubDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Total'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ClinicalImpression'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalImpression.Finding'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ClinicalUseDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalUseDefinition.Contraindication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalUseDefinition.Indication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalUseDefinition.Interactant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalUseDefinition.Interaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalUseDefinition.OtherTherapy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalUseDefinition.UndesirableEffect'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalUseDefinition.Warning'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalUseDefinitionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalUseDefinitionTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('code'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('code-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeableConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeableReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSearchSupport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSearchSupportEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CodeSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystem.Concept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystem.Designation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystem.Filter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystem.Property'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystem.Property1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystemContentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystemContentModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystemHierarchyMeaning'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystemHierarchyMeaningEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Coding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ColorCodesOrRGB'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ColorCodesOrRGBEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CommonLanguages'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CommonLanguagesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Communication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Communication.Payload'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CommunicationRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CommunicationRequest.Payload'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CompartmentDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompartmentDefinition.Resource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompartmentType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompartmentTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Composition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Composition.Attester'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Composition.Event'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Composition.Section'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompositionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompositionStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ConceptMap'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.AdditionalAttribute'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.DependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.Element'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.Group'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.Property'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.Property1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.Target'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.Unmapped'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMapAttributeType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMapAttributeTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMapGroupUnmappedMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMapGroupUnmappedModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMapPropertyType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMapPropertyTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMapRelationship'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMapRelationshipEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConcreteFHIRTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConcreteFHIRTypesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Condition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Condition.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Condition.Stage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionalDeleteStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionalDeleteStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionalReadStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionalReadStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ConditionDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionDefinition.Medication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionDefinition.Observation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionDefinition.Plan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionDefinition.Precondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionDefinition.Questionnaire'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionPreconditionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionPreconditionTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionQuestionnairePurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionQuestionnairePurposeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConformanceExpectation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConformanceExpectationEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Consent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Consent.Actor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Consent.Data'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Consent.PolicyBasis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Consent.Provision'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Consent.Verification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConsentDataMeaning'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConsentDataMeaningEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConsentProvisionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConsentProvisionTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConsentState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConsentStateEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConstraintSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConstraintSeverityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactPoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactPointSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactPointSystemEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactPointUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactPointUseEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Contract'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Action'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Answer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Asset'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.ContentDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Context'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Friendly'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Legal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Offer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Party'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Rule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.SecurityLabel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Signer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Subject'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Term'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.ValuedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContractResourcePublicationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContractResourcePublicationStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContractResourceStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContractResourceStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contributor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContributorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContributorTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Count'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Coverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Coverage.Class'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Coverage.CostToBeneficiary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Coverage.Exception'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Coverage.PaymentBy'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityRequest.Diagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityRequest.Event'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityRequest.Insurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityRequest.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityRequest.SupportingInfo'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityResponse.Benefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityResponse.Error'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityResponse.Event'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityResponse.Insurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityResponse.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CriteriaNotExistsBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CriteriaNotExistsBehaviorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DataRequirement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DataRequirement.CodeFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DataRequirement.DateFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DataRequirement.Sort'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DataRequirement.ValueFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('date'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('date-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('dateTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('dateTime-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('decimal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('decimal-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DefinitionResourceTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DefinitionResourceTypesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DetectedIssue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DetectedIssue.Evidence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DetectedIssue.Mitigation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DetectedIssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DetectedIssueSeverityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DetectedIssueStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DetectedIssueStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Device'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Device.ConformsTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Device.Name'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Device.Property'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Device.UdiCarrier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Device.Version'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DeviceAssociation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceAssociation.Operation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceCorrectiveActionScope'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceCorrectiveActionScopeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DeviceDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.ChargeItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.Classification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.ConformsTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.CorrectiveAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.DeviceName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.Distributor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.Guideline'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.HasPart'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.Link'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.MarketDistribution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.Material'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.Packaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.Property'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.RegulatoryIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.UdiDeviceIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.Version'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinitionRegulatoryIdentifierType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinitionRegulatoryIdentifierTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DeviceDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDispense.Performer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDispenseStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDispenseStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DeviceMetric'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetric.Calibration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCalibrationState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCalibrationStateEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCalibrationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCalibrationTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCategoryEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricOperationalStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricOperationalStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceNameType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceNameTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceProductionIdentifierInUDI'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceProductionIdentifierInUDIEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DeviceRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceRequest.Parameter'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DeviceUsage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceUsage.Adherence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceUsageStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceUsageStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DiagnosticReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticReport.Media'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticReport.SupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticReportStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiscriminatorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiscriminatorTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Distance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentModeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DocumentReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReference.Attester'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReference.Content'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReference.Profile'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReference.RelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReferenceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReferenceStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DomainResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Dosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Dosage.DoseAndRate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Duration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Element'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Additional'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Base'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Binding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Constraint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Discriminator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Example'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Mapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Slicing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Type'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EligibilityOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EligibilityOutcomeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EligibilityRequestPurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EligibilityRequestPurposeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EligibilityResponsePurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EligibilityResponsePurposeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EnableWhenBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EnableWhenBehaviorEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Encounter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.Admission'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.Diagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.Location'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.Reason'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EncounterHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterHistory.Location'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterLocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterLocationStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Endpoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Endpoint.Payload'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EndpointStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EndpointStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EnrollmentOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EnrollmentOutcomeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EnrollmentRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EnrollmentResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EpisodeOfCare'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EpisodeOfCare.Diagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EpisodeOfCare.Reason'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EpisodeOfCare.StatusHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EpisodeOfCareStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EpisodeOfCareStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventCapabilityMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventCapabilityModeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EventDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventResourceTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventResourceTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventTimingEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Evidence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Evidence.AttributeEstimate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Evidence.Certainty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Evidence.ModelCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Evidence.SampleSize'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Evidence.Statistic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Evidence.Variable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Evidence.VariableDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EvidenceReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EvidenceReport.Characteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EvidenceReport.RelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EvidenceReport.Section'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EvidenceReport.Subject'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EvidenceReport.Target'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EvidenceVariable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EvidenceVariable.Category'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EvidenceVariable.Characteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EvidenceVariable.DefinitionByCombination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EvidenceVariable.DefinitionByTypeAndValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EvidenceVariable.TimeFromEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EvidenceVariableHandling'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EvidenceVariableHandlingEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ExampleScenario'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenario.Actor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenario.Alternative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenario.ContainedInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenario.Instance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenario.Operation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenario.Process'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenario.Step'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenario.Version'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenarioActorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenarioActorTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Accident'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.AddItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Adjudication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.BenefitBalance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.BodySite'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.BodySite1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.CareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Detail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Detail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Diagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Event'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Financial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Insurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Payee'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Payment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Procedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.ProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Related'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.ReviewOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.SubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.SubDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.SupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Total'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefitStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefitStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Expression'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExtendedContactDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Extension'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExtensionContextType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExtensionContextTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FamilyHistoryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FamilyHistoryStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('FamilyMemberHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FamilyMemberHistory.Condition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FamilyMemberHistory.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FamilyMemberHistory.Procedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FHIRDeviceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FHIRDeviceStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FHIRPathTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FHIRPathTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FHIRSubstanceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FHIRSubstanceStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FHIRTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FHIRTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FHIRVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FHIRVersionEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FilterOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FilterOperatorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FinancialResourceStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FinancialResourceStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Flag'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FlagStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FlagStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('FormularyItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FormularyItemStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FormularyItemStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('GenomicStudy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GenomicStudy.Analysis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GenomicStudy.Device'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GenomicStudy.Input'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GenomicStudy.Output'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GenomicStudy.Performer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GenomicStudyStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GenomicStudyStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Goal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Goal.Target'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GoalLifecycleStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GoalLifecycleStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GraphCompartmentRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GraphCompartmentRuleEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GraphCompartmentUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GraphCompartmentUseEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('GraphDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GraphDefinition.Compartment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GraphDefinition.Link'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GraphDefinition.Node'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Group'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Group.Characteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Group.Member'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GroupMembershipBasis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GroupMembershipBasisEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GroupType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GroupTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('GuidanceResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GuidanceResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GuidanceResponseStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GuidePageGeneration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GuidePageGenerationEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('HealthcareService'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HealthcareService.Eligibility'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HTTPVerb'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HTTPVerbEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HumanName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('id'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('id-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Identifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IdentifierUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IdentifierUseEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IdentityAssuranceLevel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IdentityAssuranceLevelEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ImagingSelection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingSelection.ImageRegion2D'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingSelection.ImageRegion3D'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingSelection.Instance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingSelection.Performer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingSelectionDGraphicType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingSelectionDGraphicTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingSelectionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingSelectionStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ImagingStudy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingStudy.Instance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingStudy.Performer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingStudy.Series'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingStudyStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingStudyStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Immunization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Immunization.Performer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Immunization.ProgramEligibility'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Immunization.ProtocolApplied'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Immunization.Reaction'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ImmunizationEvaluation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationEvaluationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationEvaluationStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ImmunizationRecommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationRecommendation.DateCriterion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationRecommendation.Recommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ImplementationGuide'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Definition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.DependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Global'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Grouping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Manifest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Page'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Page1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Resource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Resource1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Template'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Ingredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Ingredient.Manufacturer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Ingredient.ReferenceStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Ingredient.Strength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Ingredient.Substance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IngredientManufacturerRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IngredientManufacturerRoleEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('instant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('instant-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('InsurancePlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InsurancePlan.Benefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InsurancePlan.Benefit1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InsurancePlan.Cost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InsurancePlan.Coverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InsurancePlan.GeneralCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InsurancePlan.Limit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InsurancePlan.Plan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InsurancePlan.SpecificCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('integer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('integer-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('integer64'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('integer64-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InteractionTrigger'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InteractionTriggerEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InventoryCountType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InventoryCountTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('InventoryItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InventoryItem.Association'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InventoryItem.Characteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InventoryItem.Description'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InventoryItem.Instance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InventoryItem.Name'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InventoryItem.ResponsibleOrganization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InventoryItemStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InventoryItemStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('InventoryReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InventoryReport.InventoryListing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InventoryReport.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InventoryReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InventoryReportStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Invoice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Invoice.LineItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Invoice.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InvoiceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InvoiceStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IssueSeverityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IssueType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IssueTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('JurisdictionValueSet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('JurisdictionValueSetEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Kind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('KindEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Library'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Linkage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Linkage.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LinkageType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LinkageTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LinkRelationTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LinkRelationTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LinkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LinkTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('List'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('List.Entry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ListModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ListStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ListStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Location'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Location.Position'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LocationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LocationModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LocationStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ManufacturedItemDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ManufacturedItemDefinition.Component'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ManufacturedItemDefinition.Constituent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ManufacturedItemDefinition.Property'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('markdown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('markdown-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MarketingStatus'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Measure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Measure.Component'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Measure.Group'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Measure.Population'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Measure.Stratifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Measure.SupplementalData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Measure.Term'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MeasureReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReport.Component'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReport.Group'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReport.Population'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReport.Population1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReport.Stratifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReport.Stratum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReportStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReportType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReportTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Medication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Medication.Batch'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Medication.Ingredient'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationAdministration.Dosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationAdministration.Performer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationAdministrationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationAdministrationStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationDispense.Performer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationDispense.Substitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationDispenseStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationDispenseStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.Cost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.Definitional'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.Dosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.DosingGuideline'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.DrugCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.EnvironmentalSetting'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.IndicationGuideline'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.Ingredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.MaxDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.MedicineClassification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.MonitoringProgram'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.Monograph'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.Packaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.PatientCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.Regulatory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.RelatedMedicationKnowledge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.StorageGuideline'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.Substitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledgeStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledgeStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationRequest.DispenseRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationRequest.InitialFill'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationRequest.Substitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationRequestIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationRequestIntentEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationrequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationrequestStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationStatement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationStatement.Adherence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationStatementStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationStatementStatusCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicinalProductDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductDefinition.Characteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductDefinition.Contact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductDefinition.CrossReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductDefinition.Name'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductDefinition.Operation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductDefinition.Part'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductDefinition.Usage'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MessageDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageDefinition.AllowedResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageDefinition.Focus'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MessageHeader'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageHeader.Destination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageHeader.Response'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageHeader.Source'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageheaderResponseRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageheaderResponseRequestEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageSignificanceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageSignificanceCategoryEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Meta'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MetadataResource'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MolecularSequence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MolecularSequence.Edit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MolecularSequence.Relative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MolecularSequence.StartingSequence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MonetaryComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Money'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NameUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NameUseEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('NamingSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NamingSystem.UniqueId'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NamingSystemIdentifierType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NamingSystemIdentifierTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NamingSystemType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NamingSystemTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Narrative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NarrativeStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NarrativeStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NoteType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NoteTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('NutritionIntake'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionIntake.ConsumedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionIntake.IngredientLabel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionIntake.Performer'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('NutritionOrder'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.Additive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.Administration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.EnteralFormula'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.Nutrient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.OralDiet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.Schedule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.Schedule1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.Schedule2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.Supplement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.Texture'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('NutritionProduct'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionProduct.Characteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionProduct.Ingredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionProduct.Instance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionProduct.Nutrient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionProductStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionProductStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Observation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Observation.Component'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Observation.ReferenceRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Observation.TriggeredBy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationDataTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ObservationDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationDefinition.Component'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationDefinition.QualifiedValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationRangeCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationRangeCategoryEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('oid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('oid-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('OperationDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationDefinition.Binding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationDefinition.Overload'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationDefinition.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationDefinition.ReferencedFrom'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationKindEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('OperationOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationOutcome.Issue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationOutcomeCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationOutcomeCodesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationParameterScope'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationParameterScopeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationParameterUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationParameterUseEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Organization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Organization.Qualification'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('OrganizationAffiliation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OrientationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OrientationTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('PackagedProductDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PackagedProductDefinition.ContainedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PackagedProductDefinition.LegalStatusOfSupply'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PackagedProductDefinition.Packaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PackagedProductDefinition.Property'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ParameterDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Parameters'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Parameters.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ParticipantResourceTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ParticipantResourceTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ParticipationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ParticipationStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Patient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Patient.Communication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Patient.Contact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Patient.Link'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('PaymentNotice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PaymentOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PaymentOutcomeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('PaymentReconciliation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PaymentReconciliation.Allocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PaymentReconciliation.ProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Period'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Permission'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Permission.Activity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Permission.Data'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Permission.Justification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Permission.Resource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Permission.Rule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PermissionRuleCombining'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PermissionRuleCombiningEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PermissionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PermissionStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Person'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Person.Communication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Person.Link'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('PlanDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.Action'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.Actor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.Condition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.DynamicValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.Goal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.Input'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.Option'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.Output'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.RelatedAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.Target'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('positiveInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('positiveInt-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Practitioner'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Practitioner.Communication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Practitioner.Qualification'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('PractitionerRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PrimitiveType'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Procedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Procedure.FocalDevice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Procedure.Performer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProductShelfLife'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PropertyRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PropertyRepresentationEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PropertyType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PropertyTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Provenance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Provenance.Agent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Provenance.Entity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProvenanceEntityRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProvenanceEntityRoleEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PublicationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PublicationStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Quantity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuantityComparator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuantityComparatorEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Questionnaire'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Questionnaire.AnswerOption'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Questionnaire.EnableWhen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Questionnaire.Initial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Questionnaire.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireAnswerConstraint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireAnswerConstraintEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireItemDisabledDisplay'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireItemDisabledDisplayEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireItemOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireItemOperatorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireItemType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireItemTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('QuestionnaireResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireResponse.Answer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireResponse.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireResponseStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Range'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Ratio'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RatioRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Reference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ReferenceHandlingPolicy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ReferenceHandlingPolicyEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ReferenceVersionRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ReferenceVersionRulesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('RegulatedAuthorization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RegulatedAuthorization.Case'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RelatedArtifact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RelatedArtifactType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RelatedArtifactTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RelatedArtifactTypeExpanded'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RelatedArtifactTypeExpandedEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('RelatedPerson'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RelatedPerson.Communication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RemittanceOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RemittanceOutcomeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ReportRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ReportRelationshipTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestIntentEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('RequestOrchestration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestOrchestration.Action'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestOrchestration.Condition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestOrchestration.DynamicValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestOrchestration.Input'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestOrchestration.Output'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestOrchestration.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestOrchestration.RelatedAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestPriorityEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestResourceTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestResourceTypesEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Requirements'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Requirements.Statement'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ResearchStudy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResearchStudy.AssociatedParty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResearchStudy.ComparisonGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResearchStudy.Label'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResearchStudy.Objective'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResearchStudy.OutcomeMeasure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResearchStudy.ProgressStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResearchStudy.Recruitment'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ResearchSubject'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResearchSubject.Progress'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Resource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceVersionPolicy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceVersionPolicyEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResponseType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResponseTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RestfulCapabilityMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RestfulCapabilityModeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('RiskAssessment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RiskAssessment.Prediction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SampledData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SampledDataDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SampledDataDataType-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Schedule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchComparator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchComparatorEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchEntryMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchEntryModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchModifierCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchModifierCodeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SearchParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchParameter.Component'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchParamType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchParamTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchProcessingModeType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchProcessingModeTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SequenceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SequenceTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ServiceRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ServiceRequest.OrderDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ServiceRequest.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ServiceRequest.PatientInstruction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Signature'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SlicingRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SlicingRulesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Slot'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SlotStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SlotStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SortDirection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SortDirectionEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SPDXLicense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SPDXLicenseEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Specimen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Specimen.Collection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Specimen.Container'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Specimen.Feature'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Specimen.Processing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenCombined'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenCombinedEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenContainedPreference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenContainedPreferenceEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SpecimenDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenDefinition.Additive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenDefinition.Container'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenDefinition.Handling'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenDefinition.TypeTested'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StrandType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StrandTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('string'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('string-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('StructureDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinition.Context'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinition.Differential'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinition.Mapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinition.Snapshot'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinitionKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinitionKindEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('StructureMap'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMap.Const'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMap.Dependent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMap.Group'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMap.Input'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMap.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMap.Rule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMap.Source'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMap.Structure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMap.Target'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapGroupTypeMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapGroupTypeModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapInputMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapInputModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapModelMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapModelModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapSourceListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapSourceListModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapTargetListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapTargetListModeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapTransform'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapTransformEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubmitDataUpdateType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubmitDataUpdateTypeEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Subscription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Subscription.FilterBy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Subscription.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionNotificationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionNotificationTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionPayloadContent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionPayloadContentEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SubscriptionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionStatus.NotificationEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionStatusCodesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SubscriptionTopic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionTopic.CanFilterBy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionTopic.EventTrigger'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionTopic.NotificationShape'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionTopic.QueryCriteria'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionTopic.ResourceTrigger'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Substance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Substance.Ingredient'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SubstanceDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceDefinition.Characterization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceDefinition.Code'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceDefinition.Moiety'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceDefinition.MolecularWeight'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceDefinition.Name'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceDefinition.Official'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceDefinition.Property'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceDefinition.Relationship'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceDefinition.Representation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceDefinition.SourceMaterial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceDefinition.Structure'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SubstanceNucleicAcid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceNucleicAcid.Linkage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceNucleicAcid.Subunit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceNucleicAcid.Sugar'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SubstancePolymer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstancePolymer.DegreeOfPolymerisation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstancePolymer.MonomerSet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstancePolymer.Repeat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstancePolymer.RepeatUnit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstancePolymer.StartingMaterial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstancePolymer.StructuralRepresentation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SubstanceProtein'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceProtein.Subunit'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SubstanceReferenceInformation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceReferenceInformation.Gene'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceReferenceInformation.GeneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceReferenceInformation.Target'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SubstanceSourceMaterial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSourceMaterial.Author'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSourceMaterial.FractionDescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSourceMaterial.Hybrid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSourceMaterial.Organism'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSourceMaterial.OrganismGeneral'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSourceMaterial.PartDescription'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SupplyDelivery'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyDelivery.SuppliedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyDeliveryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyDeliveryStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SupplyRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyRequest.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyRequestStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SystemRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SystemRestfulInteractionEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Task'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Task.Input'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Task.Output'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Task.Performer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Task.Restriction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TaskIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TaskIntentEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TaskStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TaskStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.Closure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.CodeSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.Expansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.Filter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.Implementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.Software'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.Translation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.ValidateCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.Version'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('TestPlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestPlan.Assertion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestPlan.Dependency'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestPlan.Dependency1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestPlan.Script'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestPlan.TestCase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestPlan.TestData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestPlan.TestRun'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('TestReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Action'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Action1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Action2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Assert'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Operation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Requirement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Setup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Teardown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Test'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReportActionResult'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReportActionResultEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReportParticipantType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReportParticipantTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReportResult'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReportResultEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReportStatusEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('TestScript'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Action'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Action1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Action2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Assert'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Capability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Destination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Fixture'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Link'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Metadata'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Operation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Origin'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.RequestHeader'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Requirement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Scope'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Setup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Teardown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Test'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Variable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScriptRequestMethodCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScriptRequestMethodCodeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('time'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('time-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Timing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Timing.Repeat'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Transport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Transport.Input'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Transport.Output'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Transport.Restriction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TransportIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TransportIntentEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TransportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TransportStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TriggerDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TriggeredBytype'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TriggeredBytypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TriggerType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TriggerTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TypeDerivationRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TypeDerivationRuleEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TypeRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TypeRestfulInteractionEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('UDIEntryType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('UDIEntryTypeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('UnitsOfTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('UnitsOfTimeEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('unsignedInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('unsignedInt-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('uri'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('uri-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('url'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('url-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('UsageContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Use'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('UseEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('uuid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('uuid-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ValueSet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Compose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Concept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Contains'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Designation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Expansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Filter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Include'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Property'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Property1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Scope'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.SubProperty'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('VerificationResult'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VerificationResult.Attestation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VerificationResult.PrimarySource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VerificationResult.Validator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VerificationResultStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VerificationResultStatusEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VersionIndependentResourceTypesAll'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VersionIndependentResourceTypesAllEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VirtualServiceDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VisionBase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VisionBaseEnum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VisionEyes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VisionEyesEnum'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('VisionPrescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VisionPrescription.LensSpecification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VisionPrescription.Prism'));
    }

    public function testIsContainableResourceWithInstance()
    {
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAccount;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountBalance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountDiagnosis;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountProcedure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountRelatedAccount;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAccountStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAccountStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionCardinalityBehavior;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionCardinalityBehaviorEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionConditionKind;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionConditionKindEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionGroupingBehavior;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionGroupingBehaviorEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionParticipantType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionParticipantTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionPrecheckBehavior;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionPrecheckBehaviorEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionRelationshipType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionRelationshipTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionRequiredBehavior;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionRequiredBehaviorEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionSelectionBehavior;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionSelectionBehaviorEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRActivityDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRActorDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAddress;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAddressType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAddressTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAddressUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAddressUseEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdministrableProductDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionProperty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionRouteOfAdministration;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionTargetSpecies;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionWithdrawalPeriod;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAdministrativeGender;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAdministrativeGenderEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdverseEvent;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventContributingFactor;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventMitigatingAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventPreventiveAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSupportingInfo;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAdverseEventActuality;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAdverseEventActualityEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAdverseEventStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAdverseEventStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRAge;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAgeUnits;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAgeUnitsEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAggregationMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAggregationModeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCategory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCriticality;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAllergyIntoleranceSeverity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAllResourceTypes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAllResourceTypesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAnnotation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointment;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentMonthlyTemplate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentRecurrenceTemplate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentWeeklyTemplate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentYearlyTemplate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAppointmentResponseStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAppointmentResponseStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAppointmentStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAppointmentStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRArtifactAssessment;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRArtifactAssessment\FHIRArtifactAssessmentContent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRArtifactAssessmentDisposition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRArtifactAssessmentDispositionEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRArtifactAssessmentInformationType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRArtifactAssessmentInformationTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRArtifactAssessmentWorkflowStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRArtifactAssessmentWorkflowStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAssertionDirectionType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAssertionDirectionTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAssertionManualCompletionType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAssertionManualCompletionTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAssertionOperatorType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAssertionOperatorTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAssertionResponseTypes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAssertionResponseTypesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAttachment;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAuditEvent;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventOutcome;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAuditEventAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAuditEventActionEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAuditEventSeverity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAuditEventSeverityEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityAvailableTime;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityNotAvailableTime;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBase64Binary;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase64BinaryPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBasic;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRBinary;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBindingStrength;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRBindingStrengthEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProperty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProductDispense;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProductDispense\FHIRBiologicallyDerivedProductDispensePerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBiologicallyDerivedProductDispenseCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRBiologicallyDerivedProductDispenseCodesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBodyStructure;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureBodyLandmarkOrientation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureDistanceFromLandmark;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureIncludedStructure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBoolean;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBooleanPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRBundle;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBundleType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRBundleTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCanonical;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCanonicalPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCapabilityStatement;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCapabilityStatementKind;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCapabilityStatementKindEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCarePlan;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCarePlanIntent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCarePlanIntentEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCareTeam;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCareTeamStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCareTeamStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCharacteristicCombination;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCharacteristicCombinationEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRChargeItem;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRChargeItemDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRChargeItemStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRChargeItemStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCitation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAbstract;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationCitedArtifact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributionInstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributorship;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationEntry;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPart;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublicationForm;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublishedIn;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationTitle;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationVersion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWebLocation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaim;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimBodySite;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimEvent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRClaimProcessingCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRClaimProcessingCodesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaimResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseBodySite;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseEvent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseReviewOutcome;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalImpression;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalUseDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionContraindication;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionIndication;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteractant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteraction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionOtherTherapy;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionUndesirableEffect;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionWarning;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRClinicalUseDefinitionType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRClinicalUseDefinitionTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableConcept;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableReference;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCodeSearchSupport;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCodeSearchSupportEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCodeSystem;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCodeSystemContentMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCodeSystemContentModeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCodeSystemHierarchyMeaning;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRCoding;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRColorCodesOrRGB;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRStringPrimitive\FHIRColorCodesOrRGBEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCommonLanguages;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCommonLanguagesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunication;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCompartmentDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCompartmentType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCompartmentTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRComposition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCompositionStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCompositionStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConceptMap;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapAdditionalAttribute;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConceptMapAttributeType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConceptMapAttributeTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConceptMapGroupUnmappedMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConceptMapPropertyType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConceptMapPropertyTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConceptMapRelationship;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConceptMapRelationshipEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConcreteFHIRTypes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConcreteFHIRTypesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCondition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConditionalDeleteStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConditionalDeleteStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConditionalReadStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConditionalReadStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConditionDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionMedication;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionObservation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPlan;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPrecondition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionQuestionnaire;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConditionPreconditionType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConditionPreconditionTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConditionQuestionnairePurpose;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConditionQuestionnairePurposeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConformanceExpectation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConformanceExpectationEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRConsent;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicyBasis;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConsentDataMeaning;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConsentDataMeaningEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConsentProvisionType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConsentProvisionTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConsentState;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConsentStateEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConstraintSeverity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConstraintSeverityEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRContactDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRContactPoint;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContactPointSystem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContactPointSystemEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContactPointUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContactPointUseEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRContract;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContractResourcePublicationStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContractResourcePublicationStatusCodesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContractResourceStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContractResourceStatusCodesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRContributor;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContributorType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContributorTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRCount;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverage;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoveragePaymentBy;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestEvent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseEvent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCriteriaNotExistsBehavior;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCriteriaNotExistsBehaviorEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementCodeFilter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementDateFilter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementSort;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementValueFilter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRDatePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDateTime;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRDateTimePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDecimal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRDecimalPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDefinitionResourceTypes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDefinitionResourceTypesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDetectedIssue;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDetectedIssueSeverity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDetectedIssueSeverityEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDetectedIssueStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDetectedIssueStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDevice;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceConformsTo;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceName;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceAssociation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceAssociation\FHIRDeviceAssociationOperation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceCorrectiveActionScope;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceCorrectiveActionScopeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionChargeItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionClassification;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionConformsTo;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCorrectiveAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDistributor;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionGuideline;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionHasPart;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionLink;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMarketDistribution;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionPackaging;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionRegulatoryIdentifier;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionVersion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceDefinitionRegulatoryIdentifierType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceDefinitionRegulatoryIdentifierTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDispense;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDispense\FHIRDeviceDispensePerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceDispenseStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceDispenseStatusCodesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceMetric;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationState;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceMetricCategory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceMetricCategoryEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceMetricOperationalStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceNameType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceNameTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceProductionIdentifierInUDI;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceProductionIdentifierInUDIEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceUsage;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceUsage\FHIRDeviceUsageAdherence;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceUsageStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceUsageStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportSupportingInfo;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDiagnosticReportStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDiagnosticReportStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDiscriminatorType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDiscriminatorTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDistance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDocumentMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDocumentModeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDocumentReference;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceAttester;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceProfile;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDocumentReferenceStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDocumentReferenceStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage\FHIRDosageDoseAndRate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDuration;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionAdditional;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBase;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBinding;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionConstraint;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionDiscriminator;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionExample;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionMapping;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionSlicing;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREligibilityOutcome;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREligibilityOutcomeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREligibilityRequestPurpose;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREligibilityRequestPurposeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREligibilityResponsePurpose;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREligibilityResponsePurposeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREnableWhenBehavior;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREnableWhenBehaviorEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounter;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAdmission;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterReason;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounterHistory;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounterHistory\FHIREncounterHistoryLocation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREncounterLocationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREncounterLocationStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREncounterStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREncounterStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREndpoint;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREndpoint\FHIREndpointPayload;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREndpointStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREndpointStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREnrollmentOutcome;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREnrollmentOutcomeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareReason;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREpisodeOfCareStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREpisodeOfCareStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREventCapabilityMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREventCapabilityModeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREventDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREventResourceTypes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREventResourceTypesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREventStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREventStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREventTiming;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREventTimingEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidence;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceAttributeEstimate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceCertainty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceModelCharacteristic;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceSampleSize;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceStatistic;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariable;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariableDefinition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceReport;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportCharacteristic;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportRelatesTo;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSection;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSubject;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportTarget;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceVariable;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCategory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByCombination;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByTypeAndValue;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableTimeFromEvent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREvidenceVariableHandling;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREvidenceVariableHandlingEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRExampleScenario;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRExampleScenarioActorType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRExampleScenarioActorTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitEvent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitReviewOutcome;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRExplanationOfBenefitStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRExpression;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRExtendedContactDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRExtension;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRExtensionContextType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRExtensionContextTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFamilyHistoryStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFamilyHistoryStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryProcedure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRDeviceStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRDeviceStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRPathTypes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRPathTypesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRSubstanceStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRSubstanceStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRTypes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRTypesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRVersion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRVersionEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFilterOperator;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFilterOperatorEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFinancialResourceStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFlag;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFlagStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFlagStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFormularyItem;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFormularyItemStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFormularyItemStatusCodesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGenomicStudy;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyAnalysis;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyDevice;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyInput;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyOutput;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyPerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGenomicStudyStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGenomicStudyStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGoal;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGoalLifecycleStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGoalLifecycleStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGraphCompartmentRule;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGraphCompartmentRuleEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGraphCompartmentUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGraphCompartmentUseEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRGraphDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionNode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGroup;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGroupMembershipBasis;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGroupMembershipBasisEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGroupType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGroupTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGuidanceResponseStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGuidanceResponseStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGuidePageGeneration;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGuidePageGenerationEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRHealthcareService;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRHTTPVerb;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRHTTPVerbEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRHumanName;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRId;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRIdPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRIdentifier;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIdentifierUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIdentifierUseEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIdentityAssuranceLevel;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIdentityAssuranceLevelEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingSelection;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion2D;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion3D;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionInstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionPerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImagingSelectionDGraphicType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImagingSelectionDGraphicTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImagingSelectionStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImagingSelectionStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingStudy;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImagingStudyStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImagingStudyStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunization;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProgramEligibility;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImmunizationEvaluationStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImmunizationEvaluationStatusCodesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImmunizationStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImmunizationStatusCodesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRImplementationGuide;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRIngredient;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientManufacturer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientReferenceStrength;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientStrength;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientSubstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIngredientManufacturerRole;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIngredientManufacturerRoleEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInstant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRInstantPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInsurancePlan;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInteger;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRIntegerPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInteger64;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRInteger64Primitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInteractionTrigger;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInteractionTriggerEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInventoryCountType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInventoryCountTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryItem;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemAssociation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemCharacteristic;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemDescription;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemInstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemName;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemResponsibleOrganization;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInventoryItemStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInventoryItemStatusCodesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryReport;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportInventoryListing;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInventoryReportStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInventoryReportStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInvoice;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInvoiceStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInvoiceStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIssueSeverity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIssueSeverityEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIssueType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIssueTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRJurisdictionValueSet;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRJurisdictionValueSetEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRKind;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRKindEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRLibrary;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLinkage;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLinkageType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLinkageTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLinkRelationTypes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLinkRelationTypesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLinkType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLinkTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRList;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRListMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRListModeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRListStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRListStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLocation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLocationMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLocationModeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLocationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLocationStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRManufacturedItemDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionComponent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionConstituent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionProperty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMarkdown;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRMarkdownPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRMarketingStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMeasure;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureTerm;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMeasureReport;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMeasureReportStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMeasureReportStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMeasureReportType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMeasureReportTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedication;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationAdministrationStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationAdministrationStatusCodesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationDispense;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationDispenseStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationDispenseStatusCodesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMedicationKnowledge;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDefinitional;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosingGuideline;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeEnvironmentalSetting;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIndicationGuideline;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristic;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeStorageGuideline;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationKnowledgeStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationKnowledgeStatusCodesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationRequestIntent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationRequestIntentEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationrequestStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationrequestStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationStatement;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementAdherence;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationStatementStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationStatementStatusCodesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationStatusCodesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicinalProductDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCharacteristic;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCrossReference;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionName;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionOperation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionPart;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionUsage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMessageDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMessageHeader;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMessageheaderResponseRequest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMessageheaderResponseRequestEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMessageSignificanceCategory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMessageSignificanceCategoryEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRMeta;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMolecularSequence;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceEdit;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRelative;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStartingSequence;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRMonetaryComponent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRMoney;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNameUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNameUseEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRNamingSystem;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNamingSystemIdentifierType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNamingSystemType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNamingSystemTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRNarrative;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNarrativeStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNarrativeStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNoteType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNoteTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionIntake;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeConsumedItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeIngredientLabel;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakePerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionOrder;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdditive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule2;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionProduct;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductCharacteristic;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductIngredient;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductInstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductNutrient;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNutritionProductStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNutritionProductStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRObservation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationTriggeredBy;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRObservationDataType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRObservationDataTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRObservationDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionComponent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedValue;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRObservationRangeCategory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRObservationRangeCategoryEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRObservationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRObservationStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROid;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIROidPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIROperationDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROperationKind;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROperationKindEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIROperationOutcome;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROperationOutcomeCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROperationOutcomeCodesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROperationParameterScope;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROperationParameterScopeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROperationParameterUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROperationParameterUseEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganization;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationQualification;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROrientationType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROrientationTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPackagedProductDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionContainedItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionLegalStatusOfSupply;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionPackaging;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionProperty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRParameterDefinition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRParameters;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRParticipantResourceTypes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRParticipantResourceTypesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRParticipationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRParticipationStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPatient;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentNotice;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPaymentOutcome;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPaymentOutcomeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationAllocation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRPeriod;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPermission;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionActivity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionData;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionJustification;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionRule;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPermissionRuleCombining;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPermissionRuleCombiningEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPermissionStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPermissionStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPerson;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonCommunication;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRPlanDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionActor;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionInput;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOption;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOutput;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPositiveInt;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRPositiveIntPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitioner;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerCommunication;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitionerRole;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRPrimitiveType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProcedure;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRProductShelfLife;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPropertyRepresentation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPropertyRepresentationEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPropertyType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPropertyTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProvenance;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRProvenanceEntityRole;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRProvenanceEntityRoleEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPublicationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPublicationStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuantityComparator;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuantityComparatorEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRQuestionnaire;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireAnswerConstraint;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireAnswerConstraintEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireItemDisabledDisplay;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireItemDisabledDisplayEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireItemOperator;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireItemOperatorEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireItemType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireItemTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireResponseStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRRange;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRRatio;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRRatioRange;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRReference;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRReferenceHandlingPolicy;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRReferenceHandlingPolicyEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRReferenceVersionRules;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRReferenceVersionRulesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRegulatedAuthorization;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRegulatedAuthorization\FHIRRegulatedAuthorizationCase;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRRelatedArtifact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRelatedArtifactType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRelatedArtifactTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRelatedArtifactTypeExpanded;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRelatedArtifactTypeExpandedEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRelatedPerson;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRemittanceOutcome;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRemittanceOutcomeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRReportRelationshipType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRReportRelationshipTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRequestIntent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRequestIntentEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRequestOrchestration;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationCondition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationDynamicValue;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationInput;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationOutput;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationRelatedAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRequestPriority;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRequestPriorityEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRequestResourceTypes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRequestResourceTypesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRequestStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRequestStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRRequirements;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequirements\FHIRRequirementsStatement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchStudy;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyAssociatedParty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyComparisonGroup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyLabel;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyOutcomeMeasure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyProgressStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyRecruitment;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchSubject;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchSubject\FHIRResearchSubjectProgress;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRResourceContainer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRResourceType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRResourceTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRResourceVersionPolicy;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRResourceVersionPolicyEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRResponseType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRResponseTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRestfulCapabilityMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRestfulCapabilityModeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRiskAssessment;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRSampledData;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSampledDataDataType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRSampledDataDataTypePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSchedule;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchComparator;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchComparatorEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchEntryMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchEntryModeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchModifierCode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchModifierCodeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSearchParameter;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchParamType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchParamTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchProcessingModeType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchProcessingModeTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSequenceType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSequenceTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRServiceRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestOrderDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestPatientInstruction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRSignature;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSlicingRules;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSlicingRulesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSlot;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSlotStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSlotStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSortDirection;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSortDirectionEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSPDXLicense;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSPDXLicenseEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSpecimen;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenFeature;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSpecimenCombined;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSpecimenCombinedEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSpecimenContainedPreference;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSpecimenContainedPreferenceEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRSpecimenDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSpecimenStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSpecimenStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStrandType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStrandTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRString;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRStringPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureDefinitionKind;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureDefinitionKindEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureMap;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapConst;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapGroupTypeMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapInputMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapInputModeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapModelMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapModelModeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapSourceListMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapSourceListModeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapTargetListMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapTargetListModeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapTransform;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapTransformEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSubmitDataUpdateType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSubmitDataUpdateTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscription;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionFilterBy;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSubscriptionNotificationType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSubscriptionNotificationTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSubscriptionPayloadContent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSubscriptionPayloadContentEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscriptionStatus;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionStatus\FHIRSubscriptionStatusNotificationEvent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSubscriptionStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSubscriptionStatusCodesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSubscriptionTopic;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicCanFilterBy;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicEventTrigger;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicNotificationShape;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicQueryCriteria;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicResourceTrigger;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstance;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCharacterization;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMoiety;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMolecularWeight;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionName;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionOfficial;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionProperty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRelationship;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRepresentation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionSourceMaterial;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionStructure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceNucleicAcid;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidLinkage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSubunit;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSugar;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstancePolymer;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerDegreeOfPolymerisation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerMonomerSet;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeat;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeatUnit;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStartingMaterial;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStructuralRepresentation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceProtein;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceProtein\FHIRSubstanceProteinSubunit;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceReferenceInformation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGene;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGeneElement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationTarget;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceSourceMaterial;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialAuthor;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialFractionDescription;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialHybrid;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganism;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganismGeneral;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialPartDescription;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSupplyDeliveryStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSupplyDeliveryStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSupplyRequestStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSupplyRequestStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSystemRestfulInteraction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSystemRestfulInteractionEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTask;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskPerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTaskIntent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTaskIntentEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTaskStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTaskStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTerminologyCapabilities;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestPlan;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanAssertion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanScript;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestCase;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestData;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestRun;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTestReport;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportRequirement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestReportActionResult;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestReportActionResultEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestReportParticipantType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestReportParticipantTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestReportResult;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestReportResultEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestReportStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestReportStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestScript;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequirement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptScope;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestScriptRequestMethodCode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTime;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRTimePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming\FHIRTimingRepeat;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTransport;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportInput;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportOutput;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportRestriction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTransportIntent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTransportIntentEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTransportStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTransportStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRTriggerDefinition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTriggeredBytype;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTriggeredBytypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTriggerType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTriggerTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTypeDerivationRule;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTypeDerivationRuleEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTypeRestfulInteraction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTypeRestfulInteractionEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUDIEntryType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRUDIEntryTypeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUnitsOfTime;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRUnitsOfTimeEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUnsignedInt;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRUnsignedIntPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUri;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRUriPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUrl;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRUrlPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRUsageContext;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRUseEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUuid;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRUuidPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRValueSet;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetScope;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetSubProperty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVerificationResult;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRVerificationResultStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRVerificationResultStatusEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRVersionIndependentResourceTypesAll;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRVersionIndependentResourceTypesAllEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRVirtualServiceDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRVisionBase;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRVisionBaseEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRVisionEyes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRVisionEyesEnum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVisionPrescription;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
    }

    public function testGetTypeClass()
    {
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase', PHPFHIRTypeMap::getTypeClass('Base'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase64BinaryPrimitive', PHPFHIRTypeMap::getTypeClass('base64Binary-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement', PHPFHIRTypeMap::getTypeClass('Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAccountStatus', PHPFHIRTypeMap::getTypeClass('AccountStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionCardinalityBehavior', PHPFHIRTypeMap::getTypeClass('ActionCardinalityBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionConditionKind', PHPFHIRTypeMap::getTypeClass('ActionConditionKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionGroupingBehavior', PHPFHIRTypeMap::getTypeClass('ActionGroupingBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionParticipantType', PHPFHIRTypeMap::getTypeClass('ActionParticipantType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionPrecheckBehavior', PHPFHIRTypeMap::getTypeClass('ActionPrecheckBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionRelationshipType', PHPFHIRTypeMap::getTypeClass('ActionRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionRequiredBehavior', PHPFHIRTypeMap::getTypeClass('ActionRequiredBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRActionSelectionBehavior', PHPFHIRTypeMap::getTypeClass('ActionSelectionBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAddressType', PHPFHIRTypeMap::getTypeClass('AddressType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAddressUse', PHPFHIRTypeMap::getTypeClass('AddressUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAdministrativeGender', PHPFHIRTypeMap::getTypeClass('AdministrativeGender'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAdverseEventActuality', PHPFHIRTypeMap::getTypeClass('AdverseEventActuality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAdverseEventStatus', PHPFHIRTypeMap::getTypeClass('AdverseEventStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAgeUnits', PHPFHIRTypeMap::getTypeClass('AgeUnits'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAggregationMode', PHPFHIRTypeMap::getTypeClass('AggregationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCategory', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCriticality', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceCriticality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAllergyIntoleranceSeverity', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAllResourceTypes', PHPFHIRTypeMap::getTypeClass('AllResourceTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAppointmentResponseStatus', PHPFHIRTypeMap::getTypeClass('AppointmentResponseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAppointmentStatus', PHPFHIRTypeMap::getTypeClass('AppointmentStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRArtifactAssessmentDisposition', PHPFHIRTypeMap::getTypeClass('ArtifactAssessmentDisposition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRArtifactAssessmentInformationType', PHPFHIRTypeMap::getTypeClass('ArtifactAssessmentInformationType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRArtifactAssessmentWorkflowStatus', PHPFHIRTypeMap::getTypeClass('ArtifactAssessmentWorkflowStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAssertionDirectionType', PHPFHIRTypeMap::getTypeClass('AssertionDirectionType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAssertionManualCompletionType', PHPFHIRTypeMap::getTypeClass('AssertionManualCompletionType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAssertionOperatorType', PHPFHIRTypeMap::getTypeClass('AssertionOperatorType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAssertionResponseTypes', PHPFHIRTypeMap::getTypeClass('AssertionResponseTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAuditEventAction', PHPFHIRTypeMap::getTypeClass('AuditEventAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRAuditEventSeverity', PHPFHIRTypeMap::getTypeClass('AuditEventSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement', PHPFHIRTypeMap::getTypeClass('BackboneElement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountBalance', PHPFHIRTypeMap::getTypeClass('Account.Balance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage', PHPFHIRTypeMap::getTypeClass('Account.Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountDiagnosis', PHPFHIRTypeMap::getTypeClass('Account.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor', PHPFHIRTypeMap::getTypeClass('Account.Guarantor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountProcedure', PHPFHIRTypeMap::getTypeClass('Account.Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountRelatedAccount', PHPFHIRTypeMap::getTypeClass('Account.RelatedAccount'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue', PHPFHIRTypeMap::getTypeClass('ActivityDefinition.DynamicValue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant', PHPFHIRTypeMap::getTypeClass('ActivityDefinition.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionProperty', PHPFHIRTypeMap::getTypeClass('AdministrableProductDefinition.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionRouteOfAdministration', PHPFHIRTypeMap::getTypeClass('AdministrableProductDefinition.RouteOfAdministration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionTargetSpecies', PHPFHIRTypeMap::getTypeClass('AdministrableProductDefinition.TargetSpecies'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionWithdrawalPeriod', PHPFHIRTypeMap::getTypeClass('AdministrableProductDefinition.WithdrawalPeriod'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality', PHPFHIRTypeMap::getTypeClass('AdverseEvent.Causality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventContributingFactor', PHPFHIRTypeMap::getTypeClass('AdverseEvent.ContributingFactor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventMitigatingAction', PHPFHIRTypeMap::getTypeClass('AdverseEvent.MitigatingAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventParticipant', PHPFHIRTypeMap::getTypeClass('AdverseEvent.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventPreventiveAction', PHPFHIRTypeMap::getTypeClass('AdverseEvent.PreventiveAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSupportingInfo', PHPFHIRTypeMap::getTypeClass('AdverseEvent.SupportingInfo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity', PHPFHIRTypeMap::getTypeClass('AdverseEvent.SuspectEntity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceParticipant', PHPFHIRTypeMap::getTypeClass('AllergyIntolerance.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction', PHPFHIRTypeMap::getTypeClass('AllergyIntolerance.Reaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentMonthlyTemplate', PHPFHIRTypeMap::getTypeClass('Appointment.MonthlyTemplate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant', PHPFHIRTypeMap::getTypeClass('Appointment.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentRecurrenceTemplate', PHPFHIRTypeMap::getTypeClass('Appointment.RecurrenceTemplate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentWeeklyTemplate', PHPFHIRTypeMap::getTypeClass('Appointment.WeeklyTemplate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentYearlyTemplate', PHPFHIRTypeMap::getTypeClass('Appointment.YearlyTemplate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRArtifactAssessment\FHIRArtifactAssessmentContent', PHPFHIRTypeMap::getTypeClass('ArtifactAssessment.Content'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent', PHPFHIRTypeMap::getTypeClass('AuditEvent.Agent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail', PHPFHIRTypeMap::getTypeClass('AuditEvent.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity', PHPFHIRTypeMap::getTypeClass('AuditEvent.Entity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventOutcome', PHPFHIRTypeMap::getTypeClass('AuditEvent.Outcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource', PHPFHIRTypeMap::getTypeClass('AuditEvent.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProductDispense\FHIRBiologicallyDerivedProductDispensePerformer', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProductDispense.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProduct.Collection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProperty', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProduct.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureBodyLandmarkOrientation', PHPFHIRTypeMap::getTypeClass('BodyStructure.BodyLandmarkOrientation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureDistanceFromLandmark', PHPFHIRTypeMap::getTypeClass('BodyStructure.DistanceFromLandmark'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureIncludedStructure', PHPFHIRTypeMap::getTypeClass('BodyStructure.IncludedStructure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry', PHPFHIRTypeMap::getTypeClass('Bundle.Entry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink', PHPFHIRTypeMap::getTypeClass('Bundle.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest', PHPFHIRTypeMap::getTypeClass('Bundle.Request'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse', PHPFHIRTypeMap::getTypeClass('Bundle.Response'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch', PHPFHIRTypeMap::getTypeClass('Bundle.Search'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Document'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Endpoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Implementation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Interaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Interaction1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Messaging'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Rest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.SearchParam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Security'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Software'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.SupportedMessage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity', PHPFHIRTypeMap::getTypeClass('CarePlan.Activity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant', PHPFHIRTypeMap::getTypeClass('CareTeam.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability', PHPFHIRTypeMap::getTypeClass('ChargeItemDefinition.Applicability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup', PHPFHIRTypeMap::getTypeClass('ChargeItemDefinition.PropertyGroup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer', PHPFHIRTypeMap::getTypeClass('ChargeItem.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAbstract', PHPFHIRTypeMap::getTypeClass('Citation.Abstract'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationCitedArtifact', PHPFHIRTypeMap::getTypeClass('Citation.CitedArtifact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification', PHPFHIRTypeMap::getTypeClass('Citation.Classification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification1', PHPFHIRTypeMap::getTypeClass('Citation.Classification1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributionInstance', PHPFHIRTypeMap::getTypeClass('Citation.ContributionInstance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributorship', PHPFHIRTypeMap::getTypeClass('Citation.Contributorship'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationEntry', PHPFHIRTypeMap::getTypeClass('Citation.Entry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPart', PHPFHIRTypeMap::getTypeClass('Citation.Part'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublicationForm', PHPFHIRTypeMap::getTypeClass('Citation.PublicationForm'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublishedIn', PHPFHIRTypeMap::getTypeClass('Citation.PublishedIn'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo', PHPFHIRTypeMap::getTypeClass('Citation.RelatesTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate', PHPFHIRTypeMap::getTypeClass('Citation.StatusDate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate1', PHPFHIRTypeMap::getTypeClass('Citation.StatusDate1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary', PHPFHIRTypeMap::getTypeClass('Citation.Summary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary1', PHPFHIRTypeMap::getTypeClass('Citation.Summary1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationTitle', PHPFHIRTypeMap::getTypeClass('Citation.Title'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationVersion', PHPFHIRTypeMap::getTypeClass('Citation.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWebLocation', PHPFHIRTypeMap::getTypeClass('Citation.WebLocation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem', PHPFHIRTypeMap::getTypeClass('ClaimResponse.AddItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Adjudication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseBodySite', PHPFHIRTypeMap::getTypeClass('ClaimResponse.BodySite'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Detail1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Error'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseEvent', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Payment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote', PHPFHIRTypeMap::getTypeClass('ClaimResponse.ProcessNote'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseReviewOutcome', PHPFHIRTypeMap::getTypeClass('ClaimResponse.ReviewOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail', PHPFHIRTypeMap::getTypeClass('ClaimResponse.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1', PHPFHIRTypeMap::getTypeClass('ClaimResponse.SubDetail1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Total'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident', PHPFHIRTypeMap::getTypeClass('Claim.Accident'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimBodySite', PHPFHIRTypeMap::getTypeClass('Claim.BodySite'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam', PHPFHIRTypeMap::getTypeClass('Claim.CareTeam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail', PHPFHIRTypeMap::getTypeClass('Claim.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis', PHPFHIRTypeMap::getTypeClass('Claim.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimEvent', PHPFHIRTypeMap::getTypeClass('Claim.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance', PHPFHIRTypeMap::getTypeClass('Claim.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem', PHPFHIRTypeMap::getTypeClass('Claim.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee', PHPFHIRTypeMap::getTypeClass('Claim.Payee'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure', PHPFHIRTypeMap::getTypeClass('Claim.Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated', PHPFHIRTypeMap::getTypeClass('Claim.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail', PHPFHIRTypeMap::getTypeClass('Claim.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo', PHPFHIRTypeMap::getTypeClass('Claim.SupportingInfo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding', PHPFHIRTypeMap::getTypeClass('ClinicalImpression.Finding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionContraindication', PHPFHIRTypeMap::getTypeClass('ClinicalUseDefinition.Contraindication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionIndication', PHPFHIRTypeMap::getTypeClass('ClinicalUseDefinition.Indication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteractant', PHPFHIRTypeMap::getTypeClass('ClinicalUseDefinition.Interactant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteraction', PHPFHIRTypeMap::getTypeClass('ClinicalUseDefinition.Interaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionOtherTherapy', PHPFHIRTypeMap::getTypeClass('ClinicalUseDefinition.OtherTherapy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionUndesirableEffect', PHPFHIRTypeMap::getTypeClass('ClinicalUseDefinition.UndesirableEffect'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionWarning', PHPFHIRTypeMap::getTypeClass('ClinicalUseDefinition.Warning'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept', PHPFHIRTypeMap::getTypeClass('CodeSystem.Concept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation', PHPFHIRTypeMap::getTypeClass('CodeSystem.Designation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter', PHPFHIRTypeMap::getTypeClass('CodeSystem.Filter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty', PHPFHIRTypeMap::getTypeClass('CodeSystem.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1', PHPFHIRTypeMap::getTypeClass('CodeSystem.Property1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload', PHPFHIRTypeMap::getTypeClass('CommunicationRequest.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload', PHPFHIRTypeMap::getTypeClass('Communication.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource', PHPFHIRTypeMap::getTypeClass('CompartmentDefinition.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester', PHPFHIRTypeMap::getTypeClass('Composition.Attester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent', PHPFHIRTypeMap::getTypeClass('Composition.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection', PHPFHIRTypeMap::getTypeClass('Composition.Section'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapAdditionalAttribute', PHPFHIRTypeMap::getTypeClass('ConceptMap.AdditionalAttribute'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn', PHPFHIRTypeMap::getTypeClass('ConceptMap.DependsOn'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement', PHPFHIRTypeMap::getTypeClass('ConceptMap.Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup', PHPFHIRTypeMap::getTypeClass('ConceptMap.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty', PHPFHIRTypeMap::getTypeClass('ConceptMap.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty1', PHPFHIRTypeMap::getTypeClass('ConceptMap.Property1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget', PHPFHIRTypeMap::getTypeClass('ConceptMap.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped', PHPFHIRTypeMap::getTypeClass('ConceptMap.Unmapped'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionMedication', PHPFHIRTypeMap::getTypeClass('ConditionDefinition.Medication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionObservation', PHPFHIRTypeMap::getTypeClass('ConditionDefinition.Observation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPlan', PHPFHIRTypeMap::getTypeClass('ConditionDefinition.Plan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPrecondition', PHPFHIRTypeMap::getTypeClass('ConditionDefinition.Precondition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionQuestionnaire', PHPFHIRTypeMap::getTypeClass('ConditionDefinition.Questionnaire'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionParticipant', PHPFHIRTypeMap::getTypeClass('Condition.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage', PHPFHIRTypeMap::getTypeClass('Condition.Stage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor', PHPFHIRTypeMap::getTypeClass('Consent.Actor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData', PHPFHIRTypeMap::getTypeClass('Consent.Data'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicyBasis', PHPFHIRTypeMap::getTypeClass('Consent.PolicyBasis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision', PHPFHIRTypeMap::getTypeClass('Consent.Provision'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification', PHPFHIRTypeMap::getTypeClass('Consent.Verification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction', PHPFHIRTypeMap::getTypeClass('Contract.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer', PHPFHIRTypeMap::getTypeClass('Contract.Answer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset', PHPFHIRTypeMap::getTypeClass('Contract.Asset'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition', PHPFHIRTypeMap::getTypeClass('Contract.ContentDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext', PHPFHIRTypeMap::getTypeClass('Contract.Context'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly', PHPFHIRTypeMap::getTypeClass('Contract.Friendly'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal', PHPFHIRTypeMap::getTypeClass('Contract.Legal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer', PHPFHIRTypeMap::getTypeClass('Contract.Offer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty', PHPFHIRTypeMap::getTypeClass('Contract.Party'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule', PHPFHIRTypeMap::getTypeClass('Contract.Rule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel', PHPFHIRTypeMap::getTypeClass('Contract.SecurityLabel'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner', PHPFHIRTypeMap::getTypeClass('Contract.Signer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject', PHPFHIRTypeMap::getTypeClass('Contract.Subject'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm', PHPFHIRTypeMap::getTypeClass('Contract.Term'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem', PHPFHIRTypeMap::getTypeClass('Contract.ValuedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityRequest.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestEvent', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityRequest.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityRequest.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityRequest.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityRequest.SupportingInfo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityResponse.Benefit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityResponse.Error'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseEvent', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityResponse.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityResponse.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityResponse.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass', PHPFHIRTypeMap::getTypeClass('Coverage.Class'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary', PHPFHIRTypeMap::getTypeClass('Coverage.CostToBeneficiary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException', PHPFHIRTypeMap::getTypeClass('Coverage.Exception'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoveragePaymentBy', PHPFHIRTypeMap::getTypeClass('Coverage.PaymentBy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence', PHPFHIRTypeMap::getTypeClass('DetectedIssue.Evidence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation', PHPFHIRTypeMap::getTypeClass('DetectedIssue.Mitigation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceAssociation\FHIRDeviceAssociationOperation', PHPFHIRTypeMap::getTypeClass('DeviceAssociation.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionChargeItem', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.ChargeItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionClassification', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.Classification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionConformsTo', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.ConformsTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCorrectiveAction', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.CorrectiveAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.DeviceName'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDistributor', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.Distributor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionGuideline', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.Guideline'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionHasPart', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.HasPart'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionLink', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMarketDistribution', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.MarketDistribution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.Material'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionPackaging', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.Packaging'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionRegulatoryIdentifier', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.RegulatoryIdentifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.UdiDeviceIdentifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionVersion', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDispense\FHIRDeviceDispensePerformer', PHPFHIRTypeMap::getTypeClass('DeviceDispense.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration', PHPFHIRTypeMap::getTypeClass('DeviceMetric.Calibration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter', PHPFHIRTypeMap::getTypeClass('DeviceRequest.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceUsage\FHIRDeviceUsageAdherence', PHPFHIRTypeMap::getTypeClass('DeviceUsage.Adherence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceConformsTo', PHPFHIRTypeMap::getTypeClass('Device.ConformsTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceName', PHPFHIRTypeMap::getTypeClass('Device.Name'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty', PHPFHIRTypeMap::getTypeClass('Device.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier', PHPFHIRTypeMap::getTypeClass('Device.UdiCarrier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion', PHPFHIRTypeMap::getTypeClass('Device.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia', PHPFHIRTypeMap::getTypeClass('DiagnosticReport.Media'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportSupportingInfo', PHPFHIRTypeMap::getTypeClass('DiagnosticReport.SupportingInfo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceAttester', PHPFHIRTypeMap::getTypeClass('DocumentReference.Attester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent', PHPFHIRTypeMap::getTypeClass('DocumentReference.Content'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceProfile', PHPFHIRTypeMap::getTypeClass('DocumentReference.Profile'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo', PHPFHIRTypeMap::getTypeClass('DocumentReference.RelatesTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounterHistory\FHIREncounterHistoryLocation', PHPFHIRTypeMap::getTypeClass('EncounterHistory.Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAdmission', PHPFHIRTypeMap::getTypeClass('Encounter.Admission'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis', PHPFHIRTypeMap::getTypeClass('Encounter.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation', PHPFHIRTypeMap::getTypeClass('Encounter.Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant', PHPFHIRTypeMap::getTypeClass('Encounter.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterReason', PHPFHIRTypeMap::getTypeClass('Encounter.Reason'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREndpoint\FHIREndpointPayload', PHPFHIRTypeMap::getTypeClass('Endpoint.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis', PHPFHIRTypeMap::getTypeClass('EpisodeOfCare.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareReason', PHPFHIRTypeMap::getTypeClass('EpisodeOfCare.Reason'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory', PHPFHIRTypeMap::getTypeClass('EpisodeOfCare.StatusHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportCharacteristic', PHPFHIRTypeMap::getTypeClass('EvidenceReport.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportRelatesTo', PHPFHIRTypeMap::getTypeClass('EvidenceReport.RelatesTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSection', PHPFHIRTypeMap::getTypeClass('EvidenceReport.Section'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSubject', PHPFHIRTypeMap::getTypeClass('EvidenceReport.Subject'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportTarget', PHPFHIRTypeMap::getTypeClass('EvidenceReport.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCategory', PHPFHIRTypeMap::getTypeClass('EvidenceVariable.Category'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic', PHPFHIRTypeMap::getTypeClass('EvidenceVariable.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByCombination', PHPFHIRTypeMap::getTypeClass('EvidenceVariable.DefinitionByCombination'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByTypeAndValue', PHPFHIRTypeMap::getTypeClass('EvidenceVariable.DefinitionByTypeAndValue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableTimeFromEvent', PHPFHIRTypeMap::getTypeClass('EvidenceVariable.TimeFromEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceAttributeEstimate', PHPFHIRTypeMap::getTypeClass('Evidence.AttributeEstimate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceCertainty', PHPFHIRTypeMap::getTypeClass('Evidence.Certainty'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceModelCharacteristic', PHPFHIRTypeMap::getTypeClass('Evidence.ModelCharacteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceSampleSize', PHPFHIRTypeMap::getTypeClass('Evidence.SampleSize'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceStatistic', PHPFHIRTypeMap::getTypeClass('Evidence.Statistic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariable', PHPFHIRTypeMap::getTypeClass('Evidence.Variable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariableDefinition', PHPFHIRTypeMap::getTypeClass('Evidence.VariableDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor', PHPFHIRTypeMap::getTypeClass('ExampleScenario.Actor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative', PHPFHIRTypeMap::getTypeClass('ExampleScenario.Alternative'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance', PHPFHIRTypeMap::getTypeClass('ExampleScenario.ContainedInstance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance', PHPFHIRTypeMap::getTypeClass('ExampleScenario.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation', PHPFHIRTypeMap::getTypeClass('ExampleScenario.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess', PHPFHIRTypeMap::getTypeClass('ExampleScenario.Process'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep', PHPFHIRTypeMap::getTypeClass('ExampleScenario.Step'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion', PHPFHIRTypeMap::getTypeClass('ExampleScenario.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Accident'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.AddItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Adjudication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.BenefitBalance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.BodySite'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite1', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.BodySite1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.CareTeam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Detail1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitEvent', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Financial'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Payee'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Payment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.ProcessNote'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitReviewOutcome', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.ReviewOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.SubDetail1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.SupportingInfo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Total'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition', PHPFHIRTypeMap::getTypeClass('FamilyMemberHistory.Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryParticipant', PHPFHIRTypeMap::getTypeClass('FamilyMemberHistory.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryProcedure', PHPFHIRTypeMap::getTypeClass('FamilyMemberHistory.Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyAnalysis', PHPFHIRTypeMap::getTypeClass('GenomicStudy.Analysis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyDevice', PHPFHIRTypeMap::getTypeClass('GenomicStudy.Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyInput', PHPFHIRTypeMap::getTypeClass('GenomicStudy.Input'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyOutput', PHPFHIRTypeMap::getTypeClass('GenomicStudy.Output'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyPerformer', PHPFHIRTypeMap::getTypeClass('GenomicStudy.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget', PHPFHIRTypeMap::getTypeClass('Goal.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment', PHPFHIRTypeMap::getTypeClass('GraphDefinition.Compartment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink', PHPFHIRTypeMap::getTypeClass('GraphDefinition.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionNode', PHPFHIRTypeMap::getTypeClass('GraphDefinition.Node'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic', PHPFHIRTypeMap::getTypeClass('Group.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember', PHPFHIRTypeMap::getTypeClass('Group.Member'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility', PHPFHIRTypeMap::getTypeClass('HealthcareService.Eligibility'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion2D', PHPFHIRTypeMap::getTypeClass('ImagingSelection.ImageRegion2D'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion3D', PHPFHIRTypeMap::getTypeClass('ImagingSelection.ImageRegion3D'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionInstance', PHPFHIRTypeMap::getTypeClass('ImagingSelection.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionPerformer', PHPFHIRTypeMap::getTypeClass('ImagingSelection.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance', PHPFHIRTypeMap::getTypeClass('ImagingStudy.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer', PHPFHIRTypeMap::getTypeClass('ImagingStudy.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries', PHPFHIRTypeMap::getTypeClass('ImagingStudy.Series'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion', PHPFHIRTypeMap::getTypeClass('ImmunizationRecommendation.DateCriterion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation', PHPFHIRTypeMap::getTypeClass('ImmunizationRecommendation.Recommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer', PHPFHIRTypeMap::getTypeClass('Immunization.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProgramEligibility', PHPFHIRTypeMap::getTypeClass('Immunization.ProgramEligibility'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied', PHPFHIRTypeMap::getTypeClass('Immunization.ProtocolApplied'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction', PHPFHIRTypeMap::getTypeClass('Immunization.Reaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Definition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.DependsOn'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Global'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Grouping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Manifest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Page'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Page1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Resource1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Template'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientManufacturer', PHPFHIRTypeMap::getTypeClass('Ingredient.Manufacturer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientReferenceStrength', PHPFHIRTypeMap::getTypeClass('Ingredient.ReferenceStrength'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientStrength', PHPFHIRTypeMap::getTypeClass('Ingredient.Strength'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientSubstance', PHPFHIRTypeMap::getTypeClass('Ingredient.Substance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit', PHPFHIRTypeMap::getTypeClass('InsurancePlan.Benefit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1', PHPFHIRTypeMap::getTypeClass('InsurancePlan.Benefit1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost', PHPFHIRTypeMap::getTypeClass('InsurancePlan.Cost'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage', PHPFHIRTypeMap::getTypeClass('InsurancePlan.Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost', PHPFHIRTypeMap::getTypeClass('InsurancePlan.GeneralCost'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit', PHPFHIRTypeMap::getTypeClass('InsurancePlan.Limit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan', PHPFHIRTypeMap::getTypeClass('InsurancePlan.Plan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost', PHPFHIRTypeMap::getTypeClass('InsurancePlan.SpecificCost'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemAssociation', PHPFHIRTypeMap::getTypeClass('InventoryItem.Association'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemCharacteristic', PHPFHIRTypeMap::getTypeClass('InventoryItem.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemDescription', PHPFHIRTypeMap::getTypeClass('InventoryItem.Description'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemInstance', PHPFHIRTypeMap::getTypeClass('InventoryItem.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemName', PHPFHIRTypeMap::getTypeClass('InventoryItem.Name'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemResponsibleOrganization', PHPFHIRTypeMap::getTypeClass('InventoryItem.ResponsibleOrganization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportInventoryListing', PHPFHIRTypeMap::getTypeClass('InventoryReport.InventoryListing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportItem', PHPFHIRTypeMap::getTypeClass('InventoryReport.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem', PHPFHIRTypeMap::getTypeClass('Invoice.LineItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant', PHPFHIRTypeMap::getTypeClass('Invoice.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem', PHPFHIRTypeMap::getTypeClass('Linkage.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry', PHPFHIRTypeMap::getTypeClass('List.Entry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition', PHPFHIRTypeMap::getTypeClass('Location.Position'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionComponent', PHPFHIRTypeMap::getTypeClass('ManufacturedItemDefinition.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionConstituent', PHPFHIRTypeMap::getTypeClass('ManufacturedItemDefinition.Constituent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionProperty', PHPFHIRTypeMap::getTypeClass('ManufacturedItemDefinition.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent', PHPFHIRTypeMap::getTypeClass('MeasureReport.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup', PHPFHIRTypeMap::getTypeClass('MeasureReport.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation', PHPFHIRTypeMap::getTypeClass('MeasureReport.Population'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1', PHPFHIRTypeMap::getTypeClass('MeasureReport.Population1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier', PHPFHIRTypeMap::getTypeClass('MeasureReport.Stratifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum', PHPFHIRTypeMap::getTypeClass('MeasureReport.Stratum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent', PHPFHIRTypeMap::getTypeClass('Measure.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup', PHPFHIRTypeMap::getTypeClass('Measure.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation', PHPFHIRTypeMap::getTypeClass('Measure.Population'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier', PHPFHIRTypeMap::getTypeClass('Measure.Stratifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData', PHPFHIRTypeMap::getTypeClass('Measure.SupplementalData'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureTerm', PHPFHIRTypeMap::getTypeClass('Measure.Term'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage', PHPFHIRTypeMap::getTypeClass('MedicationAdministration.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer', PHPFHIRTypeMap::getTypeClass('MedicationAdministration.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer', PHPFHIRTypeMap::getTypeClass('MedicationDispense.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution', PHPFHIRTypeMap::getTypeClass('MedicationDispense.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.Cost'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDefinitional', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.Definitional'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosingGuideline', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.DosingGuideline'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.DrugCharacteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeEnvironmentalSetting', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.EnvironmentalSetting'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIndicationGuideline', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.IndicationGuideline'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.MaxDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.MedicineClassification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.MonitoringProgram'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.Monograph'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.Packaging'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristic', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.PatientCharacteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.Regulatory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.RelatedMedicationKnowledge'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeStorageGuideline', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.StorageGuideline'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest', PHPFHIRTypeMap::getTypeClass('MedicationRequest.DispenseRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill', PHPFHIRTypeMap::getTypeClass('MedicationRequest.InitialFill'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution', PHPFHIRTypeMap::getTypeClass('MedicationRequest.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementAdherence', PHPFHIRTypeMap::getTypeClass('MedicationStatement.Adherence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch', PHPFHIRTypeMap::getTypeClass('Medication.Batch'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient', PHPFHIRTypeMap::getTypeClass('Medication.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCharacteristic', PHPFHIRTypeMap::getTypeClass('MedicinalProductDefinition.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionContact', PHPFHIRTypeMap::getTypeClass('MedicinalProductDefinition.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCrossReference', PHPFHIRTypeMap::getTypeClass('MedicinalProductDefinition.CrossReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionName', PHPFHIRTypeMap::getTypeClass('MedicinalProductDefinition.Name'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionOperation', PHPFHIRTypeMap::getTypeClass('MedicinalProductDefinition.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionPart', PHPFHIRTypeMap::getTypeClass('MedicinalProductDefinition.Part'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionUsage', PHPFHIRTypeMap::getTypeClass('MedicinalProductDefinition.Usage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse', PHPFHIRTypeMap::getTypeClass('MessageDefinition.AllowedResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus', PHPFHIRTypeMap::getTypeClass('MessageDefinition.Focus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination', PHPFHIRTypeMap::getTypeClass('MessageHeader.Destination'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse', PHPFHIRTypeMap::getTypeClass('MessageHeader.Response'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource', PHPFHIRTypeMap::getTypeClass('MessageHeader.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceEdit', PHPFHIRTypeMap::getTypeClass('MolecularSequence.Edit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRelative', PHPFHIRTypeMap::getTypeClass('MolecularSequence.Relative'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStartingSequence', PHPFHIRTypeMap::getTypeClass('MolecularSequence.StartingSequence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId', PHPFHIRTypeMap::getTypeClass('NamingSystem.UniqueId'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeConsumedItem', PHPFHIRTypeMap::getTypeClass('NutritionIntake.ConsumedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeIngredientLabel', PHPFHIRTypeMap::getTypeClass('NutritionIntake.IngredientLabel'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakePerformer', PHPFHIRTypeMap::getTypeClass('NutritionIntake.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdditive', PHPFHIRTypeMap::getTypeClass('NutritionOrder.Additive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration', PHPFHIRTypeMap::getTypeClass('NutritionOrder.Administration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula', PHPFHIRTypeMap::getTypeClass('NutritionOrder.EnteralFormula'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient', PHPFHIRTypeMap::getTypeClass('NutritionOrder.Nutrient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet', PHPFHIRTypeMap::getTypeClass('NutritionOrder.OralDiet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule', PHPFHIRTypeMap::getTypeClass('NutritionOrder.Schedule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule1', PHPFHIRTypeMap::getTypeClass('NutritionOrder.Schedule1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule2', PHPFHIRTypeMap::getTypeClass('NutritionOrder.Schedule2'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement', PHPFHIRTypeMap::getTypeClass('NutritionOrder.Supplement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture', PHPFHIRTypeMap::getTypeClass('NutritionOrder.Texture'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductCharacteristic', PHPFHIRTypeMap::getTypeClass('NutritionProduct.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductIngredient', PHPFHIRTypeMap::getTypeClass('NutritionProduct.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductInstance', PHPFHIRTypeMap::getTypeClass('NutritionProduct.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductNutrient', PHPFHIRTypeMap::getTypeClass('NutritionProduct.Nutrient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionComponent', PHPFHIRTypeMap::getTypeClass('ObservationDefinition.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedValue', PHPFHIRTypeMap::getTypeClass('ObservationDefinition.QualifiedValue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent', PHPFHIRTypeMap::getTypeClass('Observation.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange', PHPFHIRTypeMap::getTypeClass('Observation.ReferenceRange'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationTriggeredBy', PHPFHIRTypeMap::getTypeClass('Observation.TriggeredBy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding', PHPFHIRTypeMap::getTypeClass('OperationDefinition.Binding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload', PHPFHIRTypeMap::getTypeClass('OperationDefinition.Overload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter', PHPFHIRTypeMap::getTypeClass('OperationDefinition.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom', PHPFHIRTypeMap::getTypeClass('OperationDefinition.ReferencedFrom'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue', PHPFHIRTypeMap::getTypeClass('OperationOutcome.Issue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationQualification', PHPFHIRTypeMap::getTypeClass('Organization.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionContainedItem', PHPFHIRTypeMap::getTypeClass('PackagedProductDefinition.ContainedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionLegalStatusOfSupply', PHPFHIRTypeMap::getTypeClass('PackagedProductDefinition.LegalStatusOfSupply'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionPackaging', PHPFHIRTypeMap::getTypeClass('PackagedProductDefinition.Packaging'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionProperty', PHPFHIRTypeMap::getTypeClass('PackagedProductDefinition.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter', PHPFHIRTypeMap::getTypeClass('Parameters.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication', PHPFHIRTypeMap::getTypeClass('Patient.Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact', PHPFHIRTypeMap::getTypeClass('Patient.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink', PHPFHIRTypeMap::getTypeClass('Patient.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationAllocation', PHPFHIRTypeMap::getTypeClass('PaymentReconciliation.Allocation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote', PHPFHIRTypeMap::getTypeClass('PaymentReconciliation.ProcessNote'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionActivity', PHPFHIRTypeMap::getTypeClass('Permission.Activity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionData', PHPFHIRTypeMap::getTypeClass('Permission.Data'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionJustification', PHPFHIRTypeMap::getTypeClass('Permission.Justification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionResource', PHPFHIRTypeMap::getTypeClass('Permission.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionRule', PHPFHIRTypeMap::getTypeClass('Permission.Rule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonCommunication', PHPFHIRTypeMap::getTypeClass('Person.Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink', PHPFHIRTypeMap::getTypeClass('Person.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction', PHPFHIRTypeMap::getTypeClass('PlanDefinition.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionActor', PHPFHIRTypeMap::getTypeClass('PlanDefinition.Actor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition', PHPFHIRTypeMap::getTypeClass('PlanDefinition.Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue', PHPFHIRTypeMap::getTypeClass('PlanDefinition.DynamicValue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal', PHPFHIRTypeMap::getTypeClass('PlanDefinition.Goal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionInput', PHPFHIRTypeMap::getTypeClass('PlanDefinition.Input'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOption', PHPFHIRTypeMap::getTypeClass('PlanDefinition.Option'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOutput', PHPFHIRTypeMap::getTypeClass('PlanDefinition.Output'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant', PHPFHIRTypeMap::getTypeClass('PlanDefinition.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction', PHPFHIRTypeMap::getTypeClass('PlanDefinition.RelatedAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget', PHPFHIRTypeMap::getTypeClass('PlanDefinition.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerCommunication', PHPFHIRTypeMap::getTypeClass('Practitioner.Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification', PHPFHIRTypeMap::getTypeClass('Practitioner.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice', PHPFHIRTypeMap::getTypeClass('Procedure.FocalDevice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer', PHPFHIRTypeMap::getTypeClass('Procedure.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent', PHPFHIRTypeMap::getTypeClass('Provenance.Agent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity', PHPFHIRTypeMap::getTypeClass('Provenance.Entity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer', PHPFHIRTypeMap::getTypeClass('QuestionnaireResponse.Answer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem', PHPFHIRTypeMap::getTypeClass('QuestionnaireResponse.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption', PHPFHIRTypeMap::getTypeClass('Questionnaire.AnswerOption'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen', PHPFHIRTypeMap::getTypeClass('Questionnaire.EnableWhen'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial', PHPFHIRTypeMap::getTypeClass('Questionnaire.Initial'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem', PHPFHIRTypeMap::getTypeClass('Questionnaire.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRegulatedAuthorization\FHIRRegulatedAuthorizationCase', PHPFHIRTypeMap::getTypeClass('RegulatedAuthorization.Case'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication', PHPFHIRTypeMap::getTypeClass('RelatedPerson.Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationAction', PHPFHIRTypeMap::getTypeClass('RequestOrchestration.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationCondition', PHPFHIRTypeMap::getTypeClass('RequestOrchestration.Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationDynamicValue', PHPFHIRTypeMap::getTypeClass('RequestOrchestration.DynamicValue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationInput', PHPFHIRTypeMap::getTypeClass('RequestOrchestration.Input'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationOutput', PHPFHIRTypeMap::getTypeClass('RequestOrchestration.Output'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationParticipant', PHPFHIRTypeMap::getTypeClass('RequestOrchestration.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationRelatedAction', PHPFHIRTypeMap::getTypeClass('RequestOrchestration.RelatedAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequirements\FHIRRequirementsStatement', PHPFHIRTypeMap::getTypeClass('Requirements.Statement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyAssociatedParty', PHPFHIRTypeMap::getTypeClass('ResearchStudy.AssociatedParty'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyComparisonGroup', PHPFHIRTypeMap::getTypeClass('ResearchStudy.ComparisonGroup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyLabel', PHPFHIRTypeMap::getTypeClass('ResearchStudy.Label'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective', PHPFHIRTypeMap::getTypeClass('ResearchStudy.Objective'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyOutcomeMeasure', PHPFHIRTypeMap::getTypeClass('ResearchStudy.OutcomeMeasure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyProgressStatus', PHPFHIRTypeMap::getTypeClass('ResearchStudy.ProgressStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyRecruitment', PHPFHIRTypeMap::getTypeClass('ResearchStudy.Recruitment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchSubject\FHIRResearchSubjectProgress', PHPFHIRTypeMap::getTypeClass('ResearchSubject.Progress'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction', PHPFHIRTypeMap::getTypeClass('RiskAssessment.Prediction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent', PHPFHIRTypeMap::getTypeClass('SearchParameter.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestOrderDetail', PHPFHIRTypeMap::getTypeClass('ServiceRequest.OrderDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestParameter', PHPFHIRTypeMap::getTypeClass('ServiceRequest.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestPatientInstruction', PHPFHIRTypeMap::getTypeClass('ServiceRequest.PatientInstruction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive', PHPFHIRTypeMap::getTypeClass('SpecimenDefinition.Additive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer', PHPFHIRTypeMap::getTypeClass('SpecimenDefinition.Container'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling', PHPFHIRTypeMap::getTypeClass('SpecimenDefinition.Handling'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested', PHPFHIRTypeMap::getTypeClass('SpecimenDefinition.TypeTested'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection', PHPFHIRTypeMap::getTypeClass('Specimen.Collection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer', PHPFHIRTypeMap::getTypeClass('Specimen.Container'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenFeature', PHPFHIRTypeMap::getTypeClass('Specimen.Feature'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing', PHPFHIRTypeMap::getTypeClass('Specimen.Processing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext', PHPFHIRTypeMap::getTypeClass('StructureDefinition.Context'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential', PHPFHIRTypeMap::getTypeClass('StructureDefinition.Differential'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping', PHPFHIRTypeMap::getTypeClass('StructureDefinition.Mapping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot', PHPFHIRTypeMap::getTypeClass('StructureDefinition.Snapshot'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapConst', PHPFHIRTypeMap::getTypeClass('StructureMap.Const'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent', PHPFHIRTypeMap::getTypeClass('StructureMap.Dependent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup', PHPFHIRTypeMap::getTypeClass('StructureMap.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput', PHPFHIRTypeMap::getTypeClass('StructureMap.Input'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter', PHPFHIRTypeMap::getTypeClass('StructureMap.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule', PHPFHIRTypeMap::getTypeClass('StructureMap.Rule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource', PHPFHIRTypeMap::getTypeClass('StructureMap.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure', PHPFHIRTypeMap::getTypeClass('StructureMap.Structure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget', PHPFHIRTypeMap::getTypeClass('StructureMap.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionStatus\FHIRSubscriptionStatusNotificationEvent', PHPFHIRTypeMap::getTypeClass('SubscriptionStatus.NotificationEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicCanFilterBy', PHPFHIRTypeMap::getTypeClass('SubscriptionTopic.CanFilterBy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicEventTrigger', PHPFHIRTypeMap::getTypeClass('SubscriptionTopic.EventTrigger'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicNotificationShape', PHPFHIRTypeMap::getTypeClass('SubscriptionTopic.NotificationShape'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicQueryCriteria', PHPFHIRTypeMap::getTypeClass('SubscriptionTopic.QueryCriteria'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicResourceTrigger', PHPFHIRTypeMap::getTypeClass('SubscriptionTopic.ResourceTrigger'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionFilterBy', PHPFHIRTypeMap::getTypeClass('Subscription.FilterBy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionParameter', PHPFHIRTypeMap::getTypeClass('Subscription.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCharacterization', PHPFHIRTypeMap::getTypeClass('SubstanceDefinition.Characterization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCode', PHPFHIRTypeMap::getTypeClass('SubstanceDefinition.Code'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMoiety', PHPFHIRTypeMap::getTypeClass('SubstanceDefinition.Moiety'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMolecularWeight', PHPFHIRTypeMap::getTypeClass('SubstanceDefinition.MolecularWeight'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionName', PHPFHIRTypeMap::getTypeClass('SubstanceDefinition.Name'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionOfficial', PHPFHIRTypeMap::getTypeClass('SubstanceDefinition.Official'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionProperty', PHPFHIRTypeMap::getTypeClass('SubstanceDefinition.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRelationship', PHPFHIRTypeMap::getTypeClass('SubstanceDefinition.Relationship'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRepresentation', PHPFHIRTypeMap::getTypeClass('SubstanceDefinition.Representation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionSourceMaterial', PHPFHIRTypeMap::getTypeClass('SubstanceDefinition.SourceMaterial'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionStructure', PHPFHIRTypeMap::getTypeClass('SubstanceDefinition.Structure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidLinkage', PHPFHIRTypeMap::getTypeClass('SubstanceNucleicAcid.Linkage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSubunit', PHPFHIRTypeMap::getTypeClass('SubstanceNucleicAcid.Subunit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSugar', PHPFHIRTypeMap::getTypeClass('SubstanceNucleicAcid.Sugar'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerDegreeOfPolymerisation', PHPFHIRTypeMap::getTypeClass('SubstancePolymer.DegreeOfPolymerisation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerMonomerSet', PHPFHIRTypeMap::getTypeClass('SubstancePolymer.MonomerSet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeat', PHPFHIRTypeMap::getTypeClass('SubstancePolymer.Repeat'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeatUnit', PHPFHIRTypeMap::getTypeClass('SubstancePolymer.RepeatUnit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStartingMaterial', PHPFHIRTypeMap::getTypeClass('SubstancePolymer.StartingMaterial'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStructuralRepresentation', PHPFHIRTypeMap::getTypeClass('SubstancePolymer.StructuralRepresentation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceProtein\FHIRSubstanceProteinSubunit', PHPFHIRTypeMap::getTypeClass('SubstanceProtein.Subunit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGene', PHPFHIRTypeMap::getTypeClass('SubstanceReferenceInformation.Gene'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGeneElement', PHPFHIRTypeMap::getTypeClass('SubstanceReferenceInformation.GeneElement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationTarget', PHPFHIRTypeMap::getTypeClass('SubstanceReferenceInformation.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialAuthor', PHPFHIRTypeMap::getTypeClass('SubstanceSourceMaterial.Author'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialFractionDescription', PHPFHIRTypeMap::getTypeClass('SubstanceSourceMaterial.FractionDescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialHybrid', PHPFHIRTypeMap::getTypeClass('SubstanceSourceMaterial.Hybrid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganism', PHPFHIRTypeMap::getTypeClass('SubstanceSourceMaterial.Organism'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganismGeneral', PHPFHIRTypeMap::getTypeClass('SubstanceSourceMaterial.OrganismGeneral'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialPartDescription', PHPFHIRTypeMap::getTypeClass('SubstanceSourceMaterial.PartDescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient', PHPFHIRTypeMap::getTypeClass('Substance.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem', PHPFHIRTypeMap::getTypeClass('SupplyDelivery.SuppliedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter', PHPFHIRTypeMap::getTypeClass('SupplyRequest.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput', PHPFHIRTypeMap::getTypeClass('Task.Input'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput', PHPFHIRTypeMap::getTypeClass('Task.Output'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskPerformer', PHPFHIRTypeMap::getTypeClass('Task.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction', PHPFHIRTypeMap::getTypeClass('Task.Restriction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.Closure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.CodeSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.Expansion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.Filter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.Implementation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.Software'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.Translation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.ValidateCode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanAssertion', PHPFHIRTypeMap::getTypeClass('TestPlan.Assertion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency', PHPFHIRTypeMap::getTypeClass('TestPlan.Dependency'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency1', PHPFHIRTypeMap::getTypeClass('TestPlan.Dependency1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanScript', PHPFHIRTypeMap::getTypeClass('TestPlan.Script'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestCase', PHPFHIRTypeMap::getTypeClass('TestPlan.TestCase'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestData', PHPFHIRTypeMap::getTypeClass('TestPlan.TestData'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestRun', PHPFHIRTypeMap::getTypeClass('TestPlan.TestRun'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction', PHPFHIRTypeMap::getTypeClass('TestReport.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1', PHPFHIRTypeMap::getTypeClass('TestReport.Action1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2', PHPFHIRTypeMap::getTypeClass('TestReport.Action2'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert', PHPFHIRTypeMap::getTypeClass('TestReport.Assert'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation', PHPFHIRTypeMap::getTypeClass('TestReport.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant', PHPFHIRTypeMap::getTypeClass('TestReport.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportRequirement', PHPFHIRTypeMap::getTypeClass('TestReport.Requirement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup', PHPFHIRTypeMap::getTypeClass('TestReport.Setup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown', PHPFHIRTypeMap::getTypeClass('TestReport.Teardown'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest', PHPFHIRTypeMap::getTypeClass('TestReport.Test'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction', PHPFHIRTypeMap::getTypeClass('TestScript.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1', PHPFHIRTypeMap::getTypeClass('TestScript.Action1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2', PHPFHIRTypeMap::getTypeClass('TestScript.Action2'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert', PHPFHIRTypeMap::getTypeClass('TestScript.Assert'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability', PHPFHIRTypeMap::getTypeClass('TestScript.Capability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination', PHPFHIRTypeMap::getTypeClass('TestScript.Destination'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture', PHPFHIRTypeMap::getTypeClass('TestScript.Fixture'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink', PHPFHIRTypeMap::getTypeClass('TestScript.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata', PHPFHIRTypeMap::getTypeClass('TestScript.Metadata'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation', PHPFHIRTypeMap::getTypeClass('TestScript.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin', PHPFHIRTypeMap::getTypeClass('TestScript.Origin'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader', PHPFHIRTypeMap::getTypeClass('TestScript.RequestHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequirement', PHPFHIRTypeMap::getTypeClass('TestScript.Requirement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptScope', PHPFHIRTypeMap::getTypeClass('TestScript.Scope'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup', PHPFHIRTypeMap::getTypeClass('TestScript.Setup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown', PHPFHIRTypeMap::getTypeClass('TestScript.Teardown'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest', PHPFHIRTypeMap::getTypeClass('TestScript.Test'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable', PHPFHIRTypeMap::getTypeClass('TestScript.Variable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportInput', PHPFHIRTypeMap::getTypeClass('Transport.Input'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportOutput', PHPFHIRTypeMap::getTypeClass('Transport.Output'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportRestriction', PHPFHIRTypeMap::getTypeClass('Transport.Restriction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose', PHPFHIRTypeMap::getTypeClass('ValueSet.Compose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept', PHPFHIRTypeMap::getTypeClass('ValueSet.Concept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains', PHPFHIRTypeMap::getTypeClass('ValueSet.Contains'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation', PHPFHIRTypeMap::getTypeClass('ValueSet.Designation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion', PHPFHIRTypeMap::getTypeClass('ValueSet.Expansion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter', PHPFHIRTypeMap::getTypeClass('ValueSet.Filter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude', PHPFHIRTypeMap::getTypeClass('ValueSet.Include'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter', PHPFHIRTypeMap::getTypeClass('ValueSet.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty', PHPFHIRTypeMap::getTypeClass('ValueSet.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty1', PHPFHIRTypeMap::getTypeClass('ValueSet.Property1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetScope', PHPFHIRTypeMap::getTypeClass('ValueSet.Scope'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetSubProperty', PHPFHIRTypeMap::getTypeClass('ValueSet.SubProperty'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation', PHPFHIRTypeMap::getTypeClass('VerificationResult.Attestation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource', PHPFHIRTypeMap::getTypeClass('VerificationResult.PrimarySource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator', PHPFHIRTypeMap::getTypeClass('VerificationResult.Validator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification', PHPFHIRTypeMap::getTypeClass('VisionPrescription.LensSpecification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism', PHPFHIRTypeMap::getTypeClass('VisionPrescription.Prism'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBase64Binary', PHPFHIRTypeMap::getTypeClass('base64Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBindingStrength', PHPFHIRTypeMap::getTypeClass('BindingStrength'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBiologicallyDerivedProductDispenseCodes', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProductDispenseCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBoolean', PHPFHIRTypeMap::getTypeClass('boolean'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRBundleType', PHPFHIRTypeMap::getTypeClass('BundleType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCanonical', PHPFHIRTypeMap::getTypeClass('canonical'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCapabilityStatementKind', PHPFHIRTypeMap::getTypeClass('CapabilityStatementKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCarePlanIntent', PHPFHIRTypeMap::getTypeClass('CarePlanIntent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCareTeamStatus', PHPFHIRTypeMap::getTypeClass('CareTeamStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCharacteristicCombination', PHPFHIRTypeMap::getTypeClass('CharacteristicCombination'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRChargeItemStatus', PHPFHIRTypeMap::getTypeClass('ChargeItemStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRClaimProcessingCodes', PHPFHIRTypeMap::getTypeClass('ClaimProcessingCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRClinicalUseDefinitionType', PHPFHIRTypeMap::getTypeClass('ClinicalUseDefinitionType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCode', PHPFHIRTypeMap::getTypeClass('code'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCodeSearchSupport', PHPFHIRTypeMap::getTypeClass('CodeSearchSupport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCodeSystemContentMode', PHPFHIRTypeMap::getTypeClass('CodeSystemContentMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCodeSystemHierarchyMeaning', PHPFHIRTypeMap::getTypeClass('CodeSystemHierarchyMeaning'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRColorCodesOrRGB', PHPFHIRTypeMap::getTypeClass('ColorCodesOrRGB'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCommonLanguages', PHPFHIRTypeMap::getTypeClass('CommonLanguages'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCompartmentType', PHPFHIRTypeMap::getTypeClass('CompartmentType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCompositionStatus', PHPFHIRTypeMap::getTypeClass('CompositionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConceptMapAttributeType', PHPFHIRTypeMap::getTypeClass('ConceptMapAttributeType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConceptMapGroupUnmappedMode', PHPFHIRTypeMap::getTypeClass('ConceptMapGroupUnmappedMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConceptMapPropertyType', PHPFHIRTypeMap::getTypeClass('ConceptMapPropertyType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConceptMapRelationship', PHPFHIRTypeMap::getTypeClass('ConceptMapRelationship'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConcreteFHIRTypes', PHPFHIRTypeMap::getTypeClass('ConcreteFHIRTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConditionalDeleteStatus', PHPFHIRTypeMap::getTypeClass('ConditionalDeleteStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConditionalReadStatus', PHPFHIRTypeMap::getTypeClass('ConditionalReadStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConditionPreconditionType', PHPFHIRTypeMap::getTypeClass('ConditionPreconditionType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConditionQuestionnairePurpose', PHPFHIRTypeMap::getTypeClass('ConditionQuestionnairePurpose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConformanceExpectation', PHPFHIRTypeMap::getTypeClass('ConformanceExpectation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConsentDataMeaning', PHPFHIRTypeMap::getTypeClass('ConsentDataMeaning'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConsentProvisionType', PHPFHIRTypeMap::getTypeClass('ConsentProvisionType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConsentState', PHPFHIRTypeMap::getTypeClass('ConsentState'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRConstraintSeverity', PHPFHIRTypeMap::getTypeClass('ConstraintSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContactPointSystem', PHPFHIRTypeMap::getTypeClass('ContactPointSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContactPointUse', PHPFHIRTypeMap::getTypeClass('ContactPointUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContractResourcePublicationStatusCodes', PHPFHIRTypeMap::getTypeClass('ContractResourcePublicationStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContractResourceStatusCodes', PHPFHIRTypeMap::getTypeClass('ContractResourceStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRContributorType', PHPFHIRTypeMap::getTypeClass('ContributorType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRCriteriaNotExistsBehavior', PHPFHIRTypeMap::getTypeClass('CriteriaNotExistsBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType', PHPFHIRTypeMap::getTypeClass('DataType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAddress', PHPFHIRTypeMap::getTypeClass('Address'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAnnotation', PHPFHIRTypeMap::getTypeClass('Annotation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAttachment', PHPFHIRTypeMap::getTypeClass('Attachment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability', PHPFHIRTypeMap::getTypeClass('Availability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityAvailableTime', PHPFHIRTypeMap::getTypeClass('Availability.AvailableTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityNotAvailableTime', PHPFHIRTypeMap::getTypeClass('Availability.NotAvailableTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType', PHPFHIRTypeMap::getTypeClass('BackboneType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage', PHPFHIRTypeMap::getTypeClass('Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage\FHIRDosageDoseAndRate', PHPFHIRTypeMap::getTypeClass('Dosage.DoseAndRate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition', PHPFHIRTypeMap::getTypeClass('ElementDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionAdditional', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Additional'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBase', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Base'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBinding', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Binding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionConstraint', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Constraint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionDiscriminator', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Discriminator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionExample', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Example'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionMapping', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Mapping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionSlicing', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Slicing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionType', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Type'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRMarketingStatus', PHPFHIRTypeMap::getTypeClass('MarketingStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRProductShelfLife', PHPFHIRTypeMap::getTypeClass('ProductShelfLife'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming', PHPFHIRTypeMap::getTypeClass('Timing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming\FHIRTimingRepeat', PHPFHIRTypeMap::getTypeClass('Timing.Repeat'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableConcept', PHPFHIRTypeMap::getTypeClass('CodeableConcept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableReference', PHPFHIRTypeMap::getTypeClass('CodeableReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRCoding', PHPFHIRTypeMap::getTypeClass('Coding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRContactDetail', PHPFHIRTypeMap::getTypeClass('ContactDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRContactPoint', PHPFHIRTypeMap::getTypeClass('ContactPoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRContributor', PHPFHIRTypeMap::getTypeClass('Contributor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement', PHPFHIRTypeMap::getTypeClass('DataRequirement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementCodeFilter', PHPFHIRTypeMap::getTypeClass('DataRequirement.CodeFilter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementDateFilter', PHPFHIRTypeMap::getTypeClass('DataRequirement.DateFilter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementSort', PHPFHIRTypeMap::getTypeClass('DataRequirement.Sort'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementValueFilter', PHPFHIRTypeMap::getTypeClass('DataRequirement.ValueFilter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRExpression', PHPFHIRTypeMap::getTypeClass('Expression'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRExtendedContactDetail', PHPFHIRTypeMap::getTypeClass('ExtendedContactDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRExtension', PHPFHIRTypeMap::getTypeClass('Extension'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRHumanName', PHPFHIRTypeMap::getTypeClass('HumanName'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRIdentifier', PHPFHIRTypeMap::getTypeClass('Identifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRMeta', PHPFHIRTypeMap::getTypeClass('Meta'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRMonetaryComponent', PHPFHIRTypeMap::getTypeClass('MonetaryComponent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRMoney', PHPFHIRTypeMap::getTypeClass('Money'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRNarrative', PHPFHIRTypeMap::getTypeClass('Narrative'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRParameterDefinition', PHPFHIRTypeMap::getTypeClass('ParameterDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRPeriod', PHPFHIRTypeMap::getTypeClass('Period'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRPrimitiveType', PHPFHIRTypeMap::getTypeClass('PrimitiveType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity', PHPFHIRTypeMap::getTypeClass('Quantity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRAge', PHPFHIRTypeMap::getTypeClass('Age'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRCount', PHPFHIRTypeMap::getTypeClass('Count'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDistance', PHPFHIRTypeMap::getTypeClass('Distance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDuration', PHPFHIRTypeMap::getTypeClass('Duration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRRange', PHPFHIRTypeMap::getTypeClass('Range'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRRatio', PHPFHIRTypeMap::getTypeClass('Ratio'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRRatioRange', PHPFHIRTypeMap::getTypeClass('RatioRange'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRReference', PHPFHIRTypeMap::getTypeClass('Reference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRRelatedArtifact', PHPFHIRTypeMap::getTypeClass('RelatedArtifact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRSampledData', PHPFHIRTypeMap::getTypeClass('SampledData'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRSignature', PHPFHIRTypeMap::getTypeClass('Signature'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRTriggerDefinition', PHPFHIRTypeMap::getTypeClass('TriggerDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRUsageContext', PHPFHIRTypeMap::getTypeClass('UsageContext'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDataType\FHIRVirtualServiceDetail', PHPFHIRTypeMap::getTypeClass('VirtualServiceDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDate', PHPFHIRTypeMap::getTypeClass('date'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDateTime', PHPFHIRTypeMap::getTypeClass('dateTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDecimal', PHPFHIRTypeMap::getTypeClass('decimal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDefinitionResourceTypes', PHPFHIRTypeMap::getTypeClass('DefinitionResourceTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDetectedIssueSeverity', PHPFHIRTypeMap::getTypeClass('DetectedIssueSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDetectedIssueStatus', PHPFHIRTypeMap::getTypeClass('DetectedIssueStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceCorrectiveActionScope', PHPFHIRTypeMap::getTypeClass('DeviceCorrectiveActionScope'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceDefinitionRegulatoryIdentifierType', PHPFHIRTypeMap::getTypeClass('DeviceDefinitionRegulatoryIdentifierType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceDispenseStatusCodes', PHPFHIRTypeMap::getTypeClass('DeviceDispenseStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationState', PHPFHIRTypeMap::getTypeClass('DeviceMetricCalibrationState'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationType', PHPFHIRTypeMap::getTypeClass('DeviceMetricCalibrationType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceMetricCategory', PHPFHIRTypeMap::getTypeClass('DeviceMetricCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceMetricOperationalStatus', PHPFHIRTypeMap::getTypeClass('DeviceMetricOperationalStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceNameType', PHPFHIRTypeMap::getTypeClass('DeviceNameType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceProductionIdentifierInUDI', PHPFHIRTypeMap::getTypeClass('DeviceProductionIdentifierInUDI'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDeviceUsageStatus', PHPFHIRTypeMap::getTypeClass('DeviceUsageStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDiagnosticReportStatus', PHPFHIRTypeMap::getTypeClass('DiagnosticReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDiscriminatorType', PHPFHIRTypeMap::getTypeClass('DiscriminatorType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDocumentMode', PHPFHIRTypeMap::getTypeClass('DocumentMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRDocumentReferenceStatus', PHPFHIRTypeMap::getTypeClass('DocumentReferenceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREligibilityOutcome', PHPFHIRTypeMap::getTypeClass('EligibilityOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREligibilityRequestPurpose', PHPFHIRTypeMap::getTypeClass('EligibilityRequestPurpose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREligibilityResponsePurpose', PHPFHIRTypeMap::getTypeClass('EligibilityResponsePurpose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREnableWhenBehavior', PHPFHIRTypeMap::getTypeClass('EnableWhenBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREncounterLocationStatus', PHPFHIRTypeMap::getTypeClass('EncounterLocationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREncounterStatus', PHPFHIRTypeMap::getTypeClass('EncounterStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREndpointStatus', PHPFHIRTypeMap::getTypeClass('EndpointStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREnrollmentOutcome', PHPFHIRTypeMap::getTypeClass('EnrollmentOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREpisodeOfCareStatus', PHPFHIRTypeMap::getTypeClass('EpisodeOfCareStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREventCapabilityMode', PHPFHIRTypeMap::getTypeClass('EventCapabilityMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREventResourceTypes', PHPFHIRTypeMap::getTypeClass('EventResourceTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREventStatus', PHPFHIRTypeMap::getTypeClass('EventStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREventTiming', PHPFHIRTypeMap::getTypeClass('EventTiming'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIREvidenceVariableHandling', PHPFHIRTypeMap::getTypeClass('EvidenceVariableHandling'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRExampleScenarioActorType', PHPFHIRTypeMap::getTypeClass('ExampleScenarioActorType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRExplanationOfBenefitStatus', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefitStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRExtensionContextType', PHPFHIRTypeMap::getTypeClass('ExtensionContextType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFamilyHistoryStatus', PHPFHIRTypeMap::getTypeClass('FamilyHistoryStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRDeviceStatus', PHPFHIRTypeMap::getTypeClass('FHIRDeviceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRPathTypes', PHPFHIRTypeMap::getTypeClass('FHIRPathTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRSubstanceStatus', PHPFHIRTypeMap::getTypeClass('FHIRSubstanceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRTypes', PHPFHIRTypeMap::getTypeClass('FHIRTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFHIRVersion', PHPFHIRTypeMap::getTypeClass('FHIRVersion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFilterOperator', PHPFHIRTypeMap::getTypeClass('FilterOperator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFinancialResourceStatusCodes', PHPFHIRTypeMap::getTypeClass('FinancialResourceStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFlagStatus', PHPFHIRTypeMap::getTypeClass('FlagStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRFormularyItemStatusCodes', PHPFHIRTypeMap::getTypeClass('FormularyItemStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGenomicStudyStatus', PHPFHIRTypeMap::getTypeClass('GenomicStudyStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGoalLifecycleStatus', PHPFHIRTypeMap::getTypeClass('GoalLifecycleStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGraphCompartmentRule', PHPFHIRTypeMap::getTypeClass('GraphCompartmentRule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGraphCompartmentUse', PHPFHIRTypeMap::getTypeClass('GraphCompartmentUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGroupMembershipBasis', PHPFHIRTypeMap::getTypeClass('GroupMembershipBasis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGroupType', PHPFHIRTypeMap::getTypeClass('GroupType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGuidanceResponseStatus', PHPFHIRTypeMap::getTypeClass('GuidanceResponseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRGuidePageGeneration', PHPFHIRTypeMap::getTypeClass('GuidePageGeneration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRHTTPVerb', PHPFHIRTypeMap::getTypeClass('HTTPVerb'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRId', PHPFHIRTypeMap::getTypeClass('id'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIdentifierUse', PHPFHIRTypeMap::getTypeClass('IdentifierUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIdentityAssuranceLevel', PHPFHIRTypeMap::getTypeClass('IdentityAssuranceLevel'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImagingSelectionDGraphicType', PHPFHIRTypeMap::getTypeClass('ImagingSelectionDGraphicType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImagingSelectionStatus', PHPFHIRTypeMap::getTypeClass('ImagingSelectionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImagingStudyStatus', PHPFHIRTypeMap::getTypeClass('ImagingStudyStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImmunizationEvaluationStatusCodes', PHPFHIRTypeMap::getTypeClass('ImmunizationEvaluationStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRImmunizationStatusCodes', PHPFHIRTypeMap::getTypeClass('ImmunizationStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIngredientManufacturerRole', PHPFHIRTypeMap::getTypeClass('IngredientManufacturerRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInstant', PHPFHIRTypeMap::getTypeClass('instant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInteger', PHPFHIRTypeMap::getTypeClass('integer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInteger64', PHPFHIRTypeMap::getTypeClass('integer64'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInteractionTrigger', PHPFHIRTypeMap::getTypeClass('InteractionTrigger'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInventoryCountType', PHPFHIRTypeMap::getTypeClass('InventoryCountType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInventoryItemStatusCodes', PHPFHIRTypeMap::getTypeClass('InventoryItemStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInventoryReportStatus', PHPFHIRTypeMap::getTypeClass('InventoryReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRInvoiceStatus', PHPFHIRTypeMap::getTypeClass('InvoiceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIssueSeverity', PHPFHIRTypeMap::getTypeClass('IssueSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRIssueType', PHPFHIRTypeMap::getTypeClass('IssueType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRJurisdictionValueSet', PHPFHIRTypeMap::getTypeClass('JurisdictionValueSet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRKind', PHPFHIRTypeMap::getTypeClass('Kind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLinkageType', PHPFHIRTypeMap::getTypeClass('LinkageType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLinkRelationTypes', PHPFHIRTypeMap::getTypeClass('LinkRelationTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLinkType', PHPFHIRTypeMap::getTypeClass('LinkType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRListMode', PHPFHIRTypeMap::getTypeClass('ListMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRListStatus', PHPFHIRTypeMap::getTypeClass('ListStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLocationMode', PHPFHIRTypeMap::getTypeClass('LocationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRLocationStatus', PHPFHIRTypeMap::getTypeClass('LocationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMarkdown', PHPFHIRTypeMap::getTypeClass('markdown'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMeasureReportStatus', PHPFHIRTypeMap::getTypeClass('MeasureReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMeasureReportType', PHPFHIRTypeMap::getTypeClass('MeasureReportType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationAdministrationStatusCodes', PHPFHIRTypeMap::getTypeClass('MedicationAdministrationStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationDispenseStatusCodes', PHPFHIRTypeMap::getTypeClass('MedicationDispenseStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationKnowledgeStatusCodes', PHPFHIRTypeMap::getTypeClass('MedicationKnowledgeStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationRequestIntent', PHPFHIRTypeMap::getTypeClass('MedicationRequestIntent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationrequestStatus', PHPFHIRTypeMap::getTypeClass('MedicationrequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationStatementStatusCodes', PHPFHIRTypeMap::getTypeClass('MedicationStatementStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMedicationStatusCodes', PHPFHIRTypeMap::getTypeClass('MedicationStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMessageheaderResponseRequest', PHPFHIRTypeMap::getTypeClass('MessageheaderResponseRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRMessageSignificanceCategory', PHPFHIRTypeMap::getTypeClass('MessageSignificanceCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNameUse', PHPFHIRTypeMap::getTypeClass('NameUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNamingSystemIdentifierType', PHPFHIRTypeMap::getTypeClass('NamingSystemIdentifierType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNamingSystemType', PHPFHIRTypeMap::getTypeClass('NamingSystemType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNarrativeStatus', PHPFHIRTypeMap::getTypeClass('NarrativeStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNoteType', PHPFHIRTypeMap::getTypeClass('NoteType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRNutritionProductStatus', PHPFHIRTypeMap::getTypeClass('NutritionProductStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRObservationDataType', PHPFHIRTypeMap::getTypeClass('ObservationDataType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRObservationRangeCategory', PHPFHIRTypeMap::getTypeClass('ObservationRangeCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRObservationStatus', PHPFHIRTypeMap::getTypeClass('ObservationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROid', PHPFHIRTypeMap::getTypeClass('oid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROperationKind', PHPFHIRTypeMap::getTypeClass('OperationKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROperationOutcomeCodes', PHPFHIRTypeMap::getTypeClass('OperationOutcomeCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROperationParameterScope', PHPFHIRTypeMap::getTypeClass('OperationParameterScope'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROperationParameterUse', PHPFHIRTypeMap::getTypeClass('OperationParameterUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIROrientationType', PHPFHIRTypeMap::getTypeClass('OrientationType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRParticipantResourceTypes', PHPFHIRTypeMap::getTypeClass('ParticipantResourceTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRParticipationStatus', PHPFHIRTypeMap::getTypeClass('ParticipationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPaymentOutcome', PHPFHIRTypeMap::getTypeClass('PaymentOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPermissionRuleCombining', PHPFHIRTypeMap::getTypeClass('PermissionRuleCombining'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPermissionStatus', PHPFHIRTypeMap::getTypeClass('PermissionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPositiveInt', PHPFHIRTypeMap::getTypeClass('positiveInt'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPropertyRepresentation', PHPFHIRTypeMap::getTypeClass('PropertyRepresentation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPropertyType', PHPFHIRTypeMap::getTypeClass('PropertyType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRProvenanceEntityRole', PHPFHIRTypeMap::getTypeClass('ProvenanceEntityRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRPublicationStatus', PHPFHIRTypeMap::getTypeClass('PublicationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuantityComparator', PHPFHIRTypeMap::getTypeClass('QuantityComparator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireAnswerConstraint', PHPFHIRTypeMap::getTypeClass('QuestionnaireAnswerConstraint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireItemDisabledDisplay', PHPFHIRTypeMap::getTypeClass('QuestionnaireItemDisabledDisplay'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireItemOperator', PHPFHIRTypeMap::getTypeClass('QuestionnaireItemOperator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireItemType', PHPFHIRTypeMap::getTypeClass('QuestionnaireItemType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRQuestionnaireResponseStatus', PHPFHIRTypeMap::getTypeClass('QuestionnaireResponseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRReferenceHandlingPolicy', PHPFHIRTypeMap::getTypeClass('ReferenceHandlingPolicy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRReferenceVersionRules', PHPFHIRTypeMap::getTypeClass('ReferenceVersionRules'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRelatedArtifactType', PHPFHIRTypeMap::getTypeClass('RelatedArtifactType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRelatedArtifactTypeExpanded', PHPFHIRTypeMap::getTypeClass('RelatedArtifactTypeExpanded'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRemittanceOutcome', PHPFHIRTypeMap::getTypeClass('RemittanceOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRReportRelationshipType', PHPFHIRTypeMap::getTypeClass('ReportRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRequestIntent', PHPFHIRTypeMap::getTypeClass('RequestIntent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRequestPriority', PHPFHIRTypeMap::getTypeClass('RequestPriority'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRequestResourceTypes', PHPFHIRTypeMap::getTypeClass('RequestResourceTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRequestStatus', PHPFHIRTypeMap::getTypeClass('RequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRResourceType', PHPFHIRTypeMap::getTypeClass('ResourceType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRResourceVersionPolicy', PHPFHIRTypeMap::getTypeClass('ResourceVersionPolicy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRResponseType', PHPFHIRTypeMap::getTypeClass('ResponseType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRRestfulCapabilityMode', PHPFHIRTypeMap::getTypeClass('RestfulCapabilityMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSampledDataDataType', PHPFHIRTypeMap::getTypeClass('SampledDataDataType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchComparator', PHPFHIRTypeMap::getTypeClass('SearchComparator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchEntryMode', PHPFHIRTypeMap::getTypeClass('SearchEntryMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchModifierCode', PHPFHIRTypeMap::getTypeClass('SearchModifierCode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchParamType', PHPFHIRTypeMap::getTypeClass('SearchParamType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSearchProcessingModeType', PHPFHIRTypeMap::getTypeClass('SearchProcessingModeType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSequenceType', PHPFHIRTypeMap::getTypeClass('SequenceType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSlicingRules', PHPFHIRTypeMap::getTypeClass('SlicingRules'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSlotStatus', PHPFHIRTypeMap::getTypeClass('SlotStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSortDirection', PHPFHIRTypeMap::getTypeClass('SortDirection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSPDXLicense', PHPFHIRTypeMap::getTypeClass('SPDXLicense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSpecimenCombined', PHPFHIRTypeMap::getTypeClass('SpecimenCombined'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSpecimenContainedPreference', PHPFHIRTypeMap::getTypeClass('SpecimenContainedPreference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSpecimenStatus', PHPFHIRTypeMap::getTypeClass('SpecimenStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStrandType', PHPFHIRTypeMap::getTypeClass('StrandType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRString', PHPFHIRTypeMap::getTypeClass('string'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureDefinitionKind', PHPFHIRTypeMap::getTypeClass('StructureDefinitionKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapGroupTypeMode', PHPFHIRTypeMap::getTypeClass('StructureMapGroupTypeMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapInputMode', PHPFHIRTypeMap::getTypeClass('StructureMapInputMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapModelMode', PHPFHIRTypeMap::getTypeClass('StructureMapModelMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapSourceListMode', PHPFHIRTypeMap::getTypeClass('StructureMapSourceListMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapTargetListMode', PHPFHIRTypeMap::getTypeClass('StructureMapTargetListMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRStructureMapTransform', PHPFHIRTypeMap::getTypeClass('StructureMapTransform'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSubmitDataUpdateType', PHPFHIRTypeMap::getTypeClass('SubmitDataUpdateType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSubscriptionNotificationType', PHPFHIRTypeMap::getTypeClass('SubscriptionNotificationType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSubscriptionPayloadContent', PHPFHIRTypeMap::getTypeClass('SubscriptionPayloadContent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSubscriptionStatusCodes', PHPFHIRTypeMap::getTypeClass('SubscriptionStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSupplyDeliveryStatus', PHPFHIRTypeMap::getTypeClass('SupplyDeliveryStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSupplyRequestStatus', PHPFHIRTypeMap::getTypeClass('SupplyRequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRSystemRestfulInteraction', PHPFHIRTypeMap::getTypeClass('SystemRestfulInteraction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTaskIntent', PHPFHIRTypeMap::getTypeClass('TaskIntent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTaskStatus', PHPFHIRTypeMap::getTypeClass('TaskStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestReportActionResult', PHPFHIRTypeMap::getTypeClass('TestReportActionResult'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestReportParticipantType', PHPFHIRTypeMap::getTypeClass('TestReportParticipantType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestReportResult', PHPFHIRTypeMap::getTypeClass('TestReportResult'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestReportStatus', PHPFHIRTypeMap::getTypeClass('TestReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTestScriptRequestMethodCode', PHPFHIRTypeMap::getTypeClass('TestScriptRequestMethodCode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTime', PHPFHIRTypeMap::getTypeClass('time'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTransportIntent', PHPFHIRTypeMap::getTypeClass('TransportIntent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTransportStatus', PHPFHIRTypeMap::getTypeClass('TransportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTriggeredBytype', PHPFHIRTypeMap::getTypeClass('TriggeredBytype'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTriggerType', PHPFHIRTypeMap::getTypeClass('TriggerType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTypeDerivationRule', PHPFHIRTypeMap::getTypeClass('TypeDerivationRule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRTypeRestfulInteraction', PHPFHIRTypeMap::getTypeClass('TypeRestfulInteraction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUDIEntryType', PHPFHIRTypeMap::getTypeClass('UDIEntryType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUnitsOfTime', PHPFHIRTypeMap::getTypeClass('UnitsOfTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUnsignedInt', PHPFHIRTypeMap::getTypeClass('unsignedInt'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUri', PHPFHIRTypeMap::getTypeClass('uri'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUrl', PHPFHIRTypeMap::getTypeClass('url'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUse', PHPFHIRTypeMap::getTypeClass('Use'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRUuid', PHPFHIRTypeMap::getTypeClass('uuid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRVerificationResultStatus', PHPFHIRTypeMap::getTypeClass('VerificationResultStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRVersionIndependentResourceTypesAll', PHPFHIRTypeMap::getTypeClass('VersionIndependentResourceTypesAll'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRVisionBase', PHPFHIRTypeMap::getTypeClass('VisionBase'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRElement\FHIRVisionEyes', PHPFHIRTypeMap::getTypeClass('VisionEyes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource', PHPFHIRTypeMap::getTypeClass('Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRBinary', PHPFHIRTypeMap::getTypeClass('Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRBundle', PHPFHIRTypeMap::getTypeClass('Bundle'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource', PHPFHIRTypeMap::getTypeClass('DomainResource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAccount', PHPFHIRTypeMap::getTypeClass('Account'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdministrableProductDefinition', PHPFHIRTypeMap::getTypeClass('AdministrableProductDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdverseEvent', PHPFHIRTypeMap::getTypeClass('AdverseEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', PHPFHIRTypeMap::getTypeClass('AllergyIntolerance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointment', PHPFHIRTypeMap::getTypeClass('Appointment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', PHPFHIRTypeMap::getTypeClass('AppointmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRArtifactAssessment', PHPFHIRTypeMap::getTypeClass('ArtifactAssessment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAuditEvent', PHPFHIRTypeMap::getTypeClass('AuditEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBasic', PHPFHIRTypeMap::getTypeClass('Basic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProduct'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProductDispense', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProductDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBodyStructure', PHPFHIRTypeMap::getTypeClass('BodyStructure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource', PHPFHIRTypeMap::getTypeClass('CanonicalResource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRActorDefinition', PHPFHIRTypeMap::getTypeClass('ActorDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCapabilityStatement', PHPFHIRTypeMap::getTypeClass('CapabilityStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCompartmentDefinition', PHPFHIRTypeMap::getTypeClass('CompartmentDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRExampleScenario', PHPFHIRTypeMap::getTypeClass('ExampleScenario'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRGraphDefinition', PHPFHIRTypeMap::getTypeClass('GraphDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRImplementationGuide', PHPFHIRTypeMap::getTypeClass('ImplementationGuide'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMessageDefinition', PHPFHIRTypeMap::getTypeClass('MessageDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource', PHPFHIRTypeMap::getTypeClass('MetadataResource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRActivityDefinition', PHPFHIRTypeMap::getTypeClass('ActivityDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRChargeItemDefinition', PHPFHIRTypeMap::getTypeClass('ChargeItemDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCitation', PHPFHIRTypeMap::getTypeClass('Citation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCodeSystem', PHPFHIRTypeMap::getTypeClass('CodeSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConceptMap', PHPFHIRTypeMap::getTypeClass('ConceptMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConditionDefinition', PHPFHIRTypeMap::getTypeClass('ConditionDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREventDefinition', PHPFHIRTypeMap::getTypeClass('EventDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidence', PHPFHIRTypeMap::getTypeClass('Evidence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceReport', PHPFHIRTypeMap::getTypeClass('EvidenceReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceVariable', PHPFHIRTypeMap::getTypeClass('EvidenceVariable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRLibrary', PHPFHIRTypeMap::getTypeClass('Library'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMeasure', PHPFHIRTypeMap::getTypeClass('Measure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMedicationKnowledge', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRNamingSystem', PHPFHIRTypeMap::getTypeClass('NamingSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRObservationDefinition', PHPFHIRTypeMap::getTypeClass('ObservationDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRPlanDefinition', PHPFHIRTypeMap::getTypeClass('PlanDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRQuestionnaire', PHPFHIRTypeMap::getTypeClass('Questionnaire'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRSpecimenDefinition', PHPFHIRTypeMap::getTypeClass('SpecimenDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRValueSet', PHPFHIRTypeMap::getTypeClass('ValueSet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIROperationDefinition', PHPFHIRTypeMap::getTypeClass('OperationDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRRequirements', PHPFHIRTypeMap::getTypeClass('Requirements'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSearchParameter', PHPFHIRTypeMap::getTypeClass('SearchParameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureDefinition', PHPFHIRTypeMap::getTypeClass('StructureDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureMap', PHPFHIRTypeMap::getTypeClass('StructureMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSubscriptionTopic', PHPFHIRTypeMap::getTypeClass('SubscriptionTopic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTerminologyCapabilities', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestPlan', PHPFHIRTypeMap::getTypeClass('TestPlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestScript', PHPFHIRTypeMap::getTypeClass('TestScript'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCarePlan', PHPFHIRTypeMap::getTypeClass('CarePlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCareTeam', PHPFHIRTypeMap::getTypeClass('CareTeam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRChargeItem', PHPFHIRTypeMap::getTypeClass('ChargeItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaim', PHPFHIRTypeMap::getTypeClass('Claim'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaimResponse', PHPFHIRTypeMap::getTypeClass('ClaimResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', PHPFHIRTypeMap::getTypeClass('ClinicalImpression'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalUseDefinition', PHPFHIRTypeMap::getTypeClass('ClinicalUseDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunication', PHPFHIRTypeMap::getTypeClass('Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', PHPFHIRTypeMap::getTypeClass('CommunicationRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRComposition', PHPFHIRTypeMap::getTypeClass('Composition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCondition', PHPFHIRTypeMap::getTypeClass('Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRConsent', PHPFHIRTypeMap::getTypeClass('Consent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRContract', PHPFHIRTypeMap::getTypeClass('Contract'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverage', PHPFHIRTypeMap::getTypeClass('Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', PHPFHIRTypeMap::getTypeClass('DetectedIssue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDevice', PHPFHIRTypeMap::getTypeClass('Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceAssociation', PHPFHIRTypeMap::getTypeClass('DeviceAssociation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition', PHPFHIRTypeMap::getTypeClass('DeviceDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDispense', PHPFHIRTypeMap::getTypeClass('DeviceDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', PHPFHIRTypeMap::getTypeClass('DeviceMetric'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceRequest', PHPFHIRTypeMap::getTypeClass('DeviceRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceUsage', PHPFHIRTypeMap::getTypeClass('DeviceUsage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', PHPFHIRTypeMap::getTypeClass('DiagnosticReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDocumentReference', PHPFHIRTypeMap::getTypeClass('DocumentReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounter', PHPFHIRTypeMap::getTypeClass('Encounter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounterHistory', PHPFHIRTypeMap::getTypeClass('EncounterHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREndpoint', PHPFHIRTypeMap::getTypeClass('Endpoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', PHPFHIRTypeMap::getTypeClass('EnrollmentRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', PHPFHIRTypeMap::getTypeClass('EnrollmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', PHPFHIRTypeMap::getTypeClass('EpisodeOfCare'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', PHPFHIRTypeMap::getTypeClass('FamilyMemberHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFlag', PHPFHIRTypeMap::getTypeClass('Flag'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFormularyItem', PHPFHIRTypeMap::getTypeClass('FormularyItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGenomicStudy', PHPFHIRTypeMap::getTypeClass('GenomicStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGoal', PHPFHIRTypeMap::getTypeClass('Goal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGroup', PHPFHIRTypeMap::getTypeClass('Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse', PHPFHIRTypeMap::getTypeClass('GuidanceResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRHealthcareService', PHPFHIRTypeMap::getTypeClass('HealthcareService'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingSelection', PHPFHIRTypeMap::getTypeClass('ImagingSelection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingStudy', PHPFHIRTypeMap::getTypeClass('ImagingStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunization', PHPFHIRTypeMap::getTypeClass('Immunization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation', PHPFHIRTypeMap::getTypeClass('ImmunizationEvaluation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', PHPFHIRTypeMap::getTypeClass('ImmunizationRecommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRIngredient', PHPFHIRTypeMap::getTypeClass('Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInsurancePlan', PHPFHIRTypeMap::getTypeClass('InsurancePlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryItem', PHPFHIRTypeMap::getTypeClass('InventoryItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryReport', PHPFHIRTypeMap::getTypeClass('InventoryReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInvoice', PHPFHIRTypeMap::getTypeClass('Invoice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLinkage', PHPFHIRTypeMap::getTypeClass('Linkage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRList', PHPFHIRTypeMap::getTypeClass('List'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLocation', PHPFHIRTypeMap::getTypeClass('Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRManufacturedItemDefinition', PHPFHIRTypeMap::getTypeClass('ManufacturedItemDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMeasureReport', PHPFHIRTypeMap::getTypeClass('MeasureReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedication', PHPFHIRTypeMap::getTypeClass('Medication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', PHPFHIRTypeMap::getTypeClass('MedicationAdministration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', PHPFHIRTypeMap::getTypeClass('MedicationDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationRequest', PHPFHIRTypeMap::getTypeClass('MedicationRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', PHPFHIRTypeMap::getTypeClass('MedicationStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicinalProductDefinition', PHPFHIRTypeMap::getTypeClass('MedicinalProductDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMessageHeader', PHPFHIRTypeMap::getTypeClass('MessageHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMolecularSequence', PHPFHIRTypeMap::getTypeClass('MolecularSequence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionIntake', PHPFHIRTypeMap::getTypeClass('NutritionIntake'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', PHPFHIRTypeMap::getTypeClass('NutritionOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionProduct', PHPFHIRTypeMap::getTypeClass('NutritionProduct'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRObservation', PHPFHIRTypeMap::getTypeClass('Observation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIROperationOutcome', PHPFHIRTypeMap::getTypeClass('OperationOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganization', PHPFHIRTypeMap::getTypeClass('Organization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation', PHPFHIRTypeMap::getTypeClass('OrganizationAffiliation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPackagedProductDefinition', PHPFHIRTypeMap::getTypeClass('PackagedProductDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPatient', PHPFHIRTypeMap::getTypeClass('Patient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', PHPFHIRTypeMap::getTypeClass('PaymentNotice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', PHPFHIRTypeMap::getTypeClass('PaymentReconciliation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPermission', PHPFHIRTypeMap::getTypeClass('Permission'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPerson', PHPFHIRTypeMap::getTypeClass('Person'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitioner', PHPFHIRTypeMap::getTypeClass('Practitioner'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitionerRole', PHPFHIRTypeMap::getTypeClass('PractitionerRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProcedure', PHPFHIRTypeMap::getTypeClass('Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProvenance', PHPFHIRTypeMap::getTypeClass('Provenance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', PHPFHIRTypeMap::getTypeClass('QuestionnaireResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRegulatedAuthorization', PHPFHIRTypeMap::getTypeClass('RegulatedAuthorization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', PHPFHIRTypeMap::getTypeClass('RelatedPerson'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRequestOrchestration', PHPFHIRTypeMap::getTypeClass('RequestOrchestration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchStudy', PHPFHIRTypeMap::getTypeClass('ResearchStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchSubject', PHPFHIRTypeMap::getTypeClass('ResearchSubject'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', PHPFHIRTypeMap::getTypeClass('RiskAssessment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSchedule', PHPFHIRTypeMap::getTypeClass('Schedule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRServiceRequest', PHPFHIRTypeMap::getTypeClass('ServiceRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSlot', PHPFHIRTypeMap::getTypeClass('Slot'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSpecimen', PHPFHIRTypeMap::getTypeClass('Specimen'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscription', PHPFHIRTypeMap::getTypeClass('Subscription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscriptionStatus', PHPFHIRTypeMap::getTypeClass('SubscriptionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstance', PHPFHIRTypeMap::getTypeClass('Substance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceDefinition', PHPFHIRTypeMap::getTypeClass('SubstanceDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceNucleicAcid', PHPFHIRTypeMap::getTypeClass('SubstanceNucleicAcid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstancePolymer', PHPFHIRTypeMap::getTypeClass('SubstancePolymer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceProtein', PHPFHIRTypeMap::getTypeClass('SubstanceProtein'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceReferenceInformation', PHPFHIRTypeMap::getTypeClass('SubstanceReferenceInformation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceSourceMaterial', PHPFHIRTypeMap::getTypeClass('SubstanceSourceMaterial'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', PHPFHIRTypeMap::getTypeClass('SupplyDelivery'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', PHPFHIRTypeMap::getTypeClass('SupplyRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTask', PHPFHIRTypeMap::getTypeClass('Task'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTestReport', PHPFHIRTypeMap::getTypeClass('TestReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTransport', PHPFHIRTypeMap::getTypeClass('Transport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVerificationResult', PHPFHIRTypeMap::getTypeClass('VerificationResult'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', PHPFHIRTypeMap::getTypeClass('VisionPrescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBase\FHIRResource\FHIRParameters', PHPFHIRTypeMap::getTypeClass('Parameters'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRBooleanPrimitive', PHPFHIRTypeMap::getTypeClass('boolean-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCanonicalPrimitive', PHPFHIRTypeMap::getTypeClass('canonical-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive', PHPFHIRTypeMap::getTypeClass('code-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAccountStatusEnum', PHPFHIRTypeMap::getTypeClass('AccountStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionCardinalityBehaviorEnum', PHPFHIRTypeMap::getTypeClass('ActionCardinalityBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionConditionKindEnum', PHPFHIRTypeMap::getTypeClass('ActionConditionKindEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionGroupingBehaviorEnum', PHPFHIRTypeMap::getTypeClass('ActionGroupingBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionParticipantTypeEnum', PHPFHIRTypeMap::getTypeClass('ActionParticipantTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionPrecheckBehaviorEnum', PHPFHIRTypeMap::getTypeClass('ActionPrecheckBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionRelationshipTypeEnum', PHPFHIRTypeMap::getTypeClass('ActionRelationshipTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionRequiredBehaviorEnum', PHPFHIRTypeMap::getTypeClass('ActionRequiredBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRActionSelectionBehaviorEnum', PHPFHIRTypeMap::getTypeClass('ActionSelectionBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAddressTypeEnum', PHPFHIRTypeMap::getTypeClass('AddressTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAddressUseEnum', PHPFHIRTypeMap::getTypeClass('AddressUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAdministrativeGenderEnum', PHPFHIRTypeMap::getTypeClass('AdministrativeGenderEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAdverseEventActualityEnum', PHPFHIRTypeMap::getTypeClass('AdverseEventActualityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAdverseEventStatusEnum', PHPFHIRTypeMap::getTypeClass('AdverseEventStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAgeUnitsEnum', PHPFHIRTypeMap::getTypeClass('AgeUnitsEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAggregationModeEnum', PHPFHIRTypeMap::getTypeClass('AggregationModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryEnum', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceCategoryEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityEnum', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceCriticalityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityEnum', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceSeverityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAllResourceTypesEnum', PHPFHIRTypeMap::getTypeClass('AllResourceTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAppointmentResponseStatusEnum', PHPFHIRTypeMap::getTypeClass('AppointmentResponseStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAppointmentStatusEnum', PHPFHIRTypeMap::getTypeClass('AppointmentStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRArtifactAssessmentDispositionEnum', PHPFHIRTypeMap::getTypeClass('ArtifactAssessmentDispositionEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRArtifactAssessmentInformationTypeEnum', PHPFHIRTypeMap::getTypeClass('ArtifactAssessmentInformationTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRArtifactAssessmentWorkflowStatusEnum', PHPFHIRTypeMap::getTypeClass('ArtifactAssessmentWorkflowStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAssertionDirectionTypeEnum', PHPFHIRTypeMap::getTypeClass('AssertionDirectionTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAssertionManualCompletionTypeEnum', PHPFHIRTypeMap::getTypeClass('AssertionManualCompletionTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAssertionOperatorTypeEnum', PHPFHIRTypeMap::getTypeClass('AssertionOperatorTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAssertionResponseTypesEnum', PHPFHIRTypeMap::getTypeClass('AssertionResponseTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAuditEventActionEnum', PHPFHIRTypeMap::getTypeClass('AuditEventActionEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRAuditEventSeverityEnum', PHPFHIRTypeMap::getTypeClass('AuditEventSeverityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRBindingStrengthEnum', PHPFHIRTypeMap::getTypeClass('BindingStrengthEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRBiologicallyDerivedProductDispenseCodesEnum', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProductDispenseCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRBundleTypeEnum', PHPFHIRTypeMap::getTypeClass('BundleTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCapabilityStatementKindEnum', PHPFHIRTypeMap::getTypeClass('CapabilityStatementKindEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCarePlanIntentEnum', PHPFHIRTypeMap::getTypeClass('CarePlanIntentEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCareTeamStatusEnum', PHPFHIRTypeMap::getTypeClass('CareTeamStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCharacteristicCombinationEnum', PHPFHIRTypeMap::getTypeClass('CharacteristicCombinationEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRChargeItemStatusEnum', PHPFHIRTypeMap::getTypeClass('ChargeItemStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRClaimProcessingCodesEnum', PHPFHIRTypeMap::getTypeClass('ClaimProcessingCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRClinicalUseDefinitionTypeEnum', PHPFHIRTypeMap::getTypeClass('ClinicalUseDefinitionTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCodeSearchSupportEnum', PHPFHIRTypeMap::getTypeClass('CodeSearchSupportEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCodeSystemContentModeEnum', PHPFHIRTypeMap::getTypeClass('CodeSystemContentModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningEnum', PHPFHIRTypeMap::getTypeClass('CodeSystemHierarchyMeaningEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCommonLanguagesEnum', PHPFHIRTypeMap::getTypeClass('CommonLanguagesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCompartmentTypeEnum', PHPFHIRTypeMap::getTypeClass('CompartmentTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCompositionStatusEnum', PHPFHIRTypeMap::getTypeClass('CompositionStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConceptMapAttributeTypeEnum', PHPFHIRTypeMap::getTypeClass('ConceptMapAttributeTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeEnum', PHPFHIRTypeMap::getTypeClass('ConceptMapGroupUnmappedModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConceptMapPropertyTypeEnum', PHPFHIRTypeMap::getTypeClass('ConceptMapPropertyTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConceptMapRelationshipEnum', PHPFHIRTypeMap::getTypeClass('ConceptMapRelationshipEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConcreteFHIRTypesEnum', PHPFHIRTypeMap::getTypeClass('ConcreteFHIRTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConditionalDeleteStatusEnum', PHPFHIRTypeMap::getTypeClass('ConditionalDeleteStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConditionalReadStatusEnum', PHPFHIRTypeMap::getTypeClass('ConditionalReadStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConditionPreconditionTypeEnum', PHPFHIRTypeMap::getTypeClass('ConditionPreconditionTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConditionQuestionnairePurposeEnum', PHPFHIRTypeMap::getTypeClass('ConditionQuestionnairePurposeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConformanceExpectationEnum', PHPFHIRTypeMap::getTypeClass('ConformanceExpectationEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConsentDataMeaningEnum', PHPFHIRTypeMap::getTypeClass('ConsentDataMeaningEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConsentProvisionTypeEnum', PHPFHIRTypeMap::getTypeClass('ConsentProvisionTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConsentStateEnum', PHPFHIRTypeMap::getTypeClass('ConsentStateEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRConstraintSeverityEnum', PHPFHIRTypeMap::getTypeClass('ConstraintSeverityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContactPointSystemEnum', PHPFHIRTypeMap::getTypeClass('ContactPointSystemEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContactPointUseEnum', PHPFHIRTypeMap::getTypeClass('ContactPointUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContractResourcePublicationStatusCodesEnum', PHPFHIRTypeMap::getTypeClass('ContractResourcePublicationStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContractResourceStatusCodesEnum', PHPFHIRTypeMap::getTypeClass('ContractResourceStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRContributorTypeEnum', PHPFHIRTypeMap::getTypeClass('ContributorTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRCriteriaNotExistsBehaviorEnum', PHPFHIRTypeMap::getTypeClass('CriteriaNotExistsBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDefinitionResourceTypesEnum', PHPFHIRTypeMap::getTypeClass('DefinitionResourceTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDetectedIssueSeverityEnum', PHPFHIRTypeMap::getTypeClass('DetectedIssueSeverityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDetectedIssueStatusEnum', PHPFHIRTypeMap::getTypeClass('DetectedIssueStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceCorrectiveActionScopeEnum', PHPFHIRTypeMap::getTypeClass('DeviceCorrectiveActionScopeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceDefinitionRegulatoryIdentifierTypeEnum', PHPFHIRTypeMap::getTypeClass('DeviceDefinitionRegulatoryIdentifierTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceDispenseStatusCodesEnum', PHPFHIRTypeMap::getTypeClass('DeviceDispenseStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateEnum', PHPFHIRTypeMap::getTypeClass('DeviceMetricCalibrationStateEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeEnum', PHPFHIRTypeMap::getTypeClass('DeviceMetricCalibrationTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceMetricCategoryEnum', PHPFHIRTypeMap::getTypeClass('DeviceMetricCategoryEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusEnum', PHPFHIRTypeMap::getTypeClass('DeviceMetricOperationalStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceNameTypeEnum', PHPFHIRTypeMap::getTypeClass('DeviceNameTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceProductionIdentifierInUDIEnum', PHPFHIRTypeMap::getTypeClass('DeviceProductionIdentifierInUDIEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDeviceUsageStatusEnum', PHPFHIRTypeMap::getTypeClass('DeviceUsageStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDiagnosticReportStatusEnum', PHPFHIRTypeMap::getTypeClass('DiagnosticReportStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDiscriminatorTypeEnum', PHPFHIRTypeMap::getTypeClass('DiscriminatorTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDocumentModeEnum', PHPFHIRTypeMap::getTypeClass('DocumentModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRDocumentReferenceStatusEnum', PHPFHIRTypeMap::getTypeClass('DocumentReferenceStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREligibilityOutcomeEnum', PHPFHIRTypeMap::getTypeClass('EligibilityOutcomeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREligibilityRequestPurposeEnum', PHPFHIRTypeMap::getTypeClass('EligibilityRequestPurposeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREligibilityResponsePurposeEnum', PHPFHIRTypeMap::getTypeClass('EligibilityResponsePurposeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREnableWhenBehaviorEnum', PHPFHIRTypeMap::getTypeClass('EnableWhenBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREncounterLocationStatusEnum', PHPFHIRTypeMap::getTypeClass('EncounterLocationStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREncounterStatusEnum', PHPFHIRTypeMap::getTypeClass('EncounterStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREndpointStatusEnum', PHPFHIRTypeMap::getTypeClass('EndpointStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREnrollmentOutcomeEnum', PHPFHIRTypeMap::getTypeClass('EnrollmentOutcomeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREpisodeOfCareStatusEnum', PHPFHIRTypeMap::getTypeClass('EpisodeOfCareStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREventCapabilityModeEnum', PHPFHIRTypeMap::getTypeClass('EventCapabilityModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREventResourceTypesEnum', PHPFHIRTypeMap::getTypeClass('EventResourceTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREventStatusEnum', PHPFHIRTypeMap::getTypeClass('EventStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREventTimingEnum', PHPFHIRTypeMap::getTypeClass('EventTimingEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIREvidenceVariableHandlingEnum', PHPFHIRTypeMap::getTypeClass('EvidenceVariableHandlingEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRExampleScenarioActorTypeEnum', PHPFHIRTypeMap::getTypeClass('ExampleScenarioActorTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusEnum', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefitStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRExtensionContextTypeEnum', PHPFHIRTypeMap::getTypeClass('ExtensionContextTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFamilyHistoryStatusEnum', PHPFHIRTypeMap::getTypeClass('FamilyHistoryStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRDeviceStatusEnum', PHPFHIRTypeMap::getTypeClass('FHIRDeviceStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRPathTypesEnum', PHPFHIRTypeMap::getTypeClass('FHIRPathTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRSubstanceStatusEnum', PHPFHIRTypeMap::getTypeClass('FHIRSubstanceStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRTypesEnum', PHPFHIRTypeMap::getTypeClass('FHIRTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFHIRVersionEnum', PHPFHIRTypeMap::getTypeClass('FHIRVersionEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFilterOperatorEnum', PHPFHIRTypeMap::getTypeClass('FilterOperatorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesEnum', PHPFHIRTypeMap::getTypeClass('FinancialResourceStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFlagStatusEnum', PHPFHIRTypeMap::getTypeClass('FlagStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRFormularyItemStatusCodesEnum', PHPFHIRTypeMap::getTypeClass('FormularyItemStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGenomicStudyStatusEnum', PHPFHIRTypeMap::getTypeClass('GenomicStudyStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGoalLifecycleStatusEnum', PHPFHIRTypeMap::getTypeClass('GoalLifecycleStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGraphCompartmentRuleEnum', PHPFHIRTypeMap::getTypeClass('GraphCompartmentRuleEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGraphCompartmentUseEnum', PHPFHIRTypeMap::getTypeClass('GraphCompartmentUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGroupMembershipBasisEnum', PHPFHIRTypeMap::getTypeClass('GroupMembershipBasisEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGroupTypeEnum', PHPFHIRTypeMap::getTypeClass('GroupTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGuidanceResponseStatusEnum', PHPFHIRTypeMap::getTypeClass('GuidanceResponseStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRGuidePageGenerationEnum', PHPFHIRTypeMap::getTypeClass('GuidePageGenerationEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRHTTPVerbEnum', PHPFHIRTypeMap::getTypeClass('HTTPVerbEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIdentifierUseEnum', PHPFHIRTypeMap::getTypeClass('IdentifierUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIdentityAssuranceLevelEnum', PHPFHIRTypeMap::getTypeClass('IdentityAssuranceLevelEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImagingSelectionDGraphicTypeEnum', PHPFHIRTypeMap::getTypeClass('ImagingSelectionDGraphicTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImagingSelectionStatusEnum', PHPFHIRTypeMap::getTypeClass('ImagingSelectionStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImagingStudyStatusEnum', PHPFHIRTypeMap::getTypeClass('ImagingStudyStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImmunizationEvaluationStatusCodesEnum', PHPFHIRTypeMap::getTypeClass('ImmunizationEvaluationStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRImmunizationStatusCodesEnum', PHPFHIRTypeMap::getTypeClass('ImmunizationStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIngredientManufacturerRoleEnum', PHPFHIRTypeMap::getTypeClass('IngredientManufacturerRoleEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInteractionTriggerEnum', PHPFHIRTypeMap::getTypeClass('InteractionTriggerEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInventoryCountTypeEnum', PHPFHIRTypeMap::getTypeClass('InventoryCountTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInventoryItemStatusCodesEnum', PHPFHIRTypeMap::getTypeClass('InventoryItemStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInventoryReportStatusEnum', PHPFHIRTypeMap::getTypeClass('InventoryReportStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRInvoiceStatusEnum', PHPFHIRTypeMap::getTypeClass('InvoiceStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIssueSeverityEnum', PHPFHIRTypeMap::getTypeClass('IssueSeverityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRIssueTypeEnum', PHPFHIRTypeMap::getTypeClass('IssueTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRJurisdictionValueSetEnum', PHPFHIRTypeMap::getTypeClass('JurisdictionValueSetEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRKindEnum', PHPFHIRTypeMap::getTypeClass('KindEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLinkageTypeEnum', PHPFHIRTypeMap::getTypeClass('LinkageTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLinkRelationTypesEnum', PHPFHIRTypeMap::getTypeClass('LinkRelationTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLinkTypeEnum', PHPFHIRTypeMap::getTypeClass('LinkTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRListModeEnum', PHPFHIRTypeMap::getTypeClass('ListModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRListStatusEnum', PHPFHIRTypeMap::getTypeClass('ListStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLocationModeEnum', PHPFHIRTypeMap::getTypeClass('LocationModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRLocationStatusEnum', PHPFHIRTypeMap::getTypeClass('LocationStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMeasureReportStatusEnum', PHPFHIRTypeMap::getTypeClass('MeasureReportStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMeasureReportTypeEnum', PHPFHIRTypeMap::getTypeClass('MeasureReportTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationAdministrationStatusCodesEnum', PHPFHIRTypeMap::getTypeClass('MedicationAdministrationStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationDispenseStatusCodesEnum', PHPFHIRTypeMap::getTypeClass('MedicationDispenseStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationKnowledgeStatusCodesEnum', PHPFHIRTypeMap::getTypeClass('MedicationKnowledgeStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationRequestIntentEnum', PHPFHIRTypeMap::getTypeClass('MedicationRequestIntentEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationrequestStatusEnum', PHPFHIRTypeMap::getTypeClass('MedicationrequestStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationStatementStatusCodesEnum', PHPFHIRTypeMap::getTypeClass('MedicationStatementStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMedicationStatusCodesEnum', PHPFHIRTypeMap::getTypeClass('MedicationStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMessageheaderResponseRequestEnum', PHPFHIRTypeMap::getTypeClass('MessageheaderResponseRequestEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRMessageSignificanceCategoryEnum', PHPFHIRTypeMap::getTypeClass('MessageSignificanceCategoryEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNameUseEnum', PHPFHIRTypeMap::getTypeClass('NameUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeEnum', PHPFHIRTypeMap::getTypeClass('NamingSystemIdentifierTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNamingSystemTypeEnum', PHPFHIRTypeMap::getTypeClass('NamingSystemTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNarrativeStatusEnum', PHPFHIRTypeMap::getTypeClass('NarrativeStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNoteTypeEnum', PHPFHIRTypeMap::getTypeClass('NoteTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRNutritionProductStatusEnum', PHPFHIRTypeMap::getTypeClass('NutritionProductStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRObservationDataTypeEnum', PHPFHIRTypeMap::getTypeClass('ObservationDataTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRObservationRangeCategoryEnum', PHPFHIRTypeMap::getTypeClass('ObservationRangeCategoryEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRObservationStatusEnum', PHPFHIRTypeMap::getTypeClass('ObservationStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROperationKindEnum', PHPFHIRTypeMap::getTypeClass('OperationKindEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROperationOutcomeCodesEnum', PHPFHIRTypeMap::getTypeClass('OperationOutcomeCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROperationParameterScopeEnum', PHPFHIRTypeMap::getTypeClass('OperationParameterScopeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROperationParameterUseEnum', PHPFHIRTypeMap::getTypeClass('OperationParameterUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIROrientationTypeEnum', PHPFHIRTypeMap::getTypeClass('OrientationTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRParticipantResourceTypesEnum', PHPFHIRTypeMap::getTypeClass('ParticipantResourceTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRParticipationStatusEnum', PHPFHIRTypeMap::getTypeClass('ParticipationStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPaymentOutcomeEnum', PHPFHIRTypeMap::getTypeClass('PaymentOutcomeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPermissionRuleCombiningEnum', PHPFHIRTypeMap::getTypeClass('PermissionRuleCombiningEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPermissionStatusEnum', PHPFHIRTypeMap::getTypeClass('PermissionStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPropertyRepresentationEnum', PHPFHIRTypeMap::getTypeClass('PropertyRepresentationEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPropertyTypeEnum', PHPFHIRTypeMap::getTypeClass('PropertyTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRProvenanceEntityRoleEnum', PHPFHIRTypeMap::getTypeClass('ProvenanceEntityRoleEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRPublicationStatusEnum', PHPFHIRTypeMap::getTypeClass('PublicationStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuantityComparatorEnum', PHPFHIRTypeMap::getTypeClass('QuantityComparatorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireAnswerConstraintEnum', PHPFHIRTypeMap::getTypeClass('QuestionnaireAnswerConstraintEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireItemDisabledDisplayEnum', PHPFHIRTypeMap::getTypeClass('QuestionnaireItemDisabledDisplayEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireItemOperatorEnum', PHPFHIRTypeMap::getTypeClass('QuestionnaireItemOperatorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireItemTypeEnum', PHPFHIRTypeMap::getTypeClass('QuestionnaireItemTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusEnum', PHPFHIRTypeMap::getTypeClass('QuestionnaireResponseStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRReferenceHandlingPolicyEnum', PHPFHIRTypeMap::getTypeClass('ReferenceHandlingPolicyEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRReferenceVersionRulesEnum', PHPFHIRTypeMap::getTypeClass('ReferenceVersionRulesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRelatedArtifactTypeEnum', PHPFHIRTypeMap::getTypeClass('RelatedArtifactTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRelatedArtifactTypeExpandedEnum', PHPFHIRTypeMap::getTypeClass('RelatedArtifactTypeExpandedEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRemittanceOutcomeEnum', PHPFHIRTypeMap::getTypeClass('RemittanceOutcomeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRReportRelationshipTypeEnum', PHPFHIRTypeMap::getTypeClass('ReportRelationshipTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRequestIntentEnum', PHPFHIRTypeMap::getTypeClass('RequestIntentEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRequestPriorityEnum', PHPFHIRTypeMap::getTypeClass('RequestPriorityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRequestResourceTypesEnum', PHPFHIRTypeMap::getTypeClass('RequestResourceTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRequestStatusEnum', PHPFHIRTypeMap::getTypeClass('RequestStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRResourceTypeEnum', PHPFHIRTypeMap::getTypeClass('ResourceTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRResourceVersionPolicyEnum', PHPFHIRTypeMap::getTypeClass('ResourceVersionPolicyEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRResponseTypeEnum', PHPFHIRTypeMap::getTypeClass('ResponseTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRRestfulCapabilityModeEnum', PHPFHIRTypeMap::getTypeClass('RestfulCapabilityModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchComparatorEnum', PHPFHIRTypeMap::getTypeClass('SearchComparatorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchEntryModeEnum', PHPFHIRTypeMap::getTypeClass('SearchEntryModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchModifierCodeEnum', PHPFHIRTypeMap::getTypeClass('SearchModifierCodeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchParamTypeEnum', PHPFHIRTypeMap::getTypeClass('SearchParamTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSearchProcessingModeTypeEnum', PHPFHIRTypeMap::getTypeClass('SearchProcessingModeTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSequenceTypeEnum', PHPFHIRTypeMap::getTypeClass('SequenceTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSlicingRulesEnum', PHPFHIRTypeMap::getTypeClass('SlicingRulesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSlotStatusEnum', PHPFHIRTypeMap::getTypeClass('SlotStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSortDirectionEnum', PHPFHIRTypeMap::getTypeClass('SortDirectionEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSPDXLicenseEnum', PHPFHIRTypeMap::getTypeClass('SPDXLicenseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSpecimenCombinedEnum', PHPFHIRTypeMap::getTypeClass('SpecimenCombinedEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSpecimenContainedPreferenceEnum', PHPFHIRTypeMap::getTypeClass('SpecimenContainedPreferenceEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSpecimenStatusEnum', PHPFHIRTypeMap::getTypeClass('SpecimenStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStrandTypeEnum', PHPFHIRTypeMap::getTypeClass('StrandTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureDefinitionKindEnum', PHPFHIRTypeMap::getTypeClass('StructureDefinitionKindEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeEnum', PHPFHIRTypeMap::getTypeClass('StructureMapGroupTypeModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapInputModeEnum', PHPFHIRTypeMap::getTypeClass('StructureMapInputModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapModelModeEnum', PHPFHIRTypeMap::getTypeClass('StructureMapModelModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapSourceListModeEnum', PHPFHIRTypeMap::getTypeClass('StructureMapSourceListModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapTargetListModeEnum', PHPFHIRTypeMap::getTypeClass('StructureMapTargetListModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRStructureMapTransformEnum', PHPFHIRTypeMap::getTypeClass('StructureMapTransformEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSubmitDataUpdateTypeEnum', PHPFHIRTypeMap::getTypeClass('SubmitDataUpdateTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSubscriptionNotificationTypeEnum', PHPFHIRTypeMap::getTypeClass('SubscriptionNotificationTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSubscriptionPayloadContentEnum', PHPFHIRTypeMap::getTypeClass('SubscriptionPayloadContentEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSubscriptionStatusCodesEnum', PHPFHIRTypeMap::getTypeClass('SubscriptionStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSupplyDeliveryStatusEnum', PHPFHIRTypeMap::getTypeClass('SupplyDeliveryStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSupplyRequestStatusEnum', PHPFHIRTypeMap::getTypeClass('SupplyRequestStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRSystemRestfulInteractionEnum', PHPFHIRTypeMap::getTypeClass('SystemRestfulInteractionEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTaskIntentEnum', PHPFHIRTypeMap::getTypeClass('TaskIntentEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTaskStatusEnum', PHPFHIRTypeMap::getTypeClass('TaskStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestReportActionResultEnum', PHPFHIRTypeMap::getTypeClass('TestReportActionResultEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestReportParticipantTypeEnum', PHPFHIRTypeMap::getTypeClass('TestReportParticipantTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestReportResultEnum', PHPFHIRTypeMap::getTypeClass('TestReportResultEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestReportStatusEnum', PHPFHIRTypeMap::getTypeClass('TestReportStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeEnum', PHPFHIRTypeMap::getTypeClass('TestScriptRequestMethodCodeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTransportIntentEnum', PHPFHIRTypeMap::getTypeClass('TransportIntentEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTransportStatusEnum', PHPFHIRTypeMap::getTypeClass('TransportStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTriggeredBytypeEnum', PHPFHIRTypeMap::getTypeClass('TriggeredBytypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTriggerTypeEnum', PHPFHIRTypeMap::getTypeClass('TriggerTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTypeDerivationRuleEnum', PHPFHIRTypeMap::getTypeClass('TypeDerivationRuleEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRTypeRestfulInteractionEnum', PHPFHIRTypeMap::getTypeClass('TypeRestfulInteractionEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRUDIEntryTypeEnum', PHPFHIRTypeMap::getTypeClass('UDIEntryTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRUnitsOfTimeEnum', PHPFHIRTypeMap::getTypeClass('UnitsOfTimeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRUseEnum', PHPFHIRTypeMap::getTypeClass('UseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRVerificationResultStatusEnum', PHPFHIRTypeMap::getTypeClass('VerificationResultStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRVersionIndependentResourceTypesAllEnum', PHPFHIRTypeMap::getTypeClass('VersionIndependentResourceTypesAllEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRVisionBaseEnum', PHPFHIRTypeMap::getTypeClass('VisionBaseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRCodePrimitive\FHIRVisionEyesEnum', PHPFHIRTypeMap::getTypeClass('VisionEyesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRDatePrimitive', PHPFHIRTypeMap::getTypeClass('date-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRDateTimePrimitive', PHPFHIRTypeMap::getTypeClass('dateTime-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRDecimalPrimitive', PHPFHIRTypeMap::getTypeClass('decimal-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRIdPrimitive', PHPFHIRTypeMap::getTypeClass('id-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRInstantPrimitive', PHPFHIRTypeMap::getTypeClass('instant-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRInteger64Primitive', PHPFHIRTypeMap::getTypeClass('integer64-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRIntegerPrimitive', PHPFHIRTypeMap::getTypeClass('integer-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRMarkdownPrimitive', PHPFHIRTypeMap::getTypeClass('markdown-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIROidPrimitive', PHPFHIRTypeMap::getTypeClass('oid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRPositiveIntPrimitive', PHPFHIRTypeMap::getTypeClass('positiveInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRResourceContainer', PHPFHIRTypeMap::getTypeClass('ResourceContainer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRSampledDataDataTypePrimitive', PHPFHIRTypeMap::getTypeClass('SampledDataDataType-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRStringPrimitive', PHPFHIRTypeMap::getTypeClass('string-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRStringPrimitive\FHIRColorCodesOrRGBEnum', PHPFHIRTypeMap::getTypeClass('ColorCodesOrRGBEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRTimePrimitive', PHPFHIRTypeMap::getTypeClass('time-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRUnsignedIntPrimitive', PHPFHIRTypeMap::getTypeClass('unsignedInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRUriPrimitive', PHPFHIRTypeMap::getTypeClass('uri-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRUrlPrimitive', PHPFHIRTypeMap::getTypeClass('url-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRUuidPrimitive', PHPFHIRTypeMap::getTypeClass('uuid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R5\FHIRXhtml', PHPFHIRTypeMap::getTypeClass('Xhtml'));
    }
}
