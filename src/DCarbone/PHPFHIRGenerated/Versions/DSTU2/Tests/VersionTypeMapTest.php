<?php

namespace DCarbone\PHPFHIRGenerated\Versions\DSTU2\Tests;

/*!
 * This class was generated with the PHPFHIR library (https://github.com/dcarbone/php-fhir) using
 * class definitions from HL7 FHIR (https://www.hl7.org/fhir/)
 * 
 * Class creation date: January 17th, 2025 18:09+0000
 * 
 * PHPFHIR Copyright:
 * 
 * Copyright 2016-2025 Daniel Carbone (daniel.p.carbone@gmail.com)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 *
 * FHIR Copyright Notice:
 *
 *   Copyright (c) 2011+, HL7, Inc.
 *   All rights reserved.
 * 
 *   Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *    * Neither the name of HL7 nor the names of its contributors may be used to
 *      endorse or promote products derived from this software without specific
 *      prior written permission.
 * 
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *   IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 * 
 * 
 *   Generated on Sat, Oct 24, 2015 07:41+1100 for FHIR v1.0.2
 * 
 *   Note: the schemas & schematrons do not contain all of the rules about what makes resources
 *   valid. Implementers will still need to be familiar with the content of the specification and with
 *   any profiles that apply to the resources in order to make a conformant implementation.
 * 
 */

use DCarbone\PHPFHIRGenerated\Versions\DSTU2\VersionTypeMap;
use PHPUnit\Framework\TestCase;

class VersionTypeMapTest extends TestCase
{
    public function testGetTypeClassWithNonStringReturnsNull()
    {
        $this->assertNull(VersionTypeMap::getTypeClassName(1));
    }

    public function testGetTypeClassName()
    {
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBase64BinaryPrimitive', VersionTypeMap::getTypeClassName('base64Binary-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBooleanPrimitive', VersionTypeMap::getTypeClassName('boolean-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRCodePrimitive', VersionTypeMap::getTypeClassName('code-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDatePrimitive', VersionTypeMap::getTypeClassName('date-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDateTimePrimitive', VersionTypeMap::getTypeClassName('dateTime-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDecimalPrimitive', VersionTypeMap::getTypeClassName('decimal-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement', VersionTypeMap::getTypeClassName('Element'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAccountStatus', VersionTypeMap::getTypeClassName('AccountStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRActionList', VersionTypeMap::getTypeClassName('ActionList'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddress', VersionTypeMap::getTypeClassName('Address'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressType', VersionTypeMap::getTypeClassName('AddressType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressUse', VersionTypeMap::getTypeClassName('AddressUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAdministrativeGender', VersionTypeMap::getTypeClassName('AdministrativeGender'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAggregationMode', VersionTypeMap::getTypeClassName('AggregationMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCategory', VersionTypeMap::getTypeClassName('AllergyIntoleranceCategory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCertainty', VersionTypeMap::getTypeClassName('AllergyIntoleranceCertainty'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCriticality', VersionTypeMap::getTypeClassName('AllergyIntoleranceCriticality'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceSeverity', VersionTypeMap::getTypeClassName('AllergyIntoleranceSeverity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceStatus', VersionTypeMap::getTypeClassName('AllergyIntoleranceStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceType', VersionTypeMap::getTypeClassName('AllergyIntoleranceType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnnotation', VersionTypeMap::getTypeClassName('Annotation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnswerFormat', VersionTypeMap::getTypeClassName('AnswerFormat'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAppointmentStatus', VersionTypeMap::getTypeClassName('AppointmentStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionDirectionType', VersionTypeMap::getTypeClassName('AssertionDirectionType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionOperatorType', VersionTypeMap::getTypeClassName('AssertionOperatorType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionResponseTypes', VersionTypeMap::getTypeClassName('AssertionResponseTypes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAttachment', VersionTypeMap::getTypeClassName('Attachment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventAction', VersionTypeMap::getTypeClassName('AuditEventAction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventOutcome', VersionTypeMap::getTypeClassName('AuditEventOutcome'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventParticipantNetworkType', VersionTypeMap::getTypeClassName('AuditEventParticipantNetworkType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement', VersionTypeMap::getTypeClassName('BackboneElement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction', VersionTypeMap::getTypeClassName('AllergyIntolerance.Reaction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant', VersionTypeMap::getTypeClassName('Appointment.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail', VersionTypeMap::getTypeClassName('AuditEvent.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEvent', VersionTypeMap::getTypeClassName('AuditEvent.Event'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork', VersionTypeMap::getTypeClassName('AuditEvent.Network'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventObject', VersionTypeMap::getTypeClassName('AuditEvent.Object'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventParticipant', VersionTypeMap::getTypeClassName('AuditEvent.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource', VersionTypeMap::getTypeClassName('AuditEvent.Source'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry', VersionTypeMap::getTypeClassName('Bundle.Entry'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink', VersionTypeMap::getTypeClassName('Bundle.Link'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest', VersionTypeMap::getTypeClassName('Bundle.Request'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse', VersionTypeMap::getTypeClassName('Bundle.Response'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch', VersionTypeMap::getTypeClassName('Bundle.Search'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity', VersionTypeMap::getTypeClassName('CarePlan.Activity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail', VersionTypeMap::getTypeClassName('CarePlan.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant', VersionTypeMap::getTypeClassName('CarePlan.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanRelatedPlan', VersionTypeMap::getTypeClassName('CarePlan.RelatedPlan'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem', VersionTypeMap::getTypeClassName('ClaimResponse.AddItem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication', VersionTypeMap::getTypeClassName('ClaimResponse.Adjudication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication1', VersionTypeMap::getTypeClassName('ClaimResponse.Adjudication1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication2', VersionTypeMap::getTypeClassName('ClaimResponse.Adjudication2'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication3', VersionTypeMap::getTypeClassName('ClaimResponse.Adjudication3'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication4', VersionTypeMap::getTypeClassName('ClaimResponse.Adjudication4'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseCoverage', VersionTypeMap::getTypeClassName('ClaimResponse.Coverage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail', VersionTypeMap::getTypeClassName('ClaimResponse.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1', VersionTypeMap::getTypeClassName('ClaimResponse.Detail1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError', VersionTypeMap::getTypeClassName('ClaimResponse.Error'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem', VersionTypeMap::getTypeClassName('ClaimResponse.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseNote', VersionTypeMap::getTypeClassName('ClaimResponse.Note'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail', VersionTypeMap::getTypeClassName('ClaimResponse.SubDetail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCoverage', VersionTypeMap::getTypeClassName('Claim.Coverage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail', VersionTypeMap::getTypeClassName('Claim.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis', VersionTypeMap::getTypeClassName('Claim.Diagnosis'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem', VersionTypeMap::getTypeClassName('Claim.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimMissingTeeth', VersionTypeMap::getTypeClassName('Claim.MissingTeeth'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee', VersionTypeMap::getTypeClassName('Claim.Payee'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProsthesis', VersionTypeMap::getTypeClassName('Claim.Prosthesis'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail', VersionTypeMap::getTypeClassName('Claim.SubDetail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding', VersionTypeMap::getTypeClassName('ClinicalImpression.Finding'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigations', VersionTypeMap::getTypeClassName('ClinicalImpression.Investigations'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionRuledOut', VersionTypeMap::getTypeClassName('ClinicalImpression.RuledOut'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload', VersionTypeMap::getTypeClassName('CommunicationRequest.Payload'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload', VersionTypeMap::getTypeClassName('Communication.Payload'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester', VersionTypeMap::getTypeClassName('Composition.Attester'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent', VersionTypeMap::getTypeClassName('Composition.Event'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection', VersionTypeMap::getTypeClassName('Composition.Section'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapContact', VersionTypeMap::getTypeClassName('ConceptMap.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn', VersionTypeMap::getTypeClassName('ConceptMap.DependsOn'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement', VersionTypeMap::getTypeClassName('ConceptMap.Element'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget', VersionTypeMap::getTypeClassName('ConceptMap.Target'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence', VersionTypeMap::getTypeClassName('Condition.Evidence'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage', VersionTypeMap::getTypeClassName('Condition.Stage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate', VersionTypeMap::getTypeClassName('Conformance.Certificate'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceContact', VersionTypeMap::getTypeClassName('Conformance.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument', VersionTypeMap::getTypeClassName('Conformance.Document'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEndpoint', VersionTypeMap::getTypeClassName('Conformance.Endpoint'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent', VersionTypeMap::getTypeClassName('Conformance.Event'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation', VersionTypeMap::getTypeClassName('Conformance.Implementation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction', VersionTypeMap::getTypeClassName('Conformance.Interaction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction1', VersionTypeMap::getTypeClassName('Conformance.Interaction1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging', VersionTypeMap::getTypeClassName('Conformance.Messaging'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation', VersionTypeMap::getTypeClassName('Conformance.Operation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource', VersionTypeMap::getTypeClassName('Conformance.Resource'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest', VersionTypeMap::getTypeClassName('Conformance.Rest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam', VersionTypeMap::getTypeClassName('Conformance.SearchParam'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity', VersionTypeMap::getTypeClassName('Conformance.Security'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware', VersionTypeMap::getTypeClassName('Conformance.Software'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor', VersionTypeMap::getTypeClassName('Contract.Actor'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor1', VersionTypeMap::getTypeClassName('Contract.Actor1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly', VersionTypeMap::getTypeClassName('Contract.Friendly'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal', VersionTypeMap::getTypeClassName('Contract.Legal'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule', VersionTypeMap::getTypeClassName('Contract.Rule'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner', VersionTypeMap::getTypeClassName('Contract.Signer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm', VersionTypeMap::getTypeClassName('Contract.Term'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem', VersionTypeMap::getTypeClassName('Contract.ValuedItem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1', VersionTypeMap::getTypeClassName('Contract.ValuedItem1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementContact', VersionTypeMap::getTypeClassName('DataElement.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping', VersionTypeMap::getTypeClassName('DataElement.Mapping'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation', VersionTypeMap::getTypeClassName('DetectedIssue.Mitigation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification', VersionTypeMap::getTypeClassName('DeviceComponent.ProductionSpecification'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration', VersionTypeMap::getTypeClassName('DeviceMetric.Calibration'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent', VersionTypeMap::getTypeClassName('DiagnosticOrder.Event'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem', VersionTypeMap::getTypeClassName('DiagnosticOrder.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage', VersionTypeMap::getTypeClassName('DiagnosticReport.Image'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent', VersionTypeMap::getTypeClassName('DocumentManifest.Content'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated', VersionTypeMap::getTypeClassName('DocumentManifest.Related'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent', VersionTypeMap::getTypeClassName('DocumentReference.Content'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext', VersionTypeMap::getTypeClassName('DocumentReference.Context'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated', VersionTypeMap::getTypeClassName('DocumentReference.Related'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo', VersionTypeMap::getTypeClassName('DocumentReference.RelatesTo'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization', VersionTypeMap::getTypeClassName('Encounter.Hospitalization'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation', VersionTypeMap::getTypeClassName('Encounter.Location'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant', VersionTypeMap::getTypeClassName('Encounter.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory', VersionTypeMap::getTypeClassName('Encounter.StatusHistory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareCareTeam', VersionTypeMap::getTypeClassName('EpisodeOfCare.CareTeam'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory', VersionTypeMap::getTypeClassName('EpisodeOfCare.StatusHistory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition', VersionTypeMap::getTypeClassName('FamilyMemberHistory.Condition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalOutcome', VersionTypeMap::getTypeClassName('Goal.Outcome'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic', VersionTypeMap::getTypeClassName('Group.Characteristic'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember', VersionTypeMap::getTypeClassName('Group.Member'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime', VersionTypeMap::getTypeClassName('HealthcareService.AvailableTime'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable', VersionTypeMap::getTypeClassName('HealthcareService.NotAvailable'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceServiceType', VersionTypeMap::getTypeClassName('HealthcareService.ServiceType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionFrames', VersionTypeMap::getTypeClassName('ImagingObjectSelection.Frames'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionInstance', VersionTypeMap::getTypeClassName('ImagingObjectSelection.Instance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionSeries', VersionTypeMap::getTypeClassName('ImagingObjectSelection.Series'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionStudy', VersionTypeMap::getTypeClassName('ImagingObjectSelection.Study'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance', VersionTypeMap::getTypeClassName('ImagingStudy.Instance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries', VersionTypeMap::getTypeClassName('ImagingStudy.Series'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion', VersionTypeMap::getTypeClassName('ImmunizationRecommendation.DateCriterion'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol', VersionTypeMap::getTypeClassName('ImmunizationRecommendation.Protocol'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation', VersionTypeMap::getTypeClassName('ImmunizationRecommendation.Recommendation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation', VersionTypeMap::getTypeClassName('Immunization.Explanation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction', VersionTypeMap::getTypeClassName('Immunization.Reaction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol', VersionTypeMap::getTypeClassName('Immunization.VaccinationProtocol'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideContact', VersionTypeMap::getTypeClassName('ImplementationGuide.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency', VersionTypeMap::getTypeClassName('ImplementationGuide.Dependency'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal', VersionTypeMap::getTypeClassName('ImplementationGuide.Global'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage', VersionTypeMap::getTypeClassName('ImplementationGuide.Package'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage', VersionTypeMap::getTypeClassName('ImplementationGuide.Page'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource', VersionTypeMap::getTypeClassName('ImplementationGuide.Resource'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry', VersionTypeMap::getTypeClassName('List.Entry'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition', VersionTypeMap::getTypeClassName('Location.Position'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage', VersionTypeMap::getTypeClassName('MedicationAdministration.Dosage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosageInstruction', VersionTypeMap::getTypeClassName('MedicationDispense.DosageInstruction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution', VersionTypeMap::getTypeClassName('MedicationDispense.Substitution'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDispenseRequest', VersionTypeMap::getTypeClassName('MedicationOrder.DispenseRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDosageInstruction', VersionTypeMap::getTypeClassName('MedicationOrder.DosageInstruction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderSubstitution', VersionTypeMap::getTypeClassName('MedicationOrder.Substitution'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage', VersionTypeMap::getTypeClassName('MedicationStatement.Dosage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch', VersionTypeMap::getTypeClassName('Medication.Batch'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent', VersionTypeMap::getTypeClassName('Medication.Content'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient', VersionTypeMap::getTypeClassName('Medication.Ingredient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage', VersionTypeMap::getTypeClassName('Medication.Package'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct', VersionTypeMap::getTypeClassName('Medication.Product'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination', VersionTypeMap::getTypeClassName('MessageHeader.Destination'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse', VersionTypeMap::getTypeClassName('MessageHeader.Response'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource', VersionTypeMap::getTypeClassName('MessageHeader.Source'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemContact', VersionTypeMap::getTypeClassName('NamingSystem.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId', VersionTypeMap::getTypeClassName('NamingSystem.UniqueId'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration', VersionTypeMap::getTypeClassName('NutritionOrder.Administration'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula', VersionTypeMap::getTypeClassName('NutritionOrder.EnteralFormula'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient', VersionTypeMap::getTypeClassName('NutritionOrder.Nutrient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet', VersionTypeMap::getTypeClassName('NutritionOrder.OralDiet'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement', VersionTypeMap::getTypeClassName('NutritionOrder.Supplement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture', VersionTypeMap::getTypeClassName('NutritionOrder.Texture'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent', VersionTypeMap::getTypeClassName('Observation.Component'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange', VersionTypeMap::getTypeClassName('Observation.ReferenceRange'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated', VersionTypeMap::getTypeClassName('Observation.Related'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding', VersionTypeMap::getTypeClassName('OperationDefinition.Binding'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionContact', VersionTypeMap::getTypeClassName('OperationDefinition.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter', VersionTypeMap::getTypeClassName('OperationDefinition.Parameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue', VersionTypeMap::getTypeClassName('OperationOutcome.Issue'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen', VersionTypeMap::getTypeClassName('Order.When'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact', VersionTypeMap::getTypeClassName('Organization.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter', VersionTypeMap::getTypeClassName('Parameters.Parameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal', VersionTypeMap::getTypeClassName('Patient.Animal'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication', VersionTypeMap::getTypeClassName('Patient.Communication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact', VersionTypeMap::getTypeClassName('Patient.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink', VersionTypeMap::getTypeClassName('Patient.Link'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail', VersionTypeMap::getTypeClassName('PaymentReconciliation.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationNote', VersionTypeMap::getTypeClassName('PaymentReconciliation.Note'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink', VersionTypeMap::getTypeClassName('Person.Link'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerPractitionerRole', VersionTypeMap::getTypeClassName('Practitioner.PractitionerRole'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification', VersionTypeMap::getTypeClassName('Practitioner.Qualification'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice', VersionTypeMap::getTypeClassName('Procedure.FocalDevice'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer', VersionTypeMap::getTypeClassName('Procedure.Performer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem', VersionTypeMap::getTypeClassName('ProcessRequest.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseNotes', VersionTypeMap::getTypeClassName('ProcessResponse.Notes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent', VersionTypeMap::getTypeClassName('Provenance.Agent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity', VersionTypeMap::getTypeClassName('Provenance.Entity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceRelatedAgent', VersionTypeMap::getTypeClassName('Provenance.RelatedAgent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer', VersionTypeMap::getTypeClassName('QuestionnaireResponse.Answer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseGroup', VersionTypeMap::getTypeClassName('QuestionnaireResponse.Group'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseQuestion', VersionTypeMap::getTypeClassName('QuestionnaireResponse.Question'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup', VersionTypeMap::getTypeClassName('Questionnaire.Group'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion', VersionTypeMap::getTypeClassName('Questionnaire.Question'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction', VersionTypeMap::getTypeClassName('RiskAssessment.Prediction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterContact', VersionTypeMap::getTypeClassName('SearchParameter.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection', VersionTypeMap::getTypeClassName('Specimen.Collection'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer', VersionTypeMap::getTypeClassName('Specimen.Container'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment', VersionTypeMap::getTypeClassName('Specimen.Treatment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContact', VersionTypeMap::getTypeClassName('StructureDefinition.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential', VersionTypeMap::getTypeClassName('StructureDefinition.Differential'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping', VersionTypeMap::getTypeClassName('StructureDefinition.Mapping'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot', VersionTypeMap::getTypeClassName('StructureDefinition.Snapshot'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel', VersionTypeMap::getTypeClassName('Subscription.Channel'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient', VersionTypeMap::getTypeClassName('Substance.Ingredient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance', VersionTypeMap::getTypeClassName('Substance.Instance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestWhen', VersionTypeMap::getTypeClassName('SupplyRequest.When'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction', VersionTypeMap::getTypeClassName('TestScript.Action'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1', VersionTypeMap::getTypeClassName('TestScript.Action1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2', VersionTypeMap::getTypeClassName('TestScript.Action2'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert', VersionTypeMap::getTypeClassName('TestScript.Assert'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability', VersionTypeMap::getTypeClassName('TestScript.Capability'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptContact', VersionTypeMap::getTypeClassName('TestScript.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture', VersionTypeMap::getTypeClassName('TestScript.Fixture'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink', VersionTypeMap::getTypeClassName('TestScript.Link'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata', VersionTypeMap::getTypeClassName('TestScript.Metadata'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation', VersionTypeMap::getTypeClassName('TestScript.Operation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader', VersionTypeMap::getTypeClassName('TestScript.RequestHeader'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup', VersionTypeMap::getTypeClassName('TestScript.Setup'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown', VersionTypeMap::getTypeClassName('TestScript.Teardown'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest', VersionTypeMap::getTypeClassName('TestScript.Test'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable', VersionTypeMap::getTypeClassName('TestScript.Variable'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCodeSystem', VersionTypeMap::getTypeClassName('ValueSet.CodeSystem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose', VersionTypeMap::getTypeClassName('ValueSet.Compose'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept', VersionTypeMap::getTypeClassName('ValueSet.Concept'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept1', VersionTypeMap::getTypeClassName('ValueSet.Concept1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContact', VersionTypeMap::getTypeClassName('ValueSet.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains', VersionTypeMap::getTypeClassName('ValueSet.Contains'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation', VersionTypeMap::getTypeClassName('ValueSet.Designation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion', VersionTypeMap::getTypeClassName('ValueSet.Expansion'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter', VersionTypeMap::getTypeClassName('ValueSet.Filter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude', VersionTypeMap::getTypeClassName('ValueSet.Include'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter', VersionTypeMap::getTypeClassName('ValueSet.Parameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense', VersionTypeMap::getTypeClassName('VisionPrescription.Dispense'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBase64Binary', VersionTypeMap::getTypeClassName('base64Binary'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBindingStrength', VersionTypeMap::getTypeClassName('BindingStrength'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBoolean', VersionTypeMap::getTypeClassName('boolean'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBundleType', VersionTypeMap::getTypeClassName('BundleType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanActivityStatus', VersionTypeMap::getTypeClassName('CarePlanActivityStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanRelationship', VersionTypeMap::getTypeClassName('CarePlanRelationship'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanStatus', VersionTypeMap::getTypeClassName('CarePlanStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClaimType', VersionTypeMap::getTypeClassName('ClaimType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClinicalImpressionStatus', VersionTypeMap::getTypeClassName('ClinicalImpressionStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCode', VersionTypeMap::getTypeClassName('code'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCodeableConcept', VersionTypeMap::getTypeClassName('CodeableConcept'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCoding', VersionTypeMap::getTypeClassName('Coding'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationRequestStatus', VersionTypeMap::getTypeClassName('CommunicationRequestStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationStatus', VersionTypeMap::getTypeClassName('CommunicationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionAttestationMode', VersionTypeMap::getTypeClassName('CompositionAttestationMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionStatus', VersionTypeMap::getTypeClassName('CompositionStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConceptMapEquivalence', VersionTypeMap::getTypeClassName('ConceptMapEquivalence'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionalDeleteStatus', VersionTypeMap::getTypeClassName('ConditionalDeleteStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionVerificationStatus', VersionTypeMap::getTypeClassName('ConditionVerificationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceEventMode', VersionTypeMap::getTypeClassName('ConformanceEventMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceResourceStatus', VersionTypeMap::getTypeClassName('ConformanceResourceStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceStatementKind', VersionTypeMap::getTypeClassName('ConformanceStatementKind'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConstraintSeverity', VersionTypeMap::getTypeClassName('ConstraintSeverity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPoint', VersionTypeMap::getTypeClassName('ContactPoint'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointSystem', VersionTypeMap::getTypeClassName('ContactPointSystem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointUse', VersionTypeMap::getTypeClassName('ContactPointUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContentType', VersionTypeMap::getTypeClassName('ContentType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDataElementStringency', VersionTypeMap::getTypeClassName('DataElementStringency'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDate', VersionTypeMap::getTypeClassName('date'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDateTime', VersionTypeMap::getTypeClassName('dateTime'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDaysOfWeek', VersionTypeMap::getTypeClassName('DaysOfWeek'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDecimal', VersionTypeMap::getTypeClassName('decimal'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDetectedIssueSeverity', VersionTypeMap::getTypeClassName('DetectedIssueSeverity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationState', VersionTypeMap::getTypeClassName('DeviceMetricCalibrationState'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationType', VersionTypeMap::getTypeClassName('DeviceMetricCalibrationType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCategory', VersionTypeMap::getTypeClassName('DeviceMetricCategory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricColor', VersionTypeMap::getTypeClassName('DeviceMetricColor'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricOperationalStatus', VersionTypeMap::getTypeClassName('DeviceMetricOperationalStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceStatus', VersionTypeMap::getTypeClassName('DeviceStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestPriority', VersionTypeMap::getTypeClassName('DeviceUseRequestPriority'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestStatus', VersionTypeMap::getTypeClassName('DeviceUseRequestStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderPriority', VersionTypeMap::getTypeClassName('DiagnosticOrderPriority'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderStatus', VersionTypeMap::getTypeClassName('DiagnosticOrderStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticReportStatus', VersionTypeMap::getTypeClassName('DiagnosticReportStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDigitalMediaType', VersionTypeMap::getTypeClassName('DigitalMediaType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentMode', VersionTypeMap::getTypeClassName('DocumentMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentReferenceStatus', VersionTypeMap::getTypeClassName('DocumentReferenceStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentRelationshipType', VersionTypeMap::getTypeClassName('DocumentRelationshipType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition', VersionTypeMap::getTypeClassName('ElementDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase', VersionTypeMap::getTypeClassName('ElementDefinition.Base'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding', VersionTypeMap::getTypeClassName('ElementDefinition.Binding'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint', VersionTypeMap::getTypeClassName('ElementDefinition.Constraint'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping', VersionTypeMap::getTypeClassName('ElementDefinition.Mapping'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing', VersionTypeMap::getTypeClassName('ElementDefinition.Slicing'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType', VersionTypeMap::getTypeClassName('ElementDefinition.Type'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterClass', VersionTypeMap::getTypeClassName('EncounterClass'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterLocationStatus', VersionTypeMap::getTypeClassName('EncounterLocationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterState', VersionTypeMap::getTypeClassName('EncounterState'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREpisodeOfCareStatus', VersionTypeMap::getTypeClassName('EpisodeOfCareStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREventTiming', VersionTypeMap::getTypeClassName('EventTiming'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtension', VersionTypeMap::getTypeClassName('Extension'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtensionContext', VersionTypeMap::getTypeClassName('ExtensionContext'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFamilyHistoryStatus', VersionTypeMap::getTypeClassName('FamilyHistoryStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFilterOperator', VersionTypeMap::getTypeClassName('FilterOperator'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFlagStatus', VersionTypeMap::getTypeClassName('FlagStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGoalStatus', VersionTypeMap::getTypeClassName('GoalStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGroupType', VersionTypeMap::getTypeClassName('GroupType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideDependencyType', VersionTypeMap::getTypeClassName('GuideDependencyType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuidePageKind', VersionTypeMap::getTypeClassName('GuidePageKind'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideResourcePurpose', VersionTypeMap::getTypeClassName('GuideResourcePurpose'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHTTPVerb', VersionTypeMap::getTypeClassName('HTTPVerb'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHumanName', VersionTypeMap::getTypeClassName('HumanName'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRId', VersionTypeMap::getTypeClassName('id'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifier', VersionTypeMap::getTypeClassName('Identifier'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifierUse', VersionTypeMap::getTypeClassName('IdentifierUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentityAssuranceLevel', VersionTypeMap::getTypeClassName('IdentityAssuranceLevel'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstanceAvailability', VersionTypeMap::getTypeClassName('InstanceAvailability'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstant', VersionTypeMap::getTypeClassName('instant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInteger', VersionTypeMap::getTypeClassName('integer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueSeverity', VersionTypeMap::getTypeClassName('IssueSeverity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueType', VersionTypeMap::getTypeClassName('IssueType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLinkType', VersionTypeMap::getTypeClassName('LinkType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListMode', VersionTypeMap::getTypeClassName('ListMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListStatus', VersionTypeMap::getTypeClassName('ListStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationMode', VersionTypeMap::getTypeClassName('LocationMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationStatus', VersionTypeMap::getTypeClassName('LocationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMarkdown', VersionTypeMap::getTypeClassName('markdown'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeasmnt_Principle', VersionTypeMap::getTypeClassName('Measmnt-Principle'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationAdministrationStatus', VersionTypeMap::getTypeClassName('MedicationAdministrationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationDispenseStatus', VersionTypeMap::getTypeClassName('MedicationDispenseStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationOrderStatus', VersionTypeMap::getTypeClassName('MedicationOrderStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationStatementStatus', VersionTypeMap::getTypeClassName('MedicationStatementStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMessageSignificanceCategory', VersionTypeMap::getTypeClassName('MessageSignificanceCategory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeta', VersionTypeMap::getTypeClassName('Meta'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNameUse', VersionTypeMap::getTypeClassName('NameUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemIdentifierType', VersionTypeMap::getTypeClassName('NamingSystemIdentifierType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemType', VersionTypeMap::getTypeClassName('NamingSystemType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrative', VersionTypeMap::getTypeClassName('Narrative'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrativeStatus', VersionTypeMap::getTypeClassName('NarrativeStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNoteType', VersionTypeMap::getTypeClassName('NoteType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNutritionOrderStatus', VersionTypeMap::getTypeClassName('NutritionOrderStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationRelationshipType', VersionTypeMap::getTypeClassName('ObservationRelationshipType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationStatus', VersionTypeMap::getTypeClassName('ObservationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROid', VersionTypeMap::getTypeClassName('oid'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationKind', VersionTypeMap::getTypeClassName('OperationKind'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationParameterUse', VersionTypeMap::getTypeClassName('OperationParameterUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROrderStatus', VersionTypeMap::getTypeClassName('OrderStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantRequired', VersionTypeMap::getTypeClassName('ParticipantRequired'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantStatus', VersionTypeMap::getTypeClassName('ParticipantStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipationStatus', VersionTypeMap::getTypeClassName('ParticipationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPeriod', VersionTypeMap::getTypeClassName('Period'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPositiveInt', VersionTypeMap::getTypeClassName('positiveInt'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestPriority', VersionTypeMap::getTypeClassName('ProcedureRequestPriority'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestStatus', VersionTypeMap::getTypeClassName('ProcedureRequestStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureStatus', VersionTypeMap::getTypeClassName('ProcedureStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPropertyRepresentation', VersionTypeMap::getTypeClassName('PropertyRepresentation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProvenanceEntityRole', VersionTypeMap::getTypeClassName('ProvenanceEntityRole'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity', VersionTypeMap::getTypeClassName('Quantity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantityComparator', VersionTypeMap::getTypeClassName('QuantityComparator'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRAge', VersionTypeMap::getTypeClassName('Age'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRCount', VersionTypeMap::getTypeClassName('Count'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDistance', VersionTypeMap::getTypeClassName('Distance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDuration', VersionTypeMap::getTypeClassName('Duration'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRMoney', VersionTypeMap::getTypeClassName('Money'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRSimpleQuantity', VersionTypeMap::getTypeClassName('SimpleQuantity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireResponseStatus', VersionTypeMap::getTypeClassName('QuestionnaireResponseStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireStatus', VersionTypeMap::getTypeClassName('QuestionnaireStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRange', VersionTypeMap::getTypeClassName('Range'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRatio', VersionTypeMap::getTypeClassName('Ratio'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReference', VersionTypeMap::getTypeClassName('Reference'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReferralStatus', VersionTypeMap::getTypeClassName('ReferralStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRemittanceOutcome', VersionTypeMap::getTypeClassName('RemittanceOutcome'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResourceVersionPolicy', VersionTypeMap::getTypeClassName('ResourceVersionPolicy'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResponseType', VersionTypeMap::getTypeClassName('ResponseType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRestfulConformanceMode', VersionTypeMap::getTypeClassName('RestfulConformanceMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledData', VersionTypeMap::getTypeClassName('SampledData'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledDataDataType', VersionTypeMap::getTypeClassName('SampledDataDataType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchEntryMode', VersionTypeMap::getTypeClassName('SearchEntryMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchModifierCode', VersionTypeMap::getTypeClassName('SearchModifierCode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchParamType', VersionTypeMap::getTypeClassName('SearchParamType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSignature', VersionTypeMap::getTypeClassName('Signature'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlicingRules', VersionTypeMap::getTypeClassName('SlicingRules'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlotStatus', VersionTypeMap::getTypeClassName('SlotStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSpecimenStatus', VersionTypeMap::getTypeClassName('SpecimenStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRString', VersionTypeMap::getTypeClassName('string'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRStructureDefinitionKind', VersionTypeMap::getTypeClassName('StructureDefinitionKind'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionChannelType', VersionTypeMap::getTypeClassName('SubscriptionChannelType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionStatus', VersionTypeMap::getTypeClassName('SubscriptionStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyDeliveryStatus', VersionTypeMap::getTypeClassName('SupplyDeliveryStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyRequestStatus', VersionTypeMap::getTypeClassName('SupplyRequestStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSystemRestfulInteraction', VersionTypeMap::getTypeClassName('SystemRestfulInteraction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTime', VersionTypeMap::getTypeClassName('time'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming', VersionTypeMap::getTypeClassName('Timing'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat', VersionTypeMap::getTypeClassName('Timing.Repeat'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTransactionMode', VersionTypeMap::getTypeClassName('TransactionMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTypeRestfulInteraction', VersionTypeMap::getTypeClassName('TypeRestfulInteraction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnitsOfTime', VersionTypeMap::getTypeClassName('UnitsOfTime'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnknownContentCode', VersionTypeMap::getTypeClassName('UnknownContentCode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnsignedInt', VersionTypeMap::getTypeClassName('unsignedInt'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUri', VersionTypeMap::getTypeClassName('uri'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUse', VersionTypeMap::getTypeClassName('Use'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUuid', VersionTypeMap::getTypeClassName('uuid'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionBase', VersionTypeMap::getTypeClassName('VisionBase'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionEyes', VersionTypeMap::getTypeClassName('VisionEyes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRXPathUsageType', VersionTypeMap::getTypeClassName('XPathUsageType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIdPrimitive', VersionTypeMap::getTypeClassName('id-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRInstantPrimitive', VersionTypeMap::getTypeClassName('instant-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIntegerPrimitive', VersionTypeMap::getTypeClassName('integer-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRMarkdownPrimitive', VersionTypeMap::getTypeClassName('markdown-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIROidPrimitive', VersionTypeMap::getTypeClassName('oid-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRPositiveIntPrimitive', VersionTypeMap::getTypeClassName('positiveInt-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource', VersionTypeMap::getTypeClassName('Resource'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResourceContainer', VersionTypeMap::getTypeClassName('ResourceContainer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBinary', VersionTypeMap::getTypeClassName('Binary'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBundle', VersionTypeMap::getTypeClassName('Bundle'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource', VersionTypeMap::getTypeClassName('DomainResource'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAccount', VersionTypeMap::getTypeClassName('Account'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', VersionTypeMap::getTypeClassName('AllergyIntolerance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointment', VersionTypeMap::getTypeClassName('Appointment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', VersionTypeMap::getTypeClassName('AppointmentResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent', VersionTypeMap::getTypeClassName('AuditEvent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBasic', VersionTypeMap::getTypeClassName('Basic'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBodySite', VersionTypeMap::getTypeClassName('BodySite'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan', VersionTypeMap::getTypeClassName('CarePlan'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaim', VersionTypeMap::getTypeClassName('Claim'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse', VersionTypeMap::getTypeClassName('ClaimResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', VersionTypeMap::getTypeClassName('ClinicalImpression'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunication', VersionTypeMap::getTypeClassName('Communication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', VersionTypeMap::getTypeClassName('CommunicationRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRComposition', VersionTypeMap::getTypeClassName('Composition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap', VersionTypeMap::getTypeClassName('ConceptMap'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCondition', VersionTypeMap::getTypeClassName('Condition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConformance', VersionTypeMap::getTypeClassName('Conformance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRContract', VersionTypeMap::getTypeClassName('Contract'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCoverage', VersionTypeMap::getTypeClassName('Coverage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDataElement', VersionTypeMap::getTypeClassName('DataElement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', VersionTypeMap::getTypeClassName('DetectedIssue'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDevice', VersionTypeMap::getTypeClassName('Device'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent', VersionTypeMap::getTypeClassName('DeviceComponent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', VersionTypeMap::getTypeClassName('DeviceMetric'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseRequest', VersionTypeMap::getTypeClassName('DeviceUseRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement', VersionTypeMap::getTypeClassName('DeviceUseStatement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticOrder', VersionTypeMap::getTypeClassName('DiagnosticOrder'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', VersionTypeMap::getTypeClassName('DiagnosticReport'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest', VersionTypeMap::getTypeClassName('DocumentManifest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference', VersionTypeMap::getTypeClassName('DocumentReference'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest', VersionTypeMap::getTypeClassName('EligibilityRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse', VersionTypeMap::getTypeClassName('EligibilityResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREncounter', VersionTypeMap::getTypeClassName('Encounter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', VersionTypeMap::getTypeClassName('EnrollmentRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', VersionTypeMap::getTypeClassName('EnrollmentResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', VersionTypeMap::getTypeClassName('EpisodeOfCare'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', VersionTypeMap::getTypeClassName('ExplanationOfBenefit'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', VersionTypeMap::getTypeClassName('FamilyMemberHistory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFlag', VersionTypeMap::getTypeClassName('Flag'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGoal', VersionTypeMap::getTypeClassName('Goal'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGroup', VersionTypeMap::getTypeClassName('Group'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService', VersionTypeMap::getTypeClassName('HealthcareService'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingObjectSelection', VersionTypeMap::getTypeClassName('ImagingObjectSelection'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy', VersionTypeMap::getTypeClassName('ImagingStudy'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunization', VersionTypeMap::getTypeClassName('Immunization'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', VersionTypeMap::getTypeClassName('ImmunizationRecommendation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide', VersionTypeMap::getTypeClassName('ImplementationGuide'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRList', VersionTypeMap::getTypeClassName('List'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRLocation', VersionTypeMap::getTypeClassName('Location'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedia', VersionTypeMap::getTypeClassName('Media'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedication', VersionTypeMap::getTypeClassName('Medication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', VersionTypeMap::getTypeClassName('MedicationAdministration'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', VersionTypeMap::getTypeClassName('MedicationDispense'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationOrder', VersionTypeMap::getTypeClassName('MedicationOrder'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', VersionTypeMap::getTypeClassName('MedicationStatement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader', VersionTypeMap::getTypeClassName('MessageHeader'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem', VersionTypeMap::getTypeClassName('NamingSystem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', VersionTypeMap::getTypeClassName('NutritionOrder'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRObservation', VersionTypeMap::getTypeClassName('Observation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition', VersionTypeMap::getTypeClassName('OperationDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome', VersionTypeMap::getTypeClassName('OperationOutcome'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrder', VersionTypeMap::getTypeClassName('Order'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrderResponse', VersionTypeMap::getTypeClassName('OrderResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrganization', VersionTypeMap::getTypeClassName('Organization'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPatient', VersionTypeMap::getTypeClassName('Patient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', VersionTypeMap::getTypeClassName('PaymentNotice'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', VersionTypeMap::getTypeClassName('PaymentReconciliation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPerson', VersionTypeMap::getTypeClassName('Person'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner', VersionTypeMap::getTypeClassName('Practitioner'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedure', VersionTypeMap::getTypeClassName('Procedure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest', VersionTypeMap::getTypeClassName('ProcedureRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest', VersionTypeMap::getTypeClassName('ProcessRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse', VersionTypeMap::getTypeClassName('ProcessResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProvenance', VersionTypeMap::getTypeClassName('Provenance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire', VersionTypeMap::getTypeClassName('Questionnaire'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', VersionTypeMap::getTypeClassName('QuestionnaireResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest', VersionTypeMap::getTypeClassName('ReferralRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', VersionTypeMap::getTypeClassName('RelatedPerson'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', VersionTypeMap::getTypeClassName('RiskAssessment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSchedule', VersionTypeMap::getTypeClassName('Schedule'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter', VersionTypeMap::getTypeClassName('SearchParameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSlot', VersionTypeMap::getTypeClassName('Slot'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen', VersionTypeMap::getTypeClassName('Specimen'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition', VersionTypeMap::getTypeClassName('StructureDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubscription', VersionTypeMap::getTypeClassName('Subscription'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubstance', VersionTypeMap::getTypeClassName('Substance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', VersionTypeMap::getTypeClassName('SupplyDelivery'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', VersionTypeMap::getTypeClassName('SupplyRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRTestScript', VersionTypeMap::getTypeClassName('TestScript'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRValueSet', VersionTypeMap::getTypeClassName('ValueSet'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', VersionTypeMap::getTypeClassName('VisionPrescription'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRParameters', VersionTypeMap::getTypeClassName('Parameters'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRSampledDataDataTypePrimitive', VersionTypeMap::getTypeClassName('SampledDataDataType-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive', VersionTypeMap::getTypeClassName('string-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAccountStatusList', VersionTypeMap::getTypeClassName('AccountStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRActionListList', VersionTypeMap::getTypeClassName('ActionList-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressTypeList', VersionTypeMap::getTypeClassName('AddressType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressUseList', VersionTypeMap::getTypeClassName('AddressUse-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAdministrativeGenderList', VersionTypeMap::getTypeClassName('AdministrativeGender-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAggregationModeList', VersionTypeMap::getTypeClassName('AggregationMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCategoryList', VersionTypeMap::getTypeClassName('AllergyIntoleranceCategory-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCertaintyList', VersionTypeMap::getTypeClassName('AllergyIntoleranceCertainty-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCriticalityList', VersionTypeMap::getTypeClassName('AllergyIntoleranceCriticality-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceSeverityList', VersionTypeMap::getTypeClassName('AllergyIntoleranceSeverity-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceStatusList', VersionTypeMap::getTypeClassName('AllergyIntoleranceStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceTypeList', VersionTypeMap::getTypeClassName('AllergyIntoleranceType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAnswerFormatList', VersionTypeMap::getTypeClassName('AnswerFormat-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAppointmentStatusList', VersionTypeMap::getTypeClassName('AppointmentStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionDirectionTypeList', VersionTypeMap::getTypeClassName('AssertionDirectionType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionOperatorTypeList', VersionTypeMap::getTypeClassName('AssertionOperatorType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionResponseTypesList', VersionTypeMap::getTypeClassName('AssertionResponseTypes-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventActionList', VersionTypeMap::getTypeClassName('AuditEventAction-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventOutcomeList', VersionTypeMap::getTypeClassName('AuditEventOutcome-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventParticipantNetworkTypeList', VersionTypeMap::getTypeClassName('AuditEventParticipantNetworkType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBindingStrengthList', VersionTypeMap::getTypeClassName('BindingStrength-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBundleTypeList', VersionTypeMap::getTypeClassName('BundleType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList', VersionTypeMap::getTypeClassName('CarePlanActivityStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanRelationshipList', VersionTypeMap::getTypeClassName('CarePlanRelationship-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanStatusList', VersionTypeMap::getTypeClassName('CarePlanStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClaimTypeList', VersionTypeMap::getTypeClassName('ClaimType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClinicalImpressionStatusList', VersionTypeMap::getTypeClassName('ClinicalImpressionStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationRequestStatusList', VersionTypeMap::getTypeClassName('CommunicationRequestStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationStatusList', VersionTypeMap::getTypeClassName('CommunicationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList', VersionTypeMap::getTypeClassName('CompositionAttestationMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionStatusList', VersionTypeMap::getTypeClassName('CompositionStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList', VersionTypeMap::getTypeClassName('ConceptMapEquivalence-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionalDeleteStatusList', VersionTypeMap::getTypeClassName('ConditionalDeleteStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionVerificationStatusList', VersionTypeMap::getTypeClassName('ConditionVerificationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceEventModeList', VersionTypeMap::getTypeClassName('ConformanceEventMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceResourceStatusList', VersionTypeMap::getTypeClassName('ConformanceResourceStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceStatementKindList', VersionTypeMap::getTypeClassName('ConformanceStatementKind-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConstraintSeverityList', VersionTypeMap::getTypeClassName('ConstraintSeverity-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointSystemList', VersionTypeMap::getTypeClassName('ContactPointSystem-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointUseList', VersionTypeMap::getTypeClassName('ContactPointUse-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContentTypeList', VersionTypeMap::getTypeClassName('ContentType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDataElementStringencyList', VersionTypeMap::getTypeClassName('DataElementStringency-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDaysOfWeekList', VersionTypeMap::getTypeClassName('DaysOfWeek-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDetectedIssueSeverityList', VersionTypeMap::getTypeClassName('DetectedIssueSeverity-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationStateList', VersionTypeMap::getTypeClassName('DeviceMetricCalibrationState-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationTypeList', VersionTypeMap::getTypeClassName('DeviceMetricCalibrationType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCategoryList', VersionTypeMap::getTypeClassName('DeviceMetricCategory-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricColorList', VersionTypeMap::getTypeClassName('DeviceMetricColor-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricOperationalStatusList', VersionTypeMap::getTypeClassName('DeviceMetricOperationalStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceStatusList', VersionTypeMap::getTypeClassName('DeviceStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestPriorityList', VersionTypeMap::getTypeClassName('DeviceUseRequestPriority-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestStatusList', VersionTypeMap::getTypeClassName('DeviceUseRequestStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList', VersionTypeMap::getTypeClassName('DiagnosticOrderPriority-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList', VersionTypeMap::getTypeClassName('DiagnosticOrderStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList', VersionTypeMap::getTypeClassName('DiagnosticReportStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDigitalMediaTypeList', VersionTypeMap::getTypeClassName('DigitalMediaType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentModeList', VersionTypeMap::getTypeClassName('DocumentMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList', VersionTypeMap::getTypeClassName('DocumentReferenceStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList', VersionTypeMap::getTypeClassName('DocumentRelationshipType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterClassList', VersionTypeMap::getTypeClassName('EncounterClass-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterLocationStatusList', VersionTypeMap::getTypeClassName('EncounterLocationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterStateList', VersionTypeMap::getTypeClassName('EncounterState-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREpisodeOfCareStatusList', VersionTypeMap::getTypeClassName('EpisodeOfCareStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREventTimingList', VersionTypeMap::getTypeClassName('EventTiming-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRExtensionContextList', VersionTypeMap::getTypeClassName('ExtensionContext-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFamilyHistoryStatusList', VersionTypeMap::getTypeClassName('FamilyHistoryStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFilterOperatorList', VersionTypeMap::getTypeClassName('FilterOperator-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFlagStatusList', VersionTypeMap::getTypeClassName('FlagStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGoalStatusList', VersionTypeMap::getTypeClassName('GoalStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGroupTypeList', VersionTypeMap::getTypeClassName('GroupType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideDependencyTypeList', VersionTypeMap::getTypeClassName('GuideDependencyType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuidePageKindList', VersionTypeMap::getTypeClassName('GuidePageKind-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideResourcePurposeList', VersionTypeMap::getTypeClassName('GuideResourcePurpose-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRHTTPVerbList', VersionTypeMap::getTypeClassName('HTTPVerb-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentifierUseList', VersionTypeMap::getTypeClassName('IdentifierUse-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentityAssuranceLevelList', VersionTypeMap::getTypeClassName('IdentityAssuranceLevel-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList', VersionTypeMap::getTypeClassName('InstanceAvailability-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueSeverityList', VersionTypeMap::getTypeClassName('IssueSeverity-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueTypeList', VersionTypeMap::getTypeClassName('IssueType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLinkTypeList', VersionTypeMap::getTypeClassName('LinkType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListModeList', VersionTypeMap::getTypeClassName('ListMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListStatusList', VersionTypeMap::getTypeClassName('ListStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationModeList', VersionTypeMap::getTypeClassName('LocationMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationStatusList', VersionTypeMap::getTypeClassName('LocationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMeasmnt_PrincipleList', VersionTypeMap::getTypeClassName('Measmnt-Principle-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList', VersionTypeMap::getTypeClassName('MedicationAdministrationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList', VersionTypeMap::getTypeClassName('MedicationDispenseStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationOrderStatusList', VersionTypeMap::getTypeClassName('MedicationOrderStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationStatementStatusList', VersionTypeMap::getTypeClassName('MedicationStatementStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList', VersionTypeMap::getTypeClassName('MessageSignificanceCategory-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNameUseList', VersionTypeMap::getTypeClassName('NameUse-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemIdentifierTypeList', VersionTypeMap::getTypeClassName('NamingSystemIdentifierType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemTypeList', VersionTypeMap::getTypeClassName('NamingSystemType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNarrativeStatusList', VersionTypeMap::getTypeClassName('NarrativeStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNoteTypeList', VersionTypeMap::getTypeClassName('NoteType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNutritionOrderStatusList', VersionTypeMap::getTypeClassName('NutritionOrderStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList', VersionTypeMap::getTypeClassName('ObservationRelationshipType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationStatusList', VersionTypeMap::getTypeClassName('ObservationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationKindList', VersionTypeMap::getTypeClassName('OperationKind-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationParameterUseList', VersionTypeMap::getTypeClassName('OperationParameterUse-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROrderStatusList', VersionTypeMap::getTypeClassName('OrderStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantRequiredList', VersionTypeMap::getTypeClassName('ParticipantRequired-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantStatusList', VersionTypeMap::getTypeClassName('ParticipantStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipationStatusList', VersionTypeMap::getTypeClassName('ParticipationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestPriorityList', VersionTypeMap::getTypeClassName('ProcedureRequestPriority-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestStatusList', VersionTypeMap::getTypeClassName('ProcedureRequestStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureStatusList', VersionTypeMap::getTypeClassName('ProcedureStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList', VersionTypeMap::getTypeClassName('PropertyRepresentation-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList', VersionTypeMap::getTypeClassName('ProvenanceEntityRole-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuantityComparatorList', VersionTypeMap::getTypeClassName('QuantityComparator-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireResponseStatusList', VersionTypeMap::getTypeClassName('QuestionnaireResponseStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList', VersionTypeMap::getTypeClassName('QuestionnaireStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRReferralStatusList', VersionTypeMap::getTypeClassName('ReferralStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRemittanceOutcomeList', VersionTypeMap::getTypeClassName('RemittanceOutcome-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResourceVersionPolicyList', VersionTypeMap::getTypeClassName('ResourceVersionPolicy-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResponseTypeList', VersionTypeMap::getTypeClassName('ResponseType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList', VersionTypeMap::getTypeClassName('RestfulConformanceMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchEntryModeList', VersionTypeMap::getTypeClassName('SearchEntryMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchModifierCodeList', VersionTypeMap::getTypeClassName('SearchModifierCode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchParamTypeList', VersionTypeMap::getTypeClassName('SearchParamType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlicingRulesList', VersionTypeMap::getTypeClassName('SlicingRules-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlotStatusList', VersionTypeMap::getTypeClassName('SlotStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSpecimenStatusList', VersionTypeMap::getTypeClassName('SpecimenStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRStructureDefinitionKindList', VersionTypeMap::getTypeClassName('StructureDefinitionKind-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionChannelTypeList', VersionTypeMap::getTypeClassName('SubscriptionChannelType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionStatusList', VersionTypeMap::getTypeClassName('SubscriptionStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyDeliveryStatusList', VersionTypeMap::getTypeClassName('SupplyDeliveryStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyRequestStatusList', VersionTypeMap::getTypeClassName('SupplyRequestStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSystemRestfulInteractionList', VersionTypeMap::getTypeClassName('SystemRestfulInteraction-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTransactionModeList', VersionTypeMap::getTypeClassName('TransactionMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTypeRestfulInteractionList', VersionTypeMap::getTypeClassName('TypeRestfulInteraction-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList', VersionTypeMap::getTypeClassName('UnitsOfTime-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnknownContentCodeList', VersionTypeMap::getTypeClassName('UnknownContentCode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUseList', VersionTypeMap::getTypeClassName('Use-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionBaseList', VersionTypeMap::getTypeClassName('VisionBase-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionEyesList', VersionTypeMap::getTypeClassName('VisionEyes-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRXPathUsageTypeList', VersionTypeMap::getTypeClassName('XPathUsageType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRTimePrimitive', VersionTypeMap::getTypeClassName('time-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUnsignedIntPrimitive', VersionTypeMap::getTypeClassName('unsignedInt-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUriPrimitive', VersionTypeMap::getTypeClassName('uri-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUuidPrimitive', VersionTypeMap::getTypeClassName('uuid-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRXHTML', VersionTypeMap::getTypeClassName('XHTML'));
    }

    public function testGetContainedTypeClassName()
    {
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAccount', VersionTypeMap::getContainedTypeClassName('Account'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AccountStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AccountStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionList'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionList-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Address'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AddressType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AddressType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AddressUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AddressUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdministrativeGender'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdministrativeGender-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Age'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AggregationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AggregationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', VersionTypeMap::getContainedTypeClassName('AllergyIntolerance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntolerance.Reaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceCertainty'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceCertainty-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceCriticality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceCriticality-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Annotation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AnswerFormat'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AnswerFormat-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointment', VersionTypeMap::getContainedTypeClassName('Appointment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Appointment.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', VersionTypeMap::getContainedTypeClassName('AppointmentResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AppointmentStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AppointmentStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionDirectionType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionDirectionType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionOperatorType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionOperatorType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionResponseTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionResponseTypes-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Attachment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent', VersionTypeMap::getContainedTypeClassName('AuditEvent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEvent.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEvent.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEvent.Network'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEvent.Object'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEvent.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEvent.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventAction-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventOutcome-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventParticipantNetworkType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventParticipantNetworkType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BackboneElement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('base64Binary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('base64Binary-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBasic', VersionTypeMap::getContainedTypeClassName('Basic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBinary', VersionTypeMap::getContainedTypeClassName('Binary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BindingStrength'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BindingStrength-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBodySite', VersionTypeMap::getContainedTypeClassName('BodySite'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('boolean'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('boolean-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBundle', VersionTypeMap::getContainedTypeClassName('Bundle'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Bundle.Entry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Bundle.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Bundle.Request'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Bundle.Response'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Bundle.Search'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BundleType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BundleType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan', VersionTypeMap::getContainedTypeClassName('CarePlan'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlan.Activity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlan.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlan.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlan.RelatedPlan'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanActivityStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanActivityStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanRelationship'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanRelationship-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaim', VersionTypeMap::getContainedTypeClassName('Claim'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Coverage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.MissingTeeth'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Payee'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Prosthesis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse', VersionTypeMap::getContainedTypeClassName('ClaimResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.AddItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Adjudication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Adjudication1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Adjudication2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Adjudication3'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Adjudication4'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Coverage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Detail1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Error'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Note'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.SubDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', VersionTypeMap::getContainedTypeClassName('ClinicalImpression'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalImpression.Finding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalImpression.Investigations'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalImpression.RuledOut'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalImpressionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalImpressionStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('code'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('code-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeableConcept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Coding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunication', VersionTypeMap::getContainedTypeClassName('Communication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Communication.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', VersionTypeMap::getContainedTypeClassName('CommunicationRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CommunicationRequest.Payload'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CommunicationRequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CommunicationRequestStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CommunicationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CommunicationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRComposition', VersionTypeMap::getContainedTypeClassName('Composition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Composition.Attester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Composition.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Composition.Section'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompositionAttestationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompositionAttestationMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompositionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompositionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap', VersionTypeMap::getContainedTypeClassName('ConceptMap'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMap.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMap.DependsOn'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMap.Element'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMap.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMapEquivalence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMapEquivalence-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCondition', VersionTypeMap::getContainedTypeClassName('Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Condition.Evidence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Condition.Stage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionalDeleteStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionalDeleteStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionVerificationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionVerificationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConformance', VersionTypeMap::getContainedTypeClassName('Conformance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Certificate'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Document'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Endpoint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Implementation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Interaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Interaction1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Messaging'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Rest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.SearchParam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Security'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Software'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConformanceEventMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConformanceEventMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConformanceResourceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConformanceResourceStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConformanceStatementKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConformanceStatementKind-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConstraintSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConstraintSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactPoint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactPointSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactPointSystem-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactPointUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactPointUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContentType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContentType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRContract', VersionTypeMap::getContainedTypeClassName('Contract'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Actor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Actor1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Friendly'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Legal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Rule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Signer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Term'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.ValuedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.ValuedItem1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Count'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCoverage', VersionTypeMap::getContainedTypeClassName('Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDataElement', VersionTypeMap::getContainedTypeClassName('DataElement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DataElement.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DataElement.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DataElementStringency'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DataElementStringency-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('date'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('date-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('dateTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('dateTime-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DaysOfWeek'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DaysOfWeek-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('decimal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('decimal-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', VersionTypeMap::getContainedTypeClassName('DetectedIssue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DetectedIssue.Mitigation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DetectedIssueSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DetectedIssueSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDevice', VersionTypeMap::getContainedTypeClassName('Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent', VersionTypeMap::getContainedTypeClassName('DeviceComponent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceComponent.ProductionSpecification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', VersionTypeMap::getContainedTypeClassName('DeviceMetric'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetric.Calibration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCalibrationState'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCalibrationState-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCalibrationType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCalibrationType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricColor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricColor-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricOperationalStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricOperationalStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseRequest', VersionTypeMap::getContainedTypeClassName('DeviceUseRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceUseRequestPriority'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceUseRequestPriority-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceUseRequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceUseRequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement', VersionTypeMap::getContainedTypeClassName('DeviceUseStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticOrder', VersionTypeMap::getContainedTypeClassName('DiagnosticOrder'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticOrder.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticOrder.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticOrderPriority'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticOrderPriority-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticOrderStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', VersionTypeMap::getContainedTypeClassName('DiagnosticReport'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticReport.Image'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticReportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticReportStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DigitalMediaType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DigitalMediaType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Distance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest', VersionTypeMap::getContainedTypeClassName('DocumentManifest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentManifest.Content'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentManifest.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference', VersionTypeMap::getContainedTypeClassName('DocumentReference'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReference.Content'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReference.Context'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReference.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReference.RelatesTo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReferenceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReferenceStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DomainResource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Duration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Element'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Base'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Binding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Constraint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Slicing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Type'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest', VersionTypeMap::getContainedTypeClassName('EligibilityRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse', VersionTypeMap::getContainedTypeClassName('EligibilityResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREncounter', VersionTypeMap::getContainedTypeClassName('Encounter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.Hospitalization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.Location'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.StatusHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterClass'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterClass-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterLocationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterLocationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterState'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterState-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', VersionTypeMap::getContainedTypeClassName('EnrollmentRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', VersionTypeMap::getContainedTypeClassName('EnrollmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', VersionTypeMap::getContainedTypeClassName('EpisodeOfCare'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EpisodeOfCare.CareTeam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EpisodeOfCare.StatusHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EpisodeOfCareStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EpisodeOfCareStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventTiming'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventTiming-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Extension'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExtensionContext'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExtensionContext-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FamilyHistoryStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FamilyHistoryStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', VersionTypeMap::getContainedTypeClassName('FamilyMemberHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FamilyMemberHistory.Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FilterOperator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FilterOperator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFlag', VersionTypeMap::getContainedTypeClassName('Flag'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FlagStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FlagStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGoal', VersionTypeMap::getContainedTypeClassName('Goal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Goal.Outcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GoalStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GoalStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGroup', VersionTypeMap::getContainedTypeClassName('Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Group.Characteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Group.Member'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GroupType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GroupType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuideDependencyType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuideDependencyType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuidePageKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuidePageKind-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuideResourcePurpose'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuideResourcePurpose-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService', VersionTypeMap::getContainedTypeClassName('HealthcareService'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HealthcareService.AvailableTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HealthcareService.NotAvailable'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HealthcareService.ServiceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HTTPVerb'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HTTPVerb-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HumanName'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('id'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('id-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Identifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IdentifierUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IdentifierUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IdentityAssuranceLevel'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IdentityAssuranceLevel-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingObjectSelection', VersionTypeMap::getContainedTypeClassName('ImagingObjectSelection'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingObjectSelection.Frames'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingObjectSelection.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingObjectSelection.Series'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingObjectSelection.Study'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy', VersionTypeMap::getContainedTypeClassName('ImagingStudy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingStudy.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingStudy.Series'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunization', VersionTypeMap::getContainedTypeClassName('Immunization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Immunization.Explanation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Immunization.Reaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Immunization.VaccinationProtocol'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', VersionTypeMap::getContainedTypeClassName('ImmunizationRecommendation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImmunizationRecommendation.DateCriterion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImmunizationRecommendation.Protocol'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImmunizationRecommendation.Recommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide', VersionTypeMap::getContainedTypeClassName('ImplementationGuide'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Dependency'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Global'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Package'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Page'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InstanceAvailability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InstanceAvailability-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('instant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('instant-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('integer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('integer-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IssueSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IssueSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IssueType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IssueType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LinkType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LinkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRList', VersionTypeMap::getContainedTypeClassName('List'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('List.Entry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ListMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ListMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ListStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ListStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRLocation', VersionTypeMap::getContainedTypeClassName('Location'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Location.Position'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LocationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LocationMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LocationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LocationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('markdown'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('markdown-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Measmnt-Principle'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Measmnt-Principle-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedia', VersionTypeMap::getContainedTypeClassName('Media'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedication', VersionTypeMap::getContainedTypeClassName('Medication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Medication.Batch'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Medication.Content'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Medication.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Medication.Package'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Medication.Product'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', VersionTypeMap::getContainedTypeClassName('MedicationAdministration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationAdministration.Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationAdministrationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationAdministrationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', VersionTypeMap::getContainedTypeClassName('MedicationDispense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationDispense.DosageInstruction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationDispense.Substitution'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationDispenseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationDispenseStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationOrder', VersionTypeMap::getContainedTypeClassName('MedicationOrder'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationOrder.DispenseRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationOrder.DosageInstruction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationOrder.Substitution'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationOrderStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', VersionTypeMap::getContainedTypeClassName('MedicationStatement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationStatement.Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationStatementStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationStatementStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader', VersionTypeMap::getContainedTypeClassName('MessageHeader'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageHeader.Destination'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageHeader.Response'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageHeader.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageSignificanceCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageSignificanceCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Meta'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Money'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NameUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NameUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem', VersionTypeMap::getContainedTypeClassName('NamingSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NamingSystem.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NamingSystem.UniqueId'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NamingSystemIdentifierType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NamingSystemIdentifierType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NamingSystemType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NamingSystemType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Narrative'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NarrativeStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NarrativeStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NoteType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NoteType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', VersionTypeMap::getContainedTypeClassName('NutritionOrder'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.Administration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.EnteralFormula'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.Nutrient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.OralDiet'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.Supplement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.Texture'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrderStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRObservation', VersionTypeMap::getContainedTypeClassName('Observation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Observation.Component'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Observation.ReferenceRange'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Observation.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('oid'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('oid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition', VersionTypeMap::getContainedTypeClassName('OperationDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationDefinition.Binding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationDefinition.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationDefinition.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome', VersionTypeMap::getContainedTypeClassName('OperationOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationOutcome.Issue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationParameterUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationParameterUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrder', VersionTypeMap::getContainedTypeClassName('Order'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Order.When'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrderResponse', VersionTypeMap::getContainedTypeClassName('OrderResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OrderStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrganization', VersionTypeMap::getContainedTypeClassName('Organization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Organization.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRParameters', VersionTypeMap::getContainedTypeClassName('Parameters'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Parameters.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ParticipantRequired'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ParticipantRequired-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ParticipantStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ParticipantStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ParticipationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ParticipationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPatient', VersionTypeMap::getContainedTypeClassName('Patient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Patient.Animal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Patient.Communication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Patient.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Patient.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', VersionTypeMap::getContainedTypeClassName('PaymentNotice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', VersionTypeMap::getContainedTypeClassName('PaymentReconciliation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PaymentReconciliation.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PaymentReconciliation.Note'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Period'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPerson', VersionTypeMap::getContainedTypeClassName('Person'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Person.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('positiveInt'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('positiveInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner', VersionTypeMap::getContainedTypeClassName('Practitioner'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Practitioner.PractitionerRole'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Practitioner.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedure', VersionTypeMap::getContainedTypeClassName('Procedure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Procedure.FocalDevice'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Procedure.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest', VersionTypeMap::getContainedTypeClassName('ProcedureRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProcedureRequestPriority'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProcedureRequestPriority-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProcedureRequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProcedureRequestStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProcedureStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProcedureStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest', VersionTypeMap::getContainedTypeClassName('ProcessRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProcessRequest.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse', VersionTypeMap::getContainedTypeClassName('ProcessResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProcessResponse.Notes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PropertyRepresentation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PropertyRepresentation-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProvenance', VersionTypeMap::getContainedTypeClassName('Provenance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Provenance.Agent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Provenance.Entity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Provenance.RelatedAgent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProvenanceEntityRole'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProvenanceEntityRole-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Quantity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuantityComparator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuantityComparator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire', VersionTypeMap::getContainedTypeClassName('Questionnaire'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Questionnaire.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Questionnaire.Question'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', VersionTypeMap::getContainedTypeClassName('QuestionnaireResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireResponse.Answer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireResponse.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireResponse.Question'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireResponseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireResponseStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Range'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Ratio'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Reference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest', VersionTypeMap::getContainedTypeClassName('ReferralRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ReferralStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ReferralStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', VersionTypeMap::getContainedTypeClassName('RelatedPerson'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RemittanceOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RemittanceOutcome-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceContainer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceVersionPolicy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceVersionPolicy-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResponseType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResponseType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RestfulConformanceMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RestfulConformanceMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', VersionTypeMap::getContainedTypeClassName('RiskAssessment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RiskAssessment.Prediction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SampledData'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SampledDataDataType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SampledDataDataType-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSchedule', VersionTypeMap::getContainedTypeClassName('Schedule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchEntryMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchEntryMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchModifierCode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchModifierCode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter', VersionTypeMap::getContainedTypeClassName('SearchParameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchParameter.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchParamType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchParamType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Signature'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SimpleQuantity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SlicingRules'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SlicingRules-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSlot', VersionTypeMap::getContainedTypeClassName('Slot'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SlotStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SlotStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen', VersionTypeMap::getContainedTypeClassName('Specimen'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Specimen.Collection'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Specimen.Container'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Specimen.Treatment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SpecimenStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SpecimenStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('string'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('string-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition', VersionTypeMap::getContainedTypeClassName('StructureDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureDefinition.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureDefinition.Differential'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureDefinition.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureDefinition.Snapshot'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureDefinitionKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureDefinitionKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubscription', VersionTypeMap::getContainedTypeClassName('Subscription'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Subscription.Channel'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionChannelType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionChannelType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubstance', VersionTypeMap::getContainedTypeClassName('Substance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Substance.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Substance.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', VersionTypeMap::getContainedTypeClassName('SupplyDelivery'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyDeliveryStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyDeliveryStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', VersionTypeMap::getContainedTypeClassName('SupplyRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyRequest.When'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyRequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyRequestStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SystemRestfulInteraction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SystemRestfulInteraction-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRTestScript', VersionTypeMap::getContainedTypeClassName('TestScript'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Action1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Action2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Assert'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Capability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Fixture'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Metadata'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.RequestHeader'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Setup'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Teardown'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Test'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Variable'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('time'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('time-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Timing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Timing.Repeat'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TransactionMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TransactionMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TypeRestfulInteraction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TypeRestfulInteraction-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UnitsOfTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UnitsOfTime-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UnknownContentCode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UnknownContentCode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('unsignedInt'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('unsignedInt-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('uri'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('uri-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Use'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Use-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('uuid'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('uuid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRValueSet', VersionTypeMap::getContainedTypeClassName('ValueSet'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.CodeSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Compose'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Concept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Concept1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Contains'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Designation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Expansion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Filter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Include'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VisionBase'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VisionBase-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VisionEyes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VisionEyes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', VersionTypeMap::getContainedTypeClassName('VisionPrescription'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VisionPrescription.Dispense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('XHTML'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('XPathUsageType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('XPathUsageType-list'));
    }

    public function testIsContainableResourceWithClassname()
    {
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAccountStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAccountStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRActionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRActionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRActionListList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRActionListList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddress'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddress'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAdministrativeGenderList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAdministrativeGenderList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAggregationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAggregationModeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCertainty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCertainty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCertaintyList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCertaintyList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCriticalityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCriticalityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnnotation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnnotation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnswerFormat'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnswerFormat'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAnswerFormatList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAnswerFormatList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAppointmentStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAppointmentStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionDirectionTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionDirectionTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionOperatorTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionOperatorTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionResponseTypesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionResponseTypesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAttachment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAttachment'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventObject'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventObject'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventActionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventActionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventParticipantNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventParticipantNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventParticipantNetworkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventParticipantNetworkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBase64BinaryPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBase64BinaryPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBinary'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBinary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBindingStrengthList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBindingStrengthList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBodySite'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBodySite'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBoolean'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBoolean'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBooleanPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBooleanPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBundle'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBundle'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBundleType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBundleType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBundleTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBundleTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanRelatedPlan'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanRelatedPlan'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanRelationship'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanRelationship'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanRelationshipList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanRelationshipList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimMissingTeeth'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimMissingTeeth'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProsthesis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProsthesis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication3'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication3'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication4'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication4'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClaimType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClaimType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClaimTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClaimTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigations'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigations'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionRuledOut'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionRuledOut'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClinicalImpressionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClinicalImpressionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClinicalImpressionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClinicalImpressionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRCodePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRCodePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCoding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCoding'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionalDeleteStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionalDeleteStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionVerificationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionVerificationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionVerificationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionVerificationStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConformance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConformance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEndpoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEndpoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceEventMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceEventMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceEventModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceEventModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceResourceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceResourceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceResourceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceResourceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceStatementKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceStatementKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceStatementKindList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceStatementKindList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConstraintSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConstraintSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointSystemList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointSystemList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContentType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContentType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContentTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContentTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDataElement'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDataElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDataElementStringency'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDataElementStringency'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDataElementStringencyList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDataElementStringencyList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDatePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDatePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDateTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDateTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDateTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDateTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDaysOfWeek'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDaysOfWeek'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDaysOfWeekList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDaysOfWeekList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDecimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDecimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDecimalPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDecimalPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDetectedIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDetectedIssueSeverityList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationStateList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationStateList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricColor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricColor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricColorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricColorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricOperationalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricOperationalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticOrder'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticOrder'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDigitalMediaType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDigitalMediaType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDigitalMediaTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDigitalMediaTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentModeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterClass'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterClass'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterClassList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterClassList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterStateList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterStateList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREpisodeOfCareStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREpisodeOfCareStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREventTimingList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREventTimingList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtension'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtension'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtensionContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtensionContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRExtensionContextList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRExtensionContextList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFamilyHistoryStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFamilyHistoryStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFilterOperatorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFilterOperatorList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFlagStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFlagStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGoalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGoalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGoalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGoalStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGroupType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGroupType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGroupTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGroupTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideDependencyType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideDependencyType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideDependencyTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideDependencyTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuidePageKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuidePageKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuidePageKindList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuidePageKindList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideResourcePurpose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideResourcePurpose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideResourcePurposeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideResourcePurposeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceServiceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceServiceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRHTTPVerbList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRHTTPVerbList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHumanName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHumanName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRId'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRId'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIdPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIdPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentifierUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentifierUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentityAssuranceLevelList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentityAssuranceLevelList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingObjectSelection'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingObjectSelection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionFrames'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionFrames'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionSeries'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionSeries'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionStudy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionStudy'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstanceAvailability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstanceAvailability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRInstantPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRInstantPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInteger'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInteger'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIntegerPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIntegerPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLinkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLinkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLinkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLinkTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRMarkdownPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRMarkdownPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeasmnt_Principle'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeasmnt_Principle'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMeasmnt_PrincipleList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMeasmnt_PrincipleList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedia'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedia'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationAdministrationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationAdministrationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosageInstruction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosageInstruction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationOrder'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationOrder'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDispenseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDispenseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDosageInstruction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDosageInstruction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationOrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationOrderStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationStatementStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationStatementStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeta'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeta'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRMoney'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRMoney'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNameUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNameUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNameUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNameUseList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemIdentifierTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemIdentifierTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrative'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrative'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNarrativeStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNarrativeStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNoteType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNoteType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNoteTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNoteTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNutritionOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNutritionOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNutritionOrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNutritionOrderStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIROidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIROidPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationKindList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationKindList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationParameterUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationParameterUseList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrder'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrder'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrderResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROrderStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRParameters'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRParameters'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantRequired'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantRequired'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantRequiredList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantRequiredList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipationStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPeriod'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPeriod'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRPositiveIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRPositiveIntPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerPractitionerRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerPractitionerRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseNotes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseNotes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceRelatedAgent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceRelatedAgent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuantityComparatorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuantityComparatorList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseQuestion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseQuestion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireResponseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireResponseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRatio'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRatio'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReference'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReferralStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReferralStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRReferralStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRReferralStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRemittanceOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRemittanceOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResourceContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResourceContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResourceVersionPolicyList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResourceVersionPolicyList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResponseTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResponseTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRestfulConformanceMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRestfulConformanceMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRSampledDataDataTypePrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchEntryModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchEntryModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchModifierCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchModifierCodeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchParamTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchParamTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSignature'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSignature'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRSimpleQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRSimpleQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlicingRulesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlicingRulesList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlotStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlotStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSpecimenStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSpecimenStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRString'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRString'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRStructureDefinitionKindList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRStructureDefinitionKindList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionChannelType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionChannelType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionChannelTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionChannelTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyDeliveryStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyDeliveryStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestWhen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestWhen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSystemRestfulInteractionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSystemRestfulInteractionList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRTestScript'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRTestScript'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTransactionMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTransactionMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTransactionModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTransactionModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTypeRestfulInteractionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTypeRestfulInteractionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnknownContentCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnknownContentCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnknownContentCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnknownContentCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUri'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUri'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUriPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUriPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUuid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUuid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUuidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUuidPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRValueSet'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRValueSet'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCodeSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCodeSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionBaseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionBaseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionEyesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionEyesList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRXPathUsageType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRXPathUsageType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRXPathUsageTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRXPathUsageTypeList'));
    }

    public function testIsContainableResourceWithTypeName()
    {
        $this->assertTrue(VersionTypeMap::isContainableResource('Account'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AccountStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AccountStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionList-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Address'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AddressType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AddressType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AddressUse-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdministrativeGender'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdministrativeGender-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Age'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AggregationMode-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('AllergyIntolerance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntolerance.Reaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceCategory-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceCertainty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceCertainty-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceCriticality-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceSeverity-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Annotation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AnswerFormat'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AnswerFormat-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Appointment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Appointment.Participant'));
        $this->assertTrue(VersionTypeMap::isContainableResource('AppointmentResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AppointmentStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AppointmentStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionDirectionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionDirectionType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionOperatorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionOperatorType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionResponseTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionResponseTypes-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Attachment'));
        $this->assertTrue(VersionTypeMap::isContainableResource('AuditEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEvent.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEvent.Event'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEvent.Network'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEvent.Object'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEvent.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEvent.Source'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventAction-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventOutcome-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventParticipantNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventParticipantNetworkType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('base64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('base64Binary-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Basic'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Binary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BindingStrength'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BindingStrength-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('BodySite'));
        $this->assertFalse(VersionTypeMap::isContainableResource('boolean'));
        $this->assertFalse(VersionTypeMap::isContainableResource('boolean-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Bundle'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Bundle.Entry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Bundle.Link'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Bundle.Request'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Bundle.Response'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Bundle.Search'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BundleType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BundleType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CarePlan'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlan.Activity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlan.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlan.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlan.RelatedPlan'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanActivityStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanRelationship'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanRelationship-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Claim'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Coverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Diagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.MissingTeeth'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Payee'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Prosthesis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.SubDetail'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ClaimResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.AddItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Adjudication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Adjudication1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Adjudication2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Adjudication3'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Adjudication4'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Coverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Detail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Error'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Note'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.SubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ClinicalImpression'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalImpression.Finding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalImpression.Investigations'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalImpression.RuledOut'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalImpressionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalImpressionStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('code'));
        $this->assertFalse(VersionTypeMap::isContainableResource('code-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Coding'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Communication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Communication.Payload'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CommunicationRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CommunicationRequest.Payload'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CommunicationRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CommunicationRequestStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CommunicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CommunicationStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Composition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Composition.Attester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Composition.Event'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Composition.Section'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompositionAttestationMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompositionStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ConceptMap'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMap.Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMap.DependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMap.Element'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMap.Target'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMapEquivalence-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Condition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Condition.Evidence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Condition.Stage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionalDeleteStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionalDeleteStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionVerificationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionVerificationStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Conformance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Certificate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Document'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Endpoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Event'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Implementation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Interaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Interaction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Messaging'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Operation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Resource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Rest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.SearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Security'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Software'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConformanceEventMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConformanceEventMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConformanceResourceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConformanceResourceStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConformanceStatementKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConformanceStatementKind-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConstraintSeverity-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactPoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactPointSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactPointSystem-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactPointUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactPointUse-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContentType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContentType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Contract'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Actor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Actor1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Friendly'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Legal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Rule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Signer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Term'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.ValuedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.ValuedItem1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Count'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Coverage'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DataElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DataElement.Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DataElement.Mapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DataElementStringency'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DataElementStringency-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('date'));
        $this->assertFalse(VersionTypeMap::isContainableResource('date-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('dateTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('dateTime-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DaysOfWeek'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DaysOfWeek-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('decimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('decimal-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DetectedIssue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DetectedIssue.Mitigation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DetectedIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DetectedIssueSeverity-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Device'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DeviceComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceComponent.ProductionSpecification'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DeviceMetric'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetric.Calibration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCalibrationState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCalibrationState-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCalibrationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCalibrationType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCategory-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricColor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricColor-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricOperationalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricOperationalStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DeviceUseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceUseRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceUseRequestPriority-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceUseRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceUseRequestStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DeviceUseStatement'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DiagnosticOrder'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticOrder.Event'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticOrder.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticOrderPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticOrderPriority-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticOrderStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DiagnosticReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticReport.Image'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticReportStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DigitalMediaType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DigitalMediaType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Distance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DocumentManifest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentManifest.Content'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentManifest.Related'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentMode-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DocumentReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReference.Content'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReference.Context'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReference.Related'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReference.RelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReferenceStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentRelationshipType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DomainResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Duration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Element'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Base'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Binding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Constraint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Mapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Slicing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Type'));
        $this->assertTrue(VersionTypeMap::isContainableResource('EligibilityRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('EligibilityResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Encounter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.Hospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.Location'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.StatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterClass'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterClass-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterLocationStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterState-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('EnrollmentRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('EnrollmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('EpisodeOfCare'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EpisodeOfCare.CareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EpisodeOfCare.StatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EpisodeOfCareStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EpisodeOfCareStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventTiming-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ExplanationOfBenefit'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Extension'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExtensionContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExtensionContext-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FamilyHistoryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FamilyHistoryStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('FamilyMemberHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FamilyMemberHistory.Condition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FilterOperator-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Flag'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FlagStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FlagStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Goal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Goal.Outcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GoalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GoalStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Group'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Group.Characteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Group.Member'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GroupType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GroupType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuideDependencyType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuideDependencyType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuidePageKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuidePageKind-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuideResourcePurpose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuideResourcePurpose-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('HealthcareService'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HealthcareService.AvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HealthcareService.NotAvailable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HealthcareService.ServiceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HTTPVerb'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HTTPVerb-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HumanName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('id'));
        $this->assertFalse(VersionTypeMap::isContainableResource('id-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Identifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IdentifierUse-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IdentityAssuranceLevel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IdentityAssuranceLevel-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ImagingObjectSelection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingObjectSelection.Frames'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingObjectSelection.Instance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingObjectSelection.Series'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingObjectSelection.Study'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ImagingStudy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingStudy.Instance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingStudy.Series'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Immunization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Immunization.Explanation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Immunization.Reaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Immunization.VaccinationProtocol'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ImmunizationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImmunizationRecommendation.DateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImmunizationRecommendation.Protocol'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImmunizationRecommendation.Recommendation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ImplementationGuide'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Dependency'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Global'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Package'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Page'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Resource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InstanceAvailability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InstanceAvailability-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('instant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('instant-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('integer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('integer-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IssueSeverity-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IssueType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IssueType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LinkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LinkType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('List'));
        $this->assertFalse(VersionTypeMap::isContainableResource('List.Entry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ListMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ListStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ListStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Location'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Location.Position'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LocationMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LocationStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('markdown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('markdown-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Measmnt-Principle'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Measmnt-Principle-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Media'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Medication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Medication.Batch'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Medication.Content'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Medication.Ingredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Medication.Package'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Medication.Product'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicationAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationAdministration.Dosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationAdministrationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationAdministrationStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicationDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationDispense.DosageInstruction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationDispense.Substitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationDispenseStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicationOrder'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationOrder.DispenseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationOrder.DosageInstruction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationOrder.Substitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationOrderStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicationStatement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationStatement.Dosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationStatementStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MessageHeader'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageHeader.Destination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageHeader.Response'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageHeader.Source'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageSignificanceCategory-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Meta'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Money'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NameUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NameUse-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('NamingSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NamingSystem.Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NamingSystem.UniqueId'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NamingSystemIdentifierType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NamingSystemIdentifierType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NamingSystemType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NamingSystemType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Narrative'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NarrativeStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NoteType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NoteType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('NutritionOrder'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.Administration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.EnteralFormula'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.Nutrient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.OralDiet'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.Supplement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.Texture'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrderStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Observation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Observation.Component'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Observation.ReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Observation.Related'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationRelationshipType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('oid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('oid-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('OperationDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationDefinition.Binding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationDefinition.Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationDefinition.Parameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationKind-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('OperationOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationOutcome.Issue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationParameterUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationParameterUse-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Order'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Order.When'));
        $this->assertTrue(VersionTypeMap::isContainableResource('OrderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OrderStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Organization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Organization.Contact'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Parameters'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Parameters.Parameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ParticipantRequired'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ParticipantRequired-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ParticipantStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ParticipantStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ParticipationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ParticipationStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Patient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Patient.Animal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Patient.Communication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Patient.Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Patient.Link'));
        $this->assertTrue(VersionTypeMap::isContainableResource('PaymentNotice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('PaymentReconciliation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PaymentReconciliation.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PaymentReconciliation.Note'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Period'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Person'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Person.Link'));
        $this->assertFalse(VersionTypeMap::isContainableResource('positiveInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('positiveInt-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Practitioner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Practitioner.PractitionerRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Practitioner.Qualification'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Procedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Procedure.FocalDevice'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Procedure.Performer'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ProcedureRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProcedureRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProcedureRequestPriority-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProcedureRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProcedureRequestStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProcedureStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProcedureStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ProcessRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProcessRequest.Item'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ProcessResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProcessResponse.Notes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PropertyRepresentation-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Provenance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Provenance.Agent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Provenance.Entity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Provenance.RelatedAgent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProvenanceEntityRole-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Quantity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuantityComparator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuantityComparator-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Questionnaire'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Questionnaire.Group'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Questionnaire.Question'));
        $this->assertTrue(VersionTypeMap::isContainableResource('QuestionnaireResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireResponse.Answer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireResponse.Group'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireResponse.Question'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireResponseStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Range'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Ratio'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Reference'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ReferralRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ReferralStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ReferralStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('RelatedPerson'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RemittanceOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RemittanceOutcome-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Resource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceVersionPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceVersionPolicy-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResponseType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RestfulConformanceMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RestfulConformanceMode-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('RiskAssessment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RiskAssessment.Prediction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SampledData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SampledDataDataType-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Schedule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchEntryMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchEntryMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchModifierCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchModifierCode-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('SearchParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchParameter.Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchParamType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Signature'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SimpleQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SlicingRules-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Slot'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SlotStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SlotStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Specimen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Specimen.Collection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Specimen.Container'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Specimen.Treatment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SpecimenStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SpecimenStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('string'));
        $this->assertFalse(VersionTypeMap::isContainableResource('string-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('StructureDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureDefinition.Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureDefinition.Differential'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureDefinition.Mapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureDefinition.Snapshot'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureDefinitionKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureDefinitionKind-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Subscription'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Subscription.Channel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionChannelType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionChannelType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Substance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Substance.Ingredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Substance.Instance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('SupplyDelivery'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyDeliveryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyDeliveryStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('SupplyRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyRequest.When'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyRequestStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SystemRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SystemRestfulInteraction-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('TestScript'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Action'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Action1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Action2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Assert'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Capability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Fixture'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Link'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Metadata'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Operation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.RequestHeader'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Setup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Teardown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Test'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Variable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('time'));
        $this->assertFalse(VersionTypeMap::isContainableResource('time-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Timing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Timing.Repeat'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TransactionMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TransactionMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TypeRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TypeRestfulInteraction-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UnitsOfTime-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UnknownContentCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UnknownContentCode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('unsignedInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('unsignedInt-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('uri'));
        $this->assertFalse(VersionTypeMap::isContainableResource('uri-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Use'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Use-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('uuid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('uuid-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ValueSet'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.CodeSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Compose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Concept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Concept1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Contains'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Designation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Expansion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Filter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Include'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Parameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VisionBase'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VisionBase-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VisionEyes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VisionEyes-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('VisionPrescription'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VisionPrescription.Dispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('XPathUsageType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('XPathUsageType-list'));
    }

    public function testIsContainableResourceWithInstance()
    {
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAccount;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAccountStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAccountStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRActionList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRActionListList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddress;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressUseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAdministrativeGender;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAdministrativeGenderList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRAge;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAggregationMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAggregationModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCategory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCertainty;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCertaintyList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCriticality;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCriticalityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceSeverity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnnotation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnswerFormat;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAnswerFormatList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointment;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAppointmentStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAppointmentStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionDirectionType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionDirectionTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionOperatorType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionOperatorTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionResponseTypes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionResponseTypesList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAttachment;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEvent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventObject;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventActionList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventOutcome;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventOutcomeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventParticipantNetworkType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventParticipantNetworkTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBase64Binary;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBase64BinaryPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBasic;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBinary;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBindingStrength;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBindingStrengthList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBodySite;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBoolean;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBooleanPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBundle;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBundleType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBundleTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanRelatedPlan;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanActivityStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanRelationship;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanRelationshipList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaim;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCoverage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimMissingTeeth;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProsthesis;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication2;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication3;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication4;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseCoverage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseNote;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClaimType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClaimTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigations;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionRuledOut;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClinicalImpressionStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClinicalImpressionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRCodePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCodeableConcept;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCoding;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunication;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationRequestStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRComposition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionAttestationMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConceptMapEquivalence;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCondition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionalDeleteStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionalDeleteStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionVerificationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionVerificationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConformance;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEndpoint;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceEventMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceEventModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceResourceStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceResourceStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceStatementKind;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceStatementKindList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConstraintSeverity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConstraintSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPoint;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointSystem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointSystemList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointUseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContentType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContentTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRContract;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRCount;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCoverage;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDataElement;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDataElementStringency;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDataElementStringencyList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDate;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDatePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDateTime;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDateTimePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDaysOfWeek;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDaysOfWeekList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDecimal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDecimalPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDetectedIssueSeverity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDetectedIssueSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDevice;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationState;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationStateList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCategory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricColor;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricColorList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricOperationalStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricOperationalStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestPriority;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestPriorityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticOrder;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderPriority;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticReportStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDigitalMediaType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDigitalMediaTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDistance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentReferenceStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDuration;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREncounter;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterClass;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterClassList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterLocationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterLocationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterState;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterStateList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareCareTeam;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREpisodeOfCareStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREpisodeOfCareStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREventTiming;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREventTimingList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtension;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtensionContext;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRExtensionContextList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFamilyHistoryStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFamilyHistoryStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFilterOperator;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFilterOperatorList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFlag;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFlagStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFlagStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGoal;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalOutcome;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGoalStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGoalStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGroup;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGroupType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGroupTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideDependencyType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideDependencyTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuidePageKind;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuidePageKindList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideResourcePurpose;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideResourcePurposeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceServiceType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHTTPVerb;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRHTTPVerbList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHumanName;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRId;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIdPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifier;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifierUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentifierUseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentityAssuranceLevel;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentityAssuranceLevelList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingObjectSelection;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionFrames;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionInstance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionSeries;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionStudy;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunization;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstanceAvailability;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRInstantPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInteger;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIntegerPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueSeverity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLinkType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLinkTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRList;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRLocation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMarkdown;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRMarkdownPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeasmnt_Principle;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMeasmnt_PrincipleList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedia;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedication;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationAdministrationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosageInstruction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationDispenseStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationOrder;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDispenseRequest;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDosageInstruction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationOrderStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationOrderStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationStatementStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationStatementStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMessageSignificanceCategory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeta;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRMoney;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNameUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNameUseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemIdentifierType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemIdentifierTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrative;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrativeStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNarrativeStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNoteType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNoteTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNutritionOrderStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNutritionOrderStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRObservation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROid;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIROidPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationKind;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationKindList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationParameterUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationParameterUseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrder;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrderResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROrderStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROrderStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrganization;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRParameters;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantRequired;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantRequiredList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPatient;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationNote;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPeriod;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPerson;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPositiveInt;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRPositiveIntPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerPractitionerRole;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedure;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestPriority;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestPriorityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseNotes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPropertyRepresentation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProvenance;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceRelatedAgent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProvenanceEntityRole;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantityComparator;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuantityComparatorList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseGroup;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseQuestion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireResponseStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireResponseStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRange;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRatio;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReference;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReferralStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRReferralStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRemittanceOutcome;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRemittanceOutcomeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResourceContainer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResourceVersionPolicy;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResourceVersionPolicyList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResponseType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResponseTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRestfulConformanceMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledData;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledDataDataType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRSampledDataDataTypePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSchedule;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchEntryMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchEntryModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchModifierCode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchModifierCodeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchParamType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchParamTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSignature;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRSimpleQuantity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlicingRules;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlicingRulesList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSlot;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlotStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlotStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSpecimenStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSpecimenStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRString;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRStructureDefinitionKind;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRStructureDefinitionKindList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubscription;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionChannelType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionChannelTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubstance;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyDeliveryStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyDeliveryStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestWhen;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyRequestStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSystemRestfulInteraction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSystemRestfulInteractionList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRTestScript;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTime;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRTimePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTransactionMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTransactionModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTypeRestfulInteraction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTypeRestfulInteractionList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnitsOfTime;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnknownContentCode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnknownContentCodeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnsignedInt;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUnsignedIntPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUri;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUriPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUuid;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUuidPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRValueSet;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCodeSystem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionBase;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionBaseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionEyes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionEyesList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRXPathUsageType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRXPathUsageTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
    }
}
