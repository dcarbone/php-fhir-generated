<?php

namespace DCarbone\PHPFHIRGenerated\DSTU2\PHPFHIRTests;

/*!
 * This class was generated with the PHPFHIR library (https://github.com/dcarbone/php-fhir) using
 * class definitions from HL7 FHIR (https://www.hl7.org/fhir/)
 * 
 * Class creation date: October 21st, 2019 04:04+0000
 * 
 * PHPFHIR Copyright:
 * 
 * Copyright 2016-2019 Daniel Carbone (daniel.p.carbone@gmail.com)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 *
 * FHIR Copyright Notice:
 *
 *   Copyright (c) 2011+, HL7, Inc.
 *   All rights reserved.
 * 
 *   Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *    * Neither the name of HL7 nor the names of its contributors may be used to
 *      endorse or promote products derived from this software without specific
 *      prior written permission.
 * 
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *   IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 * 
 * 
 *   Generated on Sat, Oct 24, 2015 07:41+1100 for FHIR v1.0.2
 * 
 *   Note: the schemas & schematrons do not contain all of the rules about what makes resources
 *   valid. Implementers will still need to be familiar with the content of the specification and with
 *   any profiles that apply to the resources in order to make a conformant implementation.
 * 
 */
use DCarbone\PHPFHIRGenerated\DSTU2\PHPFHIRTypeMap;
use PHPUnit\Framework\TestCase;

/**
 * Class PHPFHIRTypeMapTest
 * @package \DCarbone\PHPFHIRGenerated\DSTU2\PHPFHIRTests
 */
class PHPFHIRTypeMapTest extends TestCase
{
    public function testGetTypeClassWithNonStringReturnsNull()
    {
        $this->assertNull(PHPFHIRTypeMap::getTypeClass(1));
    }

    public function testGetContainedTypeClassName()
    {
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAccount', PHPFHIRTypeMap::getContainedTypeClassName('Account'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AccountStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AccountStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionList'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionList-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Address'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AddressType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AddressType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AddressUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AddressUse-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdministrativeGender'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdministrativeGender-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Age'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AggregationMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AggregationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntolerance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntolerance.Reaction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceCategory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceCategory-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceCertainty'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceCertainty-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceCriticality'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceCriticality-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceSeverity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceSeverity-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Annotation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AnswerFormat'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AnswerFormat-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAppointment', PHPFHIRTypeMap::getContainedTypeClassName('Appointment'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Appointment.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', PHPFHIRTypeMap::getContainedTypeClassName('AppointmentResponse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AppointmentStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AppointmentStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionDirectionType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionDirectionType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionOperatorType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionOperatorType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionResponseTypes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionResponseTypes-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Attachment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAuditEvent', PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent.Detail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent.Event'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent.Network'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent.Object'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent.Source'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEventAction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEventAction-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEventOutcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEventOutcome-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEventParticipantNetworkType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEventParticipantNetworkType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BackboneElement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('base64Binary'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('base64Binary-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRBasic', PHPFHIRTypeMap::getContainedTypeClassName('Basic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRBinary', PHPFHIRTypeMap::getContainedTypeClassName('Binary'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BindingStrength'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BindingStrength-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRBodySite', PHPFHIRTypeMap::getContainedTypeClassName('BodySite'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('boolean'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('boolean-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRBundle', PHPFHIRTypeMap::getContainedTypeClassName('Bundle'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Bundle.Entry'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Bundle.Link'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Bundle.Request'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Bundle.Response'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Bundle.Search'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BundleType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BundleType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCarePlan', PHPFHIRTypeMap::getContainedTypeClassName('CarePlan'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlan.Activity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlan.Detail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlan.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlan.RelatedPlan'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanActivityStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanActivityStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanRelationship'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanRelationship-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRClaim', PHPFHIRTypeMap::getContainedTypeClassName('Claim'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Coverage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Detail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Diagnosis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.MissingTeeth'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Payee'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Prosthesis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRClaimResponse', PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.AddItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Adjudication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Adjudication1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Adjudication2'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Adjudication3'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Adjudication4'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Coverage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Detail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Detail1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Error'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Note'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.SubDetail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', PHPFHIRTypeMap::getContainedTypeClassName('ClinicalImpression'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalImpression.Finding'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalImpression.Investigations'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalImpression.RuledOut'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalImpressionStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalImpressionStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('code'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('code-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeableConcept'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Coding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCommunication', PHPFHIRTypeMap::getContainedTypeClassName('Communication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Communication.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', PHPFHIRTypeMap::getContainedTypeClassName('CommunicationRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CommunicationRequest.Payload'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CommunicationRequestStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CommunicationRequestStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CommunicationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CommunicationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRComposition', PHPFHIRTypeMap::getContainedTypeClassName('Composition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Composition.Attester'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Composition.Event'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Composition.Section'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompositionAttestationMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompositionAttestationMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompositionStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompositionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRConceptMap', PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.Contact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.DependsOn'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.Element'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.Target'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMapEquivalence'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMapEquivalence-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCondition', PHPFHIRTypeMap::getContainedTypeClassName('Condition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Condition.Evidence'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Condition.Stage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionalDeleteStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionalDeleteStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionVerificationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionVerificationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRConformance', PHPFHIRTypeMap::getContainedTypeClassName('Conformance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Certificate'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Contact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Document'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Endpoint'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Event'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Implementation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Interaction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Interaction1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Messaging'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Operation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Resource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Rest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.SearchParam'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Security'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Conformance.Software'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConformanceEventMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConformanceEventMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConformanceResourceStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConformanceResourceStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConformanceStatementKind'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConformanceStatementKind-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConstraintSeverity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConstraintSeverity-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactPoint'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactPointSystem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactPointSystem-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactPointUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactPointUse-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContentType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContentType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRContract', PHPFHIRTypeMap::getContainedTypeClassName('Contract'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Actor'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Actor1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Friendly'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Legal'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Rule'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Signer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Term'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.ValuedItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.ValuedItem1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Count'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCoverage', PHPFHIRTypeMap::getContainedTypeClassName('Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDataElement', PHPFHIRTypeMap::getContainedTypeClassName('DataElement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DataElement.Contact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DataElement.Mapping'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DataElementStringency'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DataElementStringency-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('date'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('date-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('dateTime'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('dateTime-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DaysOfWeek'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DaysOfWeek-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('decimal'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('decimal-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', PHPFHIRTypeMap::getContainedTypeClassName('DetectedIssue'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DetectedIssue.Mitigation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DetectedIssueSeverity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DetectedIssueSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDevice', PHPFHIRTypeMap::getContainedTypeClassName('Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceComponent', PHPFHIRTypeMap::getContainedTypeClassName('DeviceComponent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceComponent.ProductionSpecification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetric'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetric.Calibration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCalibrationState'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCalibrationState-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCalibrationType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCalibrationType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCategory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCategory-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricColor'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricColor-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricOperationalStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricOperationalStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceUseRequest', PHPFHIRTypeMap::getContainedTypeClassName('DeviceUseRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceUseRequestPriority'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceUseRequestPriority-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceUseRequestStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceUseRequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement', PHPFHIRTypeMap::getContainedTypeClassName('DeviceUseStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDiagnosticOrder', PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticOrder'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticOrder.Event'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticOrder.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticOrderPriority'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticOrderPriority-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticOrderStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticReport'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticReport.Image'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticReportStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticReportStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DigitalMediaType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DigitalMediaType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Distance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDocumentManifest', PHPFHIRTypeMap::getContainedTypeClassName('DocumentManifest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentManifest.Content'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentManifest.Related'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDocumentReference', PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference.Content'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference.Context'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference.Related'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference.RelatesTo'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReferenceStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReferenceStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentRelationshipType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentRelationshipType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DomainResource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Duration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Element'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Base'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Binding'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Constraint'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Mapping'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Slicing'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Type'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREligibilityRequest', PHPFHIRTypeMap::getContainedTypeClassName('EligibilityRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREligibilityResponse', PHPFHIRTypeMap::getContainedTypeClassName('EligibilityResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREncounter', PHPFHIRTypeMap::getContainedTypeClassName('Encounter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.Hospitalization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.Location'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.StatusHistory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterClass'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterClass-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterLocationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterLocationStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterState'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterState-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', PHPFHIRTypeMap::getContainedTypeClassName('EnrollmentRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', PHPFHIRTypeMap::getContainedTypeClassName('EnrollmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', PHPFHIRTypeMap::getContainedTypeClassName('EpisodeOfCare'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EpisodeOfCare.CareTeam'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EpisodeOfCare.StatusHistory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EpisodeOfCareStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EpisodeOfCareStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventTiming'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventTiming-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Extension'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExtensionContext'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExtensionContext-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FamilyHistoryStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FamilyHistoryStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', PHPFHIRTypeMap::getContainedTypeClassName('FamilyMemberHistory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FamilyMemberHistory.Condition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FilterOperator'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FilterOperator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRFlag', PHPFHIRTypeMap::getContainedTypeClassName('Flag'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FlagStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FlagStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRGoal', PHPFHIRTypeMap::getContainedTypeClassName('Goal'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Goal.Outcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GoalStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GoalStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRGroup', PHPFHIRTypeMap::getContainedTypeClassName('Group'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Group.Characteristic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Group.Member'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GroupType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GroupType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GuideDependencyType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GuideDependencyType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GuidePageKind'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GuidePageKind-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GuideResourcePurpose'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GuideResourcePurpose-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRHealthcareService', PHPFHIRTypeMap::getContainedTypeClassName('HealthcareService'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HealthcareService.AvailableTime'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HealthcareService.NotAvailable'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HealthcareService.ServiceType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HTTPVerb'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HTTPVerb-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HumanName'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('id'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('id-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Identifier'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IdentifierUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IdentifierUse-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IdentityAssuranceLevel'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IdentityAssuranceLevel-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImagingObjectSelection', PHPFHIRTypeMap::getContainedTypeClassName('ImagingObjectSelection'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingObjectSelection.Frames'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingObjectSelection.Instance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingObjectSelection.Series'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingObjectSelection.Study'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImagingStudy', PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudy'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudy.Instance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudy.Series'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImmunization', PHPFHIRTypeMap::getContainedTypeClassName('Immunization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Immunization.Explanation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Immunization.Reaction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Immunization.VaccinationProtocol'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationRecommendation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationRecommendation.DateCriterion'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationRecommendation.Protocol'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationRecommendation.Recommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImplementationGuide', PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Contact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Dependency'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Global'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Package'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Page'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Resource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InstanceAvailability'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InstanceAvailability-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('instant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('instant-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('integer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('integer-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IssueSeverity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IssueSeverity-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IssueType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IssueType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LinkType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LinkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRList', PHPFHIRTypeMap::getContainedTypeClassName('List'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('List.Entry'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ListMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ListMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ListStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ListStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRLocation', PHPFHIRTypeMap::getContainedTypeClassName('Location'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Location.Position'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LocationMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LocationMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LocationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LocationStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('markdown'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('markdown-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Measmnt-Principle'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Measmnt-Principle-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedia', PHPFHIRTypeMap::getContainedTypeClassName('Media'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedication', PHPFHIRTypeMap::getContainedTypeClassName('Medication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Medication.Batch'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Medication.Content'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Medication.Ingredient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Medication.Package'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Medication.Product'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', PHPFHIRTypeMap::getContainedTypeClassName('MedicationAdministration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationAdministration.Dosage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationAdministrationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationAdministrationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispense'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispense.DosageInstruction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispense.Substitution'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispenseStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispenseStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationOrder', PHPFHIRTypeMap::getContainedTypeClassName('MedicationOrder'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationOrder.DispenseRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationOrder.DosageInstruction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationOrder.Substitution'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationOrderStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', PHPFHIRTypeMap::getContainedTypeClassName('MedicationStatement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationStatement.Dosage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationStatementStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationStatementStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMessageHeader', PHPFHIRTypeMap::getContainedTypeClassName('MessageHeader'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageHeader.Destination'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageHeader.Response'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageHeader.Source'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageSignificanceCategory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageSignificanceCategory-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Meta'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Money'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NameUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NameUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRNamingSystem', PHPFHIRTypeMap::getContainedTypeClassName('NamingSystem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NamingSystem.Contact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NamingSystem.UniqueId'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NamingSystemIdentifierType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NamingSystemIdentifierType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NamingSystemType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NamingSystemType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Narrative'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NarrativeStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NarrativeStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NoteType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NoteType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.Administration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.EnteralFormula'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.Nutrient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.OralDiet'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.Supplement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.Texture'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrderStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRObservation', PHPFHIRTypeMap::getContainedTypeClassName('Observation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Observation.Component'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Observation.ReferenceRange'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Observation.Related'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationRelationshipType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationRelationshipType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('oid'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('oid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROperationDefinition', PHPFHIRTypeMap::getContainedTypeClassName('OperationDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationDefinition.Binding'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationDefinition.Contact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationDefinition.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationKind'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROperationOutcome', PHPFHIRTypeMap::getContainedTypeClassName('OperationOutcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationOutcome.Issue'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationParameterUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationParameterUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROrder', PHPFHIRTypeMap::getContainedTypeClassName('Order'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Order.When'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROrderResponse', PHPFHIRTypeMap::getContainedTypeClassName('OrderResponse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OrderStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROrganization', PHPFHIRTypeMap::getContainedTypeClassName('Organization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Organization.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRParameters', PHPFHIRTypeMap::getContainedTypeClassName('Parameters'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Parameters.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ParticipantRequired'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ParticipantRequired-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ParticipantStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ParticipantStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ParticipationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ParticipationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPatient', PHPFHIRTypeMap::getContainedTypeClassName('Patient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Patient.Animal'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Patient.Communication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Patient.Contact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Patient.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', PHPFHIRTypeMap::getContainedTypeClassName('PaymentNotice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', PHPFHIRTypeMap::getContainedTypeClassName('PaymentReconciliation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PaymentReconciliation.Detail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PaymentReconciliation.Note'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Period'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPerson', PHPFHIRTypeMap::getContainedTypeClassName('Person'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Person.Link'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('positiveInt'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('positiveInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPractitioner', PHPFHIRTypeMap::getContainedTypeClassName('Practitioner'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Practitioner.PractitionerRole'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Practitioner.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcedure', PHPFHIRTypeMap::getContainedTypeClassName('Procedure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Procedure.FocalDevice'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Procedure.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcedureRequest', PHPFHIRTypeMap::getContainedTypeClassName('ProcedureRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProcedureRequestPriority'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProcedureRequestPriority-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProcedureRequestStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProcedureRequestStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProcedureStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProcedureStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcessRequest', PHPFHIRTypeMap::getContainedTypeClassName('ProcessRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProcessRequest.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcessResponse', PHPFHIRTypeMap::getContainedTypeClassName('ProcessResponse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProcessResponse.Notes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PropertyRepresentation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PropertyRepresentation-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProvenance', PHPFHIRTypeMap::getContainedTypeClassName('Provenance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Provenance.Agent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Provenance.Entity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Provenance.RelatedAgent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProvenanceEntityRole'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProvenanceEntityRole-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Quantity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuantityComparator'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuantityComparator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRQuestionnaire', PHPFHIRTypeMap::getContainedTypeClassName('Questionnaire'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Questionnaire.Group'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Questionnaire.Question'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireResponse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireResponse.Answer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireResponse.Group'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireResponse.Question'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireResponseStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireResponseStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Range'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Ratio'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Reference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRReferralRequest', PHPFHIRTypeMap::getContainedTypeClassName('ReferralRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ReferralStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ReferralStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', PHPFHIRTypeMap::getContainedTypeClassName('RelatedPerson'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RemittanceOutcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RemittanceOutcome-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Resource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceContainer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceVersionPolicy'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceVersionPolicy-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResponseType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResponseType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RestfulConformanceMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RestfulConformanceMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', PHPFHIRTypeMap::getContainedTypeClassName('RiskAssessment'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RiskAssessment.Prediction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SampledData'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SampledDataDataType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SampledDataDataType-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSchedule', PHPFHIRTypeMap::getContainedTypeClassName('Schedule'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchEntryMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchEntryMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchModifierCode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchModifierCode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSearchParameter', PHPFHIRTypeMap::getContainedTypeClassName('SearchParameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchParameter.Contact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchParamType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchParamType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Signature'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SimpleQuantity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SlicingRules'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SlicingRules-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSlot', PHPFHIRTypeMap::getContainedTypeClassName('Slot'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SlotStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SlotStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSpecimen', PHPFHIRTypeMap::getContainedTypeClassName('Specimen'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Specimen.Collection'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Specimen.Container'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Specimen.Treatment'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('string'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('string-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRStructureDefinition', PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinition.Contact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinition.Differential'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinition.Mapping'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinition.Snapshot'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinitionKind'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinitionKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSubscription', PHPFHIRTypeMap::getContainedTypeClassName('Subscription'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Subscription.Channel'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionChannelType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionChannelType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSubstance', PHPFHIRTypeMap::getContainedTypeClassName('Substance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Substance.Ingredient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Substance.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', PHPFHIRTypeMap::getContainedTypeClassName('SupplyDelivery'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyDeliveryStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyDeliveryStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', PHPFHIRTypeMap::getContainedTypeClassName('SupplyRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyRequest.When'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyRequestStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyRequestStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SystemRestfulInteraction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SystemRestfulInteraction-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRTestScript', PHPFHIRTypeMap::getContainedTypeClassName('TestScript'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Action'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Action1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Action2'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Assert'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Capability'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Contact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Fixture'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Link'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Metadata'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Operation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.RequestHeader'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Setup'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Teardown'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Test'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Variable'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('time'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('time-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Timing'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Timing.Repeat'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TransactionMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TransactionMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TypeRestfulInteraction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TypeRestfulInteraction-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('UnitsOfTime'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('UnitsOfTime-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('UnknownContentCode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('UnknownContentCode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('unsignedInt'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('unsignedInt-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('uri'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('uri-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Use'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Use-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('uuid'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('uuid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRValueSet', PHPFHIRTypeMap::getContainedTypeClassName('ValueSet'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.CodeSystem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Compose'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Concept'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Concept1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Contact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Contains'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Designation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Expansion'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Filter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Include'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VisionBase'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VisionBase-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VisionEyes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VisionEyes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', PHPFHIRTypeMap::getContainedTypeClassName('VisionPrescription'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VisionPrescription.Dispense'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('XPathUsageType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('XPathUsageType-list'));
    }

    public function testIsContainableResourceWithClassname()
    {
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAccountStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAccountStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRActionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRActionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRActionListList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRActionListList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAddress'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAddress'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAddressType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAddressType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAddressTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAddressTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAddressUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAddressUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAdministrativeGenderList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAdministrativeGenderList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAggregationModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAggregationModeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceCertainty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceCertainty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceCertaintyList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceCertaintyList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceCriticalityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceCriticalityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAnnotation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAnnotation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAnswerFormat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAnswerFormat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAnswerFormatList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAnswerFormatList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAppointmentStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAppointmentStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAssertionDirectionTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAssertionDirectionTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAssertionOperatorTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAssertionOperatorTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAssertionResponseTypesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAssertionResponseTypesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAttachment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAttachment'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventObject'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventObject'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAuditEventActionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAuditEventActionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAuditEventOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAuditEventOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAuditEventOutcomeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAuditEventOutcomeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAuditEventParticipantNetworkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAuditEventParticipantNetworkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRAuditEventParticipantNetworkTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAuditEventParticipantNetworkTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRBase64BinaryPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRBase64BinaryPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRBinary'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRBinary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRBindingStrengthList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRBindingStrengthList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRBodySite'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRBodySite'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBoolean'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBoolean'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRBooleanPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRBooleanPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRBundle'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRBundle'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBundleType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBundleType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRBundleTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRBundleTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanRelatedPlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanRelatedPlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCarePlanRelationship'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCarePlanRelationship'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRCarePlanRelationshipList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRCarePlanRelationshipList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCarePlanStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCarePlanStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRCarePlanStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRCarePlanStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCoverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCoverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimMissingTeeth'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimMissingTeeth'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProsthesis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProsthesis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication3'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication3'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication4'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication4'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseCoverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseCoverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRClaimType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRClaimType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRClaimTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRClaimTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigations'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigations'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionRuledOut'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionRuledOut'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRClinicalImpressionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRClinicalImpressionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRClinicalImpressionStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRClinicalImpressionStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRCodePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRCodePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCoding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCoding'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCommunicationRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCommunicationRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRCommunicationRequestStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRCommunicationRequestStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCommunicationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCommunicationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRCommunicationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRCommunicationStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRCompositionAttestationModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRCompositionAttestationModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRCompositionStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRCompositionStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRConceptMap'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRConceptMap'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRConceptMapEquivalenceList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRConceptMapEquivalenceList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRConditionalDeleteStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRConditionalDeleteStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConditionVerificationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConditionVerificationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRConditionVerificationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRConditionVerificationStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRConformance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRConformance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEndpoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEndpoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConformanceEventMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConformanceEventMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRConformanceEventModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRConformanceEventModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConformanceResourceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConformanceResourceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRConformanceResourceStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRConformanceResourceStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConformanceStatementKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConformanceStatementKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRConformanceStatementKindList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRConformanceStatementKindList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRConstraintSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRConstraintSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRContactPoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRContactPoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRContactPointSystemList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRContactPointSystemList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRContactPointUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRContactPointUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRContentType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRContentType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRContentTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRContentTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDataElement'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDataElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDataElementStringency'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDataElementStringency'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDataElementStringencyList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDataElementStringencyList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDatePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDatePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDateTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDateTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDateTimePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDateTimePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDaysOfWeek'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDaysOfWeek'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDaysOfWeekList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDaysOfWeekList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDecimal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDecimal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDecimalPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDecimalPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDetectedIssueSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDetectedIssueSeverityList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceComponent'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricCalibrationStateList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricCalibrationStateList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricCalibrationTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricCalibrationTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricColor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricColor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricColorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricColorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricOperationalStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricOperationalStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceUseRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceUseRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceUseRequestPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceUseRequestPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceUseRequestPriorityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceUseRequestPriorityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceUseRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceUseRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceUseRequestStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceUseRequestStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDiagnosticOrder'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDiagnosticOrder'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDiagnosticOrderPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDiagnosticOrderPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDiagnosticOrderPriorityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDiagnosticOrderPriorityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDiagnosticOrderStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDiagnosticOrderStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDiagnosticOrderStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDiagnosticOrderStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDigitalMediaType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDigitalMediaType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDigitalMediaTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDigitalMediaTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDocumentModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDocumentModeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREligibilityRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREligibilityRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREligibilityResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREligibilityResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREncounterClass'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREncounterClass'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIREncounterClassList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIREncounterClassList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIREncounterLocationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIREncounterLocationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREncounterState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREncounterState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIREncounterStateList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIREncounterStateList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareCareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareCareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIREpisodeOfCareStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIREpisodeOfCareStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREventTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREventTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIREventTimingList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIREventTimingList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRExtension'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRExtension'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRExtensionContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRExtensionContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRExtensionContextList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRExtensionContextList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRFamilyHistoryStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRFamilyHistoryStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRFilterOperatorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRFilterOperatorList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRFlagStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRFlagStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGoalStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGoalStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRGoalStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRGoalStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGroupType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGroupType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRGroupTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRGroupTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGuideDependencyType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGuideDependencyType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRGuideDependencyTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRGuideDependencyTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGuidePageKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGuidePageKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRGuidePageKindList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRGuidePageKindList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGuideResourcePurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGuideResourcePurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRGuideResourcePurposeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRGuideResourcePurposeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceServiceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceServiceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRHTTPVerbList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRHTTPVerbList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRHumanName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRHumanName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRId'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRId'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRIdPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRIdPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRIdentifierUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRIdentifierUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRIdentityAssuranceLevelList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRIdentityAssuranceLevelList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImagingObjectSelection'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImagingObjectSelection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionFrames'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionFrames'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionSeries'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionSeries'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionStudy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionStudy'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRInstanceAvailability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRInstanceAvailability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRInstanceAvailabilityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRInstanceAvailabilityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRInstant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRInstant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRInstantPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRInstantPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRInteger'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRInteger'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRIntegerPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRIntegerPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRIssueSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRIssueSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIssueType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIssueType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRIssueTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRIssueTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRLinkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRLinkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRLinkTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRLinkTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRListModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRListModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRListStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRListStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRListStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRListStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRLocationModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRLocationModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRLocationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRLocationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRMarkdownPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRMarkdownPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMeasmnt_Principle'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMeasmnt_Principle'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRMeasmnt_PrincipleList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRMeasmnt_PrincipleList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedia'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedia'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMedicationAdministrationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMedicationAdministrationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRMedicationAdministrationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRMedicationAdministrationStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosageInstruction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosageInstruction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMedicationDispenseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMedicationDispenseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRMedicationDispenseStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRMedicationDispenseStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationOrder'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationOrder'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDispenseRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDispenseRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDosageInstruction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDosageInstruction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMedicationOrderStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMedicationOrderStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRMedicationOrderStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRMedicationOrderStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMedicationStatementStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMedicationStatementStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRMedicationStatementStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRMedicationStatementStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMeta'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMeta'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRMoney'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRMoney'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNameUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNameUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRNameUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRNameUseList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRNamingSystem'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRNamingSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRNamingSystemIdentifierTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRNamingSystemIdentifierTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRNamingSystemTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRNamingSystemTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNarrative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNarrative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRNarrativeStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRNarrativeStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNoteType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNoteType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRNoteTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRNoteTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNutritionOrderStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNutritionOrderStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRNutritionOrderStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRNutritionOrderStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRObservationRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRObservationRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRObservationRelationshipTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRObservationRelationshipTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRObservationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRObservationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIROid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIROid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIROidPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIROidPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROperationDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROperationDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIROperationKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIROperationKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIROperationKindList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIROperationKindList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIROperationParameterUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIROperationParameterUseList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROrder'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROrder'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROrderResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROrderResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIROrderStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIROrderStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIROrderStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIROrderStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRParameters'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRParameters'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRParticipantRequired'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRParticipantRequired'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRParticipantRequiredList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRParticipantRequiredList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRParticipantStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRParticipantStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRParticipantStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRParticipantStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRParticipationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRParticipationStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRPeriod'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRPeriod'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRPositiveIntPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRPositiveIntPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerPractitionerRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerPractitionerRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcedureRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcedureRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRProcedureRequestPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRProcedureRequestPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRProcedureRequestPriorityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRProcedureRequestPriorityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRProcedureRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRProcedureRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRProcedureRequestStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRProcedureRequestStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRProcedureStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRProcedureStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRProcedureStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRProcedureStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcessRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcessRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcessResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcessResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseNotes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseNotes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRPropertyRepresentationList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRPropertyRepresentationList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceRelatedAgent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceRelatedAgent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRQuantityComparatorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRQuantityComparatorList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseQuestion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseQuestion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRQuestionnaireResponseStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRQuestionnaireResponseStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuestionnaireStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuestionnaireStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRQuestionnaireStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRQuestionnaireStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRRatio'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRRatio'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRReference'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRReferralRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRReferralRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRReferralStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRReferralStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRReferralStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRReferralStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRRemittanceOutcomeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRRemittanceOutcomeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResourceContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResourceContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResourceVersionPolicyList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResourceVersionPolicyList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRResponseType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRResponseType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResponseTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResponseTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRRestfulConformanceMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRRestfulConformanceMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRRestfulConformanceModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRRestfulConformanceModeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSampledData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSampledData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSampledDataDataTypePrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRSearchEntryModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSearchEntryModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRSearchModifierCodeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSearchModifierCodeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSearchParameter'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSearchParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRSearchParamTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSearchParamTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSignature'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSignature'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRSimpleQuantity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRSimpleQuantity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRSlicingRulesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSlicingRulesList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRSlotStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSlotStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRSpecimenStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSpecimenStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRString'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRString'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRStringPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRStringPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRStructureDefinitionKindList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRStructureDefinitionKindList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSubscriptionChannelType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSubscriptionChannelType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRSubscriptionChannelTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSubscriptionChannelTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSubscriptionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSubscriptionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRSubscriptionStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSubscriptionStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRSupplyDeliveryStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSupplyDeliveryStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestWhen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestWhen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRSupplyRequestStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSupplyRequestStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRSystemRestfulInteractionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSystemRestfulInteractionList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRTestScript'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRTestScript'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRTimePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRTimePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTiming\FHIRTimingRepeat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTiming\FHIRTimingRepeat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTransactionMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTransactionMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRTransactionModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRTransactionModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRTypeRestfulInteractionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRTypeRestfulInteractionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRUnitsOfTimeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRUnitsOfTimeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUnknownContentCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUnknownContentCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRUnknownContentCodeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRUnknownContentCodeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUri'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUri'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRUriPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRUriPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUuid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUuid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRUuidPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRUuidPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRValueSet'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRValueSet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCodeSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCodeSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRVisionBaseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRVisionBaseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRVisionEyesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRVisionEyesList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRXPathUsageType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRXPathUsageType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\DSTU2\FHIRXPathUsageTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRXPathUsageTypeList'));
    }

    public function testIsContainableResourceWithTypeName()
    {
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Account'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AccountStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AccountStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionList-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Address'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AddressType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AddressType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AddressUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AddressUse-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdministrativeGender'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdministrativeGender-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Age'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AggregationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AggregationMode-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('AllergyIntolerance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntolerance.Reaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceCategory-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceCertainty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceCertainty-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceCriticality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceCriticality-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceSeverity-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Annotation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AnswerFormat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AnswerFormat-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Appointment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Appointment.Participant'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('AppointmentResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AppointmentStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AppointmentStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionDirectionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionDirectionType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionOperatorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionOperatorType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionResponseTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionResponseTypes-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Attachment'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('AuditEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEvent.Detail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEvent.Event'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEvent.Network'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEvent.Object'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEvent.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEvent.Source'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEventAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEventAction-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEventOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEventOutcome-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEventParticipantNetworkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEventParticipantNetworkType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BackboneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('base64Binary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('base64Binary-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Basic'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Binary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BindingStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BindingStrength-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('BodySite'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('boolean'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('boolean-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Bundle'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Bundle.Entry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Bundle.Link'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Bundle.Request'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Bundle.Response'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Bundle.Search'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BundleType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BundleType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CarePlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlan.Activity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlan.Detail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlan.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlan.RelatedPlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanActivityStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanActivityStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanRelationship'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanRelationship-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Claim'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Coverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Detail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Diagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.MissingTeeth'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Payee'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Prosthesis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.SubDetail'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ClaimResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.AddItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Adjudication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Adjudication1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Adjudication2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Adjudication3'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Adjudication4'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Coverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Detail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Detail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Error'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Note'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.SubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ClinicalImpression'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalImpression.Finding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalImpression.Investigations'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalImpression.RuledOut'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalImpressionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalImpressionStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('code'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('code-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeableConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Coding'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Communication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Communication.Payload'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CommunicationRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CommunicationRequest.Payload'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CommunicationRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CommunicationRequestStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CommunicationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CommunicationStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Composition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Composition.Attester'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Composition.Event'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Composition.Section'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompositionAttestationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompositionAttestationMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompositionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompositionStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ConceptMap'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.Contact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.DependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.Element'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.Target'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMapEquivalence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMapEquivalence-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Condition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Condition.Evidence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Condition.Stage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionalDeleteStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionalDeleteStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionVerificationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionVerificationStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Conformance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Certificate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Contact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Document'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Endpoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Event'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Implementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Interaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Interaction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Messaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Operation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Resource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Rest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.SearchParam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Security'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Conformance.Software'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConformanceEventMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConformanceEventMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConformanceResourceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConformanceResourceStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConformanceStatementKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConformanceStatementKind-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConstraintSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConstraintSeverity-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactPoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactPointSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactPointSystem-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactPointUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactPointUse-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContentType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContentType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Contract'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Actor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Actor1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Friendly'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Legal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Rule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Signer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Term'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.ValuedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.ValuedItem1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Count'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Coverage'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DataElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DataElement.Contact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DataElement.Mapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DataElementStringency'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DataElementStringency-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('date'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('date-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('dateTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('dateTime-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DaysOfWeek'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DaysOfWeek-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('decimal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('decimal-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DetectedIssue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DetectedIssue.Mitigation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DetectedIssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DetectedIssueSeverity-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Device'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DeviceComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceComponent.ProductionSpecification'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DeviceMetric'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetric.Calibration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCalibrationState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCalibrationState-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCalibrationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCalibrationType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCategory-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricColor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricColor-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricOperationalStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricOperationalStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DeviceUseRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceUseRequestPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceUseRequestPriority-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceUseRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceUseRequestStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DeviceUseStatement'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DiagnosticOrder'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticOrder.Event'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticOrder.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticOrderPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticOrderPriority-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticOrderStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticOrderStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DiagnosticReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticReport.Image'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticReportStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DigitalMediaType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DigitalMediaType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Distance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DocumentManifest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentManifest.Content'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentManifest.Related'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentMode-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DocumentReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReference.Content'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReference.Context'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReference.Related'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReference.RelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReferenceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReferenceStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentRelationshipType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DomainResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Duration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Element'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Base'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Binding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Constraint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Mapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Slicing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Type'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EligibilityRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EligibilityResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Encounter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.Hospitalization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.Location'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.StatusHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterClass'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterClass-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterLocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterLocationStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterState-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EnrollmentRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EnrollmentResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EpisodeOfCare'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EpisodeOfCare.CareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EpisodeOfCare.StatusHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EpisodeOfCareStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EpisodeOfCareStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventTiming-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Extension'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExtensionContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExtensionContext-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FamilyHistoryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FamilyHistoryStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('FamilyMemberHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FamilyMemberHistory.Condition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FilterOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FilterOperator-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Flag'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FlagStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FlagStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Goal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Goal.Outcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GoalStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GoalStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Group'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Group.Characteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Group.Member'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GroupType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GroupType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GuideDependencyType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GuideDependencyType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GuidePageKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GuidePageKind-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GuideResourcePurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GuideResourcePurpose-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('HealthcareService'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HealthcareService.AvailableTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HealthcareService.NotAvailable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HealthcareService.ServiceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HTTPVerb'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HTTPVerb-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HumanName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('id'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('id-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Identifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IdentifierUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IdentifierUse-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IdentityAssuranceLevel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IdentityAssuranceLevel-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ImagingObjectSelection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingObjectSelection.Frames'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingObjectSelection.Instance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingObjectSelection.Series'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingObjectSelection.Study'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ImagingStudy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingStudy.Instance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingStudy.Series'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Immunization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Immunization.Explanation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Immunization.Reaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Immunization.VaccinationProtocol'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ImmunizationRecommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationRecommendation.DateCriterion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationRecommendation.Protocol'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationRecommendation.Recommendation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ImplementationGuide'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Contact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Dependency'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Global'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Package'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Page'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Resource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InstanceAvailability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InstanceAvailability-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('instant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('instant-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('integer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('integer-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IssueSeverity-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IssueType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IssueType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LinkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LinkType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('List'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('List.Entry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ListMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ListStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ListStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Location'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Location.Position'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LocationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LocationMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LocationStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('markdown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('markdown-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Measmnt-Principle'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Measmnt-Principle-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Media'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Medication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Medication.Batch'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Medication.Content'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Medication.Ingredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Medication.Package'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Medication.Product'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationAdministration.Dosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationAdministrationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationAdministrationStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationDispense.DosageInstruction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationDispense.Substitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationDispenseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationDispenseStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationOrder'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationOrder.DispenseRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationOrder.DosageInstruction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationOrder.Substitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationOrderStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationOrderStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationStatement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationStatement.Dosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationStatementStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationStatementStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MessageHeader'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageHeader.Destination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageHeader.Response'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageHeader.Source'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageSignificanceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageSignificanceCategory-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Meta'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Money'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NameUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NameUse-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('NamingSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NamingSystem.Contact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NamingSystem.UniqueId'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NamingSystemIdentifierType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NamingSystemIdentifierType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NamingSystemType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NamingSystemType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Narrative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NarrativeStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NarrativeStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NoteType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NoteType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('NutritionOrder'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.Administration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.EnteralFormula'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.Nutrient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.OralDiet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.Supplement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.Texture'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrderStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrderStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Observation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Observation.Component'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Observation.ReferenceRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Observation.Related'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationRelationshipType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('oid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('oid-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('OperationDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationDefinition.Binding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationDefinition.Contact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationDefinition.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationKind-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('OperationOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationOutcome.Issue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationParameterUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationParameterUse-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Order'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Order.When'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('OrderResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OrderStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OrderStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Organization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Organization.Contact'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Parameters'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Parameters.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ParticipantRequired'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ParticipantRequired-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ParticipantStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ParticipantStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ParticipationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ParticipationStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Patient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Patient.Animal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Patient.Communication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Patient.Contact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Patient.Link'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('PaymentNotice'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('PaymentReconciliation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PaymentReconciliation.Detail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PaymentReconciliation.Note'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Period'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Person'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Person.Link'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('positiveInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('positiveInt-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Practitioner'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Practitioner.PractitionerRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Practitioner.Qualification'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Procedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Procedure.FocalDevice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Procedure.Performer'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ProcedureRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProcedureRequestPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProcedureRequestPriority-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProcedureRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProcedureRequestStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProcedureStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProcedureStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ProcessRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProcessRequest.Item'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ProcessResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProcessResponse.Notes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PropertyRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PropertyRepresentation-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Provenance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Provenance.Agent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Provenance.Entity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Provenance.RelatedAgent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProvenanceEntityRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProvenanceEntityRole-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Quantity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuantityComparator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuantityComparator-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Questionnaire'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Questionnaire.Group'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Questionnaire.Question'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('QuestionnaireResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireResponse.Answer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireResponse.Group'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireResponse.Question'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireResponseStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Range'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Ratio'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Reference'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ReferralRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ReferralStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ReferralStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('RelatedPerson'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RemittanceOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RemittanceOutcome-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Resource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceVersionPolicy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceVersionPolicy-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResponseType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResponseType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RestfulConformanceMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RestfulConformanceMode-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('RiskAssessment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RiskAssessment.Prediction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SampledData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SampledDataDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SampledDataDataType-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Schedule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchEntryMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchEntryMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchModifierCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchModifierCode-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SearchParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchParameter.Contact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchParamType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchParamType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Signature'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SimpleQuantity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SlicingRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SlicingRules-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Slot'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SlotStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SlotStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Specimen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Specimen.Collection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Specimen.Container'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Specimen.Treatment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('string'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('string-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('StructureDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinition.Contact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinition.Differential'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinition.Mapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinition.Snapshot'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinitionKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinitionKind-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Subscription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Subscription.Channel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionChannelType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionChannelType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Substance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Substance.Ingredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Substance.Instance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SupplyDelivery'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyDeliveryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyDeliveryStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SupplyRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyRequest.When'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyRequestStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SystemRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SystemRestfulInteraction-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('TestScript'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Action'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Action1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Action2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Assert'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Capability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Contact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Fixture'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Link'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Metadata'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Operation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.RequestHeader'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Setup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Teardown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Test'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Variable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('time'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('time-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Timing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Timing.Repeat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TransactionMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TransactionMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TypeRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TypeRestfulInteraction-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('UnitsOfTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('UnitsOfTime-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('UnknownContentCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('UnknownContentCode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('unsignedInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('unsignedInt-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('uri'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('uri-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Use'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Use-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('uuid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('uuid-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ValueSet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.CodeSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Compose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Concept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Concept1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Contact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Contains'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Designation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Expansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Filter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Include'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VisionBase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VisionBase-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VisionEyes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VisionEyes-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('VisionPrescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VisionPrescription.Dispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('XPathUsageType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('XPathUsageType-list'));
    }

    public function testIsContainableResourceWithInstance()
    {
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAccount;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAccountStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAccountStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRActionList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRActionListList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAddress;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAddressType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAddressTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAddressUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAddressUseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAdministrativeGender;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAdministrativeGenderList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRAge;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAggregationMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAggregationModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceCategory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceCategoryList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceCertainty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceCertaintyList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceCriticality;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceCriticalityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceSeverity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceSeverityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAnnotation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAnswerFormat;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAnswerFormatList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAppointment;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAppointmentStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAppointmentStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAssertionDirectionType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAssertionDirectionTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAssertionOperatorType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAssertionOperatorTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAssertionResponseTypes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAssertionResponseTypesList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAttachment;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAuditEvent;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEvent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventObject;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAuditEventAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAuditEventActionList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAuditEventOutcome;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAuditEventOutcomeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAuditEventParticipantNetworkType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRAuditEventParticipantNetworkTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBase64Binary;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRBase64BinaryPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRBasic;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRBinary;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBindingStrength;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRBindingStrengthList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRBodySite;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBoolean;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRBooleanPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRBundle;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBundleType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRBundleTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCarePlan;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanRelatedPlan;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCarePlanActivityStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRCarePlanActivityStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCarePlanRelationship;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRCarePlanRelationshipList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCarePlanStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRCarePlanStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRClaim;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCoverage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimMissingTeeth;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProsthesis;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRClaimResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication2;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication3;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication4;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseCoverage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseNote;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRClaimType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRClaimTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRClinicalImpression;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigations;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionRuledOut;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRClinicalImpressionStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRClinicalImpressionStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRCodePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCodeableConcept;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCoding;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCommunication;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCommunicationRequestStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRCommunicationRequestStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCommunicationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRCommunicationStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRComposition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCompositionAttestationMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRCompositionAttestationModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCompositionStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRCompositionStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRConceptMap;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConceptMapEquivalence;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRConceptMapEquivalenceList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCondition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConditionalDeleteStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRConditionalDeleteStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConditionVerificationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRConditionVerificationStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRConformance;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEndpoint;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConformanceEventMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRConformanceEventModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConformanceResourceStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRConformanceResourceStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConformanceStatementKind;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRConformanceStatementKindList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConstraintSeverity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRConstraintSeverityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRContactPoint;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRContactPointSystem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRContactPointSystemList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRContactPointUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRContactPointUseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRContentType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRContentTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRContract;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRCount;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCoverage;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDataElement;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDataElementStringency;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDataElementStringencyList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDatePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDateTime;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDateTimePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDaysOfWeek;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDaysOfWeekList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDecimal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDecimalPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDetectedIssue;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDetectedIssueSeverity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDetectedIssueSeverityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDevice;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceComponent;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceMetric;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricCalibrationState;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricCalibrationStateList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricCalibrationType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricCalibrationTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricCategory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricCategoryList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricColor;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricColorList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricOperationalStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricOperationalStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceUseRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceUseRequestPriority;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceUseRequestPriorityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceUseRequestStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceUseRequestStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDiagnosticOrder;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDiagnosticOrderPriority;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDiagnosticOrderPriorityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDiagnosticOrderStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDiagnosticOrderStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDiagnosticReportStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDiagnosticReportStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDigitalMediaType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDigitalMediaTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRDistance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDocumentManifest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDocumentMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDocumentModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDocumentReference;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDocumentReferenceStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDocumentReferenceStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDocumentRelationshipType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRDocumentRelationshipTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRDuration;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREligibilityRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREligibilityResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREncounter;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREncounterClass;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIREncounterClassList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREncounterLocationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIREncounterLocationStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREncounterState;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIREncounterStateList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareCareTeam;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREpisodeOfCareStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIREpisodeOfCareStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREventTiming;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIREventTimingList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRExtension;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRExtensionContext;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRExtensionContextList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRFamilyHistoryStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRFamilyHistoryStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRFilterOperator;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRFilterOperatorList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRFlag;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRFlagStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRFlagStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRGoal;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalOutcome;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGoalStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRGoalStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRGroup;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGroupType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRGroupTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGuideDependencyType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRGuideDependencyTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGuidePageKind;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRGuidePageKindList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGuideResourcePurpose;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRGuideResourcePurposeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRHealthcareService;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceServiceType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRHTTPVerb;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRHTTPVerbList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRHumanName;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRId;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRIdPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIdentifier;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIdentifierUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRIdentifierUseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIdentityAssuranceLevel;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRIdentityAssuranceLevelList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImagingObjectSelection;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionFrames;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionInstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionSeries;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionStudy;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImagingStudy;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImmunization;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImplementationGuide;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRInstanceAvailability;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRInstanceAvailabilityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRInstant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRInstantPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRInteger;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRIntegerPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIssueSeverity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRIssueSeverityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIssueType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRIssueTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRLinkType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRLinkTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRList;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRListMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRListModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRListStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRListStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRLocation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRLocationMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRLocationModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRLocationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRLocationStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMarkdown;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRMarkdownPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMeasmnt_Principle;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRMeasmnt_PrincipleList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedia;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedication;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMedicationAdministrationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRMedicationAdministrationStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationDispense;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosageInstruction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMedicationDispenseStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRMedicationDispenseStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationOrder;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDispenseRequest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDosageInstruction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderSubstitution;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMedicationOrderStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRMedicationOrderStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationStatement;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMedicationStatementStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRMedicationStatementStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMessageHeader;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMessageSignificanceCategory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRMessageSignificanceCategoryList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMeta;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRMoney;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNameUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRNameUseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRNamingSystem;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNamingSystemIdentifierType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRNamingSystemIdentifierTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNamingSystemType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRNamingSystemTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNarrative;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNarrativeStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRNarrativeStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNoteType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRNoteTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRNutritionOrder;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNutritionOrderStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRNutritionOrderStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRObservation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRObservationRelationshipType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRObservationRelationshipTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRObservationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRObservationStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIROid;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIROidPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROperationDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIROperationKind;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIROperationKindList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROperationOutcome;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIROperationParameterUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIROperationParameterUseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROrder;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROrderResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIROrderStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIROrderStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROrganization;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRParameters;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRParticipantRequired;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRParticipantRequiredList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRParticipantStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRParticipantStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRParticipationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRParticipationStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPatient;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPaymentNotice;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationNote;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRPeriod;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPerson;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRPositiveInt;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRPositiveIntPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPractitioner;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerPractitionerRole;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcedure;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcedureRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRProcedureRequestPriority;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRProcedureRequestPriorityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRProcedureRequestStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRProcedureRequestStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRProcedureStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRProcedureStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcessRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcessResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseNotes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRPropertyRepresentation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRPropertyRepresentationList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProvenance;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceRelatedAgent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRProvenanceEntityRole;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRProvenanceEntityRoleList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantityComparator;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRQuantityComparatorList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRQuestionnaire;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseGroup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseQuestion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuestionnaireResponseStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRQuestionnaireResponseStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuestionnaireStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRQuestionnaireStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRRange;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRRatio;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRReference;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRReferralRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRReferralStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRReferralStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRRelatedPerson;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRRemittanceOutcome;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRRemittanceOutcomeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResourceContainer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRResourceVersionPolicy;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResourceVersionPolicyList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRResponseType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResponseTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRRestfulConformanceMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRRestfulConformanceModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRRiskAssessment;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSampledData;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSampledDataDataType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRSampledDataDataTypePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSchedule;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSearchEntryMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRSearchEntryModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSearchModifierCode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRSearchModifierCodeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSearchParameter;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSearchParamType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRSearchParamTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSignature;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRSimpleQuantity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSlicingRules;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRSlicingRulesList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSlot;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSlotStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRSlotStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSpecimen;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSpecimenStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRSpecimenStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRString;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRStringPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRStructureDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRStructureDefinitionKind;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRStructureDefinitionKindList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSubscription;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSubscriptionChannelType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRSubscriptionChannelTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSubscriptionStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRSubscriptionStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSubstance;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSupplyDeliveryStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRSupplyDeliveryStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSupplyRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestWhen;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSupplyRequestStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRSupplyRequestStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSystemRestfulInteraction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRSystemRestfulInteractionList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRTestScript;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTime;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRTimePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTiming;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTiming\FHIRTimingRepeat;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTransactionMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRTransactionModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTypeRestfulInteraction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRTypeRestfulInteractionList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUnitsOfTime;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRUnitsOfTimeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUnknownContentCode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRUnknownContentCodeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUnsignedInt;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRUnsignedIntPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUri;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRUriPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRUseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUuid;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRUuidPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRValueSet;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCodeSystem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRVisionBase;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRVisionBaseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRVisionEyes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRVisionEyesList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRVisionPrescription;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRXPathUsageType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\DSTU2\FHIRXPathUsageTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
    }

    public function testGetTypeClass()
    {
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAccountStatusList', PHPFHIRTypeMap::getTypeClass('AccountStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRActionListList', PHPFHIRTypeMap::getTypeClass('ActionList-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAddressTypeList', PHPFHIRTypeMap::getTypeClass('AddressType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAddressUseList', PHPFHIRTypeMap::getTypeClass('AddressUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAdministrativeGenderList', PHPFHIRTypeMap::getTypeClass('AdministrativeGender-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAggregationModeList', PHPFHIRTypeMap::getTypeClass('AggregationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceCategoryList', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceCertaintyList', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceCertainty-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceCriticalityList', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceCriticality-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceSeverityList', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceStatusList', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAllergyIntoleranceTypeList', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAnswerFormatList', PHPFHIRTypeMap::getTypeClass('AnswerFormat-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAppointmentStatusList', PHPFHIRTypeMap::getTypeClass('AppointmentStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAssertionDirectionTypeList', PHPFHIRTypeMap::getTypeClass('AssertionDirectionType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAssertionOperatorTypeList', PHPFHIRTypeMap::getTypeClass('AssertionOperatorType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAssertionResponseTypesList', PHPFHIRTypeMap::getTypeClass('AssertionResponseTypes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAuditEventActionList', PHPFHIRTypeMap::getTypeClass('AuditEventAction-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAuditEventOutcomeList', PHPFHIRTypeMap::getTypeClass('AuditEventOutcome-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRAuditEventParticipantNetworkTypeList', PHPFHIRTypeMap::getTypeClass('AuditEventParticipantNetworkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRBase64BinaryPrimitive', PHPFHIRTypeMap::getTypeClass('base64Binary-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRBindingStrengthList', PHPFHIRTypeMap::getTypeClass('BindingStrength-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRBooleanPrimitive', PHPFHIRTypeMap::getTypeClass('boolean-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRBundleTypeList', PHPFHIRTypeMap::getTypeClass('BundleType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRCarePlanActivityStatusList', PHPFHIRTypeMap::getTypeClass('CarePlanActivityStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRCarePlanRelationshipList', PHPFHIRTypeMap::getTypeClass('CarePlanRelationship-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRCarePlanStatusList', PHPFHIRTypeMap::getTypeClass('CarePlanStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRClaimTypeList', PHPFHIRTypeMap::getTypeClass('ClaimType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRClinicalImpressionStatusList', PHPFHIRTypeMap::getTypeClass('ClinicalImpressionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRCodePrimitive', PHPFHIRTypeMap::getTypeClass('code-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRCommunicationRequestStatusList', PHPFHIRTypeMap::getTypeClass('CommunicationRequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRCommunicationStatusList', PHPFHIRTypeMap::getTypeClass('CommunicationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRCompositionAttestationModeList', PHPFHIRTypeMap::getTypeClass('CompositionAttestationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRCompositionStatusList', PHPFHIRTypeMap::getTypeClass('CompositionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRConceptMapEquivalenceList', PHPFHIRTypeMap::getTypeClass('ConceptMapEquivalence-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRConditionalDeleteStatusList', PHPFHIRTypeMap::getTypeClass('ConditionalDeleteStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRConditionVerificationStatusList', PHPFHIRTypeMap::getTypeClass('ConditionVerificationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRConformanceEventModeList', PHPFHIRTypeMap::getTypeClass('ConformanceEventMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRConformanceResourceStatusList', PHPFHIRTypeMap::getTypeClass('ConformanceResourceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRConformanceStatementKindList', PHPFHIRTypeMap::getTypeClass('ConformanceStatementKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRConstraintSeverityList', PHPFHIRTypeMap::getTypeClass('ConstraintSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRContactPointSystemList', PHPFHIRTypeMap::getTypeClass('ContactPointSystem-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRContactPointUseList', PHPFHIRTypeMap::getTypeClass('ContactPointUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRContentTypeList', PHPFHIRTypeMap::getTypeClass('ContentType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDataElementStringencyList', PHPFHIRTypeMap::getTypeClass('DataElementStringency-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDatePrimitive', PHPFHIRTypeMap::getTypeClass('date-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDateTimePrimitive', PHPFHIRTypeMap::getTypeClass('dateTime-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDaysOfWeekList', PHPFHIRTypeMap::getTypeClass('DaysOfWeek-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDecimalPrimitive', PHPFHIRTypeMap::getTypeClass('decimal-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDetectedIssueSeverityList', PHPFHIRTypeMap::getTypeClass('DetectedIssueSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricCalibrationStateList', PHPFHIRTypeMap::getTypeClass('DeviceMetricCalibrationState-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricCalibrationTypeList', PHPFHIRTypeMap::getTypeClass('DeviceMetricCalibrationType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricCategoryList', PHPFHIRTypeMap::getTypeClass('DeviceMetricCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricColorList', PHPFHIRTypeMap::getTypeClass('DeviceMetricColor-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceMetricOperationalStatusList', PHPFHIRTypeMap::getTypeClass('DeviceMetricOperationalStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceStatusList', PHPFHIRTypeMap::getTypeClass('DeviceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceUseRequestPriorityList', PHPFHIRTypeMap::getTypeClass('DeviceUseRequestPriority-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDeviceUseRequestStatusList', PHPFHIRTypeMap::getTypeClass('DeviceUseRequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDiagnosticOrderPriorityList', PHPFHIRTypeMap::getTypeClass('DiagnosticOrderPriority-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDiagnosticOrderStatusList', PHPFHIRTypeMap::getTypeClass('DiagnosticOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDiagnosticReportStatusList', PHPFHIRTypeMap::getTypeClass('DiagnosticReportStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDigitalMediaTypeList', PHPFHIRTypeMap::getTypeClass('DigitalMediaType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDocumentModeList', PHPFHIRTypeMap::getTypeClass('DocumentMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDocumentReferenceStatusList', PHPFHIRTypeMap::getTypeClass('DocumentReferenceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRDocumentRelationshipTypeList', PHPFHIRTypeMap::getTypeClass('DocumentRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement', PHPFHIRTypeMap::getTypeClass('Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAccountStatus', PHPFHIRTypeMap::getTypeClass('AccountStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRActionList', PHPFHIRTypeMap::getTypeClass('ActionList'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAddress', PHPFHIRTypeMap::getTypeClass('Address'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAddressType', PHPFHIRTypeMap::getTypeClass('AddressType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAddressUse', PHPFHIRTypeMap::getTypeClass('AddressUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAdministrativeGender', PHPFHIRTypeMap::getTypeClass('AdministrativeGender'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAggregationMode', PHPFHIRTypeMap::getTypeClass('AggregationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceCategory', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceCertainty', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceCertainty'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceCriticality', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceCriticality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceSeverity', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceStatus', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAllergyIntoleranceType', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAnnotation', PHPFHIRTypeMap::getTypeClass('Annotation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAnswerFormat', PHPFHIRTypeMap::getTypeClass('AnswerFormat'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAppointmentStatus', PHPFHIRTypeMap::getTypeClass('AppointmentStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAssertionDirectionType', PHPFHIRTypeMap::getTypeClass('AssertionDirectionType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAssertionOperatorType', PHPFHIRTypeMap::getTypeClass('AssertionOperatorType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAssertionResponseTypes', PHPFHIRTypeMap::getTypeClass('AssertionResponseTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAttachment', PHPFHIRTypeMap::getTypeClass('Attachment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAuditEventAction', PHPFHIRTypeMap::getTypeClass('AuditEventAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAuditEventOutcome', PHPFHIRTypeMap::getTypeClass('AuditEventOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRAuditEventParticipantNetworkType', PHPFHIRTypeMap::getTypeClass('AuditEventParticipantNetworkType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement', PHPFHIRTypeMap::getTypeClass('BackboneElement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction', PHPFHIRTypeMap::getTypeClass('AllergyIntolerance.Reaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant', PHPFHIRTypeMap::getTypeClass('Appointment.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail', PHPFHIRTypeMap::getTypeClass('AuditEvent.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEvent', PHPFHIRTypeMap::getTypeClass('AuditEvent.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork', PHPFHIRTypeMap::getTypeClass('AuditEvent.Network'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventObject', PHPFHIRTypeMap::getTypeClass('AuditEvent.Object'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventParticipant', PHPFHIRTypeMap::getTypeClass('AuditEvent.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource', PHPFHIRTypeMap::getTypeClass('AuditEvent.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry', PHPFHIRTypeMap::getTypeClass('Bundle.Entry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink', PHPFHIRTypeMap::getTypeClass('Bundle.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest', PHPFHIRTypeMap::getTypeClass('Bundle.Request'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse', PHPFHIRTypeMap::getTypeClass('Bundle.Response'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch', PHPFHIRTypeMap::getTypeClass('Bundle.Search'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity', PHPFHIRTypeMap::getTypeClass('CarePlan.Activity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail', PHPFHIRTypeMap::getTypeClass('CarePlan.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant', PHPFHIRTypeMap::getTypeClass('CarePlan.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanRelatedPlan', PHPFHIRTypeMap::getTypeClass('CarePlan.RelatedPlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem', PHPFHIRTypeMap::getTypeClass('ClaimResponse.AddItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Adjudication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication1', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Adjudication1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication2', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Adjudication2'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication3', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Adjudication3'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication4', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Adjudication4'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseCoverage', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Detail1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Error'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseNote', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Note'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail', PHPFHIRTypeMap::getTypeClass('ClaimResponse.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCoverage', PHPFHIRTypeMap::getTypeClass('Claim.Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail', PHPFHIRTypeMap::getTypeClass('Claim.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis', PHPFHIRTypeMap::getTypeClass('Claim.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem', PHPFHIRTypeMap::getTypeClass('Claim.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimMissingTeeth', PHPFHIRTypeMap::getTypeClass('Claim.MissingTeeth'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee', PHPFHIRTypeMap::getTypeClass('Claim.Payee'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProsthesis', PHPFHIRTypeMap::getTypeClass('Claim.Prosthesis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail', PHPFHIRTypeMap::getTypeClass('Claim.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding', PHPFHIRTypeMap::getTypeClass('ClinicalImpression.Finding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigations', PHPFHIRTypeMap::getTypeClass('ClinicalImpression.Investigations'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionRuledOut', PHPFHIRTypeMap::getTypeClass('ClinicalImpression.RuledOut'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload', PHPFHIRTypeMap::getTypeClass('CommunicationRequest.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload', PHPFHIRTypeMap::getTypeClass('Communication.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester', PHPFHIRTypeMap::getTypeClass('Composition.Attester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent', PHPFHIRTypeMap::getTypeClass('Composition.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection', PHPFHIRTypeMap::getTypeClass('Composition.Section'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapContact', PHPFHIRTypeMap::getTypeClass('ConceptMap.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn', PHPFHIRTypeMap::getTypeClass('ConceptMap.DependsOn'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement', PHPFHIRTypeMap::getTypeClass('ConceptMap.Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget', PHPFHIRTypeMap::getTypeClass('ConceptMap.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence', PHPFHIRTypeMap::getTypeClass('Condition.Evidence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage', PHPFHIRTypeMap::getTypeClass('Condition.Stage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate', PHPFHIRTypeMap::getTypeClass('Conformance.Certificate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceContact', PHPFHIRTypeMap::getTypeClass('Conformance.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument', PHPFHIRTypeMap::getTypeClass('Conformance.Document'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEndpoint', PHPFHIRTypeMap::getTypeClass('Conformance.Endpoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent', PHPFHIRTypeMap::getTypeClass('Conformance.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation', PHPFHIRTypeMap::getTypeClass('Conformance.Implementation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction', PHPFHIRTypeMap::getTypeClass('Conformance.Interaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction1', PHPFHIRTypeMap::getTypeClass('Conformance.Interaction1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging', PHPFHIRTypeMap::getTypeClass('Conformance.Messaging'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation', PHPFHIRTypeMap::getTypeClass('Conformance.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource', PHPFHIRTypeMap::getTypeClass('Conformance.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest', PHPFHIRTypeMap::getTypeClass('Conformance.Rest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam', PHPFHIRTypeMap::getTypeClass('Conformance.SearchParam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity', PHPFHIRTypeMap::getTypeClass('Conformance.Security'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware', PHPFHIRTypeMap::getTypeClass('Conformance.Software'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor', PHPFHIRTypeMap::getTypeClass('Contract.Actor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor1', PHPFHIRTypeMap::getTypeClass('Contract.Actor1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly', PHPFHIRTypeMap::getTypeClass('Contract.Friendly'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal', PHPFHIRTypeMap::getTypeClass('Contract.Legal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule', PHPFHIRTypeMap::getTypeClass('Contract.Rule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner', PHPFHIRTypeMap::getTypeClass('Contract.Signer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm', PHPFHIRTypeMap::getTypeClass('Contract.Term'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem', PHPFHIRTypeMap::getTypeClass('Contract.ValuedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1', PHPFHIRTypeMap::getTypeClass('Contract.ValuedItem1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementContact', PHPFHIRTypeMap::getTypeClass('DataElement.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping', PHPFHIRTypeMap::getTypeClass('DataElement.Mapping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation', PHPFHIRTypeMap::getTypeClass('DetectedIssue.Mitigation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification', PHPFHIRTypeMap::getTypeClass('DeviceComponent.ProductionSpecification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration', PHPFHIRTypeMap::getTypeClass('DeviceMetric.Calibration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent', PHPFHIRTypeMap::getTypeClass('DiagnosticOrder.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem', PHPFHIRTypeMap::getTypeClass('DiagnosticOrder.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage', PHPFHIRTypeMap::getTypeClass('DiagnosticReport.Image'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent', PHPFHIRTypeMap::getTypeClass('DocumentManifest.Content'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated', PHPFHIRTypeMap::getTypeClass('DocumentManifest.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent', PHPFHIRTypeMap::getTypeClass('DocumentReference.Content'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext', PHPFHIRTypeMap::getTypeClass('DocumentReference.Context'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated', PHPFHIRTypeMap::getTypeClass('DocumentReference.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo', PHPFHIRTypeMap::getTypeClass('DocumentReference.RelatesTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization', PHPFHIRTypeMap::getTypeClass('Encounter.Hospitalization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation', PHPFHIRTypeMap::getTypeClass('Encounter.Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant', PHPFHIRTypeMap::getTypeClass('Encounter.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory', PHPFHIRTypeMap::getTypeClass('Encounter.StatusHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareCareTeam', PHPFHIRTypeMap::getTypeClass('EpisodeOfCare.CareTeam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory', PHPFHIRTypeMap::getTypeClass('EpisodeOfCare.StatusHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition', PHPFHIRTypeMap::getTypeClass('FamilyMemberHistory.Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalOutcome', PHPFHIRTypeMap::getTypeClass('Goal.Outcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic', PHPFHIRTypeMap::getTypeClass('Group.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember', PHPFHIRTypeMap::getTypeClass('Group.Member'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime', PHPFHIRTypeMap::getTypeClass('HealthcareService.AvailableTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable', PHPFHIRTypeMap::getTypeClass('HealthcareService.NotAvailable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceServiceType', PHPFHIRTypeMap::getTypeClass('HealthcareService.ServiceType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionFrames', PHPFHIRTypeMap::getTypeClass('ImagingObjectSelection.Frames'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionInstance', PHPFHIRTypeMap::getTypeClass('ImagingObjectSelection.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionSeries', PHPFHIRTypeMap::getTypeClass('ImagingObjectSelection.Series'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionStudy', PHPFHIRTypeMap::getTypeClass('ImagingObjectSelection.Study'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance', PHPFHIRTypeMap::getTypeClass('ImagingStudy.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries', PHPFHIRTypeMap::getTypeClass('ImagingStudy.Series'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion', PHPFHIRTypeMap::getTypeClass('ImmunizationRecommendation.DateCriterion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol', PHPFHIRTypeMap::getTypeClass('ImmunizationRecommendation.Protocol'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation', PHPFHIRTypeMap::getTypeClass('ImmunizationRecommendation.Recommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation', PHPFHIRTypeMap::getTypeClass('Immunization.Explanation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction', PHPFHIRTypeMap::getTypeClass('Immunization.Reaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol', PHPFHIRTypeMap::getTypeClass('Immunization.VaccinationProtocol'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideContact', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Dependency'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Global'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Package'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Page'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry', PHPFHIRTypeMap::getTypeClass('List.Entry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition', PHPFHIRTypeMap::getTypeClass('Location.Position'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage', PHPFHIRTypeMap::getTypeClass('MedicationAdministration.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosageInstruction', PHPFHIRTypeMap::getTypeClass('MedicationDispense.DosageInstruction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution', PHPFHIRTypeMap::getTypeClass('MedicationDispense.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDispenseRequest', PHPFHIRTypeMap::getTypeClass('MedicationOrder.DispenseRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDosageInstruction', PHPFHIRTypeMap::getTypeClass('MedicationOrder.DosageInstruction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderSubstitution', PHPFHIRTypeMap::getTypeClass('MedicationOrder.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage', PHPFHIRTypeMap::getTypeClass('MedicationStatement.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch', PHPFHIRTypeMap::getTypeClass('Medication.Batch'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent', PHPFHIRTypeMap::getTypeClass('Medication.Content'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient', PHPFHIRTypeMap::getTypeClass('Medication.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage', PHPFHIRTypeMap::getTypeClass('Medication.Package'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct', PHPFHIRTypeMap::getTypeClass('Medication.Product'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination', PHPFHIRTypeMap::getTypeClass('MessageHeader.Destination'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse', PHPFHIRTypeMap::getTypeClass('MessageHeader.Response'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource', PHPFHIRTypeMap::getTypeClass('MessageHeader.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemContact', PHPFHIRTypeMap::getTypeClass('NamingSystem.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId', PHPFHIRTypeMap::getTypeClass('NamingSystem.UniqueId'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration', PHPFHIRTypeMap::getTypeClass('NutritionOrder.Administration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula', PHPFHIRTypeMap::getTypeClass('NutritionOrder.EnteralFormula'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient', PHPFHIRTypeMap::getTypeClass('NutritionOrder.Nutrient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet', PHPFHIRTypeMap::getTypeClass('NutritionOrder.OralDiet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement', PHPFHIRTypeMap::getTypeClass('NutritionOrder.Supplement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture', PHPFHIRTypeMap::getTypeClass('NutritionOrder.Texture'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent', PHPFHIRTypeMap::getTypeClass('Observation.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange', PHPFHIRTypeMap::getTypeClass('Observation.ReferenceRange'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated', PHPFHIRTypeMap::getTypeClass('Observation.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding', PHPFHIRTypeMap::getTypeClass('OperationDefinition.Binding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionContact', PHPFHIRTypeMap::getTypeClass('OperationDefinition.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter', PHPFHIRTypeMap::getTypeClass('OperationDefinition.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue', PHPFHIRTypeMap::getTypeClass('OperationOutcome.Issue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen', PHPFHIRTypeMap::getTypeClass('Order.When'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact', PHPFHIRTypeMap::getTypeClass('Organization.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter', PHPFHIRTypeMap::getTypeClass('Parameters.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal', PHPFHIRTypeMap::getTypeClass('Patient.Animal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication', PHPFHIRTypeMap::getTypeClass('Patient.Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact', PHPFHIRTypeMap::getTypeClass('Patient.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink', PHPFHIRTypeMap::getTypeClass('Patient.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail', PHPFHIRTypeMap::getTypeClass('PaymentReconciliation.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationNote', PHPFHIRTypeMap::getTypeClass('PaymentReconciliation.Note'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink', PHPFHIRTypeMap::getTypeClass('Person.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerPractitionerRole', PHPFHIRTypeMap::getTypeClass('Practitioner.PractitionerRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification', PHPFHIRTypeMap::getTypeClass('Practitioner.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice', PHPFHIRTypeMap::getTypeClass('Procedure.FocalDevice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer', PHPFHIRTypeMap::getTypeClass('Procedure.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem', PHPFHIRTypeMap::getTypeClass('ProcessRequest.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseNotes', PHPFHIRTypeMap::getTypeClass('ProcessResponse.Notes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent', PHPFHIRTypeMap::getTypeClass('Provenance.Agent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity', PHPFHIRTypeMap::getTypeClass('Provenance.Entity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceRelatedAgent', PHPFHIRTypeMap::getTypeClass('Provenance.RelatedAgent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer', PHPFHIRTypeMap::getTypeClass('QuestionnaireResponse.Answer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseGroup', PHPFHIRTypeMap::getTypeClass('QuestionnaireResponse.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseQuestion', PHPFHIRTypeMap::getTypeClass('QuestionnaireResponse.Question'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup', PHPFHIRTypeMap::getTypeClass('Questionnaire.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion', PHPFHIRTypeMap::getTypeClass('Questionnaire.Question'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction', PHPFHIRTypeMap::getTypeClass('RiskAssessment.Prediction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterContact', PHPFHIRTypeMap::getTypeClass('SearchParameter.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection', PHPFHIRTypeMap::getTypeClass('Specimen.Collection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer', PHPFHIRTypeMap::getTypeClass('Specimen.Container'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment', PHPFHIRTypeMap::getTypeClass('Specimen.Treatment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContact', PHPFHIRTypeMap::getTypeClass('StructureDefinition.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential', PHPFHIRTypeMap::getTypeClass('StructureDefinition.Differential'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping', PHPFHIRTypeMap::getTypeClass('StructureDefinition.Mapping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot', PHPFHIRTypeMap::getTypeClass('StructureDefinition.Snapshot'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel', PHPFHIRTypeMap::getTypeClass('Subscription.Channel'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient', PHPFHIRTypeMap::getTypeClass('Substance.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance', PHPFHIRTypeMap::getTypeClass('Substance.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestWhen', PHPFHIRTypeMap::getTypeClass('SupplyRequest.When'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction', PHPFHIRTypeMap::getTypeClass('TestScript.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1', PHPFHIRTypeMap::getTypeClass('TestScript.Action1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2', PHPFHIRTypeMap::getTypeClass('TestScript.Action2'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert', PHPFHIRTypeMap::getTypeClass('TestScript.Assert'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability', PHPFHIRTypeMap::getTypeClass('TestScript.Capability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptContact', PHPFHIRTypeMap::getTypeClass('TestScript.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture', PHPFHIRTypeMap::getTypeClass('TestScript.Fixture'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink', PHPFHIRTypeMap::getTypeClass('TestScript.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata', PHPFHIRTypeMap::getTypeClass('TestScript.Metadata'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation', PHPFHIRTypeMap::getTypeClass('TestScript.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader', PHPFHIRTypeMap::getTypeClass('TestScript.RequestHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup', PHPFHIRTypeMap::getTypeClass('TestScript.Setup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown', PHPFHIRTypeMap::getTypeClass('TestScript.Teardown'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest', PHPFHIRTypeMap::getTypeClass('TestScript.Test'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable', PHPFHIRTypeMap::getTypeClass('TestScript.Variable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCodeSystem', PHPFHIRTypeMap::getTypeClass('ValueSet.CodeSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose', PHPFHIRTypeMap::getTypeClass('ValueSet.Compose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept', PHPFHIRTypeMap::getTypeClass('ValueSet.Concept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept1', PHPFHIRTypeMap::getTypeClass('ValueSet.Concept1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContact', PHPFHIRTypeMap::getTypeClass('ValueSet.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains', PHPFHIRTypeMap::getTypeClass('ValueSet.Contains'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation', PHPFHIRTypeMap::getTypeClass('ValueSet.Designation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion', PHPFHIRTypeMap::getTypeClass('ValueSet.Expansion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter', PHPFHIRTypeMap::getTypeClass('ValueSet.Filter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude', PHPFHIRTypeMap::getTypeClass('ValueSet.Include'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter', PHPFHIRTypeMap::getTypeClass('ValueSet.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense', PHPFHIRTypeMap::getTypeClass('VisionPrescription.Dispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBase64Binary', PHPFHIRTypeMap::getTypeClass('base64Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBindingStrength', PHPFHIRTypeMap::getTypeClass('BindingStrength'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBoolean', PHPFHIRTypeMap::getTypeClass('boolean'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRBundleType', PHPFHIRTypeMap::getTypeClass('BundleType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCarePlanActivityStatus', PHPFHIRTypeMap::getTypeClass('CarePlanActivityStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCarePlanRelationship', PHPFHIRTypeMap::getTypeClass('CarePlanRelationship'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCarePlanStatus', PHPFHIRTypeMap::getTypeClass('CarePlanStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRClaimType', PHPFHIRTypeMap::getTypeClass('ClaimType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRClinicalImpressionStatus', PHPFHIRTypeMap::getTypeClass('ClinicalImpressionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCode', PHPFHIRTypeMap::getTypeClass('code'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCodeableConcept', PHPFHIRTypeMap::getTypeClass('CodeableConcept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCoding', PHPFHIRTypeMap::getTypeClass('Coding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCommunicationRequestStatus', PHPFHIRTypeMap::getTypeClass('CommunicationRequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCommunicationStatus', PHPFHIRTypeMap::getTypeClass('CommunicationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCompositionAttestationMode', PHPFHIRTypeMap::getTypeClass('CompositionAttestationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRCompositionStatus', PHPFHIRTypeMap::getTypeClass('CompositionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConceptMapEquivalence', PHPFHIRTypeMap::getTypeClass('ConceptMapEquivalence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConditionalDeleteStatus', PHPFHIRTypeMap::getTypeClass('ConditionalDeleteStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConditionVerificationStatus', PHPFHIRTypeMap::getTypeClass('ConditionVerificationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConformanceEventMode', PHPFHIRTypeMap::getTypeClass('ConformanceEventMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConformanceResourceStatus', PHPFHIRTypeMap::getTypeClass('ConformanceResourceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConformanceStatementKind', PHPFHIRTypeMap::getTypeClass('ConformanceStatementKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRConstraintSeverity', PHPFHIRTypeMap::getTypeClass('ConstraintSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRContactPoint', PHPFHIRTypeMap::getTypeClass('ContactPoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRContactPointSystem', PHPFHIRTypeMap::getTypeClass('ContactPointSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRContactPointUse', PHPFHIRTypeMap::getTypeClass('ContactPointUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRContentType', PHPFHIRTypeMap::getTypeClass('ContentType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDataElementStringency', PHPFHIRTypeMap::getTypeClass('DataElementStringency'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDate', PHPFHIRTypeMap::getTypeClass('date'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDateTime', PHPFHIRTypeMap::getTypeClass('dateTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDaysOfWeek', PHPFHIRTypeMap::getTypeClass('DaysOfWeek'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDecimal', PHPFHIRTypeMap::getTypeClass('decimal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDetectedIssueSeverity', PHPFHIRTypeMap::getTypeClass('DetectedIssueSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricCalibrationState', PHPFHIRTypeMap::getTypeClass('DeviceMetricCalibrationState'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricCalibrationType', PHPFHIRTypeMap::getTypeClass('DeviceMetricCalibrationType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricCategory', PHPFHIRTypeMap::getTypeClass('DeviceMetricCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricColor', PHPFHIRTypeMap::getTypeClass('DeviceMetricColor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceMetricOperationalStatus', PHPFHIRTypeMap::getTypeClass('DeviceMetricOperationalStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceStatus', PHPFHIRTypeMap::getTypeClass('DeviceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceUseRequestPriority', PHPFHIRTypeMap::getTypeClass('DeviceUseRequestPriority'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDeviceUseRequestStatus', PHPFHIRTypeMap::getTypeClass('DeviceUseRequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDiagnosticOrderPriority', PHPFHIRTypeMap::getTypeClass('DiagnosticOrderPriority'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDiagnosticOrderStatus', PHPFHIRTypeMap::getTypeClass('DiagnosticOrderStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDiagnosticReportStatus', PHPFHIRTypeMap::getTypeClass('DiagnosticReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDigitalMediaType', PHPFHIRTypeMap::getTypeClass('DigitalMediaType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDocumentMode', PHPFHIRTypeMap::getTypeClass('DocumentMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDocumentReferenceStatus', PHPFHIRTypeMap::getTypeClass('DocumentReferenceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRDocumentRelationshipType', PHPFHIRTypeMap::getTypeClass('DocumentRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition', PHPFHIRTypeMap::getTypeClass('ElementDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Base'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Binding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Constraint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Mapping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Slicing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Type'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREncounterClass', PHPFHIRTypeMap::getTypeClass('EncounterClass'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREncounterLocationStatus', PHPFHIRTypeMap::getTypeClass('EncounterLocationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREncounterState', PHPFHIRTypeMap::getTypeClass('EncounterState'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREpisodeOfCareStatus', PHPFHIRTypeMap::getTypeClass('EpisodeOfCareStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIREventTiming', PHPFHIRTypeMap::getTypeClass('EventTiming'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRExtension', PHPFHIRTypeMap::getTypeClass('Extension'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRExtensionContext', PHPFHIRTypeMap::getTypeClass('ExtensionContext'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRFamilyHistoryStatus', PHPFHIRTypeMap::getTypeClass('FamilyHistoryStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRFilterOperator', PHPFHIRTypeMap::getTypeClass('FilterOperator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRFlagStatus', PHPFHIRTypeMap::getTypeClass('FlagStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGoalStatus', PHPFHIRTypeMap::getTypeClass('GoalStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGroupType', PHPFHIRTypeMap::getTypeClass('GroupType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGuideDependencyType', PHPFHIRTypeMap::getTypeClass('GuideDependencyType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGuidePageKind', PHPFHIRTypeMap::getTypeClass('GuidePageKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRGuideResourcePurpose', PHPFHIRTypeMap::getTypeClass('GuideResourcePurpose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRHTTPVerb', PHPFHIRTypeMap::getTypeClass('HTTPVerb'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRHumanName', PHPFHIRTypeMap::getTypeClass('HumanName'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRId', PHPFHIRTypeMap::getTypeClass('id'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIdentifier', PHPFHIRTypeMap::getTypeClass('Identifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIdentifierUse', PHPFHIRTypeMap::getTypeClass('IdentifierUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIdentityAssuranceLevel', PHPFHIRTypeMap::getTypeClass('IdentityAssuranceLevel'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRInstanceAvailability', PHPFHIRTypeMap::getTypeClass('InstanceAvailability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRInstant', PHPFHIRTypeMap::getTypeClass('instant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRInteger', PHPFHIRTypeMap::getTypeClass('integer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIssueSeverity', PHPFHIRTypeMap::getTypeClass('IssueSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRIssueType', PHPFHIRTypeMap::getTypeClass('IssueType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRLinkType', PHPFHIRTypeMap::getTypeClass('LinkType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRListMode', PHPFHIRTypeMap::getTypeClass('ListMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRListStatus', PHPFHIRTypeMap::getTypeClass('ListStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRLocationMode', PHPFHIRTypeMap::getTypeClass('LocationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRLocationStatus', PHPFHIRTypeMap::getTypeClass('LocationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMarkdown', PHPFHIRTypeMap::getTypeClass('markdown'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMeasmnt_Principle', PHPFHIRTypeMap::getTypeClass('Measmnt-Principle'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMedicationAdministrationStatus', PHPFHIRTypeMap::getTypeClass('MedicationAdministrationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMedicationDispenseStatus', PHPFHIRTypeMap::getTypeClass('MedicationDispenseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMedicationOrderStatus', PHPFHIRTypeMap::getTypeClass('MedicationOrderStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMedicationStatementStatus', PHPFHIRTypeMap::getTypeClass('MedicationStatementStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMessageSignificanceCategory', PHPFHIRTypeMap::getTypeClass('MessageSignificanceCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRMeta', PHPFHIRTypeMap::getTypeClass('Meta'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNameUse', PHPFHIRTypeMap::getTypeClass('NameUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNamingSystemIdentifierType', PHPFHIRTypeMap::getTypeClass('NamingSystemIdentifierType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNamingSystemType', PHPFHIRTypeMap::getTypeClass('NamingSystemType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNarrative', PHPFHIRTypeMap::getTypeClass('Narrative'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNarrativeStatus', PHPFHIRTypeMap::getTypeClass('NarrativeStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNoteType', PHPFHIRTypeMap::getTypeClass('NoteType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRNutritionOrderStatus', PHPFHIRTypeMap::getTypeClass('NutritionOrderStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRObservationRelationshipType', PHPFHIRTypeMap::getTypeClass('ObservationRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRObservationStatus', PHPFHIRTypeMap::getTypeClass('ObservationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIROid', PHPFHIRTypeMap::getTypeClass('oid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIROperationKind', PHPFHIRTypeMap::getTypeClass('OperationKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIROperationParameterUse', PHPFHIRTypeMap::getTypeClass('OperationParameterUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIROrderStatus', PHPFHIRTypeMap::getTypeClass('OrderStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRParticipantRequired', PHPFHIRTypeMap::getTypeClass('ParticipantRequired'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRParticipantStatus', PHPFHIRTypeMap::getTypeClass('ParticipantStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRParticipationStatus', PHPFHIRTypeMap::getTypeClass('ParticipationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRPeriod', PHPFHIRTypeMap::getTypeClass('Period'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRPositiveInt', PHPFHIRTypeMap::getTypeClass('positiveInt'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRProcedureRequestPriority', PHPFHIRTypeMap::getTypeClass('ProcedureRequestPriority'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRProcedureRequestStatus', PHPFHIRTypeMap::getTypeClass('ProcedureRequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRProcedureStatus', PHPFHIRTypeMap::getTypeClass('ProcedureStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRPropertyRepresentation', PHPFHIRTypeMap::getTypeClass('PropertyRepresentation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRProvenanceEntityRole', PHPFHIRTypeMap::getTypeClass('ProvenanceEntityRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity', PHPFHIRTypeMap::getTypeClass('Quantity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantityComparator', PHPFHIRTypeMap::getTypeClass('QuantityComparator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRAge', PHPFHIRTypeMap::getTypeClass('Age'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRCount', PHPFHIRTypeMap::getTypeClass('Count'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRDistance', PHPFHIRTypeMap::getTypeClass('Distance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRDuration', PHPFHIRTypeMap::getTypeClass('Duration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRMoney', PHPFHIRTypeMap::getTypeClass('Money'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuantity\FHIRSimpleQuantity', PHPFHIRTypeMap::getTypeClass('SimpleQuantity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuestionnaireResponseStatus', PHPFHIRTypeMap::getTypeClass('QuestionnaireResponseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRQuestionnaireStatus', PHPFHIRTypeMap::getTypeClass('QuestionnaireStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRRange', PHPFHIRTypeMap::getTypeClass('Range'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRRatio', PHPFHIRTypeMap::getTypeClass('Ratio'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRReference', PHPFHIRTypeMap::getTypeClass('Reference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRReferralStatus', PHPFHIRTypeMap::getTypeClass('ReferralStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRRemittanceOutcome', PHPFHIRTypeMap::getTypeClass('RemittanceOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRResourceVersionPolicy', PHPFHIRTypeMap::getTypeClass('ResourceVersionPolicy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRResponseType', PHPFHIRTypeMap::getTypeClass('ResponseType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRRestfulConformanceMode', PHPFHIRTypeMap::getTypeClass('RestfulConformanceMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSampledData', PHPFHIRTypeMap::getTypeClass('SampledData'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSampledDataDataType', PHPFHIRTypeMap::getTypeClass('SampledDataDataType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSearchEntryMode', PHPFHIRTypeMap::getTypeClass('SearchEntryMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSearchModifierCode', PHPFHIRTypeMap::getTypeClass('SearchModifierCode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSearchParamType', PHPFHIRTypeMap::getTypeClass('SearchParamType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSignature', PHPFHIRTypeMap::getTypeClass('Signature'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSlicingRules', PHPFHIRTypeMap::getTypeClass('SlicingRules'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSlotStatus', PHPFHIRTypeMap::getTypeClass('SlotStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSpecimenStatus', PHPFHIRTypeMap::getTypeClass('SpecimenStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRString', PHPFHIRTypeMap::getTypeClass('string'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRStructureDefinitionKind', PHPFHIRTypeMap::getTypeClass('StructureDefinitionKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSubscriptionChannelType', PHPFHIRTypeMap::getTypeClass('SubscriptionChannelType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSubscriptionStatus', PHPFHIRTypeMap::getTypeClass('SubscriptionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSupplyDeliveryStatus', PHPFHIRTypeMap::getTypeClass('SupplyDeliveryStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSupplyRequestStatus', PHPFHIRTypeMap::getTypeClass('SupplyRequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRSystemRestfulInteraction', PHPFHIRTypeMap::getTypeClass('SystemRestfulInteraction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTime', PHPFHIRTypeMap::getTypeClass('time'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTiming', PHPFHIRTypeMap::getTypeClass('Timing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTiming\FHIRTimingRepeat', PHPFHIRTypeMap::getTypeClass('Timing.Repeat'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTransactionMode', PHPFHIRTypeMap::getTypeClass('TransactionMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRTypeRestfulInteraction', PHPFHIRTypeMap::getTypeClass('TypeRestfulInteraction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUnitsOfTime', PHPFHIRTypeMap::getTypeClass('UnitsOfTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUnknownContentCode', PHPFHIRTypeMap::getTypeClass('UnknownContentCode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUnsignedInt', PHPFHIRTypeMap::getTypeClass('unsignedInt'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUri', PHPFHIRTypeMap::getTypeClass('uri'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUse', PHPFHIRTypeMap::getTypeClass('Use'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRUuid', PHPFHIRTypeMap::getTypeClass('uuid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRVisionBase', PHPFHIRTypeMap::getTypeClass('VisionBase'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRVisionEyes', PHPFHIRTypeMap::getTypeClass('VisionEyes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRElement\FHIRXPathUsageType', PHPFHIRTypeMap::getTypeClass('XPathUsageType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIREncounterClassList', PHPFHIRTypeMap::getTypeClass('EncounterClass-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIREncounterLocationStatusList', PHPFHIRTypeMap::getTypeClass('EncounterLocationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIREncounterStateList', PHPFHIRTypeMap::getTypeClass('EncounterState-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIREpisodeOfCareStatusList', PHPFHIRTypeMap::getTypeClass('EpisodeOfCareStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIREventTimingList', PHPFHIRTypeMap::getTypeClass('EventTiming-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRExtensionContextList', PHPFHIRTypeMap::getTypeClass('ExtensionContext-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRFamilyHistoryStatusList', PHPFHIRTypeMap::getTypeClass('FamilyHistoryStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRFilterOperatorList', PHPFHIRTypeMap::getTypeClass('FilterOperator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRFlagStatusList', PHPFHIRTypeMap::getTypeClass('FlagStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRGoalStatusList', PHPFHIRTypeMap::getTypeClass('GoalStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRGroupTypeList', PHPFHIRTypeMap::getTypeClass('GroupType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRGuideDependencyTypeList', PHPFHIRTypeMap::getTypeClass('GuideDependencyType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRGuidePageKindList', PHPFHIRTypeMap::getTypeClass('GuidePageKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRGuideResourcePurposeList', PHPFHIRTypeMap::getTypeClass('GuideResourcePurpose-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRHTTPVerbList', PHPFHIRTypeMap::getTypeClass('HTTPVerb-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRIdentifierUseList', PHPFHIRTypeMap::getTypeClass('IdentifierUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRIdentityAssuranceLevelList', PHPFHIRTypeMap::getTypeClass('IdentityAssuranceLevel-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRIdPrimitive', PHPFHIRTypeMap::getTypeClass('id-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRInstanceAvailabilityList', PHPFHIRTypeMap::getTypeClass('InstanceAvailability-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRInstantPrimitive', PHPFHIRTypeMap::getTypeClass('instant-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRIntegerPrimitive', PHPFHIRTypeMap::getTypeClass('integer-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRIssueSeverityList', PHPFHIRTypeMap::getTypeClass('IssueSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRIssueTypeList', PHPFHIRTypeMap::getTypeClass('IssueType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRLinkTypeList', PHPFHIRTypeMap::getTypeClass('LinkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRListModeList', PHPFHIRTypeMap::getTypeClass('ListMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRListStatusList', PHPFHIRTypeMap::getTypeClass('ListStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRLocationModeList', PHPFHIRTypeMap::getTypeClass('LocationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRLocationStatusList', PHPFHIRTypeMap::getTypeClass('LocationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRMarkdownPrimitive', PHPFHIRTypeMap::getTypeClass('markdown-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRMeasmnt_PrincipleList', PHPFHIRTypeMap::getTypeClass('Measmnt-Principle-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRMedicationAdministrationStatusList', PHPFHIRTypeMap::getTypeClass('MedicationAdministrationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRMedicationDispenseStatusList', PHPFHIRTypeMap::getTypeClass('MedicationDispenseStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRMedicationOrderStatusList', PHPFHIRTypeMap::getTypeClass('MedicationOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRMedicationStatementStatusList', PHPFHIRTypeMap::getTypeClass('MedicationStatementStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRMessageSignificanceCategoryList', PHPFHIRTypeMap::getTypeClass('MessageSignificanceCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRNameUseList', PHPFHIRTypeMap::getTypeClass('NameUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRNamingSystemIdentifierTypeList', PHPFHIRTypeMap::getTypeClass('NamingSystemIdentifierType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRNamingSystemTypeList', PHPFHIRTypeMap::getTypeClass('NamingSystemType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRNarrativeStatusList', PHPFHIRTypeMap::getTypeClass('NarrativeStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRNoteTypeList', PHPFHIRTypeMap::getTypeClass('NoteType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRNutritionOrderStatusList', PHPFHIRTypeMap::getTypeClass('NutritionOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRObservationRelationshipTypeList', PHPFHIRTypeMap::getTypeClass('ObservationRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRObservationStatusList', PHPFHIRTypeMap::getTypeClass('ObservationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIROidPrimitive', PHPFHIRTypeMap::getTypeClass('oid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIROperationKindList', PHPFHIRTypeMap::getTypeClass('OperationKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIROperationParameterUseList', PHPFHIRTypeMap::getTypeClass('OperationParameterUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIROrderStatusList', PHPFHIRTypeMap::getTypeClass('OrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRParticipantRequiredList', PHPFHIRTypeMap::getTypeClass('ParticipantRequired-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRParticipantStatusList', PHPFHIRTypeMap::getTypeClass('ParticipantStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRParticipationStatusList', PHPFHIRTypeMap::getTypeClass('ParticipationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRPositiveIntPrimitive', PHPFHIRTypeMap::getTypeClass('positiveInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRProcedureRequestPriorityList', PHPFHIRTypeMap::getTypeClass('ProcedureRequestPriority-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRProcedureRequestStatusList', PHPFHIRTypeMap::getTypeClass('ProcedureRequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRProcedureStatusList', PHPFHIRTypeMap::getTypeClass('ProcedureStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRPropertyRepresentationList', PHPFHIRTypeMap::getTypeClass('PropertyRepresentation-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRProvenanceEntityRoleList', PHPFHIRTypeMap::getTypeClass('ProvenanceEntityRole-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRQuantityComparatorList', PHPFHIRTypeMap::getTypeClass('QuantityComparator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRQuestionnaireResponseStatusList', PHPFHIRTypeMap::getTypeClass('QuestionnaireResponseStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRQuestionnaireStatusList', PHPFHIRTypeMap::getTypeClass('QuestionnaireStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRReferralStatusList', PHPFHIRTypeMap::getTypeClass('ReferralStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRRemittanceOutcomeList', PHPFHIRTypeMap::getTypeClass('RemittanceOutcome-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource', PHPFHIRTypeMap::getTypeClass('Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResourceContainer', PHPFHIRTypeMap::getTypeClass('ResourceContainer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResourceVersionPolicyList', PHPFHIRTypeMap::getTypeClass('ResourceVersionPolicy-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRBinary', PHPFHIRTypeMap::getTypeClass('Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRBundle', PHPFHIRTypeMap::getTypeClass('Bundle'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource', PHPFHIRTypeMap::getTypeClass('DomainResource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAccount', PHPFHIRTypeMap::getTypeClass('Account'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', PHPFHIRTypeMap::getTypeClass('AllergyIntolerance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAppointment', PHPFHIRTypeMap::getTypeClass('Appointment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', PHPFHIRTypeMap::getTypeClass('AppointmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRAuditEvent', PHPFHIRTypeMap::getTypeClass('AuditEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRBasic', PHPFHIRTypeMap::getTypeClass('Basic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRBodySite', PHPFHIRTypeMap::getTypeClass('BodySite'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCarePlan', PHPFHIRTypeMap::getTypeClass('CarePlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRClaim', PHPFHIRTypeMap::getTypeClass('Claim'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRClaimResponse', PHPFHIRTypeMap::getTypeClass('ClaimResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', PHPFHIRTypeMap::getTypeClass('ClinicalImpression'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCommunication', PHPFHIRTypeMap::getTypeClass('Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', PHPFHIRTypeMap::getTypeClass('CommunicationRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRComposition', PHPFHIRTypeMap::getTypeClass('Composition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRConceptMap', PHPFHIRTypeMap::getTypeClass('ConceptMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCondition', PHPFHIRTypeMap::getTypeClass('Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRConformance', PHPFHIRTypeMap::getTypeClass('Conformance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRContract', PHPFHIRTypeMap::getTypeClass('Contract'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRCoverage', PHPFHIRTypeMap::getTypeClass('Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDataElement', PHPFHIRTypeMap::getTypeClass('DataElement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', PHPFHIRTypeMap::getTypeClass('DetectedIssue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDevice', PHPFHIRTypeMap::getTypeClass('Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceComponent', PHPFHIRTypeMap::getTypeClass('DeviceComponent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', PHPFHIRTypeMap::getTypeClass('DeviceMetric'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceUseRequest', PHPFHIRTypeMap::getTypeClass('DeviceUseRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement', PHPFHIRTypeMap::getTypeClass('DeviceUseStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDiagnosticOrder', PHPFHIRTypeMap::getTypeClass('DiagnosticOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', PHPFHIRTypeMap::getTypeClass('DiagnosticReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDocumentManifest', PHPFHIRTypeMap::getTypeClass('DocumentManifest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRDocumentReference', PHPFHIRTypeMap::getTypeClass('DocumentReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREligibilityRequest', PHPFHIRTypeMap::getTypeClass('EligibilityRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREligibilityResponse', PHPFHIRTypeMap::getTypeClass('EligibilityResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREncounter', PHPFHIRTypeMap::getTypeClass('Encounter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', PHPFHIRTypeMap::getTypeClass('EnrollmentRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', PHPFHIRTypeMap::getTypeClass('EnrollmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', PHPFHIRTypeMap::getTypeClass('EpisodeOfCare'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', PHPFHIRTypeMap::getTypeClass('FamilyMemberHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRFlag', PHPFHIRTypeMap::getTypeClass('Flag'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRGoal', PHPFHIRTypeMap::getTypeClass('Goal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRGroup', PHPFHIRTypeMap::getTypeClass('Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRHealthcareService', PHPFHIRTypeMap::getTypeClass('HealthcareService'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImagingObjectSelection', PHPFHIRTypeMap::getTypeClass('ImagingObjectSelection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImagingStudy', PHPFHIRTypeMap::getTypeClass('ImagingStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImmunization', PHPFHIRTypeMap::getTypeClass('Immunization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', PHPFHIRTypeMap::getTypeClass('ImmunizationRecommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRImplementationGuide', PHPFHIRTypeMap::getTypeClass('ImplementationGuide'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRList', PHPFHIRTypeMap::getTypeClass('List'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRLocation', PHPFHIRTypeMap::getTypeClass('Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedia', PHPFHIRTypeMap::getTypeClass('Media'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedication', PHPFHIRTypeMap::getTypeClass('Medication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', PHPFHIRTypeMap::getTypeClass('MedicationAdministration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', PHPFHIRTypeMap::getTypeClass('MedicationDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationOrder', PHPFHIRTypeMap::getTypeClass('MedicationOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', PHPFHIRTypeMap::getTypeClass('MedicationStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRMessageHeader', PHPFHIRTypeMap::getTypeClass('MessageHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRNamingSystem', PHPFHIRTypeMap::getTypeClass('NamingSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', PHPFHIRTypeMap::getTypeClass('NutritionOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRObservation', PHPFHIRTypeMap::getTypeClass('Observation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROperationDefinition', PHPFHIRTypeMap::getTypeClass('OperationDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROperationOutcome', PHPFHIRTypeMap::getTypeClass('OperationOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROrder', PHPFHIRTypeMap::getTypeClass('Order'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROrderResponse', PHPFHIRTypeMap::getTypeClass('OrderResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIROrganization', PHPFHIRTypeMap::getTypeClass('Organization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPatient', PHPFHIRTypeMap::getTypeClass('Patient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', PHPFHIRTypeMap::getTypeClass('PaymentNotice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', PHPFHIRTypeMap::getTypeClass('PaymentReconciliation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPerson', PHPFHIRTypeMap::getTypeClass('Person'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRPractitioner', PHPFHIRTypeMap::getTypeClass('Practitioner'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcedure', PHPFHIRTypeMap::getTypeClass('Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcedureRequest', PHPFHIRTypeMap::getTypeClass('ProcedureRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcessRequest', PHPFHIRTypeMap::getTypeClass('ProcessRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProcessResponse', PHPFHIRTypeMap::getTypeClass('ProcessResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRProvenance', PHPFHIRTypeMap::getTypeClass('Provenance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRQuestionnaire', PHPFHIRTypeMap::getTypeClass('Questionnaire'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', PHPFHIRTypeMap::getTypeClass('QuestionnaireResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRReferralRequest', PHPFHIRTypeMap::getTypeClass('ReferralRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', PHPFHIRTypeMap::getTypeClass('RelatedPerson'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', PHPFHIRTypeMap::getTypeClass('RiskAssessment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSchedule', PHPFHIRTypeMap::getTypeClass('Schedule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSearchParameter', PHPFHIRTypeMap::getTypeClass('SearchParameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSlot', PHPFHIRTypeMap::getTypeClass('Slot'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSpecimen', PHPFHIRTypeMap::getTypeClass('Specimen'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRStructureDefinition', PHPFHIRTypeMap::getTypeClass('StructureDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSubscription', PHPFHIRTypeMap::getTypeClass('Subscription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSubstance', PHPFHIRTypeMap::getTypeClass('Substance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', PHPFHIRTypeMap::getTypeClass('SupplyDelivery'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', PHPFHIRTypeMap::getTypeClass('SupplyRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRTestScript', PHPFHIRTypeMap::getTypeClass('TestScript'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRValueSet', PHPFHIRTypeMap::getTypeClass('ValueSet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', PHPFHIRTypeMap::getTypeClass('VisionPrescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResource\FHIRParameters', PHPFHIRTypeMap::getTypeClass('Parameters'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRResponseTypeList', PHPFHIRTypeMap::getTypeClass('ResponseType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRRestfulConformanceModeList', PHPFHIRTypeMap::getTypeClass('RestfulConformanceMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSampledDataDataTypePrimitive', PHPFHIRTypeMap::getTypeClass('SampledDataDataType-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSearchEntryModeList', PHPFHIRTypeMap::getTypeClass('SearchEntryMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSearchModifierCodeList', PHPFHIRTypeMap::getTypeClass('SearchModifierCode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSearchParamTypeList', PHPFHIRTypeMap::getTypeClass('SearchParamType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSlicingRulesList', PHPFHIRTypeMap::getTypeClass('SlicingRules-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSlotStatusList', PHPFHIRTypeMap::getTypeClass('SlotStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSpecimenStatusList', PHPFHIRTypeMap::getTypeClass('SpecimenStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRStringPrimitive', PHPFHIRTypeMap::getTypeClass('string-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRStructureDefinitionKindList', PHPFHIRTypeMap::getTypeClass('StructureDefinitionKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSubscriptionChannelTypeList', PHPFHIRTypeMap::getTypeClass('SubscriptionChannelType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSubscriptionStatusList', PHPFHIRTypeMap::getTypeClass('SubscriptionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSupplyDeliveryStatusList', PHPFHIRTypeMap::getTypeClass('SupplyDeliveryStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSupplyRequestStatusList', PHPFHIRTypeMap::getTypeClass('SupplyRequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRSystemRestfulInteractionList', PHPFHIRTypeMap::getTypeClass('SystemRestfulInteraction-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRTimePrimitive', PHPFHIRTypeMap::getTypeClass('time-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRTransactionModeList', PHPFHIRTypeMap::getTypeClass('TransactionMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRTypeRestfulInteractionList', PHPFHIRTypeMap::getTypeClass('TypeRestfulInteraction-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRUnitsOfTimeList', PHPFHIRTypeMap::getTypeClass('UnitsOfTime-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRUnknownContentCodeList', PHPFHIRTypeMap::getTypeClass('UnknownContentCode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRUnsignedIntPrimitive', PHPFHIRTypeMap::getTypeClass('unsignedInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRUriPrimitive', PHPFHIRTypeMap::getTypeClass('uri-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRUseList', PHPFHIRTypeMap::getTypeClass('Use-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRUuidPrimitive', PHPFHIRTypeMap::getTypeClass('uuid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRVisionBaseList', PHPFHIRTypeMap::getTypeClass('VisionBase-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRVisionEyesList', PHPFHIRTypeMap::getTypeClass('VisionEyes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\DSTU2\FHIRXPathUsageTypeList', PHPFHIRTypeMap::getTypeClass('XPathUsageType-list'));
    }
}
