<?php

namespace DCarbone\PHPFHIRGenerated\R4\PHPFHIRTests;

/*!
 * This class was generated with the PHPFHIR library (https://github.com/dcarbone/php-fhir) using
 * class definitions from HL7 FHIR (https://www.hl7.org/fhir/)
 * 
 * Class creation date: October 21st, 2019 04:05+0000
 * 
 * PHPFHIR Copyright:
 * 
 * Copyright 2016-2019 Daniel Carbone (daniel.p.carbone@gmail.com)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 *
 * FHIR Copyright Notice:
 *
 *   Copyright (c) 2011+, HL7, Inc.
 *   All rights reserved.
 * 
 *   Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *    * Neither the name of HL7 nor the names of its contributors may be used to
 *      endorse or promote products derived from this software without specific
 *      prior written permission.
 * 
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *   IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 * 
 * 
 *   Generated on Thu, Dec 27, 2018 22:37+1100 for FHIR v4.0.0
 * 
 *   Note: the schemas & schematrons do not contain all of the rules about what makes resources
 *   valid. Implementers will still need to be familiar with the content of the specification and with
 *   any profiles that apply to the resources in order to make a conformant implementation.
 * 
 */
use DCarbone\PHPFHIRGenerated\R4\PHPFHIRTypeMap;
use PHPUnit\Framework\TestCase;

/**
 * Class PHPFHIRTypeMapTest
 * @package \DCarbone\PHPFHIRGenerated\R4\PHPFHIRTests
 */
class PHPFHIRTypeMapTest extends TestCase
{
    public function testGetTypeClassWithNonStringReturnsNull()
    {
        $this->assertNull(PHPFHIRTypeMap::getTypeClass(1));
    }

    public function testGetContainedTypeClassName()
    {
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAccount', PHPFHIRTypeMap::getContainedTypeClassName('Account'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Account.Coverage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Account.Guarantor'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AccountStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AccountStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionCardinalityBehavior'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionCardinalityBehavior-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionConditionKind'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionConditionKind-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionGroupingBehavior'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionGroupingBehavior-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionParticipantType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionParticipantType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionPrecheckBehavior'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionPrecheckBehavior-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionRelationshipType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionRelationshipType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionRequiredBehavior'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionRequiredBehavior-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionSelectionBehavior'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActionSelectionBehavior-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRActivityDefinition', PHPFHIRTypeMap::getContainedTypeClassName('ActivityDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActivityDefinition.DynamicValue'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ActivityDefinition.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Address'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AddressType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AddressType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AddressUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AddressUse-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdministrativeGender'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdministrativeGender-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAdverseEvent', PHPFHIRTypeMap::getContainedTypeClassName('AdverseEvent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdverseEvent.Causality'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdverseEvent.SuspectEntity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdverseEventActuality'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AdverseEventActuality-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Age'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AggregationMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AggregationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntolerance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntolerance.Reaction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceCategory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceCategory-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceCriticality'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceCriticality-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceSeverity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceSeverity-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AllergyIntoleranceType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Annotation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAppointment', PHPFHIRTypeMap::getContainedTypeClassName('Appointment'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Appointment.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', PHPFHIRTypeMap::getContainedTypeClassName('AppointmentResponse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AppointmentStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AppointmentStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionDirectionType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionDirectionType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionOperatorType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionOperatorType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionResponseTypes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AssertionResponseTypes-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Attachment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAuditEvent', PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent.Agent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent.Detail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent.Entity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent.Network'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEvent.Source'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEventAction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEventAction-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEventAgentNetworkType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEventAgentNetworkType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEventOutcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('AuditEventOutcome-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BackboneElement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('base64Binary'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('base64Binary-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRBasic', PHPFHIRTypeMap::getContainedTypeClassName('Basic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRBinary', PHPFHIRTypeMap::getContainedTypeClassName('Binary'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BindingStrength'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BindingStrength-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct', PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProduct'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProduct.Collection'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProduct.Manipulation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProduct.Processing'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProduct.Storage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProductCategory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProductCategory-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProductStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProductStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProductStorageScale'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BiologicallyDerivedProductStorageScale-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRBodyStructure', PHPFHIRTypeMap::getContainedTypeClassName('BodyStructure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('boolean'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('boolean-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRBundle', PHPFHIRTypeMap::getContainedTypeClassName('Bundle'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Bundle.Entry'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Bundle.Link'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Bundle.Request'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Bundle.Response'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Bundle.Search'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BundleType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('BundleType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('canonical'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('canonical-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement', PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Document'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Endpoint'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Implementation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Interaction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Interaction1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Messaging'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Operation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Resource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Rest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.SearchParam'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Security'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.Software'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatement.SupportedMessage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatementKind'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CapabilityStatementKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCarePlan', PHPFHIRTypeMap::getContainedTypeClassName('CarePlan'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlan.Activity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlan.Detail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanActivityKind'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanActivityKind-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanActivityStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanActivityStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanIntent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CarePlanIntent-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCareTeam', PHPFHIRTypeMap::getContainedTypeClassName('CareTeam'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CareTeam.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CareTeamStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CareTeamStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCatalogEntry', PHPFHIRTypeMap::getContainedTypeClassName('CatalogEntry'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CatalogEntry.RelatedEntry'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CatalogEntryRelationType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CatalogEntryRelationType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRChargeItem', PHPFHIRTypeMap::getContainedTypeClassName('ChargeItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ChargeItem.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRChargeItemDefinition', PHPFHIRTypeMap::getContainedTypeClassName('ChargeItemDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ChargeItemDefinition.Applicability'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ChargeItemDefinition.PriceComponent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ChargeItemDefinition.PropertyGroup'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ChargeItemStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ChargeItemStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRClaim', PHPFHIRTypeMap::getContainedTypeClassName('Claim'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Accident'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.CareTeam'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Detail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Diagnosis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Insurance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Payee'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Procedure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.Related'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.SubDetail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Claim.SupportingInfo'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimProcessingCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimProcessingCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRClaimResponse', PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.AddItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Adjudication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Detail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Detail1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Error'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Insurance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Payment'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.ProcessNote'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.SubDetail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.SubDetail1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClaimResponse.Total'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', PHPFHIRTypeMap::getContainedTypeClassName('ClinicalImpression'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalImpression.Finding'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalImpression.Investigation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalImpressionStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ClinicalImpressionStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('code'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('code-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeableConcept'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSearchSupport'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSearchSupport-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCodeSystem', PHPFHIRTypeMap::getContainedTypeClassName('CodeSystem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystem.Concept'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystem.Designation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystem.Filter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystem.Property'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystem.Property1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystemContentMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystemContentMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystemHierarchyMeaning'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CodeSystemHierarchyMeaning-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Coding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCommunication', PHPFHIRTypeMap::getContainedTypeClassName('Communication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Communication.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', PHPFHIRTypeMap::getContainedTypeClassName('CommunicationRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CommunicationRequest.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition', PHPFHIRTypeMap::getContainedTypeClassName('CompartmentDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompartmentDefinition.Resource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompartmentType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompartmentType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRComposition', PHPFHIRTypeMap::getContainedTypeClassName('Composition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Composition.Attester'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Composition.Event'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Composition.RelatesTo'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Composition.Section'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompositionAttestationMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompositionAttestationMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompositionStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CompositionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRConceptMap', PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.DependsOn'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.Element'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.Group'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.Target'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMap.Unmapped'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMapEquivalence'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMapEquivalence-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMapGroupUnmappedMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConceptMapGroupUnmappedMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCondition', PHPFHIRTypeMap::getContainedTypeClassName('Condition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Condition.Evidence'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Condition.Stage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionalDeleteStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionalDeleteStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionalReadStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConditionalReadStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRConsent', PHPFHIRTypeMap::getContainedTypeClassName('Consent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Consent.Actor'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Consent.Data'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Consent.Policy'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Consent.Provision'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Consent.Verification'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConsentDataMeaning'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConsentDataMeaning-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConsentProvisionType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConsentProvisionType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConsentState'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConsentState-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConstraintSeverity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ConstraintSeverity-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactDetail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactPoint'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactPointSystem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactPointSystem-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactPointUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContactPointUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRContract', PHPFHIRTypeMap::getContainedTypeClassName('Contract'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Action'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Answer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Asset'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.ContentDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Context'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Friendly'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Legal'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Offer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Party'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Rule'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.SecurityLabel'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Signer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Subject'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.Term'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contract.ValuedItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContractResourcePublicationStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContractResourcePublicationStatusCodes-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContractResourceStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContractResourceStatusCodes-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Contributor'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContributorType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ContributorType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Count'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCoverage', PHPFHIRTypeMap::getContainedTypeClassName('Coverage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Coverage.Class'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Coverage.CostToBeneficiary'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Coverage.Exception'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest', PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityRequest.Diagnosis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityRequest.Insurance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityRequest.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityRequest.SupportingInfo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse', PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityResponse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityResponse.Benefit'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityResponse.Error'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityResponse.Insurance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('CoverageEligibilityResponse.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DataRequirement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DataRequirement.CodeFilter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DataRequirement.DateFilter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DataRequirement.Sort'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('date'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('date-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('dateTime'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('dateTime-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DaysOfWeek'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DaysOfWeek-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('decimal'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('decimal-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', PHPFHIRTypeMap::getContainedTypeClassName('DetectedIssue'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DetectedIssue.Evidence'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DetectedIssue.Mitigation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DetectedIssueSeverity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DetectedIssueSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDevice', PHPFHIRTypeMap::getContainedTypeClassName('Device'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Device.DeviceName'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Device.Property'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Device.Specialization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Device.UdiCarrier'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Device.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition', PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.Capability'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.DeviceName'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.Material'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.Property'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.Specialization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceDefinition.UdiDeviceIdentifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetric'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetric.Calibration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCalibrationState'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCalibrationState-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCalibrationType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCalibrationType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCategory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricCategory-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricColor'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricColor-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricOperationalStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceMetricOperationalStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceNameType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceNameType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceRequest', PHPFHIRTypeMap::getContainedTypeClassName('DeviceRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceRequest.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement', PHPFHIRTypeMap::getContainedTypeClassName('DeviceUseStatement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceUseStatementStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DeviceUseStatementStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticReport'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticReport.Media'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticReportStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiagnosticReportStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiscriminatorType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DiscriminatorType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Distance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDocumentManifest', PHPFHIRTypeMap::getContainedTypeClassName('DocumentManifest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentManifest.Related'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDocumentReference', PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference.Content'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference.Context'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReference.RelatesTo'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReferenceStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentReferenceStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentRelationshipType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DocumentRelationshipType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('DomainResource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Dosage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Dosage.DoseAndRate'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Duration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREffectEvidenceSynthesis', PHPFHIRTypeMap::getContainedTypeClassName('EffectEvidenceSynthesis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EffectEvidenceSynthesis.Certainty'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EffectEvidenceSynthesis.CertaintySubcomponent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EffectEvidenceSynthesis.EffectEstimate'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EffectEvidenceSynthesis.PrecisionEstimate'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EffectEvidenceSynthesis.ResultsByExposure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EffectEvidenceSynthesis.SampleSize'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Element'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Base'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Binding'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Constraint'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Discriminator'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Example'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Mapping'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Slicing'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ElementDefinition.Type'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EligibilityRequestPurpose'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EligibilityRequestPurpose-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EligibilityResponsePurpose'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EligibilityResponsePurpose-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EnableWhenBehavior'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EnableWhenBehavior-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREncounter', PHPFHIRTypeMap::getContainedTypeClassName('Encounter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.ClassHistory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.Diagnosis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.Hospitalization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.Location'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Encounter.StatusHistory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterLocationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterLocationStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EncounterStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREndpoint', PHPFHIRTypeMap::getContainedTypeClassName('Endpoint'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EndpointStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EndpointStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', PHPFHIRTypeMap::getContainedTypeClassName('EnrollmentRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', PHPFHIRTypeMap::getContainedTypeClassName('EnrollmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', PHPFHIRTypeMap::getContainedTypeClassName('EpisodeOfCare'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EpisodeOfCare.Diagnosis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EpisodeOfCare.StatusHistory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EpisodeOfCareStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EpisodeOfCareStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventCapabilityMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventCapabilityMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREventDefinition', PHPFHIRTypeMap::getContainedTypeClassName('EventDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventTiming'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EventTiming-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREvidence', PHPFHIRTypeMap::getContainedTypeClassName('Evidence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREvidenceVariable', PHPFHIRTypeMap::getContainedTypeClassName('EvidenceVariable'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EvidenceVariable.Characteristic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EvidenceVariableType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('EvidenceVariableType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRExampleScenario', PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario.Actor'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario.Alternative'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario.ContainedInstance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario.Instance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario.Operation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario.Process'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario.Step'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenario.Version'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenarioActorType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExampleScenarioActorType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Accident'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.AddItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Adjudication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.BenefitBalance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.CareTeam'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Detail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Detail1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Diagnosis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Financial'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Insurance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Payee'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Payment'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Procedure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.ProcessNote'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Related'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.SubDetail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.SubDetail1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.SupportingInfo'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Total'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefitStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExplanationOfBenefitStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExposureState'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExposureState-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Expression'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExpressionLanguage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExpressionLanguage-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Extension'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExtensionContextType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ExtensionContextType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FamilyHistoryStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FamilyHistoryStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', PHPFHIRTypeMap::getContainedTypeClassName('FamilyMemberHistory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FamilyMemberHistory.Condition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FHIRDeviceStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FHIRDeviceStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FHIRSubstanceStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FHIRSubstanceStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FHIRVersion'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FHIRVersion-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FilterOperator'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FilterOperator-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FinancialResourceStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FinancialResourceStatusCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRFlag', PHPFHIRTypeMap::getContainedTypeClassName('Flag'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FlagStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('FlagStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGoal', PHPFHIRTypeMap::getContainedTypeClassName('Goal'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Goal.Target'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GoalLifecycleStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GoalLifecycleStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GraphCompartmentRule'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GraphCompartmentRule-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GraphCompartmentUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GraphCompartmentUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGraphDefinition', PHPFHIRTypeMap::getContainedTypeClassName('GraphDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GraphDefinition.Compartment'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GraphDefinition.Link'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GraphDefinition.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGroup', PHPFHIRTypeMap::getContainedTypeClassName('Group'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Group.Characteristic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Group.Member'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GroupMeasure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GroupMeasure-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GroupType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GroupType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse', PHPFHIRTypeMap::getContainedTypeClassName('GuidanceResponse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GuidanceResponseStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GuidanceResponseStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GuidePageGeneration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GuidePageGeneration-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GuideParameterCode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('GuideParameterCode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRHealthcareService', PHPFHIRTypeMap::getContainedTypeClassName('HealthcareService'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HealthcareService.AvailableTime'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HealthcareService.Eligibility'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HealthcareService.NotAvailable'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HTTPVerb'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HTTPVerb-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('HumanName'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('id'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('id-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Identifier'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IdentifierUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IdentifierUse-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IdentityAssuranceLevel'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IdentityAssuranceLevel-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImagingStudy', PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudy'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudy.Instance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudy.Performer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudy.Series'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudyStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImagingStudyStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImmunization', PHPFHIRTypeMap::getContainedTypeClassName('Immunization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Immunization.Education'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Immunization.Performer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Immunization.ProtocolApplied'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Immunization.Reaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation', PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationEvaluation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationEvaluationStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationEvaluationStatusCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationRecommendation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationRecommendation.DateCriterion'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationRecommendation.Recommendation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImmunizationStatusCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImplementationGuide', PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Definition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.DependsOn'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Global'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Grouping'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Manifest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Page'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Page1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Resource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Resource1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ImplementationGuide.Template'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('instant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('instant-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRInsurancePlan', PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan.Benefit'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan.Benefit1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan.Contact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan.Cost'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan.Coverage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan.GeneralCost'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan.Limit'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan.Plan'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InsurancePlan.SpecificCost'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('integer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('integer-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRInvoice', PHPFHIRTypeMap::getContainedTypeClassName('Invoice'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Invoice.LineItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Invoice.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Invoice.PriceComponent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InvoicePriceComponentType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InvoicePriceComponentType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InvoiceStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('InvoiceStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IssueSeverity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IssueSeverity-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IssueType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('IssueType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRLibrary', PHPFHIRTypeMap::getContainedTypeClassName('Library'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRLinkage', PHPFHIRTypeMap::getContainedTypeClassName('Linkage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Linkage.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LinkageType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LinkageType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LinkType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LinkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRList', PHPFHIRTypeMap::getContainedTypeClassName('List'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('List.Entry'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ListMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ListMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ListStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ListStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRLocation', PHPFHIRTypeMap::getContainedTypeClassName('Location'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Location.HoursOfOperation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Location.Position'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LocationMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LocationMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LocationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('LocationStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('markdown'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('markdown-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MarketingStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMeasure', PHPFHIRTypeMap::getContainedTypeClassName('Measure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Measure.Component'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Measure.Group'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Measure.Population'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Measure.Stratifier'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Measure.SupplementalData'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMeasureReport', PHPFHIRTypeMap::getContainedTypeClassName('MeasureReport'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReport.Component'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReport.Group'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReport.Population'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReport.Population1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReport.Stratifier'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReport.Stratum'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReportStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReportStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReportType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MeasureReportType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedia', PHPFHIRTypeMap::getContainedTypeClassName('Media'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedication', PHPFHIRTypeMap::getContainedTypeClassName('Medication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Medication.Batch'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Medication.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', PHPFHIRTypeMap::getContainedTypeClassName('MedicationAdministration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationAdministration.Dosage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationAdministration.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispense'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispense.Performer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationDispense.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationKnowledge', PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.AdministrationGuidelines'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.Cost'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.Dosage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.DrugCharacteristic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.Ingredient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.Kinetics'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.MaxDispense'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.MedicineClassification'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.MonitoringProgram'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.Monograph'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.Packaging'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.PatientCharacteristics'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.Regulatory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.RelatedMedicationKnowledge'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.Schedule'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationKnowledge.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationRequest', PHPFHIRTypeMap::getContainedTypeClassName('MedicationRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationRequest.DispenseRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationRequest.InitialFill'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationRequest.Substitution'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('medicationRequestIntent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('medicationRequestIntent-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('medicationrequestStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('medicationrequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', PHPFHIRTypeMap::getContainedTypeClassName('MedicationStatement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationStatusCodes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicationStatusCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProduct', PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProduct'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProduct.CountryLanguage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProduct.ManufacturingBusinessOperation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProduct.Name'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProduct.NamePart'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProduct.SpecialDesignation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductAuthorization', PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductAuthorization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductAuthorization.JurisdictionalAuthorization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductAuthorization.Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductContraindication', PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductContraindication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductContraindication.OtherTherapy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductIndication', PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductIndication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductIndication.OtherTherapy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductIngredient', PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductIngredient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductIngredient.ReferenceStrength'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductIngredient.SpecifiedSubstance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductIngredient.Strength'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductIngredient.Substance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductInteraction', PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductInteraction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductInteraction.Interactant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductManufactured', PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductManufactured'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductPackaged', PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductPackaged'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductPackaged.BatchIdentifier'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductPackaged.PackageItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductPharmaceutical', PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductPharmaceutical'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductPharmaceutical.Characteristics'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductPharmaceutical.RouteOfAdministration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductPharmaceutical.TargetSpecies'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductPharmaceutical.WithdrawalPeriod'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductUndesirableEffect', PHPFHIRTypeMap::getContainedTypeClassName('MedicinalProductUndesirableEffect'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMessageDefinition', PHPFHIRTypeMap::getContainedTypeClassName('MessageDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageDefinition.AllowedResponse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageDefinition.Focus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMessageHeader', PHPFHIRTypeMap::getContainedTypeClassName('MessageHeader'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageHeader.Destination'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageHeader.Response'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageHeader.Source'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('messageheaderResponseRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('messageheaderResponseRequest-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageSignificanceCategory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MessageSignificanceCategory-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Meta'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMolecularSequence', PHPFHIRTypeMap::getContainedTypeClassName('MolecularSequence'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MolecularSequence.Inner'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MolecularSequence.Outer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MolecularSequence.Quality'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MolecularSequence.ReferenceSeq'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MolecularSequence.Repository'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MolecularSequence.Roc'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MolecularSequence.StructureVariant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('MolecularSequence.Variant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Money'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NameUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NameUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRNamingSystem', PHPFHIRTypeMap::getContainedTypeClassName('NamingSystem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NamingSystem.UniqueId'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NamingSystemIdentifierType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NamingSystemIdentifierType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NamingSystemType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NamingSystemType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Narrative'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NarrativeStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NarrativeStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NoteType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NoteType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.Administration'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.EnteralFormula'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.Nutrient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.OralDiet'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.Supplement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('NutritionOrder.Texture'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRObservation', PHPFHIRTypeMap::getContainedTypeClassName('Observation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Observation.Component'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Observation.ReferenceRange'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationDataType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationDataType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRObservationDefinition', PHPFHIRTypeMap::getContainedTypeClassName('ObservationDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationDefinition.QualifiedInterval'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationDefinition.QuantitativeDetails'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationRangeCategory'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationRangeCategory-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ObservationStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('oid'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('oid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROperationDefinition', PHPFHIRTypeMap::getContainedTypeClassName('OperationDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationDefinition.Binding'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationDefinition.Overload'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationDefinition.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationDefinition.ReferencedFrom'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationKind'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROperationOutcome', PHPFHIRTypeMap::getContainedTypeClassName('OperationOutcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationOutcome.Issue'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationParameterUse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('OperationParameterUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROrganization', PHPFHIRTypeMap::getContainedTypeClassName('Organization'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Organization.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation', PHPFHIRTypeMap::getContainedTypeClassName('OrganizationAffiliation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('orientationType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('orientationType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ParameterDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRParameters', PHPFHIRTypeMap::getContainedTypeClassName('Parameters'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Parameters.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ParticipantRequired'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ParticipantRequired-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ParticipationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ParticipationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPatient', PHPFHIRTypeMap::getContainedTypeClassName('Patient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Patient.Communication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Patient.Contact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Patient.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', PHPFHIRTypeMap::getContainedTypeClassName('PaymentNotice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', PHPFHIRTypeMap::getContainedTypeClassName('PaymentReconciliation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PaymentReconciliation.Detail'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PaymentReconciliation.ProcessNote'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Period'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPerson', PHPFHIRTypeMap::getContainedTypeClassName('Person'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Person.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPlanDefinition', PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.Action'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.Condition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.DynamicValue'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.Goal'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.RelatedAction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PlanDefinition.Target'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Population'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('positiveInt'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('positiveInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPractitioner', PHPFHIRTypeMap::getContainedTypeClassName('Practitioner'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Practitioner.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPractitionerRole', PHPFHIRTypeMap::getContainedTypeClassName('PractitionerRole'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PractitionerRole.AvailableTime'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PractitionerRole.NotAvailable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRProcedure', PHPFHIRTypeMap::getContainedTypeClassName('Procedure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Procedure.FocalDevice'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Procedure.Performer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProdCharacteristic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProductShelfLife'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PropertyRepresentation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PropertyRepresentation-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PropertyType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PropertyType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRProvenance', PHPFHIRTypeMap::getContainedTypeClassName('Provenance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Provenance.Agent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Provenance.Entity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProvenanceEntityRole'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ProvenanceEntityRole-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PublicationStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('PublicationStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('qualityType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('qualityType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Quantity'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuantityComparator'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuantityComparator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRQuestionnaire', PHPFHIRTypeMap::getContainedTypeClassName('Questionnaire'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Questionnaire.AnswerOption'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Questionnaire.EnableWhen'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Questionnaire.Initial'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Questionnaire.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireItemOperator'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireItemOperator-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireItemType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireItemType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireResponse'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireResponse.Answer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireResponse.Item'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireResponseStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('QuestionnaireResponseStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Range'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Ratio'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Reference'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ReferenceHandlingPolicy'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ReferenceHandlingPolicy-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ReferenceVersionRules'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ReferenceVersionRules-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RelatedArtifact'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RelatedArtifactType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RelatedArtifactType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', PHPFHIRTypeMap::getContainedTypeClassName('RelatedPerson'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RelatedPerson.Communication'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RemittanceOutcome'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RemittanceOutcome-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('repositoryType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('repositoryType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRequestGroup', PHPFHIRTypeMap::getContainedTypeClassName('RequestGroup'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestGroup.Action'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestGroup.Condition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestGroup.RelatedAction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestIntent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestIntent-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestPriority'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestPriority-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestResourceType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestResourceType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchDefinition', PHPFHIRTypeMap::getContainedTypeClassName('ResearchDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchElementDefinition', PHPFHIRTypeMap::getContainedTypeClassName('ResearchElementDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResearchElementDefinition.Characteristic'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResearchElementType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResearchElementType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchStudy', PHPFHIRTypeMap::getContainedTypeClassName('ResearchStudy'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResearchStudy.Arm'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResearchStudy.Objective'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResearchStudyStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResearchStudyStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchSubject', PHPFHIRTypeMap::getContainedTypeClassName('ResearchSubject'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResearchSubjectStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResearchSubjectStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Resource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceContainer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceVersionPolicy'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResourceVersionPolicy-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResponseType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ResponseType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RestfulCapabilityMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RestfulCapabilityMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', PHPFHIRTypeMap::getContainedTypeClassName('RiskAssessment'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RiskAssessment.Prediction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRiskEvidenceSynthesis', PHPFHIRTypeMap::getContainedTypeClassName('RiskEvidenceSynthesis'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RiskEvidenceSynthesis.Certainty'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RiskEvidenceSynthesis.CertaintySubcomponent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RiskEvidenceSynthesis.PrecisionEstimate'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RiskEvidenceSynthesis.RiskEstimate'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('RiskEvidenceSynthesis.SampleSize'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SampledData'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SampledDataDataType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SampledDataDataType-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSchedule', PHPFHIRTypeMap::getContainedTypeClassName('Schedule'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchComparator'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchComparator-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchEntryMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchEntryMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchModifierCode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchModifierCode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSearchParameter', PHPFHIRTypeMap::getContainedTypeClassName('SearchParameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchParameter.Component'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchParamType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SearchParamType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('sequenceType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('sequenceType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRServiceRequest', PHPFHIRTypeMap::getContainedTypeClassName('ServiceRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Signature'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SlicingRules'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SlicingRules-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSlot', PHPFHIRTypeMap::getContainedTypeClassName('Slot'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SlotStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SlotStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SortDirection'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SortDirection-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SPDXLicense'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SPDXLicense-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSpecimen', PHPFHIRTypeMap::getContainedTypeClassName('Specimen'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Specimen.Collection'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Specimen.Container'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Specimen.Processing'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenContainedPreference'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenContainedPreference-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSpecimenDefinition', PHPFHIRTypeMap::getContainedTypeClassName('SpecimenDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenDefinition.Additive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenDefinition.Container'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenDefinition.Handling'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenDefinition.TypeTested'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SpecimenStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('status'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('status-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('strandType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('strandType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('string'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('string-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRStructureDefinition', PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinition.Context'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinition.Differential'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinition.Mapping'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinition.Snapshot'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinitionKind'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureDefinitionKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRStructureMap', PHPFHIRTypeMap::getContainedTypeClassName('StructureMap'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMap.Dependent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMap.Group'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMap.Input'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMap.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMap.Rule'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMap.Source'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMap.Structure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMap.Target'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapContextType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapContextType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapGroupTypeMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapGroupTypeMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapInputMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapInputMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapModelMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapModelMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapSourceListMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapSourceListMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapTargetListMode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapTargetListMode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapTransform'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('StructureMapTransform-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubscription', PHPFHIRTypeMap::getContainedTypeClassName('Subscription'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Subscription.Channel'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionChannelType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionChannelType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubscriptionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstance', PHPFHIRTypeMap::getContainedTypeClassName('Substance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Substance.Ingredient'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Substance.Instance'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceAmount'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceAmount.ReferenceRange'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceNucleicAcid', PHPFHIRTypeMap::getContainedTypeClassName('SubstanceNucleicAcid'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceNucleicAcid.Linkage'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceNucleicAcid.Subunit'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceNucleicAcid.Sugar'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstancePolymer', PHPFHIRTypeMap::getContainedTypeClassName('SubstancePolymer'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstancePolymer.DegreeOfPolymerisation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstancePolymer.MonomerSet'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstancePolymer.Repeat'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstancePolymer.RepeatUnit'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstancePolymer.StartingMaterial'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstancePolymer.StructuralRepresentation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceProtein', PHPFHIRTypeMap::getContainedTypeClassName('SubstanceProtein'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceProtein.Subunit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceReferenceInformation', PHPFHIRTypeMap::getContainedTypeClassName('SubstanceReferenceInformation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceReferenceInformation.Classification'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceReferenceInformation.Gene'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceReferenceInformation.GeneElement'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceReferenceInformation.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceSourceMaterial', PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSourceMaterial'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSourceMaterial.Author'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSourceMaterial.FractionDescription'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSourceMaterial.Hybrid'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSourceMaterial.Organism'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSourceMaterial.OrganismGeneral'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSourceMaterial.PartDescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceSpecification', PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSpecification'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSpecification.Code'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSpecification.Isotope'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSpecification.Moiety'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSpecification.MolecularWeight'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSpecification.Name'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSpecification.Official'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSpecification.Property'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSpecification.Relationship'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSpecification.Representation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SubstanceSpecification.Structure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', PHPFHIRTypeMap::getContainedTypeClassName('SupplyDelivery'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyDelivery.SuppliedItem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyDeliveryStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyDeliveryStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', PHPFHIRTypeMap::getContainedTypeClassName('SupplyRequest'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyRequest.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyRequestStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SupplyRequestStatus-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SystemRestfulInteraction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('SystemRestfulInteraction-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTask', PHPFHIRTypeMap::getContainedTypeClassName('Task'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Task.Input'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Task.Output'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Task.Restriction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TaskIntent'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TaskIntent-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TaskStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TaskStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTerminologyCapabilities', PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.Closure'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.CodeSystem'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.Expansion'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.Filter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.Implementation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.Software'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.Translation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.ValidateCode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TerminologyCapabilities.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTestReport', PHPFHIRTypeMap::getContainedTypeClassName('TestReport'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Action'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Action1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Action2'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Assert'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Operation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Participant'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Setup'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Teardown'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReport.Test'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReportActionResult'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReportActionResult-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReportParticipantType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReportParticipantType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReportResult'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReportResult-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReportStatus'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestReportStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTestScript', PHPFHIRTypeMap::getContainedTypeClassName('TestScript'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Action'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Action1'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Action2'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Assert'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Capability'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Destination'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Fixture'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Link'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Metadata'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Operation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Origin'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.RequestHeader'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Setup'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Teardown'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Test'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScript.Variable'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScriptRequestMethodCode'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TestScriptRequestMethodCode-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('time'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('time-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Timing'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Timing.Repeat'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TriggerDefinition'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TriggerType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TriggerType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TypeDerivationRule'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TypeDerivationRule-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TypeRestfulInteraction'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('TypeRestfulInteraction-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('UDIEntryType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('UDIEntryType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('UnitsOfTime'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('UnitsOfTime-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('unsignedInt'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('unsignedInt-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('uri'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('uri-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('url'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('url-primitive'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('UsageContext'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Use'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('Use-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('uuid'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('uuid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRValueSet', PHPFHIRTypeMap::getContainedTypeClassName('ValueSet'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Compose'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Concept'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Contains'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Designation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Expansion'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Filter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Include'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('ValueSet.Parameter'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VariableType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VariableType-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('vConfidentialityClassification'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('vConfidentialityClassification-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRVerificationResult', PHPFHIRTypeMap::getContainedTypeClassName('VerificationResult'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VerificationResult.Attestation'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VerificationResult.PrimarySource'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VerificationResult.Validator'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VisionBase'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VisionBase-list'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VisionEyes'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VisionEyes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', PHPFHIRTypeMap::getContainedTypeClassName('VisionPrescription'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VisionPrescription.LensSpecification'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('VisionPrescription.Prism'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('XPathUsageType'));
        $this->assertNull(PHPFHIRTypeMap::getContainedTypeClassName('XPathUsageType-list'));
    }

    public function testIsContainableResourceWithClassname()
    {
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRAccountStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRAccountStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionCardinalityBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionCardinalityBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRActionCardinalityBehaviorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRActionCardinalityBehaviorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionConditionKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionConditionKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRActionConditionKindList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRActionConditionKindList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionGroupingBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionGroupingBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRActionGroupingBehaviorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRActionGroupingBehaviorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionParticipantType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionParticipantType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRActionParticipantTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRActionParticipantTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionPrecheckBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionPrecheckBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRActionPrecheckBehaviorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRActionPrecheckBehaviorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRActionRelationshipTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRActionRelationshipTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionRequiredBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionRequiredBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRActionRequiredBehaviorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRActionRequiredBehaviorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionSelectionBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionSelectionBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRActionSelectionBehaviorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRActionSelectionBehaviorList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRActivityDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRActivityDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAddress'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAddress'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAddressType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAddressType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRAddressTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRAddressTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRAddressUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRAddressUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRAdministrativeGenderList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRAdministrativeGenderList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAdverseEvent'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAdverseEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAdverseEventActuality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAdverseEventActuality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRAdverseEventActualityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRAdverseEventActualityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRAggregationModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRAggregationModeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRAllergyIntoleranceCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRAllergyIntoleranceCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRAllergyIntoleranceCriticalityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRAllergyIntoleranceCriticalityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRAllergyIntoleranceSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRAllergyIntoleranceSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAllergyIntoleranceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAllergyIntoleranceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRAllergyIntoleranceTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRAllergyIntoleranceTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAnnotation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAnnotation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRAppointmentStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRAppointmentStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRAssertionDirectionTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRAssertionDirectionTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRAssertionOperatorTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRAssertionOperatorTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRAssertionResponseTypesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRAssertionResponseTypesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAttachment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAttachment'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRAuditEventActionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRAuditEventActionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAuditEventAgentNetworkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAuditEventAgentNetworkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRAuditEventAgentNetworkTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRAuditEventAgentNetworkTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAuditEventOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAuditEventOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRAuditEventOutcomeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRAuditEventOutcomeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRBase64BinaryPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRBase64BinaryPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRBinary'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRBinary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRBindingStrengthList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRBindingStrengthList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductManipulation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductManipulation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProcessing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProcessing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductStorage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductStorage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBiologicallyDerivedProductCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBiologicallyDerivedProductCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRBiologicallyDerivedProductCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRBiologicallyDerivedProductCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBiologicallyDerivedProductStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBiologicallyDerivedProductStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRBiologicallyDerivedProductStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRBiologicallyDerivedProductStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBiologicallyDerivedProductStorageScale'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBiologicallyDerivedProductStorageScale'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRBiologicallyDerivedProductStorageScaleList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRBiologicallyDerivedProductStorageScaleList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRBodyStructure'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRBodyStructure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBoolean'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBoolean'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRBooleanPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRBooleanPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRBundle'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRBundle'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBundleType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBundleType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRBundleTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRBundleTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCanonical'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCanonical'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRCanonicalPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRCanonicalPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCapabilityStatementKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCapabilityStatementKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRCapabilityStatementKindList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRCapabilityStatementKindList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCarePlanActivityKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCarePlanActivityKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRCarePlanActivityKindList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRCarePlanActivityKindList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCarePlanIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCarePlanIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRCarePlanIntentList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRCarePlanIntentList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCareTeam'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCareTeamStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCareTeamStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRCareTeamStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRCareTeamStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCatalogEntry'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCatalogEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCatalogEntry\FHIRCatalogEntryRelatedEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCatalogEntry\FHIRCatalogEntryRelatedEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCatalogEntryRelationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCatalogEntryRelationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRCatalogEntryRelationTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRCatalogEntryRelationTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRChargeItem'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRChargeItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRChargeItemDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRChargeItemDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPriceComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPriceComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRChargeItemStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRChargeItemStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRChargeItemStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRChargeItemStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRClaimProcessingCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRClaimProcessingCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRClaimProcessingCodesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRClaimProcessingCodesList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRClinicalImpressionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRClinicalImpressionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRClinicalImpressionStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRClinicalImpressionStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRCodePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRCodePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCodeSearchSupport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCodeSearchSupport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRCodeSearchSupportList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRCodeSearchSupportList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCodeSystem'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCodeSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCodeSystemContentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCodeSystemContentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRCodeSystemContentModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRCodeSystemContentModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCodeSystemHierarchyMeaning'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCodeSystemHierarchyMeaning'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRCodeSystemHierarchyMeaningList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRCodeSystemHierarchyMeaningList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCoding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCoding'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCompartmentType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCompartmentType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRCompartmentTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRCompartmentTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRCompositionAttestationModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRCompositionAttestationModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRCompositionStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRCompositionStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRConceptMap'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRConceptMap'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRConceptMapEquivalenceList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRConceptMapEquivalenceList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConceptMapGroupUnmappedMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConceptMapGroupUnmappedMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRConceptMapGroupUnmappedModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRConceptMapGroupUnmappedModeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRConditionalDeleteStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRConditionalDeleteStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConditionalReadStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConditionalReadStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRConditionalReadStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRConditionalReadStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRConsent'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRConsent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConsentDataMeaning'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConsentDataMeaning'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRConsentDataMeaningList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRConsentDataMeaningList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConsentProvisionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConsentProvisionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRConsentProvisionTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRConsentProvisionTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConsentState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConsentState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRConsentStateList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRConsentStateList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRConstraintSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRConstraintSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContactDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContactDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContactPoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContactPoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRContactPointSystemList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRContactPointSystemList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRContactPointUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRContactPointUseList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContractResourcePublicationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContractResourcePublicationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRContractResourcePublicationStatusCodesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRContractResourcePublicationStatusCodesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContractResourceStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContractResourceStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRContractResourceStatusCodesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRContractResourceStatusCodesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContributor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContributor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContributorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContributorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRContributorTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRContributorTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDataRequirement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDataRequirement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDataRequirement\FHIRDataRequirementSort'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDataRequirement\FHIRDataRequirementSort'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRDatePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRDatePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDateTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDateTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRDateTimePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRDateTimePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDaysOfWeek'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDaysOfWeek'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRDaysOfWeekList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRDaysOfWeekList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDecimal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDecimal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRDecimalPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRDecimalPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRDetectedIssueSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRDetectedIssueSeverityList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceDeviceName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceDeviceName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceSpecialization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceSpecialization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCapability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCapability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionSpecialization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionSpecialization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricCalibrationStateList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricCalibrationStateList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricCalibrationTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricCalibrationTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricColor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricColor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricColorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricColorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricOperationalStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricOperationalStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceNameType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceNameType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRDeviceNameTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRDeviceNameTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceUseStatementStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceUseStatementStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRDeviceUseStatementStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRDeviceUseStatementStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDiscriminatorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDiscriminatorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRDiscriminatorTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRDiscriminatorTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRDocumentModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRDocumentModeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDosage\FHIRDosageDoseAndRate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDosage\FHIRDosageDoseAndRate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREffectEvidenceSynthesis'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREffectEvidenceSynthesis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisCertainty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisCertainty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisCertaintySubcomponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisCertaintySubcomponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisEffectEstimate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisEffectEstimate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisPrecisionEstimate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisPrecisionEstimate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisResultsByExposure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisResultsByExposure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisSampleSize'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisSampleSize'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionExample'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionExample'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREligibilityRequestPurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREligibilityRequestPurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIREligibilityRequestPurposeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIREligibilityRequestPurposeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREligibilityResponsePurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREligibilityResponsePurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIREligibilityResponsePurposeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIREligibilityResponsePurposeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREnableWhenBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREnableWhenBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIREnableWhenBehaviorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIREnableWhenBehaviorList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIREncounterLocationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIREncounterLocationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREncounterStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREncounterStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIREncounterStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIREncounterStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREndpoint'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREndpoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREndpointStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREndpointStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIREndpointStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIREndpointStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIREpisodeOfCareStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIREpisodeOfCareStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREventCapabilityMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREventCapabilityMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIREventCapabilityModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIREventCapabilityModeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREventDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREventDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREventStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREventStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIREventStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIREventStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREventTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREventTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIREventTimingList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIREventTimingList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREvidence'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREvidence'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREvidenceVariable'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREvidenceVariable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREvidenceVariableType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREvidenceVariableType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIREvidenceVariableTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIREvidenceVariableTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRExampleScenario'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRExampleScenario'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExampleScenarioActorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExampleScenarioActorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRExampleScenarioActorTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRExampleScenarioActorTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExplanationOfBenefitStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExplanationOfBenefitStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRExplanationOfBenefitStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRExplanationOfBenefitStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExposureState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExposureState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRExposureStateList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRExposureStateList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExpression'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExpression'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExpressionLanguage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExpressionLanguage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRExpressionLanguageList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRExpressionLanguageList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExtension'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExtension'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExtensionContextType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExtensionContextType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRExtensionContextTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRExtensionContextTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRFamilyHistoryStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRFamilyHistoryStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFHIRDeviceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFHIRDeviceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRFHIRDeviceStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRFHIRDeviceStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFHIRSubstanceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFHIRSubstanceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRFHIRSubstanceStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRFHIRSubstanceStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFHIRVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFHIRVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRFHIRVersionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRFHIRVersionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRFilterOperatorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRFilterOperatorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFinancialResourceStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFinancialResourceStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRFinancialResourceStatusCodesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRFinancialResourceStatusCodesList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRFlagStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRFlagStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGoalLifecycleStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGoalLifecycleStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRGoalLifecycleStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRGoalLifecycleStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGraphCompartmentRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGraphCompartmentRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRGraphCompartmentRuleList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRGraphCompartmentRuleList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGraphCompartmentUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGraphCompartmentUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRGraphCompartmentUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRGraphCompartmentUseList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGraphDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGraphDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGroupMeasure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGroupMeasure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRGroupMeasureList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRGroupMeasureList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGroupType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGroupType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRGroupTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRGroupTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGuidanceResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGuidanceResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRGuidanceResponseStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRGuidanceResponseStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGuidePageGeneration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGuidePageGeneration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRGuidePageGenerationList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRGuidePageGenerationList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGuideParameterCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGuideParameterCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRGuideParameterCodeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRGuideParameterCodeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRHTTPVerbList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRHTTPVerbList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRHumanName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRHumanName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRId'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRId'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRIdPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRIdPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRIdentifierUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRIdentifierUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRIdentityAssuranceLevelList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRIdentityAssuranceLevelList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRImagingStudyStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRImagingStudyStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRImagingStudyStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRImagingStudyStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationEducation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationEducation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRImmunizationEvaluationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRImmunizationEvaluationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRImmunizationEvaluationStatusCodesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRImmunizationEvaluationStatusCodesList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRImmunizationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRImmunizationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRImmunizationStatusCodesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRImmunizationStatusCodesList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRInstant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRInstant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRInstantPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRInstantPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRInsurancePlan'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRInsurancePlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRInteger'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRInteger'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRIntegerPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRIntegerPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRInvoice'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRInvoice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoicePriceComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoicePriceComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRInvoicePriceComponentType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRInvoicePriceComponentType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRInvoicePriceComponentTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRInvoicePriceComponentTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRInvoiceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRInvoiceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRInvoiceStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRInvoiceStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRIssueSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRIssueSeverityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIssueType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIssueType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRIssueTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRIssueTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRLibrary'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRLibrary'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRLinkage'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRLinkage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRLinkageType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRLinkageType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRLinkageTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRLinkageTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRLinkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRLinkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRLinkTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRLinkTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRListModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRListModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRListStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRListStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRListStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRListStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationHoursOfOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationHoursOfOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRLocationModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRLocationModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRLocationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRLocationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRMarkdownPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRMarkdownPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMarketingStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMarketingStatus'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMeasure'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMeasure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMeasureReport'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMeasureReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMeasureReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMeasureReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRMeasureReportStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRMeasureReportStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMeasureReportType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMeasureReportType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRMeasureReportTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRMeasureReportTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedia'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedia'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationKnowledge'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationKnowledge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeAdministrationGuidelines'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeAdministrationGuidelines'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeKinetics'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeKinetics'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristics'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristics'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSchedule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSchedule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMedicationRequestIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMedicationRequestIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRMedicationRequestIntentList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRMedicationRequestIntentList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMedicationrequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMedicationrequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRMedicationrequestStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRMedicationrequestStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMedicationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMedicationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRMedicationStatusCodesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRMedicationStatusCodesList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProduct'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProduct'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductCountryLanguage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductCountryLanguage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductManufacturingBusinessOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductManufacturingBusinessOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductNamePart'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductNamePart'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductSpecialDesignation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductSpecialDesignation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductAuthorization'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductAuthorization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductAuthorization\FHIRMedicinalProductAuthorizationJurisdictionalAuthorization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductAuthorization\FHIRMedicinalProductAuthorizationJurisdictionalAuthorization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductAuthorization\FHIRMedicinalProductAuthorizationProcedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductAuthorization\FHIRMedicinalProductAuthorizationProcedure'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductContraindication'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductContraindication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductContraindication\FHIRMedicinalProductContraindicationOtherTherapy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductContraindication\FHIRMedicinalProductContraindicationOtherTherapy'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductIndication'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductIndication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIndication\FHIRMedicinalProductIndicationOtherTherapy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIndication\FHIRMedicinalProductIndicationOtherTherapy'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductIngredient'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIngredient\FHIRMedicinalProductIngredientReferenceStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIngredient\FHIRMedicinalProductIngredientReferenceStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIngredient\FHIRMedicinalProductIngredientSpecifiedSubstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIngredient\FHIRMedicinalProductIngredientSpecifiedSubstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIngredient\FHIRMedicinalProductIngredientStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIngredient\FHIRMedicinalProductIngredientStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIngredient\FHIRMedicinalProductIngredientSubstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIngredient\FHIRMedicinalProductIngredientSubstance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductInteraction'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductInteraction\FHIRMedicinalProductInteractionInteractant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductInteraction\FHIRMedicinalProductInteractionInteractant'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductManufactured'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductManufactured'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductPackaged'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductPackaged'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPackaged\FHIRMedicinalProductPackagedBatchIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPackaged\FHIRMedicinalProductPackagedBatchIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPackaged\FHIRMedicinalProductPackagedPackageItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPackaged\FHIRMedicinalProductPackagedPackageItem'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductPharmaceutical'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductPharmaceutical'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPharmaceutical\FHIRMedicinalProductPharmaceuticalCharacteristics'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPharmaceutical\FHIRMedicinalProductPharmaceuticalCharacteristics'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPharmaceutical\FHIRMedicinalProductPharmaceuticalRouteOfAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPharmaceutical\FHIRMedicinalProductPharmaceuticalRouteOfAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPharmaceutical\FHIRMedicinalProductPharmaceuticalTargetSpecies'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPharmaceutical\FHIRMedicinalProductPharmaceuticalTargetSpecies'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPharmaceutical\FHIRMedicinalProductPharmaceuticalWithdrawalPeriod'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPharmaceutical\FHIRMedicinalProductPharmaceuticalWithdrawalPeriod'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductUndesirableEffect'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductUndesirableEffect'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMessageDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMessageDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMessageheaderResponseRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMessageheaderResponseRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRMessageheaderResponseRequestList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRMessageheaderResponseRequestList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMeta'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMeta'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMolecularSequence'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMolecularSequence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceInner'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceInner'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceOuter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceOuter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceQuality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceQuality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceReferenceSeq'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceReferenceSeq'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRepository'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRepository'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRoc'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRoc'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStructureVariant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStructureVariant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceVariant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceVariant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMoney'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMoney'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNameUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNameUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRNameUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRNameUseList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRNamingSystem'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRNamingSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRNamingSystemIdentifierTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRNamingSystemIdentifierTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRNamingSystemTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRNamingSystemTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNarrative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNarrative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRNarrativeStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRNarrativeStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNoteType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNoteType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRNoteTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRNoteTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRObservationDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRObservationDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRObservationDataTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRObservationDataTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRObservationDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRObservationDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedInterval'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedInterval'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQuantitativeDetails'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQuantitativeDetails'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRObservationRangeCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRObservationRangeCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRObservationRangeCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRObservationRangeCategoryList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRObservationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRObservationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIROid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIROid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIROidPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIROidPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROperationDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROperationDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIROperationKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIROperationKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIROperationKindList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIROperationKindList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIROperationParameterUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIROperationParameterUseList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIROrientationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIROrientationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIROrientationTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIROrientationTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRParameterDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRParameterDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRParameters'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRParameters'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRParticipantRequired'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRParticipantRequired'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRParticipantRequiredList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRParticipantRequiredList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRParticipationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRParticipationStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPeriod'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPeriod'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPlanDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPlanDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPopulation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPopulation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRPositiveIntPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRPositiveIntPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPractitionerRole'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPractitionerRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProdCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProdCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProductShelfLife'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProductShelfLife'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRPropertyRepresentationList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRPropertyRepresentationList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPropertyType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPropertyType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRPropertyTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRPropertyTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPublicationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPublicationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRPublicationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRPublicationStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQualityType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQualityType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRQualityTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRQualityTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRQuantityComparatorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRQuantityComparatorList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuestionnaireItemOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuestionnaireItemOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRQuestionnaireItemOperatorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRQuestionnaireItemOperatorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuestionnaireItemType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuestionnaireItemType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRQuestionnaireItemTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRQuestionnaireItemTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRQuestionnaireResponseStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRQuestionnaireResponseStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRatio'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRatio'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRReferenceHandlingPolicy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRReferenceHandlingPolicy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRReferenceHandlingPolicyList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRReferenceHandlingPolicyList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRReferenceVersionRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRReferenceVersionRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRReferenceVersionRulesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRReferenceVersionRulesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRelatedArtifact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRelatedArtifact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRelatedArtifactType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRelatedArtifactType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRRelatedArtifactTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRRelatedArtifactTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRRemittanceOutcomeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRRemittanceOutcomeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRepositoryType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRepositoryType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRRepositoryTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRRepositoryTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRequestGroup'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRequestGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRequestIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRequestIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRRequestIntentList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRRequestIntentList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRequestPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRequestPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRRequestPriorityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRRequestPriorityList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRequestResourceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRequestResourceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRRequestResourceTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRRequestResourceTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRRequestStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRRequestStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchElementDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchElementDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRResearchElementDefinition\FHIRResearchElementDefinitionCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRResearchElementDefinition\FHIRResearchElementDefinitionCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResearchElementType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResearchElementType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResearchElementTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResearchElementTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchStudy'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchStudy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResearchStudyStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResearchStudyStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResearchStudyStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResearchStudyStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchSubject'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchSubject'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResearchSubjectStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResearchSubjectStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResearchSubjectStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResearchSubjectStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResourceContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResourceContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResourceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResourceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResourceTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResourceTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResourceVersionPolicyList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResourceVersionPolicyList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResponseType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResponseType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResponseTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResponseTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRestfulCapabilityMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRestfulCapabilityMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRRestfulCapabilityModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRRestfulCapabilityModeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRiskEvidenceSynthesis'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRiskEvidenceSynthesis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisCertainty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisCertainty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisCertaintySubcomponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisCertaintySubcomponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisPrecisionEstimate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisPrecisionEstimate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisRiskEstimate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisRiskEstimate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisSampleSize'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisSampleSize'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSampledData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSampledData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRSampledDataDataTypePrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSearchComparator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSearchComparator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRSearchComparatorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRSearchComparatorList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRSearchEntryModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRSearchEntryModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRSearchModifierCodeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRSearchModifierCodeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSearchParameter'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSearchParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRSearchParamTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRSearchParamTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSequenceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSequenceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRSequenceTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRSequenceTypeList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRServiceRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRServiceRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSignature'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSignature'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRSlicingRulesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRSlicingRulesList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRSlotStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRSlotStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSortDirection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSortDirection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRSortDirectionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRSortDirectionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSPDXLicense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSPDXLicense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRSPDXLicenseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRSPDXLicenseList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSpecimenContainedPreference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSpecimenContainedPreference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRSpecimenContainedPreferenceList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRSpecimenContainedPreferenceList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSpecimenDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSpecimenDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRSpecimenStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRSpecimenStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStrandType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStrandType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRStrandTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRStrandTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRString'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRString'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRStringPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRStringPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRStructureDefinitionKindList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRStructureDefinitionKindList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRStructureMap'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRStructureMap'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapContextType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapContextType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapContextTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapContextTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapGroupTypeMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapGroupTypeMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapGroupTypeModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapGroupTypeModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapInputMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapInputMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapInputModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapInputModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapModelMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapModelMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapModelModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapModelModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapSourceListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapSourceListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapSourceListModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapSourceListModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapTargetListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapTargetListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapTargetListModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapTargetListModeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapTransform'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapTransform'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapTransformList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapTransformList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSubscriptionChannelType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSubscriptionChannelType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRSubscriptionChannelTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRSubscriptionChannelTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSubscriptionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSubscriptionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRSubscriptionStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRSubscriptionStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceAmount'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceAmount'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceAmount\FHIRSubstanceAmountReferenceRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceAmount\FHIRSubstanceAmountReferenceRange'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceNucleicAcid'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceNucleicAcid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidLinkage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidLinkage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSubunit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSubunit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSugar'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSugar'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstancePolymer'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstancePolymer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerDegreeOfPolymerisation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerDegreeOfPolymerisation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerMonomerSet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerMonomerSet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeatUnit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeatUnit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStartingMaterial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStartingMaterial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStructuralRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStructuralRepresentation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceProtein'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceProtein'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceProtein\FHIRSubstanceProteinSubunit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceProtein\FHIRSubstanceProteinSubunit'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceReferenceInformation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceReferenceInformation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationClassification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationClassification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGene'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGene'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGeneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGeneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationTarget'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationTarget'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceSourceMaterial'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceSourceMaterial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialAuthor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialAuthor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialFractionDescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialFractionDescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialHybrid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialHybrid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganism'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganism'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganismGeneral'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganismGeneral'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialPartDescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialPartDescription'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceSpecification'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceSpecification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationIsotope'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationIsotope'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationMoiety'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationMoiety'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationMolecularWeight'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationMolecularWeight'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationOfficial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationOfficial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationProperty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationRelationship'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationRelationship'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationStructure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationStructure'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRSupplyDeliveryStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRSupplyDeliveryStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRSupplyRequestStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRSupplyRequestStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRSystemRestfulInteractionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRSystemRestfulInteractionList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTask'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTask'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTaskIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTaskIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRTaskIntentList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRTaskIntentList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTaskStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTaskStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRTaskStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRTaskStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTerminologyCapabilities'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTerminologyCapabilities'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTestReport'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTestReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestReportActionResult'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestReportActionResult'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRTestReportActionResultList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRTestReportActionResultList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestReportParticipantType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestReportParticipantType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRTestReportParticipantTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRTestReportParticipantTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestReportResult'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestReportResult'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRTestReportResultList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRTestReportResultList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRTestReportStatusList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRTestReportStatusList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTestScript'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTestScript'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestScriptRequestMethodCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestScriptRequestMethodCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRTestScriptRequestMethodCodeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRTestScriptRequestMethodCodeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRTimePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRTimePrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTiming\FHIRTimingRepeat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTiming\FHIRTimingRepeat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTriggerDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTriggerDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTriggerType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTriggerType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRTriggerTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRTriggerTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTypeDerivationRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTypeDerivationRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRTypeDerivationRuleList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRTypeDerivationRuleList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRTypeRestfulInteractionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRTypeRestfulInteractionList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUDIEntryType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUDIEntryType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRUDIEntryTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRUDIEntryTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRUnitsOfTimeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRUnitsOfTimeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUri'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUri'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRUriPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRUriPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUrl'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUrl'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRUrlPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRUrlPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUsageContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUsageContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRUseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUuid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUuid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRUuidPrimitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRUuidPrimitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRValueSet'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRValueSet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRVariableType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRVariableType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRVariableTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRVariableTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRVConfidentialityClassification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRVConfidentialityClassification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRVConfidentialityClassificationList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRVConfidentialityClassificationList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRVerificationResult'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRVerificationResult'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRVisionBaseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRVisionBaseList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRVisionEyesList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRVisionEyesList'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRXPathUsageType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRXPathUsageType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\R4\FHIRXPathUsageTypeList'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\R4\FHIRXPathUsageTypeList'));
    }

    public function testIsContainableResourceWithTypeName()
    {
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Account'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Account.Coverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Account.Guarantor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AccountStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AccountStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionCardinalityBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionCardinalityBehavior-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionConditionKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionConditionKind-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionGroupingBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionGroupingBehavior-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionParticipantType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionParticipantType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionPrecheckBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionPrecheckBehavior-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionRelationshipType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionRequiredBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionRequiredBehavior-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionSelectionBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActionSelectionBehavior-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ActivityDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActivityDefinition.DynamicValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ActivityDefinition.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Address'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AddressType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AddressType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AddressUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AddressUse-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdministrativeGender'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdministrativeGender-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('AdverseEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdverseEvent.Causality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdverseEvent.SuspectEntity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdverseEventActuality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AdverseEventActuality-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Age'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AggregationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AggregationMode-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('AllergyIntolerance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntolerance.Reaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceCategory-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceCriticality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceCriticality-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceSeverity-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AllergyIntoleranceType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Annotation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Appointment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Appointment.Participant'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('AppointmentResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AppointmentStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AppointmentStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionDirectionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionDirectionType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionOperatorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionOperatorType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionResponseTypes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AssertionResponseTypes-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Attachment'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('AuditEvent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEvent.Agent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEvent.Detail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEvent.Entity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEvent.Network'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEvent.Source'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEventAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEventAction-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEventAgentNetworkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEventAgentNetworkType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEventOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('AuditEventOutcome-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BackboneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('base64Binary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('base64Binary-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Basic'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Binary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BindingStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BindingStrength-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProduct'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProduct.Collection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProduct.Manipulation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProduct.Processing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProduct.Storage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProductCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProductCategory-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProductStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProductStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProductStorageScale'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BiologicallyDerivedProductStorageScale-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('BodyStructure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('boolean'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('boolean-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Bundle'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Bundle.Entry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Bundle.Link'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Bundle.Request'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Bundle.Response'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Bundle.Search'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BundleType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('BundleType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('canonical'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('canonical-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CapabilityStatement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Document'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Endpoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Implementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Interaction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Interaction1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Messaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Operation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Resource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Rest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.SearchParam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Security'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.Software'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatement.SupportedMessage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatementKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CapabilityStatementKind-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CarePlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlan.Activity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlan.Detail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanActivityKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanActivityKind-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanActivityStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanActivityStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CarePlanIntent-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CareTeam.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CareTeamStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CareTeamStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CatalogEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CatalogEntry.RelatedEntry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CatalogEntryRelationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CatalogEntryRelationType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ChargeItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ChargeItem.Performer'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ChargeItemDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ChargeItemDefinition.Applicability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ChargeItemDefinition.PriceComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ChargeItemDefinition.PropertyGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ChargeItemStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ChargeItemStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Claim'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Accident'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.CareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Detail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Diagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Insurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Payee'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Procedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.Related'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.SubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Claim.SupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimProcessingCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimProcessingCodes-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ClaimResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.AddItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Adjudication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Detail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Detail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Error'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Insurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Payment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.ProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.SubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.SubDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClaimResponse.Total'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ClinicalImpression'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalImpression.Finding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalImpression.Investigation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalImpressionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ClinicalImpressionStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('code'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('code-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeableConcept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSearchSupport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSearchSupport-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CodeSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystem.Concept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystem.Designation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystem.Filter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystem.Property'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystem.Property1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystemContentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystemContentMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystemHierarchyMeaning'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CodeSystemHierarchyMeaning-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Coding'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Communication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Communication.Payload'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CommunicationRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CommunicationRequest.Payload'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CompartmentDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompartmentDefinition.Resource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompartmentType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompartmentType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Composition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Composition.Attester'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Composition.Event'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Composition.RelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Composition.Section'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompositionAttestationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompositionAttestationMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompositionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CompositionStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ConceptMap'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.DependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.Element'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.Group'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.Target'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMap.Unmapped'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMapEquivalence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMapEquivalence-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMapGroupUnmappedMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConceptMapGroupUnmappedMode-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Condition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Condition.Evidence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Condition.Stage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionalDeleteStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionalDeleteStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionalReadStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConditionalReadStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Consent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Consent.Actor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Consent.Data'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Consent.Policy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Consent.Provision'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Consent.Verification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConsentDataMeaning'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConsentDataMeaning-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConsentProvisionType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConsentProvisionType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConsentState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConsentState-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConstraintSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ConstraintSeverity-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactPoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactPointSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactPointSystem-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactPointUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContactPointUse-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Contract'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Action'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Answer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Asset'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.ContentDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Context'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Friendly'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Legal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Offer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Party'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Rule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.SecurityLabel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Signer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Subject'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.Term'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contract.ValuedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContractResourcePublicationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContractResourcePublicationStatusCodes-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContractResourceStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContractResourceStatusCodes-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Contributor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContributorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ContributorType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Count'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Coverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Coverage.Class'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Coverage.CostToBeneficiary'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Coverage.Exception'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityRequest.Diagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityRequest.Insurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityRequest.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityRequest.SupportingInfo'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityResponse.Benefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityResponse.Error'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityResponse.Insurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('CoverageEligibilityResponse.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DataRequirement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DataRequirement.CodeFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DataRequirement.DateFilter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DataRequirement.Sort'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('date'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('date-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('dateTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('dateTime-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DaysOfWeek'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DaysOfWeek-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('decimal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('decimal-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DetectedIssue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DetectedIssue.Evidence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DetectedIssue.Mitigation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DetectedIssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DetectedIssueSeverity-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Device'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Device.DeviceName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Device.Property'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Device.Specialization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Device.UdiCarrier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Device.Version'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DeviceDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.Capability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.DeviceName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.Material'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.Property'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.Specialization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceDefinition.UdiDeviceIdentifier'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DeviceMetric'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetric.Calibration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCalibrationState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCalibrationState-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCalibrationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCalibrationType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricCategory-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricColor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricColor-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricOperationalStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceMetricOperationalStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceNameType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceNameType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DeviceRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceRequest.Parameter'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DeviceUseStatement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceUseStatementStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DeviceUseStatementStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DiagnosticReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticReport.Media'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiagnosticReportStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiscriminatorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DiscriminatorType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Distance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DocumentManifest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentManifest.Related'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentMode-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('DocumentReference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReference.Content'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReference.Context'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReference.RelatesTo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReferenceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentReferenceStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentRelationshipType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DocumentRelationshipType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('DomainResource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Dosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Dosage.DoseAndRate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Duration'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EffectEvidenceSynthesis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EffectEvidenceSynthesis.Certainty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EffectEvidenceSynthesis.CertaintySubcomponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EffectEvidenceSynthesis.EffectEstimate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EffectEvidenceSynthesis.PrecisionEstimate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EffectEvidenceSynthesis.ResultsByExposure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EffectEvidenceSynthesis.SampleSize'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Element'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Base'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Binding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Constraint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Discriminator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Example'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Mapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Slicing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ElementDefinition.Type'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EligibilityRequestPurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EligibilityRequestPurpose-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EligibilityResponsePurpose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EligibilityResponsePurpose-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EnableWhenBehavior'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EnableWhenBehavior-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Encounter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.ClassHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.Diagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.Hospitalization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.Location'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Encounter.StatusHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterLocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterLocationStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EncounterStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Endpoint'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EndpointStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EndpointStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EnrollmentRequest'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EnrollmentResponse'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EpisodeOfCare'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EpisodeOfCare.Diagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EpisodeOfCare.StatusHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EpisodeOfCareStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EpisodeOfCareStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventCapabilityMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventCapabilityMode-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EventDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventTiming'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EventTiming-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Evidence'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('EvidenceVariable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EvidenceVariable.Characteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EvidenceVariableType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('EvidenceVariableType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ExampleScenario'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenario.Actor'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenario.Alternative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenario.ContainedInstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenario.Instance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenario.Operation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenario.Process'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenario.Step'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenario.Version'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenarioActorType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExampleScenarioActorType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Accident'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.AddItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Adjudication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.BenefitBalance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.CareTeam'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Detail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Detail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Diagnosis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Financial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Insurance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Payee'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Payment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Procedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.ProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Related'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.SubDetail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.SubDetail1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.SupportingInfo'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefit.Total'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefitStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExplanationOfBenefitStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExposureState'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExposureState-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Expression'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExpressionLanguage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExpressionLanguage-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Extension'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExtensionContextType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ExtensionContextType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FamilyHistoryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FamilyHistoryStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('FamilyMemberHistory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FamilyMemberHistory.Condition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FHIRDeviceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FHIRDeviceStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FHIRSubstanceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FHIRSubstanceStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FHIRVersion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FHIRVersion-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FilterOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FilterOperator-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FinancialResourceStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FinancialResourceStatusCodes-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Flag'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FlagStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('FlagStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Goal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Goal.Target'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GoalLifecycleStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GoalLifecycleStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GraphCompartmentRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GraphCompartmentRule-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GraphCompartmentUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GraphCompartmentUse-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('GraphDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GraphDefinition.Compartment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GraphDefinition.Link'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GraphDefinition.Target'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Group'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Group.Characteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Group.Member'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GroupMeasure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GroupMeasure-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GroupType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GroupType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('GuidanceResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GuidanceResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GuidanceResponseStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GuidePageGeneration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GuidePageGeneration-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GuideParameterCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('GuideParameterCode-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('HealthcareService'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HealthcareService.AvailableTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HealthcareService.Eligibility'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HealthcareService.NotAvailable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HTTPVerb'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HTTPVerb-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('HumanName'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('id'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('id-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Identifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IdentifierUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IdentifierUse-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IdentityAssuranceLevel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IdentityAssuranceLevel-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ImagingStudy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingStudy.Instance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingStudy.Performer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingStudy.Series'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingStudyStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImagingStudyStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Immunization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Immunization.Education'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Immunization.Performer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Immunization.ProtocolApplied'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Immunization.Reaction'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ImmunizationEvaluation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationEvaluationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationEvaluationStatusCodes-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ImmunizationRecommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationRecommendation.DateCriterion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationRecommendation.Recommendation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImmunizationStatusCodes-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ImplementationGuide'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Definition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.DependsOn'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Global'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Grouping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Manifest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Page'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Page1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Resource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Resource1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ImplementationGuide.Template'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('instant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('instant-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('InsurancePlan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InsurancePlan.Benefit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InsurancePlan.Benefit1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InsurancePlan.Contact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InsurancePlan.Cost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InsurancePlan.Coverage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InsurancePlan.GeneralCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InsurancePlan.Limit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InsurancePlan.Plan'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InsurancePlan.SpecificCost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('integer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('integer-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Invoice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Invoice.LineItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Invoice.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Invoice.PriceComponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InvoicePriceComponentType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InvoicePriceComponentType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InvoiceStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('InvoiceStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IssueSeverity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IssueSeverity-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IssueType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('IssueType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Library'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Linkage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Linkage.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LinkageType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LinkageType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LinkType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LinkType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('List'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('List.Entry'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ListMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ListStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ListStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Location'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Location.HoursOfOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Location.Position'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LocationMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LocationMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LocationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('LocationStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('markdown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('markdown-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MarketingStatus'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Measure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Measure.Component'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Measure.Group'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Measure.Population'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Measure.Stratifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Measure.SupplementalData'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MeasureReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReport.Component'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReport.Group'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReport.Population'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReport.Population1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReport.Stratifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReport.Stratum'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReportStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReportType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MeasureReportType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Media'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Medication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Medication.Batch'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Medication.Ingredient'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationAdministration.Dosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationAdministration.Performer'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationDispense.Performer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationDispense.Substitution'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.AdministrationGuidelines'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.Cost'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.Dosage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.DrugCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.Ingredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.Kinetics'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.MaxDispense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.MedicineClassification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.MonitoringProgram'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.Monograph'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.Packaging'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.PatientCharacteristics'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.Regulatory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.RelatedMedicationKnowledge'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.Schedule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationKnowledge.Substitution'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationRequest.DispenseRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationRequest.InitialFill'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationRequest.Substitution'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('medicationRequestIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('medicationRequestIntent-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('medicationrequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('medicationrequestStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicationStatement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationStatusCodes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicationStatusCodes-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicinalProduct'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProduct.CountryLanguage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProduct.ManufacturingBusinessOperation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProduct.Name'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProduct.NamePart'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProduct.SpecialDesignation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicinalProductAuthorization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductAuthorization.JurisdictionalAuthorization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductAuthorization.Procedure'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicinalProductContraindication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductContraindication.OtherTherapy'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicinalProductIndication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductIndication.OtherTherapy'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicinalProductIngredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductIngredient.ReferenceStrength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductIngredient.SpecifiedSubstance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductIngredient.Strength'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductIngredient.Substance'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicinalProductInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductInteraction.Interactant'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicinalProductManufactured'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicinalProductPackaged'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductPackaged.BatchIdentifier'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductPackaged.PackageItem'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicinalProductPharmaceutical'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductPharmaceutical.Characteristics'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductPharmaceutical.RouteOfAdministration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductPharmaceutical.TargetSpecies'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MedicinalProductPharmaceutical.WithdrawalPeriod'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MedicinalProductUndesirableEffect'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MessageDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageDefinition.AllowedResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageDefinition.Focus'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MessageHeader'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageHeader.Destination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageHeader.Response'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageHeader.Source'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('messageheaderResponseRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('messageheaderResponseRequest-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageSignificanceCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MessageSignificanceCategory-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Meta'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('MolecularSequence'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MolecularSequence.Inner'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MolecularSequence.Outer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MolecularSequence.Quality'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MolecularSequence.ReferenceSeq'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MolecularSequence.Repository'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MolecularSequence.Roc'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MolecularSequence.StructureVariant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('MolecularSequence.Variant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Money'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NameUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NameUse-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('NamingSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NamingSystem.UniqueId'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NamingSystemIdentifierType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NamingSystemIdentifierType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NamingSystemType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NamingSystemType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Narrative'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NarrativeStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NarrativeStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NoteType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NoteType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('NutritionOrder'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.Administration'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.EnteralFormula'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.Nutrient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.OralDiet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.Supplement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('NutritionOrder.Texture'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Observation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Observation.Component'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Observation.ReferenceRange'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationDataType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ObservationDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationDefinition.QualifiedInterval'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationDefinition.QuantitativeDetails'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationRangeCategory'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationRangeCategory-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ObservationStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('oid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('oid-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('OperationDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationDefinition.Binding'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationDefinition.Overload'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationDefinition.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationDefinition.ReferencedFrom'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationKind-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('OperationOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationOutcome.Issue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationParameterUse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('OperationParameterUse-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Organization'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Organization.Contact'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('OrganizationAffiliation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('orientationType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('orientationType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ParameterDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Parameters'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Parameters.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ParticipantRequired'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ParticipantRequired-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ParticipationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ParticipationStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Patient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Patient.Communication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Patient.Contact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Patient.Link'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('PaymentNotice'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('PaymentReconciliation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PaymentReconciliation.Detail'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PaymentReconciliation.ProcessNote'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Period'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Person'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Person.Link'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('PlanDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.Action'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.Condition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.DynamicValue'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.Goal'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.RelatedAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PlanDefinition.Target'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Population'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('positiveInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('positiveInt-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Practitioner'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Practitioner.Qualification'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('PractitionerRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PractitionerRole.AvailableTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PractitionerRole.NotAvailable'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Procedure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Procedure.FocalDevice'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Procedure.Performer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProdCharacteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProductShelfLife'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PropertyRepresentation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PropertyRepresentation-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PropertyType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PropertyType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Provenance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Provenance.Agent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Provenance.Entity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProvenanceEntityRole'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ProvenanceEntityRole-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PublicationStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('PublicationStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('qualityType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('qualityType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Quantity'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuantityComparator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuantityComparator-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Questionnaire'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Questionnaire.AnswerOption'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Questionnaire.EnableWhen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Questionnaire.Initial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Questionnaire.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireItemOperator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireItemOperator-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireItemType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireItemType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('QuestionnaireResponse'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireResponse.Answer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireResponse.Item'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireResponseStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('QuestionnaireResponseStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Range'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Ratio'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Reference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ReferenceHandlingPolicy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ReferenceHandlingPolicy-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ReferenceVersionRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ReferenceVersionRules-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RelatedArtifact'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RelatedArtifactType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RelatedArtifactType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('RelatedPerson'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RelatedPerson.Communication'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RemittanceOutcome'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RemittanceOutcome-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('repositoryType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('repositoryType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('RequestGroup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestGroup.Action'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestGroup.Condition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestGroup.RelatedAction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestIntent-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestPriority'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestPriority-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestResourceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestResourceType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RequestStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ResearchDefinition'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ResearchElementDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResearchElementDefinition.Characteristic'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResearchElementType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResearchElementType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ResearchStudy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResearchStudy.Arm'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResearchStudy.Objective'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResearchStudyStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResearchStudyStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ResearchSubject'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResearchSubjectStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResearchSubjectStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Resource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceContainer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceVersionPolicy'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResourceVersionPolicy-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResponseType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ResponseType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RestfulCapabilityMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RestfulCapabilityMode-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('RiskAssessment'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RiskAssessment.Prediction'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('RiskEvidenceSynthesis'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RiskEvidenceSynthesis.Certainty'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RiskEvidenceSynthesis.CertaintySubcomponent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RiskEvidenceSynthesis.PrecisionEstimate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RiskEvidenceSynthesis.RiskEstimate'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('RiskEvidenceSynthesis.SampleSize'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SampledData'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SampledDataDataType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SampledDataDataType-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Schedule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchComparator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchComparator-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchEntryMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchEntryMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchModifierCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchModifierCode-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SearchParameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchParameter.Component'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchParamType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SearchParamType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('sequenceType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('sequenceType-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ServiceRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Signature'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SlicingRules'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SlicingRules-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Slot'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SlotStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SlotStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SortDirection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SortDirection-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SPDXLicense'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SPDXLicense-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Specimen'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Specimen.Collection'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Specimen.Container'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Specimen.Processing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenContainedPreference'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenContainedPreference-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SpecimenDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenDefinition.Additive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenDefinition.Container'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenDefinition.Handling'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenDefinition.TypeTested'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SpecimenStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('status'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('status-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('strandType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('strandType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('string'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('string-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('StructureDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinition.Context'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinition.Differential'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinition.Mapping'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinition.Snapshot'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinitionKind'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureDefinitionKind-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('StructureMap'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMap.Dependent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMap.Group'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMap.Input'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMap.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMap.Rule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMap.Source'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMap.Structure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMap.Target'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapContextType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapContextType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapGroupTypeMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapGroupTypeMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapInputMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapInputMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapModelMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapModelMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapSourceListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapSourceListMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapTargetListMode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapTargetListMode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapTransform'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('StructureMapTransform-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Subscription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Subscription.Channel'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionChannelType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionChannelType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubscriptionStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Substance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Substance.Ingredient'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Substance.Instance'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceAmount'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceAmount.ReferenceRange'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SubstanceNucleicAcid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceNucleicAcid.Linkage'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceNucleicAcid.Subunit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceNucleicAcid.Sugar'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SubstancePolymer'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstancePolymer.DegreeOfPolymerisation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstancePolymer.MonomerSet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstancePolymer.Repeat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstancePolymer.RepeatUnit'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstancePolymer.StartingMaterial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstancePolymer.StructuralRepresentation'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SubstanceProtein'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceProtein.Subunit'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SubstanceReferenceInformation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceReferenceInformation.Classification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceReferenceInformation.Gene'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceReferenceInformation.GeneElement'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceReferenceInformation.Target'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SubstanceSourceMaterial'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSourceMaterial.Author'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSourceMaterial.FractionDescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSourceMaterial.Hybrid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSourceMaterial.Organism'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSourceMaterial.OrganismGeneral'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSourceMaterial.PartDescription'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SubstanceSpecification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSpecification.Code'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSpecification.Isotope'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSpecification.Moiety'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSpecification.MolecularWeight'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSpecification.Name'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSpecification.Official'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSpecification.Property'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSpecification.Relationship'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSpecification.Representation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SubstanceSpecification.Structure'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SupplyDelivery'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyDelivery.SuppliedItem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyDeliveryStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyDeliveryStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('SupplyRequest'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyRequest.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyRequestStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SupplyRequestStatus-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SystemRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('SystemRestfulInteraction-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('Task'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Task.Input'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Task.Output'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Task.Restriction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TaskIntent'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TaskIntent-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TaskStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TaskStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.Closure'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.CodeSystem'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.Expansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.Filter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.Implementation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.Software'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.Translation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.ValidateCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TerminologyCapabilities.Version'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('TestReport'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Action'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Action1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Action2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Assert'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Operation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Participant'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Setup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Teardown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReport.Test'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReportActionResult'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReportActionResult-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReportParticipantType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReportParticipantType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReportResult'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReportResult-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReportStatus'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestReportStatus-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('TestScript'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Action'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Action1'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Action2'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Assert'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Capability'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Destination'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Fixture'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Link'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Metadata'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Operation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Origin'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.RequestHeader'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Setup'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Teardown'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Test'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScript.Variable'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScriptRequestMethodCode'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TestScriptRequestMethodCode-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('time'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('time-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Timing'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Timing.Repeat'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TriggerDefinition'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TriggerType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TriggerType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TypeDerivationRule'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TypeDerivationRule-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TypeRestfulInteraction'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('TypeRestfulInteraction-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('UDIEntryType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('UDIEntryType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('UnitsOfTime'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('UnitsOfTime-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('unsignedInt'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('unsignedInt-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('uri'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('uri-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('url'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('url-primitive'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('UsageContext'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Use'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('Use-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('uuid'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('uuid-primitive'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('ValueSet'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Compose'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Concept'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Contains'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Designation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Expansion'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Filter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Include'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('ValueSet.Parameter'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VariableType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VariableType-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('vConfidentialityClassification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('vConfidentialityClassification-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('VerificationResult'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VerificationResult.Attestation'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VerificationResult.PrimarySource'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VerificationResult.Validator'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VisionBase'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VisionBase-list'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VisionEyes'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VisionEyes-list'));
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource('VisionPrescription'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VisionPrescription.LensSpecification'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('VisionPrescription.Prism'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('XPathUsageType'));
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource('XPathUsageType-list'));
    }

    public function testIsContainableResourceWithInstance()
    {
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAccount;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAccountStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRAccountStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionCardinalityBehavior;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRActionCardinalityBehaviorList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionConditionKind;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRActionConditionKindList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionGroupingBehavior;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRActionGroupingBehaviorList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionParticipantType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRActionParticipantTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionPrecheckBehavior;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRActionPrecheckBehaviorList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionRelationshipType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRActionRelationshipTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionRequiredBehavior;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRActionRequiredBehaviorList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionSelectionBehavior;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRActionSelectionBehaviorList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRActivityDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAddress;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAddressType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRAddressTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAddressUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRAddressUseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAdministrativeGender;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRAdministrativeGenderList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAdverseEvent;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAdverseEventActuality;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRAdverseEventActualityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity\FHIRAge;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAggregationMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRAggregationModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAllergyIntoleranceCategory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRAllergyIntoleranceCategoryList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAllergyIntoleranceCriticality;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRAllergyIntoleranceCriticalityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAllergyIntoleranceSeverity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRAllergyIntoleranceSeverityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAllergyIntoleranceType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRAllergyIntoleranceTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAnnotation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAppointment;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAppointmentStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRAppointmentStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAssertionDirectionType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRAssertionDirectionTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAssertionOperatorType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRAssertionOperatorTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAssertionResponseTypes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRAssertionResponseTypesList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAttachment;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAuditEvent;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAuditEventAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRAuditEventActionList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAuditEventAgentNetworkType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRAuditEventAgentNetworkTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAuditEventOutcome;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRAuditEventOutcomeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBase64Binary;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRBase64BinaryPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRBasic;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRBinary;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBindingStrength;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRBindingStrengthList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductManipulation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProcessing;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductStorage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBiologicallyDerivedProductCategory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRBiologicallyDerivedProductCategoryList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBiologicallyDerivedProductStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRBiologicallyDerivedProductStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBiologicallyDerivedProductStorageScale;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRBiologicallyDerivedProductStorageScaleList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRBodyStructure;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBoolean;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRBooleanPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRBundle;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBundleType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRBundleTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCanonical;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRCanonicalPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCapabilityStatementKind;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRCapabilityStatementKindList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCarePlan;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCarePlanActivityKind;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRCarePlanActivityKindList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCarePlanActivityStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRCarePlanActivityStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCarePlanIntent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRCarePlanIntentList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCareTeam;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCareTeamStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRCareTeamStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCatalogEntry;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCatalogEntry\FHIRCatalogEntryRelatedEntry;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCatalogEntryRelationType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRCatalogEntryRelationTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRChargeItem;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRChargeItemDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPriceComponent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRChargeItemStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRChargeItemStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRClaim;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRClaimProcessingCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRClaimProcessingCodesList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRClaimResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRClinicalImpression;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRClinicalImpressionStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRClinicalImpressionStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRCodePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCodeableConcept;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCodeSearchSupport;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRCodeSearchSupportList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCodeSystem;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCodeSystemContentMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRCodeSystemContentModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCodeSystemHierarchyMeaning;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRCodeSystemHierarchyMeaningList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCoding;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCommunication;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCompartmentType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRCompartmentTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRComposition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCompositionAttestationMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRCompositionAttestationModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCompositionStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRCompositionStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRConceptMap;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConceptMapEquivalence;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRConceptMapEquivalenceList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConceptMapGroupUnmappedMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRConceptMapGroupUnmappedModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCondition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConditionalDeleteStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRConditionalDeleteStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConditionalReadStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRConditionalReadStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRConsent;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConsentDataMeaning;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRConsentDataMeaningList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConsentProvisionType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRConsentProvisionTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConsentState;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRConsentStateList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConstraintSeverity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRConstraintSeverityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContactDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContactPoint;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContactPointSystem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRContactPointSystemList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContactPointUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRContactPointUseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRContract;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContractResourcePublicationStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRContractResourcePublicationStatusCodesList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContractResourceStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRContractResourceStatusCodesList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContributor;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContributorType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRContributorTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity\FHIRCount;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCoverage;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDataRequirement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDataRequirement\FHIRDataRequirementSort;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRDatePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDateTime;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRDateTimePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDaysOfWeek;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRDaysOfWeekList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDecimal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRDecimalPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDetectedIssue;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDetectedIssueSeverity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRDetectedIssueSeverityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDevice;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceDeviceName;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceSpecialization;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCapability;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionSpecialization;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceMetric;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricCalibrationState;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricCalibrationStateList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricCalibrationType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricCalibrationTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricCategory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricCategoryList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricColor;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricColorList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricOperationalStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricOperationalStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceNameType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRDeviceNameTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceUseStatementStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRDeviceUseStatementStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDiagnosticReportStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRDiagnosticReportStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDiscriminatorType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRDiscriminatorTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity\FHIRDistance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDocumentManifest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDocumentMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRDocumentModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDocumentReference;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDocumentReferenceStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRDocumentReferenceStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDocumentRelationshipType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRDocumentRelationshipTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDosage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDosage\FHIRDosageDoseAndRate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity\FHIRDuration;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREffectEvidenceSynthesis;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisCertainty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisCertaintySubcomponent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisEffectEstimate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisPrecisionEstimate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisResultsByExposure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisSampleSize;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionBase;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionBinding;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionConstraint;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionExample;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionMapping;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionSlicing;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREligibilityRequestPurpose;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIREligibilityRequestPurposeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREligibilityResponsePurpose;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIREligibilityResponsePurposeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREnableWhenBehavior;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIREnableWhenBehaviorList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREncounter;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREncounterLocationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIREncounterLocationStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREncounterStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIREncounterStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREndpoint;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREndpointStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIREndpointStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREpisodeOfCareStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIREpisodeOfCareStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREventCapabilityMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIREventCapabilityModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREventDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREventStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIREventStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREventTiming;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIREventTimingList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREvidence;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREvidenceVariable;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREvidenceVariableType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIREvidenceVariableTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRExampleScenario;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExampleScenarioActorType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRExampleScenarioActorTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExplanationOfBenefitStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRExplanationOfBenefitStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExposureState;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRExposureStateList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExpression;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExpressionLanguage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRExpressionLanguageList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExtension;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExtensionContextType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRExtensionContextTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFamilyHistoryStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRFamilyHistoryStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFHIRDeviceStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRFHIRDeviceStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFHIRSubstanceStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRFHIRSubstanceStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFHIRVersion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRFHIRVersionList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFilterOperator;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRFilterOperatorList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFinancialResourceStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRFinancialResourceStatusCodesList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRFlag;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFlagStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRFlagStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGoal;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGoalLifecycleStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRGoalLifecycleStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGraphCompartmentRule;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRGraphCompartmentRuleList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGraphCompartmentUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRGraphCompartmentUseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGraphDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGroup;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGroupMeasure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRGroupMeasureList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGroupType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRGroupTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGuidanceResponseStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRGuidanceResponseStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGuidePageGeneration;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRGuidePageGenerationList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGuideParameterCode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRGuideParameterCodeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRHealthcareService;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRHTTPVerb;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRHTTPVerbList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRHumanName;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRId;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRIdPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIdentifier;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIdentifierUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRIdentifierUseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIdentityAssuranceLevel;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRIdentityAssuranceLevelList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImagingStudy;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRImagingStudyStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRImagingStudyStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImmunization;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationEducation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRImmunizationEvaluationStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRImmunizationEvaluationStatusCodesList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRImmunizationStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRImmunizationStatusCodesList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImplementationGuide;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRInstant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRInstantPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRInsurancePlan;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRInteger;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRIntegerPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRInvoice;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoicePriceComponent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRInvoicePriceComponentType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRInvoicePriceComponentTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRInvoiceStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRInvoiceStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIssueSeverity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRIssueSeverityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIssueType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRIssueTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRLibrary;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRLinkage;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRLinkageType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRLinkageTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRLinkType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRLinkTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRList;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRListMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRListModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRListStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRListStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRLocation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationHoursOfOperation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRLocationMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRLocationModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRLocationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRLocationStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMarkdown;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRMarkdownPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMarketingStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMeasure;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMeasureReport;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMeasureReportStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRMeasureReportStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMeasureReportType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRMeasureReportTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedia;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedication;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationDispense;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationKnowledge;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeAdministrationGuidelines;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeKinetics;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristics;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSchedule;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMedicationRequestIntent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRMedicationRequestIntentList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMedicationrequestStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRMedicationrequestStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationStatement;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMedicationStatusCodes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRMedicationStatusCodesList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProduct;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductCountryLanguage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductManufacturingBusinessOperation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductName;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductNamePart;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductSpecialDesignation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductAuthorization;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductAuthorization\FHIRMedicinalProductAuthorizationJurisdictionalAuthorization;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductAuthorization\FHIRMedicinalProductAuthorizationProcedure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductContraindication;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductContraindication\FHIRMedicinalProductContraindicationOtherTherapy;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductIndication;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIndication\FHIRMedicinalProductIndicationOtherTherapy;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductIngredient;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIngredient\FHIRMedicinalProductIngredientReferenceStrength;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIngredient\FHIRMedicinalProductIngredientSpecifiedSubstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIngredient\FHIRMedicinalProductIngredientStrength;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIngredient\FHIRMedicinalProductIngredientSubstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductInteraction;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductInteraction\FHIRMedicinalProductInteractionInteractant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductManufactured;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductPackaged;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPackaged\FHIRMedicinalProductPackagedBatchIdentifier;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPackaged\FHIRMedicinalProductPackagedPackageItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductPharmaceutical;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPharmaceutical\FHIRMedicinalProductPharmaceuticalCharacteristics;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPharmaceutical\FHIRMedicinalProductPharmaceuticalRouteOfAdministration;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPharmaceutical\FHIRMedicinalProductPharmaceuticalTargetSpecies;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPharmaceutical\FHIRMedicinalProductPharmaceuticalWithdrawalPeriod;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductUndesirableEffect;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMessageDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMessageHeader;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMessageheaderResponseRequest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRMessageheaderResponseRequestList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMessageSignificanceCategory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRMessageSignificanceCategoryList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMeta;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMolecularSequence;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceInner;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceOuter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceQuality;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceReferenceSeq;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRepository;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRoc;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStructureVariant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceVariant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMoney;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNameUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRNameUseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRNamingSystem;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNamingSystemIdentifierType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRNamingSystemIdentifierTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNamingSystemType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRNamingSystemTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNarrative;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNarrativeStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRNarrativeStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNoteType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRNoteTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRNutritionOrder;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRObservation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRObservationDataType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRObservationDataTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRObservationDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedInterval;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQuantitativeDetails;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRObservationRangeCategory;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRObservationRangeCategoryList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRObservationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRObservationStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIROid;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIROidPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROperationDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIROperationKind;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIROperationKindList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROperationOutcome;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIROperationParameterUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIROperationParameterUseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROrganization;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIROrientationType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIROrientationTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRParameterDefinition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRParameters;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRParticipantRequired;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRParticipantRequiredList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRParticipationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRParticipationStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPatient;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPaymentNotice;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPeriod;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPerson;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPlanDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPopulation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPositiveInt;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRPositiveIntPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPractitioner;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPractitionerRole;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRProcedure;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProdCharacteristic;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProductShelfLife;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPropertyRepresentation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRPropertyRepresentationList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPropertyType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRPropertyTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRProvenance;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRProvenanceEntityRole;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRProvenanceEntityRoleList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPublicationStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRPublicationStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQualityType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRQualityTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantityComparator;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRQuantityComparatorList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRQuestionnaire;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuestionnaireItemOperator;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRQuestionnaireItemOperatorList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuestionnaireItemType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRQuestionnaireItemTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuestionnaireResponseStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRQuestionnaireResponseStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRange;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRatio;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRReference;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRReferenceHandlingPolicy;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRReferenceHandlingPolicyList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRReferenceVersionRules;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRReferenceVersionRulesList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRelatedArtifact;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRelatedArtifactType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRRelatedArtifactTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRelatedPerson;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRemittanceOutcome;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRRemittanceOutcomeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRepositoryType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRRepositoryTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRequestGroup;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRequestIntent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRRequestIntentList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRequestPriority;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRRequestPriorityList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRequestResourceType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRRequestResourceTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRequestStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRRequestStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchElementDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRResearchElementDefinition\FHIRResearchElementDefinitionCharacteristic;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResearchElementType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResearchElementTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchStudy;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResearchStudyStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResearchStudyStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchSubject;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResearchSubjectStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResearchSubjectStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResourceContainer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResourceType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResourceTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResourceVersionPolicy;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResourceVersionPolicyList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResponseType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResponseTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRestfulCapabilityMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRRestfulCapabilityModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRiskAssessment;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRiskEvidenceSynthesis;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisCertainty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisCertaintySubcomponent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisPrecisionEstimate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisRiskEstimate;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisSampleSize;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSampledData;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSampledDataDataType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRSampledDataDataTypePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSchedule;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSearchComparator;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRSearchComparatorList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSearchEntryMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRSearchEntryModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSearchModifierCode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRSearchModifierCodeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSearchParameter;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSearchParamType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRSearchParamTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSequenceType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRSequenceTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRServiceRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSignature;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSlicingRules;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRSlicingRulesList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSlot;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSlotStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRSlotStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSortDirection;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRSortDirectionList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSPDXLicense;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRSPDXLicenseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSpecimen;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSpecimenContainedPreference;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRSpecimenContainedPreferenceList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSpecimenDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSpecimenStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRSpecimenStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStrandType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRStrandTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRString;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRStringPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRStructureDefinition;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureDefinitionKind;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRStructureDefinitionKindList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRStructureMap;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapContextType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapContextTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapGroupTypeMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapGroupTypeModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapInputMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapInputModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapModelMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapModelModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapSourceListMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapSourceListModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapTargetListMode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapTargetListModeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapTransform;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapTransformList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubscription;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSubscriptionChannelType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRSubscriptionChannelTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSubscriptionStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRSubscriptionStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstance;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceAmount;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceAmount\FHIRSubstanceAmountReferenceRange;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceNucleicAcid;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidLinkage;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSubunit;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSugar;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstancePolymer;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerDegreeOfPolymerisation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerMonomerSet;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeat;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeatUnit;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStartingMaterial;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStructuralRepresentation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceProtein;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceProtein\FHIRSubstanceProteinSubunit;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceReferenceInformation;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationClassification;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGene;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGeneElement;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationTarget;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceSourceMaterial;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialAuthor;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialFractionDescription;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialHybrid;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganism;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganismGeneral;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialPartDescription;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceSpecification;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationCode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationIsotope;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationMoiety;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationMolecularWeight;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationName;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationOfficial;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationProperty;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationRelationship;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationRepresentation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationStructure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSupplyDeliveryStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRSupplyDeliveryStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSupplyRequest;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSupplyRequestStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRSupplyRequestStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSystemRestfulInteraction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRSystemRestfulInteractionList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTask;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTaskIntent;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRTaskIntentList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTaskStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRTaskStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTerminologyCapabilities;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTestReport;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestReportActionResult;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRTestReportActionResultList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestReportParticipantType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRTestReportParticipantTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestReportResult;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRTestReportResultList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestReportStatus;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRTestReportStatusList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTestScript;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestScriptRequestMethodCode;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRTestScriptRequestMethodCodeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTime;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRTimePrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTiming;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTiming\FHIRTimingRepeat;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTriggerDefinition;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTriggerType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRTriggerTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTypeDerivationRule;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRTypeDerivationRuleList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTypeRestfulInteraction;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRTypeRestfulInteractionList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUDIEntryType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRUDIEntryTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUnitsOfTime;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRUnitsOfTimeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUnsignedInt;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRUnsignedIntPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUri;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRUriPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUrl;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRUrlPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUsageContext;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUse;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRUseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUuid;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRUuidPrimitive;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRValueSet;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRVariableType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRVariableTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRVConfidentialityClassification;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRVConfidentialityClassificationList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRVerificationResult;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRVisionBase;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRVisionBaseList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRVisionEyes;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRVisionEyesList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRVisionPrescription;
        $this->assertTrue(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRXPathUsageType;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\R4\FHIRXPathUsageTypeList;
        $this->assertFalse(PHPFHIRTypeMap::isContainableResource($type));
    }

    public function testGetTypeClass()
    {
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRAccountStatusList', PHPFHIRTypeMap::getTypeClass('AccountStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRActionCardinalityBehaviorList', PHPFHIRTypeMap::getTypeClass('ActionCardinalityBehavior-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRActionConditionKindList', PHPFHIRTypeMap::getTypeClass('ActionConditionKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRActionGroupingBehaviorList', PHPFHIRTypeMap::getTypeClass('ActionGroupingBehavior-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRActionParticipantTypeList', PHPFHIRTypeMap::getTypeClass('ActionParticipantType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRActionPrecheckBehaviorList', PHPFHIRTypeMap::getTypeClass('ActionPrecheckBehavior-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRActionRelationshipTypeList', PHPFHIRTypeMap::getTypeClass('ActionRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRActionRequiredBehaviorList', PHPFHIRTypeMap::getTypeClass('ActionRequiredBehavior-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRActionSelectionBehaviorList', PHPFHIRTypeMap::getTypeClass('ActionSelectionBehavior-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRAddressTypeList', PHPFHIRTypeMap::getTypeClass('AddressType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRAddressUseList', PHPFHIRTypeMap::getTypeClass('AddressUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRAdministrativeGenderList', PHPFHIRTypeMap::getTypeClass('AdministrativeGender-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRAdverseEventActualityList', PHPFHIRTypeMap::getTypeClass('AdverseEventActuality-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRAggregationModeList', PHPFHIRTypeMap::getTypeClass('AggregationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRAllergyIntoleranceCategoryList', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRAllergyIntoleranceCriticalityList', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceCriticality-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRAllergyIntoleranceSeverityList', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRAllergyIntoleranceTypeList', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRAppointmentStatusList', PHPFHIRTypeMap::getTypeClass('AppointmentStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRAssertionDirectionTypeList', PHPFHIRTypeMap::getTypeClass('AssertionDirectionType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRAssertionOperatorTypeList', PHPFHIRTypeMap::getTypeClass('AssertionOperatorType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRAssertionResponseTypesList', PHPFHIRTypeMap::getTypeClass('AssertionResponseTypes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRAuditEventActionList', PHPFHIRTypeMap::getTypeClass('AuditEventAction-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRAuditEventAgentNetworkTypeList', PHPFHIRTypeMap::getTypeClass('AuditEventAgentNetworkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRAuditEventOutcomeList', PHPFHIRTypeMap::getTypeClass('AuditEventOutcome-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRBase64BinaryPrimitive', PHPFHIRTypeMap::getTypeClass('base64Binary-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRBindingStrengthList', PHPFHIRTypeMap::getTypeClass('BindingStrength-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRBiologicallyDerivedProductCategoryList', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProductCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRBiologicallyDerivedProductStatusList', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProductStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRBiologicallyDerivedProductStorageScaleList', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProductStorageScale-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRBooleanPrimitive', PHPFHIRTypeMap::getTypeClass('boolean-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRBundleTypeList', PHPFHIRTypeMap::getTypeClass('BundleType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRCanonicalPrimitive', PHPFHIRTypeMap::getTypeClass('canonical-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRCapabilityStatementKindList', PHPFHIRTypeMap::getTypeClass('CapabilityStatementKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRCarePlanActivityKindList', PHPFHIRTypeMap::getTypeClass('CarePlanActivityKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRCarePlanActivityStatusList', PHPFHIRTypeMap::getTypeClass('CarePlanActivityStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRCarePlanIntentList', PHPFHIRTypeMap::getTypeClass('CarePlanIntent-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRCareTeamStatusList', PHPFHIRTypeMap::getTypeClass('CareTeamStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRCatalogEntryRelationTypeList', PHPFHIRTypeMap::getTypeClass('CatalogEntryRelationType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRChargeItemStatusList', PHPFHIRTypeMap::getTypeClass('ChargeItemStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRClaimProcessingCodesList', PHPFHIRTypeMap::getTypeClass('ClaimProcessingCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRClinicalImpressionStatusList', PHPFHIRTypeMap::getTypeClass('ClinicalImpressionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRCodePrimitive', PHPFHIRTypeMap::getTypeClass('code-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRCodeSearchSupportList', PHPFHIRTypeMap::getTypeClass('CodeSearchSupport-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRCodeSystemContentModeList', PHPFHIRTypeMap::getTypeClass('CodeSystemContentMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRCodeSystemHierarchyMeaningList', PHPFHIRTypeMap::getTypeClass('CodeSystemHierarchyMeaning-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRCompartmentTypeList', PHPFHIRTypeMap::getTypeClass('CompartmentType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRCompositionAttestationModeList', PHPFHIRTypeMap::getTypeClass('CompositionAttestationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRCompositionStatusList', PHPFHIRTypeMap::getTypeClass('CompositionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRConceptMapEquivalenceList', PHPFHIRTypeMap::getTypeClass('ConceptMapEquivalence-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRConceptMapGroupUnmappedModeList', PHPFHIRTypeMap::getTypeClass('ConceptMapGroupUnmappedMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRConditionalDeleteStatusList', PHPFHIRTypeMap::getTypeClass('ConditionalDeleteStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRConditionalReadStatusList', PHPFHIRTypeMap::getTypeClass('ConditionalReadStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRConsentDataMeaningList', PHPFHIRTypeMap::getTypeClass('ConsentDataMeaning-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRConsentProvisionTypeList', PHPFHIRTypeMap::getTypeClass('ConsentProvisionType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRConsentStateList', PHPFHIRTypeMap::getTypeClass('ConsentState-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRConstraintSeverityList', PHPFHIRTypeMap::getTypeClass('ConstraintSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRContactPointSystemList', PHPFHIRTypeMap::getTypeClass('ContactPointSystem-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRContactPointUseList', PHPFHIRTypeMap::getTypeClass('ContactPointUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRContractResourcePublicationStatusCodesList', PHPFHIRTypeMap::getTypeClass('ContractResourcePublicationStatusCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRContractResourceStatusCodesList', PHPFHIRTypeMap::getTypeClass('ContractResourceStatusCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRContributorTypeList', PHPFHIRTypeMap::getTypeClass('ContributorType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRDatePrimitive', PHPFHIRTypeMap::getTypeClass('date-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRDateTimePrimitive', PHPFHIRTypeMap::getTypeClass('dateTime-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRDaysOfWeekList', PHPFHIRTypeMap::getTypeClass('DaysOfWeek-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRDecimalPrimitive', PHPFHIRTypeMap::getTypeClass('decimal-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRDetectedIssueSeverityList', PHPFHIRTypeMap::getTypeClass('DetectedIssueSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricCalibrationStateList', PHPFHIRTypeMap::getTypeClass('DeviceMetricCalibrationState-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricCalibrationTypeList', PHPFHIRTypeMap::getTypeClass('DeviceMetricCalibrationType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricCategoryList', PHPFHIRTypeMap::getTypeClass('DeviceMetricCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricColorList', PHPFHIRTypeMap::getTypeClass('DeviceMetricColor-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRDeviceMetricOperationalStatusList', PHPFHIRTypeMap::getTypeClass('DeviceMetricOperationalStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRDeviceNameTypeList', PHPFHIRTypeMap::getTypeClass('DeviceNameType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRDeviceUseStatementStatusList', PHPFHIRTypeMap::getTypeClass('DeviceUseStatementStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRDiagnosticReportStatusList', PHPFHIRTypeMap::getTypeClass('DiagnosticReportStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRDiscriminatorTypeList', PHPFHIRTypeMap::getTypeClass('DiscriminatorType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRDocumentModeList', PHPFHIRTypeMap::getTypeClass('DocumentMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRDocumentReferenceStatusList', PHPFHIRTypeMap::getTypeClass('DocumentReferenceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRDocumentRelationshipTypeList', PHPFHIRTypeMap::getTypeClass('DocumentRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement', PHPFHIRTypeMap::getTypeClass('Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAccountStatus', PHPFHIRTypeMap::getTypeClass('AccountStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionCardinalityBehavior', PHPFHIRTypeMap::getTypeClass('ActionCardinalityBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionConditionKind', PHPFHIRTypeMap::getTypeClass('ActionConditionKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionGroupingBehavior', PHPFHIRTypeMap::getTypeClass('ActionGroupingBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionParticipantType', PHPFHIRTypeMap::getTypeClass('ActionParticipantType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionPrecheckBehavior', PHPFHIRTypeMap::getTypeClass('ActionPrecheckBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionRelationshipType', PHPFHIRTypeMap::getTypeClass('ActionRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionRequiredBehavior', PHPFHIRTypeMap::getTypeClass('ActionRequiredBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRActionSelectionBehavior', PHPFHIRTypeMap::getTypeClass('ActionSelectionBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAddress', PHPFHIRTypeMap::getTypeClass('Address'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAddressType', PHPFHIRTypeMap::getTypeClass('AddressType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAddressUse', PHPFHIRTypeMap::getTypeClass('AddressUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAdministrativeGender', PHPFHIRTypeMap::getTypeClass('AdministrativeGender'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAdverseEventActuality', PHPFHIRTypeMap::getTypeClass('AdverseEventActuality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAggregationMode', PHPFHIRTypeMap::getTypeClass('AggregationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAllergyIntoleranceCategory', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAllergyIntoleranceCriticality', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceCriticality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAllergyIntoleranceSeverity', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAllergyIntoleranceType', PHPFHIRTypeMap::getTypeClass('AllergyIntoleranceType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAnnotation', PHPFHIRTypeMap::getTypeClass('Annotation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAppointmentStatus', PHPFHIRTypeMap::getTypeClass('AppointmentStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAssertionDirectionType', PHPFHIRTypeMap::getTypeClass('AssertionDirectionType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAssertionOperatorType', PHPFHIRTypeMap::getTypeClass('AssertionOperatorType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAssertionResponseTypes', PHPFHIRTypeMap::getTypeClass('AssertionResponseTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAttachment', PHPFHIRTypeMap::getTypeClass('Attachment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAuditEventAction', PHPFHIRTypeMap::getTypeClass('AuditEventAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAuditEventAgentNetworkType', PHPFHIRTypeMap::getTypeClass('AuditEventAgentNetworkType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRAuditEventOutcome', PHPFHIRTypeMap::getTypeClass('AuditEventOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement', PHPFHIRTypeMap::getTypeClass('BackboneElement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage', PHPFHIRTypeMap::getTypeClass('Account.Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor', PHPFHIRTypeMap::getTypeClass('Account.Guarantor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue', PHPFHIRTypeMap::getTypeClass('ActivityDefinition.DynamicValue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant', PHPFHIRTypeMap::getTypeClass('ActivityDefinition.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality', PHPFHIRTypeMap::getTypeClass('AdverseEvent.Causality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity', PHPFHIRTypeMap::getTypeClass('AdverseEvent.SuspectEntity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction', PHPFHIRTypeMap::getTypeClass('AllergyIntolerance.Reaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant', PHPFHIRTypeMap::getTypeClass('Appointment.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent', PHPFHIRTypeMap::getTypeClass('AuditEvent.Agent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail', PHPFHIRTypeMap::getTypeClass('AuditEvent.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity', PHPFHIRTypeMap::getTypeClass('AuditEvent.Entity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork', PHPFHIRTypeMap::getTypeClass('AuditEvent.Network'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource', PHPFHIRTypeMap::getTypeClass('AuditEvent.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProduct.Collection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductManipulation', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProduct.Manipulation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProcessing', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProduct.Processing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductStorage', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProduct.Storage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry', PHPFHIRTypeMap::getTypeClass('Bundle.Entry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink', PHPFHIRTypeMap::getTypeClass('Bundle.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest', PHPFHIRTypeMap::getTypeClass('Bundle.Request'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse', PHPFHIRTypeMap::getTypeClass('Bundle.Response'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch', PHPFHIRTypeMap::getTypeClass('Bundle.Search'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Document'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Endpoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Implementation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Interaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Interaction1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Messaging'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Rest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.SearchParam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Security'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.Software'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage', PHPFHIRTypeMap::getTypeClass('CapabilityStatement.SupportedMessage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity', PHPFHIRTypeMap::getTypeClass('CarePlan.Activity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail', PHPFHIRTypeMap::getTypeClass('CarePlan.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant', PHPFHIRTypeMap::getTypeClass('CareTeam.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCatalogEntry\FHIRCatalogEntryRelatedEntry', PHPFHIRTypeMap::getTypeClass('CatalogEntry.RelatedEntry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability', PHPFHIRTypeMap::getTypeClass('ChargeItemDefinition.Applicability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPriceComponent', PHPFHIRTypeMap::getTypeClass('ChargeItemDefinition.PriceComponent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup', PHPFHIRTypeMap::getTypeClass('ChargeItemDefinition.PropertyGroup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer', PHPFHIRTypeMap::getTypeClass('ChargeItem.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem', PHPFHIRTypeMap::getTypeClass('ClaimResponse.AddItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Adjudication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Detail1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Error'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Payment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote', PHPFHIRTypeMap::getTypeClass('ClaimResponse.ProcessNote'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail', PHPFHIRTypeMap::getTypeClass('ClaimResponse.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1', PHPFHIRTypeMap::getTypeClass('ClaimResponse.SubDetail1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal', PHPFHIRTypeMap::getTypeClass('ClaimResponse.Total'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident', PHPFHIRTypeMap::getTypeClass('Claim.Accident'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam', PHPFHIRTypeMap::getTypeClass('Claim.CareTeam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail', PHPFHIRTypeMap::getTypeClass('Claim.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis', PHPFHIRTypeMap::getTypeClass('Claim.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance', PHPFHIRTypeMap::getTypeClass('Claim.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem', PHPFHIRTypeMap::getTypeClass('Claim.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee', PHPFHIRTypeMap::getTypeClass('Claim.Payee'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure', PHPFHIRTypeMap::getTypeClass('Claim.Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated', PHPFHIRTypeMap::getTypeClass('Claim.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail', PHPFHIRTypeMap::getTypeClass('Claim.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo', PHPFHIRTypeMap::getTypeClass('Claim.SupportingInfo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding', PHPFHIRTypeMap::getTypeClass('ClinicalImpression.Finding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation', PHPFHIRTypeMap::getTypeClass('ClinicalImpression.Investigation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept', PHPFHIRTypeMap::getTypeClass('CodeSystem.Concept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation', PHPFHIRTypeMap::getTypeClass('CodeSystem.Designation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter', PHPFHIRTypeMap::getTypeClass('CodeSystem.Filter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty', PHPFHIRTypeMap::getTypeClass('CodeSystem.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1', PHPFHIRTypeMap::getTypeClass('CodeSystem.Property1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload', PHPFHIRTypeMap::getTypeClass('CommunicationRequest.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload', PHPFHIRTypeMap::getTypeClass('Communication.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource', PHPFHIRTypeMap::getTypeClass('CompartmentDefinition.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester', PHPFHIRTypeMap::getTypeClass('Composition.Attester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent', PHPFHIRTypeMap::getTypeClass('Composition.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo', PHPFHIRTypeMap::getTypeClass('Composition.RelatesTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection', PHPFHIRTypeMap::getTypeClass('Composition.Section'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn', PHPFHIRTypeMap::getTypeClass('ConceptMap.DependsOn'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement', PHPFHIRTypeMap::getTypeClass('ConceptMap.Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup', PHPFHIRTypeMap::getTypeClass('ConceptMap.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget', PHPFHIRTypeMap::getTypeClass('ConceptMap.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped', PHPFHIRTypeMap::getTypeClass('ConceptMap.Unmapped'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence', PHPFHIRTypeMap::getTypeClass('Condition.Evidence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage', PHPFHIRTypeMap::getTypeClass('Condition.Stage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor', PHPFHIRTypeMap::getTypeClass('Consent.Actor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData', PHPFHIRTypeMap::getTypeClass('Consent.Data'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy', PHPFHIRTypeMap::getTypeClass('Consent.Policy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision', PHPFHIRTypeMap::getTypeClass('Consent.Provision'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification', PHPFHIRTypeMap::getTypeClass('Consent.Verification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction', PHPFHIRTypeMap::getTypeClass('Contract.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer', PHPFHIRTypeMap::getTypeClass('Contract.Answer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset', PHPFHIRTypeMap::getTypeClass('Contract.Asset'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition', PHPFHIRTypeMap::getTypeClass('Contract.ContentDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext', PHPFHIRTypeMap::getTypeClass('Contract.Context'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly', PHPFHIRTypeMap::getTypeClass('Contract.Friendly'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal', PHPFHIRTypeMap::getTypeClass('Contract.Legal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer', PHPFHIRTypeMap::getTypeClass('Contract.Offer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty', PHPFHIRTypeMap::getTypeClass('Contract.Party'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule', PHPFHIRTypeMap::getTypeClass('Contract.Rule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel', PHPFHIRTypeMap::getTypeClass('Contract.SecurityLabel'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner', PHPFHIRTypeMap::getTypeClass('Contract.Signer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject', PHPFHIRTypeMap::getTypeClass('Contract.Subject'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm', PHPFHIRTypeMap::getTypeClass('Contract.Term'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem', PHPFHIRTypeMap::getTypeClass('Contract.ValuedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityRequest.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityRequest.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityRequest.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityRequest.SupportingInfo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityResponse.Benefit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityResponse.Error'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityResponse.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityResponse.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass', PHPFHIRTypeMap::getTypeClass('Coverage.Class'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary', PHPFHIRTypeMap::getTypeClass('Coverage.CostToBeneficiary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException', PHPFHIRTypeMap::getTypeClass('Coverage.Exception'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence', PHPFHIRTypeMap::getTypeClass('DetectedIssue.Evidence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation', PHPFHIRTypeMap::getTypeClass('DetectedIssue.Mitigation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCapability', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.Capability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.DeviceName'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.Material'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionSpecialization', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.Specialization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier', PHPFHIRTypeMap::getTypeClass('DeviceDefinition.UdiDeviceIdentifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration', PHPFHIRTypeMap::getTypeClass('DeviceMetric.Calibration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter', PHPFHIRTypeMap::getTypeClass('DeviceRequest.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceDeviceName', PHPFHIRTypeMap::getTypeClass('Device.DeviceName'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty', PHPFHIRTypeMap::getTypeClass('Device.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceSpecialization', PHPFHIRTypeMap::getTypeClass('Device.Specialization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier', PHPFHIRTypeMap::getTypeClass('Device.UdiCarrier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion', PHPFHIRTypeMap::getTypeClass('Device.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia', PHPFHIRTypeMap::getTypeClass('DiagnosticReport.Media'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated', PHPFHIRTypeMap::getTypeClass('DocumentManifest.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent', PHPFHIRTypeMap::getTypeClass('DocumentReference.Content'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext', PHPFHIRTypeMap::getTypeClass('DocumentReference.Context'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo', PHPFHIRTypeMap::getTypeClass('DocumentReference.RelatesTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDosage', PHPFHIRTypeMap::getTypeClass('Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRDosage\FHIRDosageDoseAndRate', PHPFHIRTypeMap::getTypeClass('Dosage.DoseAndRate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisCertainty', PHPFHIRTypeMap::getTypeClass('EffectEvidenceSynthesis.Certainty'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisCertaintySubcomponent', PHPFHIRTypeMap::getTypeClass('EffectEvidenceSynthesis.CertaintySubcomponent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisEffectEstimate', PHPFHIRTypeMap::getTypeClass('EffectEvidenceSynthesis.EffectEstimate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisPrecisionEstimate', PHPFHIRTypeMap::getTypeClass('EffectEvidenceSynthesis.PrecisionEstimate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisResultsByExposure', PHPFHIRTypeMap::getTypeClass('EffectEvidenceSynthesis.ResultsByExposure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREffectEvidenceSynthesis\FHIREffectEvidenceSynthesisSampleSize', PHPFHIRTypeMap::getTypeClass('EffectEvidenceSynthesis.SampleSize'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition', PHPFHIRTypeMap::getTypeClass('ElementDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionBase', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Base'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionBinding', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Binding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionConstraint', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Constraint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Discriminator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionExample', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Example'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionMapping', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Mapping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionSlicing', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Slicing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionType', PHPFHIRTypeMap::getTypeClass('ElementDefinition.Type'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory', PHPFHIRTypeMap::getTypeClass('Encounter.ClassHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis', PHPFHIRTypeMap::getTypeClass('Encounter.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization', PHPFHIRTypeMap::getTypeClass('Encounter.Hospitalization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation', PHPFHIRTypeMap::getTypeClass('Encounter.Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant', PHPFHIRTypeMap::getTypeClass('Encounter.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory', PHPFHIRTypeMap::getTypeClass('Encounter.StatusHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis', PHPFHIRTypeMap::getTypeClass('EpisodeOfCare.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory', PHPFHIRTypeMap::getTypeClass('EpisodeOfCare.StatusHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic', PHPFHIRTypeMap::getTypeClass('EvidenceVariable.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor', PHPFHIRTypeMap::getTypeClass('ExampleScenario.Actor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative', PHPFHIRTypeMap::getTypeClass('ExampleScenario.Alternative'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance', PHPFHIRTypeMap::getTypeClass('ExampleScenario.ContainedInstance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance', PHPFHIRTypeMap::getTypeClass('ExampleScenario.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation', PHPFHIRTypeMap::getTypeClass('ExampleScenario.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess', PHPFHIRTypeMap::getTypeClass('ExampleScenario.Process'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep', PHPFHIRTypeMap::getTypeClass('ExampleScenario.Step'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion', PHPFHIRTypeMap::getTypeClass('ExampleScenario.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Accident'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.AddItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Adjudication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.BenefitBalance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.CareTeam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Detail1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Financial'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Payee'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Payment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.ProcessNote'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.SubDetail1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.SupportingInfo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit.Total'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition', PHPFHIRTypeMap::getTypeClass('FamilyMemberHistory.Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget', PHPFHIRTypeMap::getTypeClass('Goal.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment', PHPFHIRTypeMap::getTypeClass('GraphDefinition.Compartment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink', PHPFHIRTypeMap::getTypeClass('GraphDefinition.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget', PHPFHIRTypeMap::getTypeClass('GraphDefinition.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic', PHPFHIRTypeMap::getTypeClass('Group.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember', PHPFHIRTypeMap::getTypeClass('Group.Member'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime', PHPFHIRTypeMap::getTypeClass('HealthcareService.AvailableTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility', PHPFHIRTypeMap::getTypeClass('HealthcareService.Eligibility'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable', PHPFHIRTypeMap::getTypeClass('HealthcareService.NotAvailable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance', PHPFHIRTypeMap::getTypeClass('ImagingStudy.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer', PHPFHIRTypeMap::getTypeClass('ImagingStudy.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries', PHPFHIRTypeMap::getTypeClass('ImagingStudy.Series'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion', PHPFHIRTypeMap::getTypeClass('ImmunizationRecommendation.DateCriterion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation', PHPFHIRTypeMap::getTypeClass('ImmunizationRecommendation.Recommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationEducation', PHPFHIRTypeMap::getTypeClass('Immunization.Education'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer', PHPFHIRTypeMap::getTypeClass('Immunization.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied', PHPFHIRTypeMap::getTypeClass('Immunization.ProtocolApplied'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction', PHPFHIRTypeMap::getTypeClass('Immunization.Reaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Definition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.DependsOn'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Global'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Grouping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Manifest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Page'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Page1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Resource1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate', PHPFHIRTypeMap::getTypeClass('ImplementationGuide.Template'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit', PHPFHIRTypeMap::getTypeClass('InsurancePlan.Benefit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1', PHPFHIRTypeMap::getTypeClass('InsurancePlan.Benefit1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanContact', PHPFHIRTypeMap::getTypeClass('InsurancePlan.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost', PHPFHIRTypeMap::getTypeClass('InsurancePlan.Cost'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage', PHPFHIRTypeMap::getTypeClass('InsurancePlan.Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost', PHPFHIRTypeMap::getTypeClass('InsurancePlan.GeneralCost'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit', PHPFHIRTypeMap::getTypeClass('InsurancePlan.Limit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan', PHPFHIRTypeMap::getTypeClass('InsurancePlan.Plan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost', PHPFHIRTypeMap::getTypeClass('InsurancePlan.SpecificCost'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem', PHPFHIRTypeMap::getTypeClass('Invoice.LineItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant', PHPFHIRTypeMap::getTypeClass('Invoice.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoicePriceComponent', PHPFHIRTypeMap::getTypeClass('Invoice.PriceComponent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem', PHPFHIRTypeMap::getTypeClass('Linkage.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry', PHPFHIRTypeMap::getTypeClass('List.Entry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationHoursOfOperation', PHPFHIRTypeMap::getTypeClass('Location.HoursOfOperation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition', PHPFHIRTypeMap::getTypeClass('Location.Position'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMarketingStatus', PHPFHIRTypeMap::getTypeClass('MarketingStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent', PHPFHIRTypeMap::getTypeClass('MeasureReport.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup', PHPFHIRTypeMap::getTypeClass('MeasureReport.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation', PHPFHIRTypeMap::getTypeClass('MeasureReport.Population'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1', PHPFHIRTypeMap::getTypeClass('MeasureReport.Population1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier', PHPFHIRTypeMap::getTypeClass('MeasureReport.Stratifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum', PHPFHIRTypeMap::getTypeClass('MeasureReport.Stratum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent', PHPFHIRTypeMap::getTypeClass('Measure.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup', PHPFHIRTypeMap::getTypeClass('Measure.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation', PHPFHIRTypeMap::getTypeClass('Measure.Population'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier', PHPFHIRTypeMap::getTypeClass('Measure.Stratifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData', PHPFHIRTypeMap::getTypeClass('Measure.SupplementalData'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage', PHPFHIRTypeMap::getTypeClass('MedicationAdministration.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer', PHPFHIRTypeMap::getTypeClass('MedicationAdministration.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer', PHPFHIRTypeMap::getTypeClass('MedicationDispense.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution', PHPFHIRTypeMap::getTypeClass('MedicationDispense.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeAdministrationGuidelines', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.AdministrationGuidelines'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.Cost'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.DrugCharacteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeKinetics', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.Kinetics'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.MaxDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.MedicineClassification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.MonitoringProgram'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.Monograph'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.Packaging'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristics', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.PatientCharacteristics'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.Regulatory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.RelatedMedicationKnowledge'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSchedule', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.Schedule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest', PHPFHIRTypeMap::getTypeClass('MedicationRequest.DispenseRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill', PHPFHIRTypeMap::getTypeClass('MedicationRequest.InitialFill'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution', PHPFHIRTypeMap::getTypeClass('MedicationRequest.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch', PHPFHIRTypeMap::getTypeClass('Medication.Batch'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient', PHPFHIRTypeMap::getTypeClass('Medication.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductAuthorization\FHIRMedicinalProductAuthorizationJurisdictionalAuthorization', PHPFHIRTypeMap::getTypeClass('MedicinalProductAuthorization.JurisdictionalAuthorization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductAuthorization\FHIRMedicinalProductAuthorizationProcedure', PHPFHIRTypeMap::getTypeClass('MedicinalProductAuthorization.Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductContraindication\FHIRMedicinalProductContraindicationOtherTherapy', PHPFHIRTypeMap::getTypeClass('MedicinalProductContraindication.OtherTherapy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIndication\FHIRMedicinalProductIndicationOtherTherapy', PHPFHIRTypeMap::getTypeClass('MedicinalProductIndication.OtherTherapy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIngredient\FHIRMedicinalProductIngredientReferenceStrength', PHPFHIRTypeMap::getTypeClass('MedicinalProductIngredient.ReferenceStrength'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIngredient\FHIRMedicinalProductIngredientSpecifiedSubstance', PHPFHIRTypeMap::getTypeClass('MedicinalProductIngredient.SpecifiedSubstance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIngredient\FHIRMedicinalProductIngredientStrength', PHPFHIRTypeMap::getTypeClass('MedicinalProductIngredient.Strength'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductIngredient\FHIRMedicinalProductIngredientSubstance', PHPFHIRTypeMap::getTypeClass('MedicinalProductIngredient.Substance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductInteraction\FHIRMedicinalProductInteractionInteractant', PHPFHIRTypeMap::getTypeClass('MedicinalProductInteraction.Interactant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPackaged\FHIRMedicinalProductPackagedBatchIdentifier', PHPFHIRTypeMap::getTypeClass('MedicinalProductPackaged.BatchIdentifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPackaged\FHIRMedicinalProductPackagedPackageItem', PHPFHIRTypeMap::getTypeClass('MedicinalProductPackaged.PackageItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPharmaceutical\FHIRMedicinalProductPharmaceuticalCharacteristics', PHPFHIRTypeMap::getTypeClass('MedicinalProductPharmaceutical.Characteristics'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPharmaceutical\FHIRMedicinalProductPharmaceuticalRouteOfAdministration', PHPFHIRTypeMap::getTypeClass('MedicinalProductPharmaceutical.RouteOfAdministration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPharmaceutical\FHIRMedicinalProductPharmaceuticalTargetSpecies', PHPFHIRTypeMap::getTypeClass('MedicinalProductPharmaceutical.TargetSpecies'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductPharmaceutical\FHIRMedicinalProductPharmaceuticalWithdrawalPeriod', PHPFHIRTypeMap::getTypeClass('MedicinalProductPharmaceutical.WithdrawalPeriod'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductCountryLanguage', PHPFHIRTypeMap::getTypeClass('MedicinalProduct.CountryLanguage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductManufacturingBusinessOperation', PHPFHIRTypeMap::getTypeClass('MedicinalProduct.ManufacturingBusinessOperation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductName', PHPFHIRTypeMap::getTypeClass('MedicinalProduct.Name'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductNamePart', PHPFHIRTypeMap::getTypeClass('MedicinalProduct.NamePart'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMedicinalProduct\FHIRMedicinalProductSpecialDesignation', PHPFHIRTypeMap::getTypeClass('MedicinalProduct.SpecialDesignation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse', PHPFHIRTypeMap::getTypeClass('MessageDefinition.AllowedResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus', PHPFHIRTypeMap::getTypeClass('MessageDefinition.Focus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination', PHPFHIRTypeMap::getTypeClass('MessageHeader.Destination'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse', PHPFHIRTypeMap::getTypeClass('MessageHeader.Response'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource', PHPFHIRTypeMap::getTypeClass('MessageHeader.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceInner', PHPFHIRTypeMap::getTypeClass('MolecularSequence.Inner'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceOuter', PHPFHIRTypeMap::getTypeClass('MolecularSequence.Outer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceQuality', PHPFHIRTypeMap::getTypeClass('MolecularSequence.Quality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceReferenceSeq', PHPFHIRTypeMap::getTypeClass('MolecularSequence.ReferenceSeq'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRepository', PHPFHIRTypeMap::getTypeClass('MolecularSequence.Repository'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRoc', PHPFHIRTypeMap::getTypeClass('MolecularSequence.Roc'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStructureVariant', PHPFHIRTypeMap::getTypeClass('MolecularSequence.StructureVariant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceVariant', PHPFHIRTypeMap::getTypeClass('MolecularSequence.Variant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId', PHPFHIRTypeMap::getTypeClass('NamingSystem.UniqueId'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration', PHPFHIRTypeMap::getTypeClass('NutritionOrder.Administration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula', PHPFHIRTypeMap::getTypeClass('NutritionOrder.EnteralFormula'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient', PHPFHIRTypeMap::getTypeClass('NutritionOrder.Nutrient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet', PHPFHIRTypeMap::getTypeClass('NutritionOrder.OralDiet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement', PHPFHIRTypeMap::getTypeClass('NutritionOrder.Supplement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture', PHPFHIRTypeMap::getTypeClass('NutritionOrder.Texture'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedInterval', PHPFHIRTypeMap::getTypeClass('ObservationDefinition.QualifiedInterval'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQuantitativeDetails', PHPFHIRTypeMap::getTypeClass('ObservationDefinition.QuantitativeDetails'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent', PHPFHIRTypeMap::getTypeClass('Observation.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange', PHPFHIRTypeMap::getTypeClass('Observation.ReferenceRange'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding', PHPFHIRTypeMap::getTypeClass('OperationDefinition.Binding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload', PHPFHIRTypeMap::getTypeClass('OperationDefinition.Overload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter', PHPFHIRTypeMap::getTypeClass('OperationDefinition.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom', PHPFHIRTypeMap::getTypeClass('OperationDefinition.ReferencedFrom'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue', PHPFHIRTypeMap::getTypeClass('OperationOutcome.Issue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact', PHPFHIRTypeMap::getTypeClass('Organization.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter', PHPFHIRTypeMap::getTypeClass('Parameters.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication', PHPFHIRTypeMap::getTypeClass('Patient.Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact', PHPFHIRTypeMap::getTypeClass('Patient.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink', PHPFHIRTypeMap::getTypeClass('Patient.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail', PHPFHIRTypeMap::getTypeClass('PaymentReconciliation.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote', PHPFHIRTypeMap::getTypeClass('PaymentReconciliation.ProcessNote'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink', PHPFHIRTypeMap::getTypeClass('Person.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction', PHPFHIRTypeMap::getTypeClass('PlanDefinition.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition', PHPFHIRTypeMap::getTypeClass('PlanDefinition.Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue', PHPFHIRTypeMap::getTypeClass('PlanDefinition.DynamicValue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal', PHPFHIRTypeMap::getTypeClass('PlanDefinition.Goal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant', PHPFHIRTypeMap::getTypeClass('PlanDefinition.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction', PHPFHIRTypeMap::getTypeClass('PlanDefinition.RelatedAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget', PHPFHIRTypeMap::getTypeClass('PlanDefinition.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPopulation', PHPFHIRTypeMap::getTypeClass('Population'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime', PHPFHIRTypeMap::getTypeClass('PractitionerRole.AvailableTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable', PHPFHIRTypeMap::getTypeClass('PractitionerRole.NotAvailable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification', PHPFHIRTypeMap::getTypeClass('Practitioner.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice', PHPFHIRTypeMap::getTypeClass('Procedure.FocalDevice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer', PHPFHIRTypeMap::getTypeClass('Procedure.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProdCharacteristic', PHPFHIRTypeMap::getTypeClass('ProdCharacteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProductShelfLife', PHPFHIRTypeMap::getTypeClass('ProductShelfLife'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent', PHPFHIRTypeMap::getTypeClass('Provenance.Agent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity', PHPFHIRTypeMap::getTypeClass('Provenance.Entity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer', PHPFHIRTypeMap::getTypeClass('QuestionnaireResponse.Answer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem', PHPFHIRTypeMap::getTypeClass('QuestionnaireResponse.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption', PHPFHIRTypeMap::getTypeClass('Questionnaire.AnswerOption'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen', PHPFHIRTypeMap::getTypeClass('Questionnaire.EnableWhen'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial', PHPFHIRTypeMap::getTypeClass('Questionnaire.Initial'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem', PHPFHIRTypeMap::getTypeClass('Questionnaire.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication', PHPFHIRTypeMap::getTypeClass('RelatedPerson.Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction', PHPFHIRTypeMap::getTypeClass('RequestGroup.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition', PHPFHIRTypeMap::getTypeClass('RequestGroup.Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction', PHPFHIRTypeMap::getTypeClass('RequestGroup.RelatedAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRResearchElementDefinition\FHIRResearchElementDefinitionCharacteristic', PHPFHIRTypeMap::getTypeClass('ResearchElementDefinition.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm', PHPFHIRTypeMap::getTypeClass('ResearchStudy.Arm'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective', PHPFHIRTypeMap::getTypeClass('ResearchStudy.Objective'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction', PHPFHIRTypeMap::getTypeClass('RiskAssessment.Prediction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisCertainty', PHPFHIRTypeMap::getTypeClass('RiskEvidenceSynthesis.Certainty'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisCertaintySubcomponent', PHPFHIRTypeMap::getTypeClass('RiskEvidenceSynthesis.CertaintySubcomponent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisPrecisionEstimate', PHPFHIRTypeMap::getTypeClass('RiskEvidenceSynthesis.PrecisionEstimate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisRiskEstimate', PHPFHIRTypeMap::getTypeClass('RiskEvidenceSynthesis.RiskEstimate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRRiskEvidenceSynthesis\FHIRRiskEvidenceSynthesisSampleSize', PHPFHIRTypeMap::getTypeClass('RiskEvidenceSynthesis.SampleSize'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent', PHPFHIRTypeMap::getTypeClass('SearchParameter.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive', PHPFHIRTypeMap::getTypeClass('SpecimenDefinition.Additive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer', PHPFHIRTypeMap::getTypeClass('SpecimenDefinition.Container'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling', PHPFHIRTypeMap::getTypeClass('SpecimenDefinition.Handling'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested', PHPFHIRTypeMap::getTypeClass('SpecimenDefinition.TypeTested'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection', PHPFHIRTypeMap::getTypeClass('Specimen.Collection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer', PHPFHIRTypeMap::getTypeClass('Specimen.Container'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing', PHPFHIRTypeMap::getTypeClass('Specimen.Processing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext', PHPFHIRTypeMap::getTypeClass('StructureDefinition.Context'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential', PHPFHIRTypeMap::getTypeClass('StructureDefinition.Differential'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping', PHPFHIRTypeMap::getTypeClass('StructureDefinition.Mapping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot', PHPFHIRTypeMap::getTypeClass('StructureDefinition.Snapshot'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent', PHPFHIRTypeMap::getTypeClass('StructureMap.Dependent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup', PHPFHIRTypeMap::getTypeClass('StructureMap.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput', PHPFHIRTypeMap::getTypeClass('StructureMap.Input'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter', PHPFHIRTypeMap::getTypeClass('StructureMap.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule', PHPFHIRTypeMap::getTypeClass('StructureMap.Rule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource', PHPFHIRTypeMap::getTypeClass('StructureMap.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure', PHPFHIRTypeMap::getTypeClass('StructureMap.Structure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget', PHPFHIRTypeMap::getTypeClass('StructureMap.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel', PHPFHIRTypeMap::getTypeClass('Subscription.Channel'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceAmount', PHPFHIRTypeMap::getTypeClass('SubstanceAmount'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceAmount\FHIRSubstanceAmountReferenceRange', PHPFHIRTypeMap::getTypeClass('SubstanceAmount.ReferenceRange'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidLinkage', PHPFHIRTypeMap::getTypeClass('SubstanceNucleicAcid.Linkage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSubunit', PHPFHIRTypeMap::getTypeClass('SubstanceNucleicAcid.Subunit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSugar', PHPFHIRTypeMap::getTypeClass('SubstanceNucleicAcid.Sugar'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerDegreeOfPolymerisation', PHPFHIRTypeMap::getTypeClass('SubstancePolymer.DegreeOfPolymerisation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerMonomerSet', PHPFHIRTypeMap::getTypeClass('SubstancePolymer.MonomerSet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeat', PHPFHIRTypeMap::getTypeClass('SubstancePolymer.Repeat'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeatUnit', PHPFHIRTypeMap::getTypeClass('SubstancePolymer.RepeatUnit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStartingMaterial', PHPFHIRTypeMap::getTypeClass('SubstancePolymer.StartingMaterial'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStructuralRepresentation', PHPFHIRTypeMap::getTypeClass('SubstancePolymer.StructuralRepresentation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceProtein\FHIRSubstanceProteinSubunit', PHPFHIRTypeMap::getTypeClass('SubstanceProtein.Subunit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationClassification', PHPFHIRTypeMap::getTypeClass('SubstanceReferenceInformation.Classification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGene', PHPFHIRTypeMap::getTypeClass('SubstanceReferenceInformation.Gene'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGeneElement', PHPFHIRTypeMap::getTypeClass('SubstanceReferenceInformation.GeneElement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationTarget', PHPFHIRTypeMap::getTypeClass('SubstanceReferenceInformation.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialAuthor', PHPFHIRTypeMap::getTypeClass('SubstanceSourceMaterial.Author'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialFractionDescription', PHPFHIRTypeMap::getTypeClass('SubstanceSourceMaterial.FractionDescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialHybrid', PHPFHIRTypeMap::getTypeClass('SubstanceSourceMaterial.Hybrid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganism', PHPFHIRTypeMap::getTypeClass('SubstanceSourceMaterial.Organism'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganismGeneral', PHPFHIRTypeMap::getTypeClass('SubstanceSourceMaterial.OrganismGeneral'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialPartDescription', PHPFHIRTypeMap::getTypeClass('SubstanceSourceMaterial.PartDescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationCode', PHPFHIRTypeMap::getTypeClass('SubstanceSpecification.Code'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationIsotope', PHPFHIRTypeMap::getTypeClass('SubstanceSpecification.Isotope'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationMoiety', PHPFHIRTypeMap::getTypeClass('SubstanceSpecification.Moiety'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationMolecularWeight', PHPFHIRTypeMap::getTypeClass('SubstanceSpecification.MolecularWeight'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationName', PHPFHIRTypeMap::getTypeClass('SubstanceSpecification.Name'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationOfficial', PHPFHIRTypeMap::getTypeClass('SubstanceSpecification.Official'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationProperty', PHPFHIRTypeMap::getTypeClass('SubstanceSpecification.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationRelationship', PHPFHIRTypeMap::getTypeClass('SubstanceSpecification.Relationship'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationRepresentation', PHPFHIRTypeMap::getTypeClass('SubstanceSpecification.Representation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstanceSpecification\FHIRSubstanceSpecificationStructure', PHPFHIRTypeMap::getTypeClass('SubstanceSpecification.Structure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient', PHPFHIRTypeMap::getTypeClass('Substance.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance', PHPFHIRTypeMap::getTypeClass('Substance.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem', PHPFHIRTypeMap::getTypeClass('SupplyDelivery.SuppliedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter', PHPFHIRTypeMap::getTypeClass('SupplyRequest.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput', PHPFHIRTypeMap::getTypeClass('Task.Input'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput', PHPFHIRTypeMap::getTypeClass('Task.Output'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction', PHPFHIRTypeMap::getTypeClass('Task.Restriction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.Closure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.CodeSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.Expansion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.Filter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.Implementation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.Software'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.Translation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.ValidateCode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction', PHPFHIRTypeMap::getTypeClass('TestReport.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1', PHPFHIRTypeMap::getTypeClass('TestReport.Action1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2', PHPFHIRTypeMap::getTypeClass('TestReport.Action2'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert', PHPFHIRTypeMap::getTypeClass('TestReport.Assert'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation', PHPFHIRTypeMap::getTypeClass('TestReport.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant', PHPFHIRTypeMap::getTypeClass('TestReport.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup', PHPFHIRTypeMap::getTypeClass('TestReport.Setup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown', PHPFHIRTypeMap::getTypeClass('TestReport.Teardown'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest', PHPFHIRTypeMap::getTypeClass('TestReport.Test'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction', PHPFHIRTypeMap::getTypeClass('TestScript.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1', PHPFHIRTypeMap::getTypeClass('TestScript.Action1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2', PHPFHIRTypeMap::getTypeClass('TestScript.Action2'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert', PHPFHIRTypeMap::getTypeClass('TestScript.Assert'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability', PHPFHIRTypeMap::getTypeClass('TestScript.Capability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination', PHPFHIRTypeMap::getTypeClass('TestScript.Destination'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture', PHPFHIRTypeMap::getTypeClass('TestScript.Fixture'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink', PHPFHIRTypeMap::getTypeClass('TestScript.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata', PHPFHIRTypeMap::getTypeClass('TestScript.Metadata'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation', PHPFHIRTypeMap::getTypeClass('TestScript.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin', PHPFHIRTypeMap::getTypeClass('TestScript.Origin'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader', PHPFHIRTypeMap::getTypeClass('TestScript.RequestHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup', PHPFHIRTypeMap::getTypeClass('TestScript.Setup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown', PHPFHIRTypeMap::getTypeClass('TestScript.Teardown'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest', PHPFHIRTypeMap::getTypeClass('TestScript.Test'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable', PHPFHIRTypeMap::getTypeClass('TestScript.Variable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTiming', PHPFHIRTypeMap::getTypeClass('Timing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRTiming\FHIRTimingRepeat', PHPFHIRTypeMap::getTypeClass('Timing.Repeat'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose', PHPFHIRTypeMap::getTypeClass('ValueSet.Compose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept', PHPFHIRTypeMap::getTypeClass('ValueSet.Concept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains', PHPFHIRTypeMap::getTypeClass('ValueSet.Contains'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation', PHPFHIRTypeMap::getTypeClass('ValueSet.Designation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion', PHPFHIRTypeMap::getTypeClass('ValueSet.Expansion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter', PHPFHIRTypeMap::getTypeClass('ValueSet.Filter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude', PHPFHIRTypeMap::getTypeClass('ValueSet.Include'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter', PHPFHIRTypeMap::getTypeClass('ValueSet.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation', PHPFHIRTypeMap::getTypeClass('VerificationResult.Attestation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource', PHPFHIRTypeMap::getTypeClass('VerificationResult.PrimarySource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator', PHPFHIRTypeMap::getTypeClass('VerificationResult.Validator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification', PHPFHIRTypeMap::getTypeClass('VisionPrescription.LensSpecification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism', PHPFHIRTypeMap::getTypeClass('VisionPrescription.Prism'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBase64Binary', PHPFHIRTypeMap::getTypeClass('base64Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBindingStrength', PHPFHIRTypeMap::getTypeClass('BindingStrength'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBiologicallyDerivedProductCategory', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProductCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBiologicallyDerivedProductStatus', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProductStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBiologicallyDerivedProductStorageScale', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProductStorageScale'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBoolean', PHPFHIRTypeMap::getTypeClass('boolean'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRBundleType', PHPFHIRTypeMap::getTypeClass('BundleType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCanonical', PHPFHIRTypeMap::getTypeClass('canonical'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCapabilityStatementKind', PHPFHIRTypeMap::getTypeClass('CapabilityStatementKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCarePlanActivityKind', PHPFHIRTypeMap::getTypeClass('CarePlanActivityKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCarePlanActivityStatus', PHPFHIRTypeMap::getTypeClass('CarePlanActivityStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCarePlanIntent', PHPFHIRTypeMap::getTypeClass('CarePlanIntent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCareTeamStatus', PHPFHIRTypeMap::getTypeClass('CareTeamStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCatalogEntryRelationType', PHPFHIRTypeMap::getTypeClass('CatalogEntryRelationType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRChargeItemStatus', PHPFHIRTypeMap::getTypeClass('ChargeItemStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRClaimProcessingCodes', PHPFHIRTypeMap::getTypeClass('ClaimProcessingCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRClinicalImpressionStatus', PHPFHIRTypeMap::getTypeClass('ClinicalImpressionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCode', PHPFHIRTypeMap::getTypeClass('code'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCodeableConcept', PHPFHIRTypeMap::getTypeClass('CodeableConcept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCodeSearchSupport', PHPFHIRTypeMap::getTypeClass('CodeSearchSupport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCodeSystemContentMode', PHPFHIRTypeMap::getTypeClass('CodeSystemContentMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCodeSystemHierarchyMeaning', PHPFHIRTypeMap::getTypeClass('CodeSystemHierarchyMeaning'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCoding', PHPFHIRTypeMap::getTypeClass('Coding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCompartmentType', PHPFHIRTypeMap::getTypeClass('CompartmentType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCompositionAttestationMode', PHPFHIRTypeMap::getTypeClass('CompositionAttestationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRCompositionStatus', PHPFHIRTypeMap::getTypeClass('CompositionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConceptMapEquivalence', PHPFHIRTypeMap::getTypeClass('ConceptMapEquivalence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConceptMapGroupUnmappedMode', PHPFHIRTypeMap::getTypeClass('ConceptMapGroupUnmappedMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConditionalDeleteStatus', PHPFHIRTypeMap::getTypeClass('ConditionalDeleteStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConditionalReadStatus', PHPFHIRTypeMap::getTypeClass('ConditionalReadStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConsentDataMeaning', PHPFHIRTypeMap::getTypeClass('ConsentDataMeaning'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConsentProvisionType', PHPFHIRTypeMap::getTypeClass('ConsentProvisionType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConsentState', PHPFHIRTypeMap::getTypeClass('ConsentState'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRConstraintSeverity', PHPFHIRTypeMap::getTypeClass('ConstraintSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContactDetail', PHPFHIRTypeMap::getTypeClass('ContactDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContactPoint', PHPFHIRTypeMap::getTypeClass('ContactPoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContactPointSystem', PHPFHIRTypeMap::getTypeClass('ContactPointSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContactPointUse', PHPFHIRTypeMap::getTypeClass('ContactPointUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContractResourcePublicationStatusCodes', PHPFHIRTypeMap::getTypeClass('ContractResourcePublicationStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContractResourceStatusCodes', PHPFHIRTypeMap::getTypeClass('ContractResourceStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContributor', PHPFHIRTypeMap::getTypeClass('Contributor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRContributorType', PHPFHIRTypeMap::getTypeClass('ContributorType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDataRequirement', PHPFHIRTypeMap::getTypeClass('DataRequirement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter', PHPFHIRTypeMap::getTypeClass('DataRequirement.CodeFilter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter', PHPFHIRTypeMap::getTypeClass('DataRequirement.DateFilter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDataRequirement\FHIRDataRequirementSort', PHPFHIRTypeMap::getTypeClass('DataRequirement.Sort'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDate', PHPFHIRTypeMap::getTypeClass('date'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDateTime', PHPFHIRTypeMap::getTypeClass('dateTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDaysOfWeek', PHPFHIRTypeMap::getTypeClass('DaysOfWeek'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDecimal', PHPFHIRTypeMap::getTypeClass('decimal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDetectedIssueSeverity', PHPFHIRTypeMap::getTypeClass('DetectedIssueSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricCalibrationState', PHPFHIRTypeMap::getTypeClass('DeviceMetricCalibrationState'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricCalibrationType', PHPFHIRTypeMap::getTypeClass('DeviceMetricCalibrationType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricCategory', PHPFHIRTypeMap::getTypeClass('DeviceMetricCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricColor', PHPFHIRTypeMap::getTypeClass('DeviceMetricColor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceMetricOperationalStatus', PHPFHIRTypeMap::getTypeClass('DeviceMetricOperationalStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceNameType', PHPFHIRTypeMap::getTypeClass('DeviceNameType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDeviceUseStatementStatus', PHPFHIRTypeMap::getTypeClass('DeviceUseStatementStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDiagnosticReportStatus', PHPFHIRTypeMap::getTypeClass('DiagnosticReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDiscriminatorType', PHPFHIRTypeMap::getTypeClass('DiscriminatorType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDocumentMode', PHPFHIRTypeMap::getTypeClass('DocumentMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDocumentReferenceStatus', PHPFHIRTypeMap::getTypeClass('DocumentReferenceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRDocumentRelationshipType', PHPFHIRTypeMap::getTypeClass('DocumentRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREligibilityRequestPurpose', PHPFHIRTypeMap::getTypeClass('EligibilityRequestPurpose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREligibilityResponsePurpose', PHPFHIRTypeMap::getTypeClass('EligibilityResponsePurpose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREnableWhenBehavior', PHPFHIRTypeMap::getTypeClass('EnableWhenBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREncounterLocationStatus', PHPFHIRTypeMap::getTypeClass('EncounterLocationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREncounterStatus', PHPFHIRTypeMap::getTypeClass('EncounterStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREndpointStatus', PHPFHIRTypeMap::getTypeClass('EndpointStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREpisodeOfCareStatus', PHPFHIRTypeMap::getTypeClass('EpisodeOfCareStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREventCapabilityMode', PHPFHIRTypeMap::getTypeClass('EventCapabilityMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREventStatus', PHPFHIRTypeMap::getTypeClass('EventStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREventTiming', PHPFHIRTypeMap::getTypeClass('EventTiming'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIREvidenceVariableType', PHPFHIRTypeMap::getTypeClass('EvidenceVariableType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExampleScenarioActorType', PHPFHIRTypeMap::getTypeClass('ExampleScenarioActorType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExplanationOfBenefitStatus', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefitStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExposureState', PHPFHIRTypeMap::getTypeClass('ExposureState'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExpression', PHPFHIRTypeMap::getTypeClass('Expression'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExpressionLanguage', PHPFHIRTypeMap::getTypeClass('ExpressionLanguage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExtension', PHPFHIRTypeMap::getTypeClass('Extension'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRExtensionContextType', PHPFHIRTypeMap::getTypeClass('ExtensionContextType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFamilyHistoryStatus', PHPFHIRTypeMap::getTypeClass('FamilyHistoryStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFHIRDeviceStatus', PHPFHIRTypeMap::getTypeClass('FHIRDeviceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFHIRSubstanceStatus', PHPFHIRTypeMap::getTypeClass('FHIRSubstanceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFHIRVersion', PHPFHIRTypeMap::getTypeClass('FHIRVersion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFilterOperator', PHPFHIRTypeMap::getTypeClass('FilterOperator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFinancialResourceStatusCodes', PHPFHIRTypeMap::getTypeClass('FinancialResourceStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRFlagStatus', PHPFHIRTypeMap::getTypeClass('FlagStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGoalLifecycleStatus', PHPFHIRTypeMap::getTypeClass('GoalLifecycleStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGraphCompartmentRule', PHPFHIRTypeMap::getTypeClass('GraphCompartmentRule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGraphCompartmentUse', PHPFHIRTypeMap::getTypeClass('GraphCompartmentUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGroupMeasure', PHPFHIRTypeMap::getTypeClass('GroupMeasure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGroupType', PHPFHIRTypeMap::getTypeClass('GroupType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGuidanceResponseStatus', PHPFHIRTypeMap::getTypeClass('GuidanceResponseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGuidePageGeneration', PHPFHIRTypeMap::getTypeClass('GuidePageGeneration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRGuideParameterCode', PHPFHIRTypeMap::getTypeClass('GuideParameterCode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRHTTPVerb', PHPFHIRTypeMap::getTypeClass('HTTPVerb'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRHumanName', PHPFHIRTypeMap::getTypeClass('HumanName'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRId', PHPFHIRTypeMap::getTypeClass('id'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIdentifier', PHPFHIRTypeMap::getTypeClass('Identifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIdentifierUse', PHPFHIRTypeMap::getTypeClass('IdentifierUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIdentityAssuranceLevel', PHPFHIRTypeMap::getTypeClass('IdentityAssuranceLevel'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRImagingStudyStatus', PHPFHIRTypeMap::getTypeClass('ImagingStudyStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRImmunizationEvaluationStatusCodes', PHPFHIRTypeMap::getTypeClass('ImmunizationEvaluationStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRImmunizationStatusCodes', PHPFHIRTypeMap::getTypeClass('ImmunizationStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRInstant', PHPFHIRTypeMap::getTypeClass('instant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRInteger', PHPFHIRTypeMap::getTypeClass('integer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRInvoicePriceComponentType', PHPFHIRTypeMap::getTypeClass('InvoicePriceComponentType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRInvoiceStatus', PHPFHIRTypeMap::getTypeClass('InvoiceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIssueSeverity', PHPFHIRTypeMap::getTypeClass('IssueSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRIssueType', PHPFHIRTypeMap::getTypeClass('IssueType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRLinkageType', PHPFHIRTypeMap::getTypeClass('LinkageType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRLinkType', PHPFHIRTypeMap::getTypeClass('LinkType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRListMode', PHPFHIRTypeMap::getTypeClass('ListMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRListStatus', PHPFHIRTypeMap::getTypeClass('ListStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRLocationMode', PHPFHIRTypeMap::getTypeClass('LocationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRLocationStatus', PHPFHIRTypeMap::getTypeClass('LocationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMarkdown', PHPFHIRTypeMap::getTypeClass('markdown'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMeasureReportStatus', PHPFHIRTypeMap::getTypeClass('MeasureReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMeasureReportType', PHPFHIRTypeMap::getTypeClass('MeasureReportType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMedicationRequestIntent', PHPFHIRTypeMap::getTypeClass('medicationRequestIntent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMedicationrequestStatus', PHPFHIRTypeMap::getTypeClass('medicationrequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMedicationStatusCodes', PHPFHIRTypeMap::getTypeClass('MedicationStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMessageheaderResponseRequest', PHPFHIRTypeMap::getTypeClass('messageheaderResponseRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMessageSignificanceCategory', PHPFHIRTypeMap::getTypeClass('MessageSignificanceCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMeta', PHPFHIRTypeMap::getTypeClass('Meta'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRMoney', PHPFHIRTypeMap::getTypeClass('Money'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNameUse', PHPFHIRTypeMap::getTypeClass('NameUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNamingSystemIdentifierType', PHPFHIRTypeMap::getTypeClass('NamingSystemIdentifierType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNamingSystemType', PHPFHIRTypeMap::getTypeClass('NamingSystemType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNarrative', PHPFHIRTypeMap::getTypeClass('Narrative'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNarrativeStatus', PHPFHIRTypeMap::getTypeClass('NarrativeStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRNoteType', PHPFHIRTypeMap::getTypeClass('NoteType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRObservationDataType', PHPFHIRTypeMap::getTypeClass('ObservationDataType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRObservationRangeCategory', PHPFHIRTypeMap::getTypeClass('ObservationRangeCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRObservationStatus', PHPFHIRTypeMap::getTypeClass('ObservationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIROid', PHPFHIRTypeMap::getTypeClass('oid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIROperationKind', PHPFHIRTypeMap::getTypeClass('OperationKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIROperationParameterUse', PHPFHIRTypeMap::getTypeClass('OperationParameterUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIROrientationType', PHPFHIRTypeMap::getTypeClass('orientationType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRParameterDefinition', PHPFHIRTypeMap::getTypeClass('ParameterDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRParticipantRequired', PHPFHIRTypeMap::getTypeClass('ParticipantRequired'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRParticipationStatus', PHPFHIRTypeMap::getTypeClass('ParticipationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPeriod', PHPFHIRTypeMap::getTypeClass('Period'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPositiveInt', PHPFHIRTypeMap::getTypeClass('positiveInt'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPropertyRepresentation', PHPFHIRTypeMap::getTypeClass('PropertyRepresentation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPropertyType', PHPFHIRTypeMap::getTypeClass('PropertyType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRProvenanceEntityRole', PHPFHIRTypeMap::getTypeClass('ProvenanceEntityRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRPublicationStatus', PHPFHIRTypeMap::getTypeClass('PublicationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQualityType', PHPFHIRTypeMap::getTypeClass('qualityType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity', PHPFHIRTypeMap::getTypeClass('Quantity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantityComparator', PHPFHIRTypeMap::getTypeClass('QuantityComparator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity\FHIRAge', PHPFHIRTypeMap::getTypeClass('Age'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity\FHIRCount', PHPFHIRTypeMap::getTypeClass('Count'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity\FHIRDistance', PHPFHIRTypeMap::getTypeClass('Distance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuantity\FHIRDuration', PHPFHIRTypeMap::getTypeClass('Duration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuestionnaireItemOperator', PHPFHIRTypeMap::getTypeClass('QuestionnaireItemOperator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuestionnaireItemType', PHPFHIRTypeMap::getTypeClass('QuestionnaireItemType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRQuestionnaireResponseStatus', PHPFHIRTypeMap::getTypeClass('QuestionnaireResponseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRange', PHPFHIRTypeMap::getTypeClass('Range'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRatio', PHPFHIRTypeMap::getTypeClass('Ratio'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRReference', PHPFHIRTypeMap::getTypeClass('Reference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRReferenceHandlingPolicy', PHPFHIRTypeMap::getTypeClass('ReferenceHandlingPolicy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRReferenceVersionRules', PHPFHIRTypeMap::getTypeClass('ReferenceVersionRules'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRelatedArtifact', PHPFHIRTypeMap::getTypeClass('RelatedArtifact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRelatedArtifactType', PHPFHIRTypeMap::getTypeClass('RelatedArtifactType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRemittanceOutcome', PHPFHIRTypeMap::getTypeClass('RemittanceOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRepositoryType', PHPFHIRTypeMap::getTypeClass('repositoryType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRequestIntent', PHPFHIRTypeMap::getTypeClass('RequestIntent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRequestPriority', PHPFHIRTypeMap::getTypeClass('RequestPriority'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRequestResourceType', PHPFHIRTypeMap::getTypeClass('RequestResourceType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRequestStatus', PHPFHIRTypeMap::getTypeClass('RequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResearchElementType', PHPFHIRTypeMap::getTypeClass('ResearchElementType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResearchStudyStatus', PHPFHIRTypeMap::getTypeClass('ResearchStudyStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResearchSubjectStatus', PHPFHIRTypeMap::getTypeClass('ResearchSubjectStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResourceVersionPolicy', PHPFHIRTypeMap::getTypeClass('ResourceVersionPolicy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRResponseType', PHPFHIRTypeMap::getTypeClass('ResponseType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRRestfulCapabilityMode', PHPFHIRTypeMap::getTypeClass('RestfulCapabilityMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSampledData', PHPFHIRTypeMap::getTypeClass('SampledData'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSampledDataDataType', PHPFHIRTypeMap::getTypeClass('SampledDataDataType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSearchComparator', PHPFHIRTypeMap::getTypeClass('SearchComparator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSearchEntryMode', PHPFHIRTypeMap::getTypeClass('SearchEntryMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSearchModifierCode', PHPFHIRTypeMap::getTypeClass('SearchModifierCode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSearchParamType', PHPFHIRTypeMap::getTypeClass('SearchParamType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSequenceType', PHPFHIRTypeMap::getTypeClass('sequenceType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSignature', PHPFHIRTypeMap::getTypeClass('Signature'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSlicingRules', PHPFHIRTypeMap::getTypeClass('SlicingRules'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSlotStatus', PHPFHIRTypeMap::getTypeClass('SlotStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSortDirection', PHPFHIRTypeMap::getTypeClass('SortDirection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSPDXLicense', PHPFHIRTypeMap::getTypeClass('SPDXLicense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSpecimenContainedPreference', PHPFHIRTypeMap::getTypeClass('SpecimenContainedPreference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSpecimenStatus', PHPFHIRTypeMap::getTypeClass('SpecimenStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStatus', PHPFHIRTypeMap::getTypeClass('status'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStrandType', PHPFHIRTypeMap::getTypeClass('strandType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRString', PHPFHIRTypeMap::getTypeClass('string'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureDefinitionKind', PHPFHIRTypeMap::getTypeClass('StructureDefinitionKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapContextType', PHPFHIRTypeMap::getTypeClass('StructureMapContextType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapGroupTypeMode', PHPFHIRTypeMap::getTypeClass('StructureMapGroupTypeMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapInputMode', PHPFHIRTypeMap::getTypeClass('StructureMapInputMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapModelMode', PHPFHIRTypeMap::getTypeClass('StructureMapModelMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapSourceListMode', PHPFHIRTypeMap::getTypeClass('StructureMapSourceListMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapTargetListMode', PHPFHIRTypeMap::getTypeClass('StructureMapTargetListMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRStructureMapTransform', PHPFHIRTypeMap::getTypeClass('StructureMapTransform'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSubscriptionChannelType', PHPFHIRTypeMap::getTypeClass('SubscriptionChannelType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSubscriptionStatus', PHPFHIRTypeMap::getTypeClass('SubscriptionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSupplyDeliveryStatus', PHPFHIRTypeMap::getTypeClass('SupplyDeliveryStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSupplyRequestStatus', PHPFHIRTypeMap::getTypeClass('SupplyRequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRSystemRestfulInteraction', PHPFHIRTypeMap::getTypeClass('SystemRestfulInteraction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTaskIntent', PHPFHIRTypeMap::getTypeClass('TaskIntent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTaskStatus', PHPFHIRTypeMap::getTypeClass('TaskStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestReportActionResult', PHPFHIRTypeMap::getTypeClass('TestReportActionResult'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestReportParticipantType', PHPFHIRTypeMap::getTypeClass('TestReportParticipantType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestReportResult', PHPFHIRTypeMap::getTypeClass('TestReportResult'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestReportStatus', PHPFHIRTypeMap::getTypeClass('TestReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTestScriptRequestMethodCode', PHPFHIRTypeMap::getTypeClass('TestScriptRequestMethodCode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTime', PHPFHIRTypeMap::getTypeClass('time'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTriggerDefinition', PHPFHIRTypeMap::getTypeClass('TriggerDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTriggerType', PHPFHIRTypeMap::getTypeClass('TriggerType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTypeDerivationRule', PHPFHIRTypeMap::getTypeClass('TypeDerivationRule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRTypeRestfulInteraction', PHPFHIRTypeMap::getTypeClass('TypeRestfulInteraction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUDIEntryType', PHPFHIRTypeMap::getTypeClass('UDIEntryType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUnitsOfTime', PHPFHIRTypeMap::getTypeClass('UnitsOfTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUnsignedInt', PHPFHIRTypeMap::getTypeClass('unsignedInt'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUri', PHPFHIRTypeMap::getTypeClass('uri'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUrl', PHPFHIRTypeMap::getTypeClass('url'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUsageContext', PHPFHIRTypeMap::getTypeClass('UsageContext'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUse', PHPFHIRTypeMap::getTypeClass('Use'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRUuid', PHPFHIRTypeMap::getTypeClass('uuid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRVariableType', PHPFHIRTypeMap::getTypeClass('VariableType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRVConfidentialityClassification', PHPFHIRTypeMap::getTypeClass('vConfidentialityClassification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRVisionBase', PHPFHIRTypeMap::getTypeClass('VisionBase'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRVisionEyes', PHPFHIRTypeMap::getTypeClass('VisionEyes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRElement\FHIRXPathUsageType', PHPFHIRTypeMap::getTypeClass('XPathUsageType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIREligibilityRequestPurposeList', PHPFHIRTypeMap::getTypeClass('EligibilityRequestPurpose-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIREligibilityResponsePurposeList', PHPFHIRTypeMap::getTypeClass('EligibilityResponsePurpose-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIREnableWhenBehaviorList', PHPFHIRTypeMap::getTypeClass('EnableWhenBehavior-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIREncounterLocationStatusList', PHPFHIRTypeMap::getTypeClass('EncounterLocationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIREncounterStatusList', PHPFHIRTypeMap::getTypeClass('EncounterStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIREndpointStatusList', PHPFHIRTypeMap::getTypeClass('EndpointStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIREpisodeOfCareStatusList', PHPFHIRTypeMap::getTypeClass('EpisodeOfCareStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIREventCapabilityModeList', PHPFHIRTypeMap::getTypeClass('EventCapabilityMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIREventStatusList', PHPFHIRTypeMap::getTypeClass('EventStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIREventTimingList', PHPFHIRTypeMap::getTypeClass('EventTiming-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIREvidenceVariableTypeList', PHPFHIRTypeMap::getTypeClass('EvidenceVariableType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRExampleScenarioActorTypeList', PHPFHIRTypeMap::getTypeClass('ExampleScenarioActorType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRExplanationOfBenefitStatusList', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefitStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRExposureStateList', PHPFHIRTypeMap::getTypeClass('ExposureState-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRExpressionLanguageList', PHPFHIRTypeMap::getTypeClass('ExpressionLanguage-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRExtensionContextTypeList', PHPFHIRTypeMap::getTypeClass('ExtensionContextType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRFamilyHistoryStatusList', PHPFHIRTypeMap::getTypeClass('FamilyHistoryStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRFHIRDeviceStatusList', PHPFHIRTypeMap::getTypeClass('FHIRDeviceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRFHIRSubstanceStatusList', PHPFHIRTypeMap::getTypeClass('FHIRSubstanceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRFHIRVersionList', PHPFHIRTypeMap::getTypeClass('FHIRVersion-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRFilterOperatorList', PHPFHIRTypeMap::getTypeClass('FilterOperator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRFinancialResourceStatusCodesList', PHPFHIRTypeMap::getTypeClass('FinancialResourceStatusCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRFlagStatusList', PHPFHIRTypeMap::getTypeClass('FlagStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRGoalLifecycleStatusList', PHPFHIRTypeMap::getTypeClass('GoalLifecycleStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRGraphCompartmentRuleList', PHPFHIRTypeMap::getTypeClass('GraphCompartmentRule-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRGraphCompartmentUseList', PHPFHIRTypeMap::getTypeClass('GraphCompartmentUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRGroupMeasureList', PHPFHIRTypeMap::getTypeClass('GroupMeasure-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRGroupTypeList', PHPFHIRTypeMap::getTypeClass('GroupType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRGuidanceResponseStatusList', PHPFHIRTypeMap::getTypeClass('GuidanceResponseStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRGuidePageGenerationList', PHPFHIRTypeMap::getTypeClass('GuidePageGeneration-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRGuideParameterCodeList', PHPFHIRTypeMap::getTypeClass('GuideParameterCode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRHTTPVerbList', PHPFHIRTypeMap::getTypeClass('HTTPVerb-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRIdentifierUseList', PHPFHIRTypeMap::getTypeClass('IdentifierUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRIdentityAssuranceLevelList', PHPFHIRTypeMap::getTypeClass('IdentityAssuranceLevel-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRIdPrimitive', PHPFHIRTypeMap::getTypeClass('id-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRImagingStudyStatusList', PHPFHIRTypeMap::getTypeClass('ImagingStudyStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRImmunizationEvaluationStatusCodesList', PHPFHIRTypeMap::getTypeClass('ImmunizationEvaluationStatusCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRImmunizationStatusCodesList', PHPFHIRTypeMap::getTypeClass('ImmunizationStatusCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRInstantPrimitive', PHPFHIRTypeMap::getTypeClass('instant-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRIntegerPrimitive', PHPFHIRTypeMap::getTypeClass('integer-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRInvoicePriceComponentTypeList', PHPFHIRTypeMap::getTypeClass('InvoicePriceComponentType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRInvoiceStatusList', PHPFHIRTypeMap::getTypeClass('InvoiceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRIssueSeverityList', PHPFHIRTypeMap::getTypeClass('IssueSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRIssueTypeList', PHPFHIRTypeMap::getTypeClass('IssueType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRLinkageTypeList', PHPFHIRTypeMap::getTypeClass('LinkageType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRLinkTypeList', PHPFHIRTypeMap::getTypeClass('LinkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRListModeList', PHPFHIRTypeMap::getTypeClass('ListMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRListStatusList', PHPFHIRTypeMap::getTypeClass('ListStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRLocationModeList', PHPFHIRTypeMap::getTypeClass('LocationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRLocationStatusList', PHPFHIRTypeMap::getTypeClass('LocationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRMarkdownPrimitive', PHPFHIRTypeMap::getTypeClass('markdown-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRMeasureReportStatusList', PHPFHIRTypeMap::getTypeClass('MeasureReportStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRMeasureReportTypeList', PHPFHIRTypeMap::getTypeClass('MeasureReportType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRMedicationRequestIntentList', PHPFHIRTypeMap::getTypeClass('medicationRequestIntent-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRMedicationrequestStatusList', PHPFHIRTypeMap::getTypeClass('medicationrequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRMedicationStatusCodesList', PHPFHIRTypeMap::getTypeClass('MedicationStatusCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRMessageheaderResponseRequestList', PHPFHIRTypeMap::getTypeClass('messageheaderResponseRequest-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRMessageSignificanceCategoryList', PHPFHIRTypeMap::getTypeClass('MessageSignificanceCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRNameUseList', PHPFHIRTypeMap::getTypeClass('NameUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRNamingSystemIdentifierTypeList', PHPFHIRTypeMap::getTypeClass('NamingSystemIdentifierType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRNamingSystemTypeList', PHPFHIRTypeMap::getTypeClass('NamingSystemType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRNarrativeStatusList', PHPFHIRTypeMap::getTypeClass('NarrativeStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRNoteTypeList', PHPFHIRTypeMap::getTypeClass('NoteType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRObservationDataTypeList', PHPFHIRTypeMap::getTypeClass('ObservationDataType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRObservationRangeCategoryList', PHPFHIRTypeMap::getTypeClass('ObservationRangeCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRObservationStatusList', PHPFHIRTypeMap::getTypeClass('ObservationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIROidPrimitive', PHPFHIRTypeMap::getTypeClass('oid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIROperationKindList', PHPFHIRTypeMap::getTypeClass('OperationKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIROperationParameterUseList', PHPFHIRTypeMap::getTypeClass('OperationParameterUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIROrientationTypeList', PHPFHIRTypeMap::getTypeClass('orientationType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRParticipantRequiredList', PHPFHIRTypeMap::getTypeClass('ParticipantRequired-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRParticipationStatusList', PHPFHIRTypeMap::getTypeClass('ParticipationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRPositiveIntPrimitive', PHPFHIRTypeMap::getTypeClass('positiveInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRPropertyRepresentationList', PHPFHIRTypeMap::getTypeClass('PropertyRepresentation-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRPropertyTypeList', PHPFHIRTypeMap::getTypeClass('PropertyType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRProvenanceEntityRoleList', PHPFHIRTypeMap::getTypeClass('ProvenanceEntityRole-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRPublicationStatusList', PHPFHIRTypeMap::getTypeClass('PublicationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRQualityTypeList', PHPFHIRTypeMap::getTypeClass('qualityType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRQuantityComparatorList', PHPFHIRTypeMap::getTypeClass('QuantityComparator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRQuestionnaireItemOperatorList', PHPFHIRTypeMap::getTypeClass('QuestionnaireItemOperator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRQuestionnaireItemTypeList', PHPFHIRTypeMap::getTypeClass('QuestionnaireItemType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRQuestionnaireResponseStatusList', PHPFHIRTypeMap::getTypeClass('QuestionnaireResponseStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRReferenceHandlingPolicyList', PHPFHIRTypeMap::getTypeClass('ReferenceHandlingPolicy-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRReferenceVersionRulesList', PHPFHIRTypeMap::getTypeClass('ReferenceVersionRules-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRRelatedArtifactTypeList', PHPFHIRTypeMap::getTypeClass('RelatedArtifactType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRRemittanceOutcomeList', PHPFHIRTypeMap::getTypeClass('RemittanceOutcome-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRRepositoryTypeList', PHPFHIRTypeMap::getTypeClass('repositoryType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRRequestIntentList', PHPFHIRTypeMap::getTypeClass('RequestIntent-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRRequestPriorityList', PHPFHIRTypeMap::getTypeClass('RequestPriority-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRRequestResourceTypeList', PHPFHIRTypeMap::getTypeClass('RequestResourceType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRRequestStatusList', PHPFHIRTypeMap::getTypeClass('RequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResearchElementTypeList', PHPFHIRTypeMap::getTypeClass('ResearchElementType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResearchStudyStatusList', PHPFHIRTypeMap::getTypeClass('ResearchStudyStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResearchSubjectStatusList', PHPFHIRTypeMap::getTypeClass('ResearchSubjectStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource', PHPFHIRTypeMap::getTypeClass('Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResourceContainer', PHPFHIRTypeMap::getTypeClass('ResourceContainer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResourceType', PHPFHIRTypeMap::getTypeClass('ResourceType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResourceTypeList', PHPFHIRTypeMap::getTypeClass('ResourceType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResourceVersionPolicyList', PHPFHIRTypeMap::getTypeClass('ResourceVersionPolicy-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRBinary', PHPFHIRTypeMap::getTypeClass('Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRBundle', PHPFHIRTypeMap::getTypeClass('Bundle'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource', PHPFHIRTypeMap::getTypeClass('DomainResource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAccount', PHPFHIRTypeMap::getTypeClass('Account'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRActivityDefinition', PHPFHIRTypeMap::getTypeClass('ActivityDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAdverseEvent', PHPFHIRTypeMap::getTypeClass('AdverseEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', PHPFHIRTypeMap::getTypeClass('AllergyIntolerance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAppointment', PHPFHIRTypeMap::getTypeClass('Appointment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', PHPFHIRTypeMap::getTypeClass('AppointmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRAuditEvent', PHPFHIRTypeMap::getTypeClass('AuditEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRBasic', PHPFHIRTypeMap::getTypeClass('Basic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct', PHPFHIRTypeMap::getTypeClass('BiologicallyDerivedProduct'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRBodyStructure', PHPFHIRTypeMap::getTypeClass('BodyStructure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement', PHPFHIRTypeMap::getTypeClass('CapabilityStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCarePlan', PHPFHIRTypeMap::getTypeClass('CarePlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCareTeam', PHPFHIRTypeMap::getTypeClass('CareTeam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCatalogEntry', PHPFHIRTypeMap::getTypeClass('CatalogEntry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRChargeItem', PHPFHIRTypeMap::getTypeClass('ChargeItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRChargeItemDefinition', PHPFHIRTypeMap::getTypeClass('ChargeItemDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRClaim', PHPFHIRTypeMap::getTypeClass('Claim'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRClaimResponse', PHPFHIRTypeMap::getTypeClass('ClaimResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', PHPFHIRTypeMap::getTypeClass('ClinicalImpression'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCodeSystem', PHPFHIRTypeMap::getTypeClass('CodeSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCommunication', PHPFHIRTypeMap::getTypeClass('Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', PHPFHIRTypeMap::getTypeClass('CommunicationRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition', PHPFHIRTypeMap::getTypeClass('CompartmentDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRComposition', PHPFHIRTypeMap::getTypeClass('Composition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRConceptMap', PHPFHIRTypeMap::getTypeClass('ConceptMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCondition', PHPFHIRTypeMap::getTypeClass('Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRConsent', PHPFHIRTypeMap::getTypeClass('Consent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRContract', PHPFHIRTypeMap::getTypeClass('Contract'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCoverage', PHPFHIRTypeMap::getTypeClass('Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse', PHPFHIRTypeMap::getTypeClass('CoverageEligibilityResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', PHPFHIRTypeMap::getTypeClass('DetectedIssue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDevice', PHPFHIRTypeMap::getTypeClass('Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition', PHPFHIRTypeMap::getTypeClass('DeviceDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', PHPFHIRTypeMap::getTypeClass('DeviceMetric'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceRequest', PHPFHIRTypeMap::getTypeClass('DeviceRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement', PHPFHIRTypeMap::getTypeClass('DeviceUseStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', PHPFHIRTypeMap::getTypeClass('DiagnosticReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDocumentManifest', PHPFHIRTypeMap::getTypeClass('DocumentManifest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRDocumentReference', PHPFHIRTypeMap::getTypeClass('DocumentReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREffectEvidenceSynthesis', PHPFHIRTypeMap::getTypeClass('EffectEvidenceSynthesis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREncounter', PHPFHIRTypeMap::getTypeClass('Encounter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREndpoint', PHPFHIRTypeMap::getTypeClass('Endpoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', PHPFHIRTypeMap::getTypeClass('EnrollmentRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', PHPFHIRTypeMap::getTypeClass('EnrollmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', PHPFHIRTypeMap::getTypeClass('EpisodeOfCare'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREventDefinition', PHPFHIRTypeMap::getTypeClass('EventDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREvidence', PHPFHIRTypeMap::getTypeClass('Evidence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIREvidenceVariable', PHPFHIRTypeMap::getTypeClass('EvidenceVariable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRExampleScenario', PHPFHIRTypeMap::getTypeClass('ExampleScenario'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', PHPFHIRTypeMap::getTypeClass('ExplanationOfBenefit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', PHPFHIRTypeMap::getTypeClass('FamilyMemberHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRFlag', PHPFHIRTypeMap::getTypeClass('Flag'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGoal', PHPFHIRTypeMap::getTypeClass('Goal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGraphDefinition', PHPFHIRTypeMap::getTypeClass('GraphDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGroup', PHPFHIRTypeMap::getTypeClass('Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse', PHPFHIRTypeMap::getTypeClass('GuidanceResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRHealthcareService', PHPFHIRTypeMap::getTypeClass('HealthcareService'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImagingStudy', PHPFHIRTypeMap::getTypeClass('ImagingStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImmunization', PHPFHIRTypeMap::getTypeClass('Immunization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation', PHPFHIRTypeMap::getTypeClass('ImmunizationEvaluation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', PHPFHIRTypeMap::getTypeClass('ImmunizationRecommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRImplementationGuide', PHPFHIRTypeMap::getTypeClass('ImplementationGuide'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRInsurancePlan', PHPFHIRTypeMap::getTypeClass('InsurancePlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRInvoice', PHPFHIRTypeMap::getTypeClass('Invoice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRLibrary', PHPFHIRTypeMap::getTypeClass('Library'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRLinkage', PHPFHIRTypeMap::getTypeClass('Linkage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRList', PHPFHIRTypeMap::getTypeClass('List'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRLocation', PHPFHIRTypeMap::getTypeClass('Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMeasure', PHPFHIRTypeMap::getTypeClass('Measure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMeasureReport', PHPFHIRTypeMap::getTypeClass('MeasureReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedia', PHPFHIRTypeMap::getTypeClass('Media'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedication', PHPFHIRTypeMap::getTypeClass('Medication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', PHPFHIRTypeMap::getTypeClass('MedicationAdministration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', PHPFHIRTypeMap::getTypeClass('MedicationDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationKnowledge', PHPFHIRTypeMap::getTypeClass('MedicationKnowledge'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationRequest', PHPFHIRTypeMap::getTypeClass('MedicationRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', PHPFHIRTypeMap::getTypeClass('MedicationStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProduct', PHPFHIRTypeMap::getTypeClass('MedicinalProduct'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductAuthorization', PHPFHIRTypeMap::getTypeClass('MedicinalProductAuthorization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductContraindication', PHPFHIRTypeMap::getTypeClass('MedicinalProductContraindication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductIndication', PHPFHIRTypeMap::getTypeClass('MedicinalProductIndication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductIngredient', PHPFHIRTypeMap::getTypeClass('MedicinalProductIngredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductInteraction', PHPFHIRTypeMap::getTypeClass('MedicinalProductInteraction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductManufactured', PHPFHIRTypeMap::getTypeClass('MedicinalProductManufactured'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductPackaged', PHPFHIRTypeMap::getTypeClass('MedicinalProductPackaged'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductPharmaceutical', PHPFHIRTypeMap::getTypeClass('MedicinalProductPharmaceutical'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMedicinalProductUndesirableEffect', PHPFHIRTypeMap::getTypeClass('MedicinalProductUndesirableEffect'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMessageDefinition', PHPFHIRTypeMap::getTypeClass('MessageDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMessageHeader', PHPFHIRTypeMap::getTypeClass('MessageHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRMolecularSequence', PHPFHIRTypeMap::getTypeClass('MolecularSequence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRNamingSystem', PHPFHIRTypeMap::getTypeClass('NamingSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', PHPFHIRTypeMap::getTypeClass('NutritionOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRObservation', PHPFHIRTypeMap::getTypeClass('Observation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRObservationDefinition', PHPFHIRTypeMap::getTypeClass('ObservationDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROperationDefinition', PHPFHIRTypeMap::getTypeClass('OperationDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROperationOutcome', PHPFHIRTypeMap::getTypeClass('OperationOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROrganization', PHPFHIRTypeMap::getTypeClass('Organization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation', PHPFHIRTypeMap::getTypeClass('OrganizationAffiliation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPatient', PHPFHIRTypeMap::getTypeClass('Patient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', PHPFHIRTypeMap::getTypeClass('PaymentNotice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', PHPFHIRTypeMap::getTypeClass('PaymentReconciliation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPerson', PHPFHIRTypeMap::getTypeClass('Person'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPlanDefinition', PHPFHIRTypeMap::getTypeClass('PlanDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPractitioner', PHPFHIRTypeMap::getTypeClass('Practitioner'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRPractitionerRole', PHPFHIRTypeMap::getTypeClass('PractitionerRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRProcedure', PHPFHIRTypeMap::getTypeClass('Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRProvenance', PHPFHIRTypeMap::getTypeClass('Provenance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRQuestionnaire', PHPFHIRTypeMap::getTypeClass('Questionnaire'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', PHPFHIRTypeMap::getTypeClass('QuestionnaireResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', PHPFHIRTypeMap::getTypeClass('RelatedPerson'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRequestGroup', PHPFHIRTypeMap::getTypeClass('RequestGroup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchDefinition', PHPFHIRTypeMap::getTypeClass('ResearchDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchElementDefinition', PHPFHIRTypeMap::getTypeClass('ResearchElementDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchStudy', PHPFHIRTypeMap::getTypeClass('ResearchStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRResearchSubject', PHPFHIRTypeMap::getTypeClass('ResearchSubject'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', PHPFHIRTypeMap::getTypeClass('RiskAssessment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRRiskEvidenceSynthesis', PHPFHIRTypeMap::getTypeClass('RiskEvidenceSynthesis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSchedule', PHPFHIRTypeMap::getTypeClass('Schedule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSearchParameter', PHPFHIRTypeMap::getTypeClass('SearchParameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRServiceRequest', PHPFHIRTypeMap::getTypeClass('ServiceRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSlot', PHPFHIRTypeMap::getTypeClass('Slot'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSpecimen', PHPFHIRTypeMap::getTypeClass('Specimen'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSpecimenDefinition', PHPFHIRTypeMap::getTypeClass('SpecimenDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRStructureDefinition', PHPFHIRTypeMap::getTypeClass('StructureDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRStructureMap', PHPFHIRTypeMap::getTypeClass('StructureMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubscription', PHPFHIRTypeMap::getTypeClass('Subscription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstance', PHPFHIRTypeMap::getTypeClass('Substance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceNucleicAcid', PHPFHIRTypeMap::getTypeClass('SubstanceNucleicAcid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstancePolymer', PHPFHIRTypeMap::getTypeClass('SubstancePolymer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceProtein', PHPFHIRTypeMap::getTypeClass('SubstanceProtein'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceReferenceInformation', PHPFHIRTypeMap::getTypeClass('SubstanceReferenceInformation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceSourceMaterial', PHPFHIRTypeMap::getTypeClass('SubstanceSourceMaterial'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSubstanceSpecification', PHPFHIRTypeMap::getTypeClass('SubstanceSpecification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', PHPFHIRTypeMap::getTypeClass('SupplyDelivery'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', PHPFHIRTypeMap::getTypeClass('SupplyRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTask', PHPFHIRTypeMap::getTypeClass('Task'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTerminologyCapabilities', PHPFHIRTypeMap::getTypeClass('TerminologyCapabilities'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTestReport', PHPFHIRTypeMap::getTypeClass('TestReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRTestScript', PHPFHIRTypeMap::getTypeClass('TestScript'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRValueSet', PHPFHIRTypeMap::getTypeClass('ValueSet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRVerificationResult', PHPFHIRTypeMap::getTypeClass('VerificationResult'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', PHPFHIRTypeMap::getTypeClass('VisionPrescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResource\FHIRParameters', PHPFHIRTypeMap::getTypeClass('Parameters'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRResponseTypeList', PHPFHIRTypeMap::getTypeClass('ResponseType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRRestfulCapabilityModeList', PHPFHIRTypeMap::getTypeClass('RestfulCapabilityMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRSampledDataDataTypePrimitive', PHPFHIRTypeMap::getTypeClass('SampledDataDataType-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRSearchComparatorList', PHPFHIRTypeMap::getTypeClass('SearchComparator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRSearchEntryModeList', PHPFHIRTypeMap::getTypeClass('SearchEntryMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRSearchModifierCodeList', PHPFHIRTypeMap::getTypeClass('SearchModifierCode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRSearchParamTypeList', PHPFHIRTypeMap::getTypeClass('SearchParamType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRSequenceTypeList', PHPFHIRTypeMap::getTypeClass('sequenceType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRSlicingRulesList', PHPFHIRTypeMap::getTypeClass('SlicingRules-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRSlotStatusList', PHPFHIRTypeMap::getTypeClass('SlotStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRSortDirectionList', PHPFHIRTypeMap::getTypeClass('SortDirection-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRSPDXLicenseList', PHPFHIRTypeMap::getTypeClass('SPDXLicense-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRSpecimenContainedPreferenceList', PHPFHIRTypeMap::getTypeClass('SpecimenContainedPreference-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRSpecimenStatusList', PHPFHIRTypeMap::getTypeClass('SpecimenStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRStatusList', PHPFHIRTypeMap::getTypeClass('status-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRStrandTypeList', PHPFHIRTypeMap::getTypeClass('strandType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRStringPrimitive', PHPFHIRTypeMap::getTypeClass('string-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRStructureDefinitionKindList', PHPFHIRTypeMap::getTypeClass('StructureDefinitionKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapContextTypeList', PHPFHIRTypeMap::getTypeClass('StructureMapContextType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapGroupTypeModeList', PHPFHIRTypeMap::getTypeClass('StructureMapGroupTypeMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapInputModeList', PHPFHIRTypeMap::getTypeClass('StructureMapInputMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapModelModeList', PHPFHIRTypeMap::getTypeClass('StructureMapModelMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapSourceListModeList', PHPFHIRTypeMap::getTypeClass('StructureMapSourceListMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapTargetListModeList', PHPFHIRTypeMap::getTypeClass('StructureMapTargetListMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRStructureMapTransformList', PHPFHIRTypeMap::getTypeClass('StructureMapTransform-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRSubscriptionChannelTypeList', PHPFHIRTypeMap::getTypeClass('SubscriptionChannelType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRSubscriptionStatusList', PHPFHIRTypeMap::getTypeClass('SubscriptionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRSupplyDeliveryStatusList', PHPFHIRTypeMap::getTypeClass('SupplyDeliveryStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRSupplyRequestStatusList', PHPFHIRTypeMap::getTypeClass('SupplyRequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRSystemRestfulInteractionList', PHPFHIRTypeMap::getTypeClass('SystemRestfulInteraction-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRTaskIntentList', PHPFHIRTypeMap::getTypeClass('TaskIntent-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRTaskStatusList', PHPFHIRTypeMap::getTypeClass('TaskStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRTestReportActionResultList', PHPFHIRTypeMap::getTypeClass('TestReportActionResult-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRTestReportParticipantTypeList', PHPFHIRTypeMap::getTypeClass('TestReportParticipantType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRTestReportResultList', PHPFHIRTypeMap::getTypeClass('TestReportResult-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRTestReportStatusList', PHPFHIRTypeMap::getTypeClass('TestReportStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRTestScriptRequestMethodCodeList', PHPFHIRTypeMap::getTypeClass('TestScriptRequestMethodCode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRTimePrimitive', PHPFHIRTypeMap::getTypeClass('time-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRTriggerTypeList', PHPFHIRTypeMap::getTypeClass('TriggerType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRTypeDerivationRuleList', PHPFHIRTypeMap::getTypeClass('TypeDerivationRule-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRTypeRestfulInteractionList', PHPFHIRTypeMap::getTypeClass('TypeRestfulInteraction-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRUDIEntryTypeList', PHPFHIRTypeMap::getTypeClass('UDIEntryType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRUnitsOfTimeList', PHPFHIRTypeMap::getTypeClass('UnitsOfTime-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRUnsignedIntPrimitive', PHPFHIRTypeMap::getTypeClass('unsignedInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRUriPrimitive', PHPFHIRTypeMap::getTypeClass('uri-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRUrlPrimitive', PHPFHIRTypeMap::getTypeClass('url-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRUseList', PHPFHIRTypeMap::getTypeClass('Use-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRUuidPrimitive', PHPFHIRTypeMap::getTypeClass('uuid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRVariableTypeList', PHPFHIRTypeMap::getTypeClass('VariableType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRVConfidentialityClassificationList', PHPFHIRTypeMap::getTypeClass('vConfidentialityClassification-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRVisionBaseList', PHPFHIRTypeMap::getTypeClass('VisionBase-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRVisionEyesList', PHPFHIRTypeMap::getTypeClass('VisionEyes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\R4\FHIRXPathUsageTypeList', PHPFHIRTypeMap::getTypeClass('XPathUsageType-list'));
    }
}
