<?php

namespace Tests\DCarbone\PHPFHIRGenerated\Versions\R4B;

/*!
 * This class was generated with the PHPFHIR library (https://github.com/dcarbone/php-fhir) using
 * class definitions from HL7 FHIR (https://www.hl7.org/fhir/)
 * 
 * Class creation date: February 3rd, 2025 17:37+0000
 * 
 * PHPFHIR Copyright:
 * 
 * Copyright 2016-2025 Daniel Carbone (daniel.p.carbone@gmail.com)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 *
 * FHIR Copyright Notice:
 *
 *  * #%L
 *  * org.hl7.fhir.r5
 *  * %%
 *  * Copyright (C) 2014 - 2019 Health Level 7
 *  * %%
 *  * Licensed under the Apache License, Version 2.0 (the "License");
 *  * you may not use this file except in compliance with the License.
 *  * You may obtain a copy of the License at
 *  *
 *  *      http://www.apache.org/licenses/LICENSE-2.0
 *  *
 *  * Unless required by applicable law or agreed to in writing, software
 *  * distributed under the License is distributed on an "AS IS" BASIS,
 *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  * See the License for the specific language governing permissions and
 *  * limitations under the License.
 *  * #L%
 *  
 * 
 * 
 *   Copyright (c) 2011+, HL7, Inc.
 *   All rights reserved.
 * 
 *   Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *    * Neither the name of HL7 nor the names of its contributors may be used to
 *      endorse or promote products derived from this software without specific
 *      prior written permission.
 * 
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *   IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 * 
 * 
 *   Generated on Sat, May 28, 2022 12:47+1000 for FHIR v4.3.0
 * 
 *   Note: the schemas & schematrons do not contain all of the rules about what makes resources
 *   valid. Implementers will still need to be familiar with the content of the specification and with
 *   any profiles that apply to the resources in order to make a conformant implementation.
 * 
 */

use DCarbone\PHPFHIRGenerated\Versions\R4B\VersionTypeMap;
use PHPUnit\Framework\TestCase;

class VersionTypeMapTest extends TestCase
{
    public function testGetTypeClassWithNonStringReturnsNull()
    {
        $this->assertNull(VersionTypeMap::getTypeClassName(1));
    }

    public function testGetTypeClassName()
    {
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRBase64BinaryPrimitive', VersionTypeMap::getTypeClassName('base64Binary-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRBooleanPrimitive', VersionTypeMap::getTypeClassName('boolean-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCanonicalPrimitive', VersionTypeMap::getTypeClassName('canonical-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive', VersionTypeMap::getTypeClassName('code-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAccountStatusEnum', VersionTypeMap::getTypeClassName('AccountStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorEnum', VersionTypeMap::getTypeClassName('ActionCardinalityBehaviorEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionConditionKindEnum', VersionTypeMap::getTypeClassName('ActionConditionKindEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorEnum', VersionTypeMap::getTypeClassName('ActionGroupingBehaviorEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionParticipantTypeEnum', VersionTypeMap::getTypeClassName('ActionParticipantTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorEnum', VersionTypeMap::getTypeClassName('ActionPrecheckBehaviorEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeEnum', VersionTypeMap::getTypeClassName('ActionRelationshipTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorEnum', VersionTypeMap::getTypeClassName('ActionRequiredBehaviorEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorEnum', VersionTypeMap::getTypeClassName('ActionSelectionBehaviorEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAddressTypeEnum', VersionTypeMap::getTypeClassName('AddressTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAddressUseEnum', VersionTypeMap::getTypeClassName('AddressUseEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAdministrativeGenderEnum', VersionTypeMap::getTypeClassName('AdministrativeGenderEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAdverseEventActualityEnum', VersionTypeMap::getTypeClassName('AdverseEventActualityEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAgeUnitsEnum', VersionTypeMap::getTypeClassName('AgeUnitsEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAggregationModeEnum', VersionTypeMap::getTypeClassName('AggregationModeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryEnum', VersionTypeMap::getTypeClassName('AllergyIntoleranceCategoryEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityEnum', VersionTypeMap::getTypeClassName('AllergyIntoleranceCriticalityEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityEnum', VersionTypeMap::getTypeClassName('AllergyIntoleranceSeverityEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceTypeEnum', VersionTypeMap::getTypeClassName('AllergyIntoleranceTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAppointmentStatusEnum', VersionTypeMap::getTypeClassName('AppointmentStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeEnum', VersionTypeMap::getTypeClassName('AssertionDirectionTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeEnum', VersionTypeMap::getTypeClassName('AssertionOperatorTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesEnum', VersionTypeMap::getTypeClassName('AssertionResponseTypesEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAuditEventActionEnum', VersionTypeMap::getTypeClassName('AuditEventActionEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAuditEventAgentNetworkTypeEnum', VersionTypeMap::getTypeClassName('AuditEventAgentNetworkTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAuditEventOutcomeEnum', VersionTypeMap::getTypeClassName('AuditEventOutcomeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBindingStrengthEnum', VersionTypeMap::getTypeClassName('BindingStrengthEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductCategoryEnum', VersionTypeMap::getTypeClassName('BiologicallyDerivedProductCategoryEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductStatusEnum', VersionTypeMap::getTypeClassName('BiologicallyDerivedProductStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductStorageScaleEnum', VersionTypeMap::getTypeClassName('BiologicallyDerivedProductStorageScaleEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBundleTypeEnum', VersionTypeMap::getTypeClassName('BundleTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindEnum', VersionTypeMap::getTypeClassName('CapabilityStatementKindEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCarePlanActivityKindEnum', VersionTypeMap::getTypeClassName('CarePlanActivityKindEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCarePlanActivityStatusEnum', VersionTypeMap::getTypeClassName('CarePlanActivityStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCarePlanIntentEnum', VersionTypeMap::getTypeClassName('CarePlanIntentEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCareTeamStatusEnum', VersionTypeMap::getTypeClassName('CareTeamStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCatalogEntryRelationTypeEnum', VersionTypeMap::getTypeClassName('CatalogEntryRelationTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCharacteristicCombinationEnum', VersionTypeMap::getTypeClassName('CharacteristicCombinationEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRChargeItemStatusEnum', VersionTypeMap::getTypeClassName('ChargeItemStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRClinicalImpressionStatusEnum', VersionTypeMap::getTypeClassName('ClinicalImpressionStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRClinicalUseDefinitionTypeEnum', VersionTypeMap::getTypeClassName('ClinicalUseDefinitionTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCodeSearchSupportEnum', VersionTypeMap::getTypeClassName('CodeSearchSupportEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeEnum', VersionTypeMap::getTypeClassName('CodeSystemContentModeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningEnum', VersionTypeMap::getTypeClassName('CodeSystemHierarchyMeaningEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCompartmentTypeEnum', VersionTypeMap::getTypeClassName('CompartmentTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCompositionAttestationModeEnum', VersionTypeMap::getTypeClassName('CompositionAttestationModeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCompositionStatusEnum', VersionTypeMap::getTypeClassName('CompositionStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConceptMapEquivalenceEnum', VersionTypeMap::getTypeClassName('ConceptMapEquivalenceEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeEnum', VersionTypeMap::getTypeClassName('ConceptMapGroupUnmappedModeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusEnum', VersionTypeMap::getTypeClassName('ConditionalDeleteStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConditionalReadStatusEnum', VersionTypeMap::getTypeClassName('ConditionalReadStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConfidentialityEnum', VersionTypeMap::getTypeClassName('ConfidentialityEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConsentDataMeaningEnum', VersionTypeMap::getTypeClassName('ConsentDataMeaningEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConsentProvisionTypeEnum', VersionTypeMap::getTypeClassName('ConsentProvisionTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConsentStateEnum', VersionTypeMap::getTypeClassName('ConsentStateEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConstraintSeverityEnum', VersionTypeMap::getTypeClassName('ConstraintSeverityEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContactPointSystemEnum', VersionTypeMap::getTypeClassName('ContactPointSystemEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContactPointUseEnum', VersionTypeMap::getTypeClassName('ContactPointUseEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContractResourcePublicationStatusCodesEnum', VersionTypeMap::getTypeClassName('ContractResourcePublicationStatusCodesEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesEnum', VersionTypeMap::getTypeClassName('ContractResourceStatusCodesEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContributorTypeEnum', VersionTypeMap::getTypeClassName('ContributorTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCriteriaNotExistsBehaviorEnum', VersionTypeMap::getTypeClassName('CriteriaNotExistsBehaviorEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDaysOfWeekEnum', VersionTypeMap::getTypeClassName('DaysOfWeekEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDefinitionResourceTypeEnum', VersionTypeMap::getTypeClassName('DefinitionResourceTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityEnum', VersionTypeMap::getTypeClassName('DetectedIssueSeverityEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateEnum', VersionTypeMap::getTypeClassName('DeviceMetricCalibrationStateEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeEnum', VersionTypeMap::getTypeClassName('DeviceMetricCalibrationTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryEnum', VersionTypeMap::getTypeClassName('DeviceMetricCategoryEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricColorEnum', VersionTypeMap::getTypeClassName('DeviceMetricColorEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusEnum', VersionTypeMap::getTypeClassName('DeviceMetricOperationalStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceNameTypeEnum', VersionTypeMap::getTypeClassName('DeviceNameTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceUseStatementStatusEnum', VersionTypeMap::getTypeClassName('DeviceUseStatementStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusEnum', VersionTypeMap::getTypeClassName('DiagnosticReportStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeEnum', VersionTypeMap::getTypeClassName('DiscriminatorTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDocumentModeEnum', VersionTypeMap::getTypeClassName('DocumentModeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusEnum', VersionTypeMap::getTypeClassName('DocumentReferenceStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDocumentRelationshipTypeEnum', VersionTypeMap::getTypeClassName('DocumentRelationshipTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREligibilityRequestPurposeEnum', VersionTypeMap::getTypeClassName('EligibilityRequestPurposeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREligibilityResponsePurposeEnum', VersionTypeMap::getTypeClassName('EligibilityResponsePurposeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREnableWhenBehaviorEnum', VersionTypeMap::getTypeClassName('EnableWhenBehaviorEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREncounterLocationStatusEnum', VersionTypeMap::getTypeClassName('EncounterLocationStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREncounterStatusEnum', VersionTypeMap::getTypeClassName('EncounterStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREndpointStatusEnum', VersionTypeMap::getTypeClassName('EndpointStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusEnum', VersionTypeMap::getTypeClassName('EpisodeOfCareStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventCapabilityModeEnum', VersionTypeMap::getTypeClassName('EventCapabilityModeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventOrRequestResourceTypesEnum', VersionTypeMap::getTypeClassName('EventOrRequestResourceTypesEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventResourceTypeEnum', VersionTypeMap::getTypeClassName('EventResourceTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventStatusEnum', VersionTypeMap::getTypeClassName('EventStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventTimingEnum', VersionTypeMap::getTypeClassName('EventTimingEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREvidenceVariableHandlingEnum', VersionTypeMap::getTypeClassName('EvidenceVariableHandlingEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRExampleScenarioActorTypeEnum', VersionTypeMap::getTypeClassName('ExampleScenarioActorTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusEnum', VersionTypeMap::getTypeClassName('ExplanationOfBenefitStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRExpressionLanguageEnum', VersionTypeMap::getTypeClassName('ExpressionLanguageEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRExtensionContextTypeEnum', VersionTypeMap::getTypeClassName('ExtensionContextTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusEnum', VersionTypeMap::getTypeClassName('FamilyHistoryStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRAllTypesEnum', VersionTypeMap::getTypeClassName('FHIRAllTypesEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRDefinedTypeEnum', VersionTypeMap::getTypeClassName('FHIRDefinedTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusEnum', VersionTypeMap::getTypeClassName('FHIRDeviceStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRPathTypesEnum', VersionTypeMap::getTypeClassName('FHIRPathTypesEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusEnum', VersionTypeMap::getTypeClassName('FHIRSubstanceStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRVersionEnum', VersionTypeMap::getTypeClassName('FHIRVersionEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFilterOperatorEnum', VersionTypeMap::getTypeClassName('FilterOperatorEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesEnum', VersionTypeMap::getTypeClassName('FinancialResourceStatusCodesEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFlagStatusEnum', VersionTypeMap::getTypeClassName('FlagStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGoalLifecycleStatusEnum', VersionTypeMap::getTypeClassName('GoalLifecycleStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleEnum', VersionTypeMap::getTypeClassName('GraphCompartmentRuleEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGraphCompartmentUseEnum', VersionTypeMap::getTypeClassName('GraphCompartmentUseEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGroupMeasureEnum', VersionTypeMap::getTypeClassName('GroupMeasureEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGroupTypeEnum', VersionTypeMap::getTypeClassName('GroupTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusEnum', VersionTypeMap::getTypeClassName('GuidanceResponseStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGuidePageGenerationEnum', VersionTypeMap::getTypeClassName('GuidePageGenerationEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGuideParameterCodeEnum', VersionTypeMap::getTypeClassName('GuideParameterCodeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRHTTPVerbEnum', VersionTypeMap::getTypeClassName('HTTPVerbEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIdentifierUseEnum', VersionTypeMap::getTypeClassName('IdentifierUseEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelEnum', VersionTypeMap::getTypeClassName('IdentityAssuranceLevelEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRImagingStudyStatusEnum', VersionTypeMap::getTypeClassName('ImagingStudyStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRImmunizationEvaluationStatusCodesEnum', VersionTypeMap::getTypeClassName('ImmunizationEvaluationStatusCodesEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesEnum', VersionTypeMap::getTypeClassName('ImmunizationStatusCodesEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIngredientManufacturerRoleEnum', VersionTypeMap::getTypeClassName('IngredientManufacturerRoleEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRInteractionTriggerEnum', VersionTypeMap::getTypeClassName('InteractionTriggerEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRInvoicePriceComponentTypeEnum', VersionTypeMap::getTypeClassName('InvoicePriceComponentTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRInvoiceStatusEnum', VersionTypeMap::getTypeClassName('InvoiceStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIssueSeverityEnum', VersionTypeMap::getTypeClassName('IssueSeverityEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIssueTypeEnum', VersionTypeMap::getTypeClassName('IssueTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRKnowledgeResourceTypeEnum', VersionTypeMap::getTypeClassName('KnowledgeResourceTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRLinkageTypeEnum', VersionTypeMap::getTypeClassName('LinkageTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRLinkTypeEnum', VersionTypeMap::getTypeClassName('LinkTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRListModeEnum', VersionTypeMap::getTypeClassName('ListModeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRListStatusEnum', VersionTypeMap::getTypeClassName('ListStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRLocationModeEnum', VersionTypeMap::getTypeClassName('LocationModeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRLocationStatusEnum', VersionTypeMap::getTypeClassName('LocationStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMeasureReportStatusEnum', VersionTypeMap::getTypeClassName('MeasureReportStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMeasureReportTypeEnum', VersionTypeMap::getTypeClassName('MeasureReportTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentEnum', VersionTypeMap::getTypeClassName('medicationRequestIntentEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMedicationrequestStatusEnum', VersionTypeMap::getTypeClassName('medicationrequestStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusCodesEnum', VersionTypeMap::getTypeClassName('MedicationStatementStatusCodesEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMedicationStatusCodesEnum', VersionTypeMap::getTypeClassName('MedicationStatusCodesEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMessageheaderResponseRequestEnum', VersionTypeMap::getTypeClassName('messageheaderResponseRequestEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryEnum', VersionTypeMap::getTypeClassName('MessageSignificanceCategoryEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNameUseEnum', VersionTypeMap::getTypeClassName('NameUseEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeEnum', VersionTypeMap::getTypeClassName('NamingSystemIdentifierTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNamingSystemTypeEnum', VersionTypeMap::getTypeClassName('NamingSystemTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNarrativeStatusEnum', VersionTypeMap::getTypeClassName('NarrativeStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNoteTypeEnum', VersionTypeMap::getTypeClassName('NoteTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNutritionProductStatusEnum', VersionTypeMap::getTypeClassName('NutritionProductStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRObservationDataTypeEnum', VersionTypeMap::getTypeClassName('ObservationDataTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRObservationRangeCategoryEnum', VersionTypeMap::getTypeClassName('ObservationRangeCategoryEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRObservationStatusEnum', VersionTypeMap::getTypeClassName('ObservationStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIROperationKindEnum', VersionTypeMap::getTypeClassName('OperationKindEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIROperationParameterUseEnum', VersionTypeMap::getTypeClassName('OperationParameterUseEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIROrientationTypeEnum', VersionTypeMap::getTypeClassName('orientationTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRParticipantRequiredEnum', VersionTypeMap::getTypeClassName('ParticipantRequiredEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRParticipationStatusEnum', VersionTypeMap::getTypeClassName('ParticipationStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRPropertyRepresentationEnum', VersionTypeMap::getTypeClassName('PropertyRepresentationEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRPropertyTypeEnum', VersionTypeMap::getTypeClassName('PropertyTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleEnum', VersionTypeMap::getTypeClassName('ProvenanceEntityRoleEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRPublicationStatusEnum', VersionTypeMap::getTypeClassName('PublicationStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQualityTypeEnum', VersionTypeMap::getTypeClassName('qualityTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQuantityComparatorEnum', VersionTypeMap::getTypeClassName('QuantityComparatorEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQuestionnaireItemOperatorEnum', VersionTypeMap::getTypeClassName('QuestionnaireItemOperatorEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeEnum', VersionTypeMap::getTypeClassName('QuestionnaireItemTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusEnum', VersionTypeMap::getTypeClassName('QuestionnaireResponseStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyEnum', VersionTypeMap::getTypeClassName('ReferenceHandlingPolicyEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesEnum', VersionTypeMap::getTypeClassName('ReferenceVersionRulesEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeEnum', VersionTypeMap::getTypeClassName('RelatedArtifactTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeEnum', VersionTypeMap::getTypeClassName('RemittanceOutcomeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRReportRelationshipTypeEnum', VersionTypeMap::getTypeClassName('ReportRelationshipTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRepositoryTypeEnum', VersionTypeMap::getTypeClassName('repositoryTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRequestIntentEnum', VersionTypeMap::getTypeClassName('RequestIntentEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRequestPriorityEnum', VersionTypeMap::getTypeClassName('RequestPriorityEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRequestResourceTypeEnum', VersionTypeMap::getTypeClassName('RequestResourceTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRequestStatusEnum', VersionTypeMap::getTypeClassName('RequestStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResearchElementTypeEnum', VersionTypeMap::getTypeClassName('ResearchElementTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResearchStudyStatusEnum', VersionTypeMap::getTypeClassName('ResearchStudyStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResearchSubjectStatusEnum', VersionTypeMap::getTypeClassName('ResearchSubjectStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResourceTypeEnum', VersionTypeMap::getTypeClassName('ResourceTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyEnum', VersionTypeMap::getTypeClassName('ResourceVersionPolicyEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResponseTypeEnum', VersionTypeMap::getTypeClassName('ResponseTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeEnum', VersionTypeMap::getTypeClassName('RestfulCapabilityModeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSearchComparatorEnum', VersionTypeMap::getTypeClassName('SearchComparatorEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSearchEntryModeEnum', VersionTypeMap::getTypeClassName('SearchEntryModeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSearchModifierCodeEnum', VersionTypeMap::getTypeClassName('SearchModifierCodeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSearchParamTypeEnum', VersionTypeMap::getTypeClassName('SearchParamTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSequenceTypeEnum', VersionTypeMap::getTypeClassName('sequenceTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSlicingRulesEnum', VersionTypeMap::getTypeClassName('SlicingRulesEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSlotStatusEnum', VersionTypeMap::getTypeClassName('SlotStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSortDirectionEnum', VersionTypeMap::getTypeClassName('SortDirectionEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSPDXLicenseEnum', VersionTypeMap::getTypeClassName('SPDXLicenseEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSpecimenContainedPreferenceEnum', VersionTypeMap::getTypeClassName('SpecimenContainedPreferenceEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSpecimenStatusEnum', VersionTypeMap::getTypeClassName('SpecimenStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStatusEnum', VersionTypeMap::getTypeClassName('statusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStrandTypeEnum', VersionTypeMap::getTypeClassName('strandTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindEnum', VersionTypeMap::getTypeClassName('StructureDefinitionKindEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapContextTypeEnum', VersionTypeMap::getTypeClassName('StructureMapContextTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeEnum', VersionTypeMap::getTypeClassName('StructureMapGroupTypeModeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapInputModeEnum', VersionTypeMap::getTypeClassName('StructureMapInputModeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapModelModeEnum', VersionTypeMap::getTypeClassName('StructureMapModelModeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeEnum', VersionTypeMap::getTypeClassName('StructureMapSourceListModeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeEnum', VersionTypeMap::getTypeClassName('StructureMapTargetListModeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapTransformEnum', VersionTypeMap::getTypeClassName('StructureMapTransformEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSubscriptionChannelTypeEnum', VersionTypeMap::getTypeClassName('SubscriptionChannelTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSubscriptionNotificationTypeEnum', VersionTypeMap::getTypeClassName('SubscriptionNotificationTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSubscriptionStatusCodesEnum', VersionTypeMap::getTypeClassName('SubscriptionStatusCodesEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusEnum', VersionTypeMap::getTypeClassName('SupplyDeliveryStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusEnum', VersionTypeMap::getTypeClassName('SupplyRequestStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionEnum', VersionTypeMap::getTypeClassName('SystemRestfulInteractionEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTaskIntentEnum', VersionTypeMap::getTypeClassName('TaskIntentEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTaskStatusEnum', VersionTypeMap::getTypeClassName('TaskStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestReportActionResultEnum', VersionTypeMap::getTypeClassName('TestReportActionResultEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeEnum', VersionTypeMap::getTypeClassName('TestReportParticipantTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestReportResultEnum', VersionTypeMap::getTypeClassName('TestReportResultEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestReportStatusEnum', VersionTypeMap::getTypeClassName('TestReportStatusEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeEnum', VersionTypeMap::getTypeClassName('TestScriptRequestMethodCodeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTriggerTypeEnum', VersionTypeMap::getTypeClassName('TriggerTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleEnum', VersionTypeMap::getTypeClassName('TypeDerivationRuleEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionEnum', VersionTypeMap::getTypeClassName('TypeRestfulInteractionEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRUDIEntryTypeEnum', VersionTypeMap::getTypeClassName('UDIEntryTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRUnitsOfTimeEnum', VersionTypeMap::getTypeClassName('UnitsOfTimeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRUseEnum', VersionTypeMap::getTypeClassName('UseEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRVariableTypeEnum', VersionTypeMap::getTypeClassName('VariableTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRVisionBaseEnum', VersionTypeMap::getTypeClassName('VisionBaseEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRVisionEyesEnum', VersionTypeMap::getTypeClassName('VisionEyesEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRXPathUsageTypeEnum', VersionTypeMap::getTypeClassName('XPathUsageTypeEnum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRDatePrimitive', VersionTypeMap::getTypeClassName('date-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRDateTimePrimitive', VersionTypeMap::getTypeClassName('dateTime-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRDecimalPrimitive', VersionTypeMap::getTypeClassName('decimal-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement', VersionTypeMap::getTypeClassName('Element'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAccountStatus', VersionTypeMap::getTypeClassName('AccountStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionCardinalityBehavior', VersionTypeMap::getTypeClassName('ActionCardinalityBehavior'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionConditionKind', VersionTypeMap::getTypeClassName('ActionConditionKind'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionGroupingBehavior', VersionTypeMap::getTypeClassName('ActionGroupingBehavior'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionParticipantType', VersionTypeMap::getTypeClassName('ActionParticipantType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionPrecheckBehavior', VersionTypeMap::getTypeClassName('ActionPrecheckBehavior'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionRelationshipType', VersionTypeMap::getTypeClassName('ActionRelationshipType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionRequiredBehavior', VersionTypeMap::getTypeClassName('ActionRequiredBehavior'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionSelectionBehavior', VersionTypeMap::getTypeClassName('ActionSelectionBehavior'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAddress', VersionTypeMap::getTypeClassName('Address'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAddressType', VersionTypeMap::getTypeClassName('AddressType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAddressUse', VersionTypeMap::getTypeClassName('AddressUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAdministrativeGender', VersionTypeMap::getTypeClassName('AdministrativeGender'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAdverseEventActuality', VersionTypeMap::getTypeClassName('AdverseEventActuality'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAgeUnits', VersionTypeMap::getTypeClassName('AgeUnits'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAggregationMode', VersionTypeMap::getTypeClassName('AggregationMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAllergyIntoleranceCategory', VersionTypeMap::getTypeClassName('AllergyIntoleranceCategory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAllergyIntoleranceCriticality', VersionTypeMap::getTypeClassName('AllergyIntoleranceCriticality'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAllergyIntoleranceSeverity', VersionTypeMap::getTypeClassName('AllergyIntoleranceSeverity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAllergyIntoleranceType', VersionTypeMap::getTypeClassName('AllergyIntoleranceType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAnnotation', VersionTypeMap::getTypeClassName('Annotation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAppointmentStatus', VersionTypeMap::getTypeClassName('AppointmentStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAssertionDirectionType', VersionTypeMap::getTypeClassName('AssertionDirectionType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAssertionOperatorType', VersionTypeMap::getTypeClassName('AssertionOperatorType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAssertionResponseTypes', VersionTypeMap::getTypeClassName('AssertionResponseTypes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAttachment', VersionTypeMap::getTypeClassName('Attachment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAuditEventAction', VersionTypeMap::getTypeClassName('AuditEventAction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAuditEventAgentNetworkType', VersionTypeMap::getTypeClassName('AuditEventAgentNetworkType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAuditEventOutcome', VersionTypeMap::getTypeClassName('AuditEventOutcome'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement', VersionTypeMap::getTypeClassName('BackboneElement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage', VersionTypeMap::getTypeClassName('Account.Coverage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor', VersionTypeMap::getTypeClassName('Account.Guarantor'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue', VersionTypeMap::getTypeClassName('ActivityDefinition.DynamicValue'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant', VersionTypeMap::getTypeClassName('ActivityDefinition.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionProperty', VersionTypeMap::getTypeClassName('AdministrableProductDefinition.Property'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionRouteOfAdministration', VersionTypeMap::getTypeClassName('AdministrableProductDefinition.RouteOfAdministration'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionTargetSpecies', VersionTypeMap::getTypeClassName('AdministrableProductDefinition.TargetSpecies'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionWithdrawalPeriod', VersionTypeMap::getTypeClassName('AdministrableProductDefinition.WithdrawalPeriod'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality', VersionTypeMap::getTypeClassName('AdverseEvent.Causality'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity', VersionTypeMap::getTypeClassName('AdverseEvent.SuspectEntity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction', VersionTypeMap::getTypeClassName('AllergyIntolerance.Reaction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant', VersionTypeMap::getTypeClassName('Appointment.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent', VersionTypeMap::getTypeClassName('AuditEvent.Agent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail', VersionTypeMap::getTypeClassName('AuditEvent.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity', VersionTypeMap::getTypeClassName('AuditEvent.Entity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork', VersionTypeMap::getTypeClassName('AuditEvent.Network'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource', VersionTypeMap::getTypeClassName('AuditEvent.Source'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection', VersionTypeMap::getTypeClassName('BiologicallyDerivedProduct.Collection'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductManipulation', VersionTypeMap::getTypeClassName('BiologicallyDerivedProduct.Manipulation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProcessing', VersionTypeMap::getTypeClassName('BiologicallyDerivedProduct.Processing'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductStorage', VersionTypeMap::getTypeClassName('BiologicallyDerivedProduct.Storage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry', VersionTypeMap::getTypeClassName('Bundle.Entry'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink', VersionTypeMap::getTypeClassName('Bundle.Link'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest', VersionTypeMap::getTypeClassName('Bundle.Request'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse', VersionTypeMap::getTypeClassName('Bundle.Response'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch', VersionTypeMap::getTypeClassName('Bundle.Search'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument', VersionTypeMap::getTypeClassName('CapabilityStatement.Document'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint', VersionTypeMap::getTypeClassName('CapabilityStatement.Endpoint'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation', VersionTypeMap::getTypeClassName('CapabilityStatement.Implementation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction', VersionTypeMap::getTypeClassName('CapabilityStatement.Interaction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1', VersionTypeMap::getTypeClassName('CapabilityStatement.Interaction1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging', VersionTypeMap::getTypeClassName('CapabilityStatement.Messaging'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation', VersionTypeMap::getTypeClassName('CapabilityStatement.Operation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource', VersionTypeMap::getTypeClassName('CapabilityStatement.Resource'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest', VersionTypeMap::getTypeClassName('CapabilityStatement.Rest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam', VersionTypeMap::getTypeClassName('CapabilityStatement.SearchParam'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity', VersionTypeMap::getTypeClassName('CapabilityStatement.Security'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware', VersionTypeMap::getTypeClassName('CapabilityStatement.Software'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage', VersionTypeMap::getTypeClassName('CapabilityStatement.SupportedMessage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity', VersionTypeMap::getTypeClassName('CarePlan.Activity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail', VersionTypeMap::getTypeClassName('CarePlan.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant', VersionTypeMap::getTypeClassName('CareTeam.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCatalogEntry\FHIRCatalogEntryRelatedEntry', VersionTypeMap::getTypeClassName('CatalogEntry.RelatedEntry'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability', VersionTypeMap::getTypeClassName('ChargeItemDefinition.Applicability'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPriceComponent', VersionTypeMap::getTypeClassName('ChargeItemDefinition.PriceComponent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup', VersionTypeMap::getTypeClassName('ChargeItemDefinition.PropertyGroup'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer', VersionTypeMap::getTypeClassName('ChargeItem.Performer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAbstract', VersionTypeMap::getTypeClassName('Citation.Abstract'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAffiliationInfo', VersionTypeMap::getTypeClassName('Citation.AffiliationInfo'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationCitedArtifact', VersionTypeMap::getTypeClassName('Citation.CitedArtifact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification', VersionTypeMap::getTypeClassName('Citation.Classification'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification1', VersionTypeMap::getTypeClassName('Citation.Classification1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributionInstance', VersionTypeMap::getTypeClassName('Citation.ContributionInstance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributorship', VersionTypeMap::getTypeClassName('Citation.Contributorship'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationDateOfPublication', VersionTypeMap::getTypeClassName('Citation.DateOfPublication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationEntry', VersionTypeMap::getTypeClassName('Citation.Entry'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPart', VersionTypeMap::getTypeClassName('Citation.Part'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPeriodicRelease', VersionTypeMap::getTypeClassName('Citation.PeriodicRelease'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublicationForm', VersionTypeMap::getTypeClassName('Citation.PublicationForm'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublishedIn', VersionTypeMap::getTypeClassName('Citation.PublishedIn'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo', VersionTypeMap::getTypeClassName('Citation.RelatesTo'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo1', VersionTypeMap::getTypeClassName('Citation.RelatesTo1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate', VersionTypeMap::getTypeClassName('Citation.StatusDate'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate1', VersionTypeMap::getTypeClassName('Citation.StatusDate1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary', VersionTypeMap::getTypeClassName('Citation.Summary'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary1', VersionTypeMap::getTypeClassName('Citation.Summary1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationTitle', VersionTypeMap::getTypeClassName('Citation.Title'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationVersion', VersionTypeMap::getTypeClassName('Citation.Version'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWebLocation', VersionTypeMap::getTypeClassName('Citation.WebLocation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWhoClassified', VersionTypeMap::getTypeClassName('Citation.WhoClassified'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem', VersionTypeMap::getTypeClassName('ClaimResponse.AddItem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication', VersionTypeMap::getTypeClassName('ClaimResponse.Adjudication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail', VersionTypeMap::getTypeClassName('ClaimResponse.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1', VersionTypeMap::getTypeClassName('ClaimResponse.Detail1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError', VersionTypeMap::getTypeClassName('ClaimResponse.Error'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance', VersionTypeMap::getTypeClassName('ClaimResponse.Insurance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem', VersionTypeMap::getTypeClassName('ClaimResponse.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment', VersionTypeMap::getTypeClassName('ClaimResponse.Payment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote', VersionTypeMap::getTypeClassName('ClaimResponse.ProcessNote'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail', VersionTypeMap::getTypeClassName('ClaimResponse.SubDetail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1', VersionTypeMap::getTypeClassName('ClaimResponse.SubDetail1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal', VersionTypeMap::getTypeClassName('ClaimResponse.Total'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident', VersionTypeMap::getTypeClassName('Claim.Accident'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam', VersionTypeMap::getTypeClassName('Claim.CareTeam'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail', VersionTypeMap::getTypeClassName('Claim.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis', VersionTypeMap::getTypeClassName('Claim.Diagnosis'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance', VersionTypeMap::getTypeClassName('Claim.Insurance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem', VersionTypeMap::getTypeClassName('Claim.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee', VersionTypeMap::getTypeClassName('Claim.Payee'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure', VersionTypeMap::getTypeClassName('Claim.Procedure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated', VersionTypeMap::getTypeClassName('Claim.Related'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail', VersionTypeMap::getTypeClassName('Claim.SubDetail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo', VersionTypeMap::getTypeClassName('Claim.SupportingInfo'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding', VersionTypeMap::getTypeClassName('ClinicalImpression.Finding'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation', VersionTypeMap::getTypeClassName('ClinicalImpression.Investigation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionContraindication', VersionTypeMap::getTypeClassName('ClinicalUseDefinition.Contraindication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionIndication', VersionTypeMap::getTypeClassName('ClinicalUseDefinition.Indication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteractant', VersionTypeMap::getTypeClassName('ClinicalUseDefinition.Interactant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteraction', VersionTypeMap::getTypeClassName('ClinicalUseDefinition.Interaction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionOtherTherapy', VersionTypeMap::getTypeClassName('ClinicalUseDefinition.OtherTherapy'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionUndesirableEffect', VersionTypeMap::getTypeClassName('ClinicalUseDefinition.UndesirableEffect'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionWarning', VersionTypeMap::getTypeClassName('ClinicalUseDefinition.Warning'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept', VersionTypeMap::getTypeClassName('CodeSystem.Concept'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation', VersionTypeMap::getTypeClassName('CodeSystem.Designation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter', VersionTypeMap::getTypeClassName('CodeSystem.Filter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty', VersionTypeMap::getTypeClassName('CodeSystem.Property'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1', VersionTypeMap::getTypeClassName('CodeSystem.Property1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload', VersionTypeMap::getTypeClassName('CommunicationRequest.Payload'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload', VersionTypeMap::getTypeClassName('Communication.Payload'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource', VersionTypeMap::getTypeClassName('CompartmentDefinition.Resource'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester', VersionTypeMap::getTypeClassName('Composition.Attester'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent', VersionTypeMap::getTypeClassName('Composition.Event'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo', VersionTypeMap::getTypeClassName('Composition.RelatesTo'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection', VersionTypeMap::getTypeClassName('Composition.Section'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn', VersionTypeMap::getTypeClassName('ConceptMap.DependsOn'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement', VersionTypeMap::getTypeClassName('ConceptMap.Element'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup', VersionTypeMap::getTypeClassName('ConceptMap.Group'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget', VersionTypeMap::getTypeClassName('ConceptMap.Target'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped', VersionTypeMap::getTypeClassName('ConceptMap.Unmapped'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence', VersionTypeMap::getTypeClassName('Condition.Evidence'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage', VersionTypeMap::getTypeClassName('Condition.Stage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor', VersionTypeMap::getTypeClassName('Consent.Actor'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData', VersionTypeMap::getTypeClassName('Consent.Data'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy', VersionTypeMap::getTypeClassName('Consent.Policy'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision', VersionTypeMap::getTypeClassName('Consent.Provision'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification', VersionTypeMap::getTypeClassName('Consent.Verification'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction', VersionTypeMap::getTypeClassName('Contract.Action'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer', VersionTypeMap::getTypeClassName('Contract.Answer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset', VersionTypeMap::getTypeClassName('Contract.Asset'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition', VersionTypeMap::getTypeClassName('Contract.ContentDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext', VersionTypeMap::getTypeClassName('Contract.Context'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly', VersionTypeMap::getTypeClassName('Contract.Friendly'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal', VersionTypeMap::getTypeClassName('Contract.Legal'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer', VersionTypeMap::getTypeClassName('Contract.Offer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty', VersionTypeMap::getTypeClassName('Contract.Party'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule', VersionTypeMap::getTypeClassName('Contract.Rule'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel', VersionTypeMap::getTypeClassName('Contract.SecurityLabel'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner', VersionTypeMap::getTypeClassName('Contract.Signer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject', VersionTypeMap::getTypeClassName('Contract.Subject'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm', VersionTypeMap::getTypeClassName('Contract.Term'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem', VersionTypeMap::getTypeClassName('Contract.ValuedItem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis', VersionTypeMap::getTypeClassName('CoverageEligibilityRequest.Diagnosis'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance', VersionTypeMap::getTypeClassName('CoverageEligibilityRequest.Insurance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem', VersionTypeMap::getTypeClassName('CoverageEligibilityRequest.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo', VersionTypeMap::getTypeClassName('CoverageEligibilityRequest.SupportingInfo'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit', VersionTypeMap::getTypeClassName('CoverageEligibilityResponse.Benefit'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError', VersionTypeMap::getTypeClassName('CoverageEligibilityResponse.Error'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance', VersionTypeMap::getTypeClassName('CoverageEligibilityResponse.Insurance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem', VersionTypeMap::getTypeClassName('CoverageEligibilityResponse.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass', VersionTypeMap::getTypeClassName('Coverage.Class'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary', VersionTypeMap::getTypeClassName('Coverage.CostToBeneficiary'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException', VersionTypeMap::getTypeClassName('Coverage.Exception'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence', VersionTypeMap::getTypeClassName('DetectedIssue.Evidence'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation', VersionTypeMap::getTypeClassName('DetectedIssue.Mitigation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCapability', VersionTypeMap::getTypeClassName('DeviceDefinition.Capability'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName', VersionTypeMap::getTypeClassName('DeviceDefinition.DeviceName'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial', VersionTypeMap::getTypeClassName('DeviceDefinition.Material'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty', VersionTypeMap::getTypeClassName('DeviceDefinition.Property'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionSpecialization', VersionTypeMap::getTypeClassName('DeviceDefinition.Specialization'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier', VersionTypeMap::getTypeClassName('DeviceDefinition.UdiDeviceIdentifier'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration', VersionTypeMap::getTypeClassName('DeviceMetric.Calibration'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter', VersionTypeMap::getTypeClassName('DeviceRequest.Parameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceDeviceName', VersionTypeMap::getTypeClassName('Device.DeviceName'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty', VersionTypeMap::getTypeClassName('Device.Property'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceSpecialization', VersionTypeMap::getTypeClassName('Device.Specialization'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier', VersionTypeMap::getTypeClassName('Device.UdiCarrier'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion', VersionTypeMap::getTypeClassName('Device.Version'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia', VersionTypeMap::getTypeClassName('DiagnosticReport.Media'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated', VersionTypeMap::getTypeClassName('DocumentManifest.Related'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent', VersionTypeMap::getTypeClassName('DocumentReference.Content'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext', VersionTypeMap::getTypeClassName('DocumentReference.Context'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo', VersionTypeMap::getTypeClassName('DocumentReference.RelatesTo'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDosage', VersionTypeMap::getTypeClassName('Dosage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDosage\FHIRDosageDoseAndRate', VersionTypeMap::getTypeClassName('Dosage.DoseAndRate'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition', VersionTypeMap::getTypeClassName('ElementDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionBase', VersionTypeMap::getTypeClassName('ElementDefinition.Base'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionBinding', VersionTypeMap::getTypeClassName('ElementDefinition.Binding'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionConstraint', VersionTypeMap::getTypeClassName('ElementDefinition.Constraint'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator', VersionTypeMap::getTypeClassName('ElementDefinition.Discriminator'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionExample', VersionTypeMap::getTypeClassName('ElementDefinition.Example'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionMapping', VersionTypeMap::getTypeClassName('ElementDefinition.Mapping'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionSlicing', VersionTypeMap::getTypeClassName('ElementDefinition.Slicing'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionType', VersionTypeMap::getTypeClassName('ElementDefinition.Type'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory', VersionTypeMap::getTypeClassName('Encounter.ClassHistory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis', VersionTypeMap::getTypeClassName('Encounter.Diagnosis'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization', VersionTypeMap::getTypeClassName('Encounter.Hospitalization'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation', VersionTypeMap::getTypeClassName('Encounter.Location'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant', VersionTypeMap::getTypeClassName('Encounter.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory', VersionTypeMap::getTypeClassName('Encounter.StatusHistory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis', VersionTypeMap::getTypeClassName('EpisodeOfCare.Diagnosis'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory', VersionTypeMap::getTypeClassName('EpisodeOfCare.StatusHistory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportCharacteristic', VersionTypeMap::getTypeClassName('EvidenceReport.Characteristic'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportRelatesTo', VersionTypeMap::getTypeClassName('EvidenceReport.RelatesTo'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSection', VersionTypeMap::getTypeClassName('EvidenceReport.Section'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSubject', VersionTypeMap::getTypeClassName('EvidenceReport.Subject'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCategory', VersionTypeMap::getTypeClassName('EvidenceVariable.Category'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic', VersionTypeMap::getTypeClassName('EvidenceVariable.Characteristic'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableTimeFromStart', VersionTypeMap::getTypeClassName('EvidenceVariable.TimeFromStart'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceAttributeEstimate', VersionTypeMap::getTypeClassName('Evidence.AttributeEstimate'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceCertainty', VersionTypeMap::getTypeClassName('Evidence.Certainty'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceModelCharacteristic', VersionTypeMap::getTypeClassName('Evidence.ModelCharacteristic'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceSampleSize', VersionTypeMap::getTypeClassName('Evidence.SampleSize'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceStatistic', VersionTypeMap::getTypeClassName('Evidence.Statistic'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariable', VersionTypeMap::getTypeClassName('Evidence.Variable'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariableDefinition', VersionTypeMap::getTypeClassName('Evidence.VariableDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor', VersionTypeMap::getTypeClassName('ExampleScenario.Actor'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative', VersionTypeMap::getTypeClassName('ExampleScenario.Alternative'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance', VersionTypeMap::getTypeClassName('ExampleScenario.ContainedInstance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance', VersionTypeMap::getTypeClassName('ExampleScenario.Instance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation', VersionTypeMap::getTypeClassName('ExampleScenario.Operation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess', VersionTypeMap::getTypeClassName('ExampleScenario.Process'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep', VersionTypeMap::getTypeClassName('ExampleScenario.Step'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion', VersionTypeMap::getTypeClassName('ExampleScenario.Version'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Accident'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.AddItem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Adjudication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.BenefitBalance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.CareTeam'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Detail1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Diagnosis'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Financial'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Insurance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Payee'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Payment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Procedure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.ProcessNote'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Related'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.SubDetail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.SubDetail1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.SupportingInfo'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Total'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition', VersionTypeMap::getTypeClassName('FamilyMemberHistory.Condition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget', VersionTypeMap::getTypeClassName('Goal.Target'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment', VersionTypeMap::getTypeClassName('GraphDefinition.Compartment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink', VersionTypeMap::getTypeClassName('GraphDefinition.Link'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget', VersionTypeMap::getTypeClassName('GraphDefinition.Target'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic', VersionTypeMap::getTypeClassName('Group.Characteristic'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember', VersionTypeMap::getTypeClassName('Group.Member'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime', VersionTypeMap::getTypeClassName('HealthcareService.AvailableTime'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility', VersionTypeMap::getTypeClassName('HealthcareService.Eligibility'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable', VersionTypeMap::getTypeClassName('HealthcareService.NotAvailable'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance', VersionTypeMap::getTypeClassName('ImagingStudy.Instance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer', VersionTypeMap::getTypeClassName('ImagingStudy.Performer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries', VersionTypeMap::getTypeClassName('ImagingStudy.Series'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion', VersionTypeMap::getTypeClassName('ImmunizationRecommendation.DateCriterion'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation', VersionTypeMap::getTypeClassName('ImmunizationRecommendation.Recommendation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationEducation', VersionTypeMap::getTypeClassName('Immunization.Education'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer', VersionTypeMap::getTypeClassName('Immunization.Performer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied', VersionTypeMap::getTypeClassName('Immunization.ProtocolApplied'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction', VersionTypeMap::getTypeClassName('Immunization.Reaction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition', VersionTypeMap::getTypeClassName('ImplementationGuide.Definition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn', VersionTypeMap::getTypeClassName('ImplementationGuide.DependsOn'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal', VersionTypeMap::getTypeClassName('ImplementationGuide.Global'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping', VersionTypeMap::getTypeClassName('ImplementationGuide.Grouping'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest', VersionTypeMap::getTypeClassName('ImplementationGuide.Manifest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage', VersionTypeMap::getTypeClassName('ImplementationGuide.Page'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1', VersionTypeMap::getTypeClassName('ImplementationGuide.Page1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter', VersionTypeMap::getTypeClassName('ImplementationGuide.Parameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource', VersionTypeMap::getTypeClassName('ImplementationGuide.Resource'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1', VersionTypeMap::getTypeClassName('ImplementationGuide.Resource1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate', VersionTypeMap::getTypeClassName('ImplementationGuide.Template'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientManufacturer', VersionTypeMap::getTypeClassName('Ingredient.Manufacturer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientReferenceStrength', VersionTypeMap::getTypeClassName('Ingredient.ReferenceStrength'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientStrength', VersionTypeMap::getTypeClassName('Ingredient.Strength'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientSubstance', VersionTypeMap::getTypeClassName('Ingredient.Substance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit', VersionTypeMap::getTypeClassName('InsurancePlan.Benefit'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1', VersionTypeMap::getTypeClassName('InsurancePlan.Benefit1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanContact', VersionTypeMap::getTypeClassName('InsurancePlan.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost', VersionTypeMap::getTypeClassName('InsurancePlan.Cost'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage', VersionTypeMap::getTypeClassName('InsurancePlan.Coverage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost', VersionTypeMap::getTypeClassName('InsurancePlan.GeneralCost'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit', VersionTypeMap::getTypeClassName('InsurancePlan.Limit'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan', VersionTypeMap::getTypeClassName('InsurancePlan.Plan'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost', VersionTypeMap::getTypeClassName('InsurancePlan.SpecificCost'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem', VersionTypeMap::getTypeClassName('Invoice.LineItem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant', VersionTypeMap::getTypeClassName('Invoice.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoicePriceComponent', VersionTypeMap::getTypeClassName('Invoice.PriceComponent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem', VersionTypeMap::getTypeClassName('Linkage.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry', VersionTypeMap::getTypeClassName('List.Entry'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationHoursOfOperation', VersionTypeMap::getTypeClassName('Location.HoursOfOperation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition', VersionTypeMap::getTypeClassName('Location.Position'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionProperty', VersionTypeMap::getTypeClassName('ManufacturedItemDefinition.Property'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMarketingStatus', VersionTypeMap::getTypeClassName('MarketingStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent', VersionTypeMap::getTypeClassName('MeasureReport.Component'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup', VersionTypeMap::getTypeClassName('MeasureReport.Group'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation', VersionTypeMap::getTypeClassName('MeasureReport.Population'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1', VersionTypeMap::getTypeClassName('MeasureReport.Population1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier', VersionTypeMap::getTypeClassName('MeasureReport.Stratifier'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum', VersionTypeMap::getTypeClassName('MeasureReport.Stratum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent', VersionTypeMap::getTypeClassName('Measure.Component'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup', VersionTypeMap::getTypeClassName('Measure.Group'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation', VersionTypeMap::getTypeClassName('Measure.Population'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier', VersionTypeMap::getTypeClassName('Measure.Stratifier'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData', VersionTypeMap::getTypeClassName('Measure.SupplementalData'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage', VersionTypeMap::getTypeClassName('MedicationAdministration.Dosage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer', VersionTypeMap::getTypeClassName('MedicationAdministration.Performer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer', VersionTypeMap::getTypeClassName('MedicationDispense.Performer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution', VersionTypeMap::getTypeClassName('MedicationDispense.Substitution'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeAdministrationGuidelines', VersionTypeMap::getTypeClassName('MedicationKnowledge.AdministrationGuidelines'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost', VersionTypeMap::getTypeClassName('MedicationKnowledge.Cost'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage', VersionTypeMap::getTypeClassName('MedicationKnowledge.Dosage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic', VersionTypeMap::getTypeClassName('MedicationKnowledge.DrugCharacteristic'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient', VersionTypeMap::getTypeClassName('MedicationKnowledge.Ingredient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeKinetics', VersionTypeMap::getTypeClassName('MedicationKnowledge.Kinetics'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense', VersionTypeMap::getTypeClassName('MedicationKnowledge.MaxDispense'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification', VersionTypeMap::getTypeClassName('MedicationKnowledge.MedicineClassification'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram', VersionTypeMap::getTypeClassName('MedicationKnowledge.MonitoringProgram'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph', VersionTypeMap::getTypeClassName('MedicationKnowledge.Monograph'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging', VersionTypeMap::getTypeClassName('MedicationKnowledge.Packaging'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristics', VersionTypeMap::getTypeClassName('MedicationKnowledge.PatientCharacteristics'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory', VersionTypeMap::getTypeClassName('MedicationKnowledge.Regulatory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge', VersionTypeMap::getTypeClassName('MedicationKnowledge.RelatedMedicationKnowledge'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSchedule', VersionTypeMap::getTypeClassName('MedicationKnowledge.Schedule'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution', VersionTypeMap::getTypeClassName('MedicationKnowledge.Substitution'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest', VersionTypeMap::getTypeClassName('MedicationRequest.DispenseRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill', VersionTypeMap::getTypeClassName('MedicationRequest.InitialFill'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution', VersionTypeMap::getTypeClassName('MedicationRequest.Substitution'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch', VersionTypeMap::getTypeClassName('Medication.Batch'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient', VersionTypeMap::getTypeClassName('Medication.Ingredient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCharacteristic', VersionTypeMap::getTypeClassName('MedicinalProductDefinition.Characteristic'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionContact', VersionTypeMap::getTypeClassName('MedicinalProductDefinition.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCountryLanguage', VersionTypeMap::getTypeClassName('MedicinalProductDefinition.CountryLanguage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCrossReference', VersionTypeMap::getTypeClassName('MedicinalProductDefinition.CrossReference'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionName', VersionTypeMap::getTypeClassName('MedicinalProductDefinition.Name'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionNamePart', VersionTypeMap::getTypeClassName('MedicinalProductDefinition.NamePart'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionOperation', VersionTypeMap::getTypeClassName('MedicinalProductDefinition.Operation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse', VersionTypeMap::getTypeClassName('MessageDefinition.AllowedResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus', VersionTypeMap::getTypeClassName('MessageDefinition.Focus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination', VersionTypeMap::getTypeClassName('MessageHeader.Destination'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse', VersionTypeMap::getTypeClassName('MessageHeader.Response'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource', VersionTypeMap::getTypeClassName('MessageHeader.Source'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceInner', VersionTypeMap::getTypeClassName('MolecularSequence.Inner'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceOuter', VersionTypeMap::getTypeClassName('MolecularSequence.Outer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceQuality', VersionTypeMap::getTypeClassName('MolecularSequence.Quality'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceReferenceSeq', VersionTypeMap::getTypeClassName('MolecularSequence.ReferenceSeq'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRepository', VersionTypeMap::getTypeClassName('MolecularSequence.Repository'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRoc', VersionTypeMap::getTypeClassName('MolecularSequence.Roc'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStructureVariant', VersionTypeMap::getTypeClassName('MolecularSequence.StructureVariant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceVariant', VersionTypeMap::getTypeClassName('MolecularSequence.Variant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId', VersionTypeMap::getTypeClassName('NamingSystem.UniqueId'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration', VersionTypeMap::getTypeClassName('NutritionOrder.Administration'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula', VersionTypeMap::getTypeClassName('NutritionOrder.EnteralFormula'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient', VersionTypeMap::getTypeClassName('NutritionOrder.Nutrient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet', VersionTypeMap::getTypeClassName('NutritionOrder.OralDiet'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement', VersionTypeMap::getTypeClassName('NutritionOrder.Supplement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture', VersionTypeMap::getTypeClassName('NutritionOrder.Texture'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductIngredient', VersionTypeMap::getTypeClassName('NutritionProduct.Ingredient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductInstance', VersionTypeMap::getTypeClassName('NutritionProduct.Instance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductNutrient', VersionTypeMap::getTypeClassName('NutritionProduct.Nutrient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductProductCharacteristic', VersionTypeMap::getTypeClassName('NutritionProduct.ProductCharacteristic'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedInterval', VersionTypeMap::getTypeClassName('ObservationDefinition.QualifiedInterval'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQuantitativeDetails', VersionTypeMap::getTypeClassName('ObservationDefinition.QuantitativeDetails'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent', VersionTypeMap::getTypeClassName('Observation.Component'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange', VersionTypeMap::getTypeClassName('Observation.ReferenceRange'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding', VersionTypeMap::getTypeClassName('OperationDefinition.Binding'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload', VersionTypeMap::getTypeClassName('OperationDefinition.Overload'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter', VersionTypeMap::getTypeClassName('OperationDefinition.Parameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom', VersionTypeMap::getTypeClassName('OperationDefinition.ReferencedFrom'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue', VersionTypeMap::getTypeClassName('OperationOutcome.Issue'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact', VersionTypeMap::getTypeClassName('Organization.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionContainedItem', VersionTypeMap::getTypeClassName('PackagedProductDefinition.ContainedItem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionLegalStatusOfSupply', VersionTypeMap::getTypeClassName('PackagedProductDefinition.LegalStatusOfSupply'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionPackage', VersionTypeMap::getTypeClassName('PackagedProductDefinition.Package'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionProperty', VersionTypeMap::getTypeClassName('PackagedProductDefinition.Property'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionShelfLifeStorage', VersionTypeMap::getTypeClassName('PackagedProductDefinition.ShelfLifeStorage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter', VersionTypeMap::getTypeClassName('Parameters.Parameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication', VersionTypeMap::getTypeClassName('Patient.Communication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact', VersionTypeMap::getTypeClassName('Patient.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink', VersionTypeMap::getTypeClassName('Patient.Link'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail', VersionTypeMap::getTypeClassName('PaymentReconciliation.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote', VersionTypeMap::getTypeClassName('PaymentReconciliation.ProcessNote'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink', VersionTypeMap::getTypeClassName('Person.Link'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction', VersionTypeMap::getTypeClassName('PlanDefinition.Action'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition', VersionTypeMap::getTypeClassName('PlanDefinition.Condition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue', VersionTypeMap::getTypeClassName('PlanDefinition.DynamicValue'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal', VersionTypeMap::getTypeClassName('PlanDefinition.Goal'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant', VersionTypeMap::getTypeClassName('PlanDefinition.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction', VersionTypeMap::getTypeClassName('PlanDefinition.RelatedAction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget', VersionTypeMap::getTypeClassName('PlanDefinition.Target'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPopulation', VersionTypeMap::getTypeClassName('Population'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime', VersionTypeMap::getTypeClassName('PractitionerRole.AvailableTime'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable', VersionTypeMap::getTypeClassName('PractitionerRole.NotAvailable'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification', VersionTypeMap::getTypeClassName('Practitioner.Qualification'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice', VersionTypeMap::getTypeClassName('Procedure.FocalDevice'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer', VersionTypeMap::getTypeClassName('Procedure.Performer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProdCharacteristic', VersionTypeMap::getTypeClassName('ProdCharacteristic'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProductShelfLife', VersionTypeMap::getTypeClassName('ProductShelfLife'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent', VersionTypeMap::getTypeClassName('Provenance.Agent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity', VersionTypeMap::getTypeClassName('Provenance.Entity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer', VersionTypeMap::getTypeClassName('QuestionnaireResponse.Answer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem', VersionTypeMap::getTypeClassName('QuestionnaireResponse.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption', VersionTypeMap::getTypeClassName('Questionnaire.AnswerOption'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen', VersionTypeMap::getTypeClassName('Questionnaire.EnableWhen'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial', VersionTypeMap::getTypeClassName('Questionnaire.Initial'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem', VersionTypeMap::getTypeClassName('Questionnaire.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRegulatedAuthorization\FHIRRegulatedAuthorizationCase', VersionTypeMap::getTypeClassName('RegulatedAuthorization.Case'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication', VersionTypeMap::getTypeClassName('RelatedPerson.Communication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction', VersionTypeMap::getTypeClassName('RequestGroup.Action'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition', VersionTypeMap::getTypeClassName('RequestGroup.Condition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction', VersionTypeMap::getTypeClassName('RequestGroup.RelatedAction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRResearchElementDefinition\FHIRResearchElementDefinitionCharacteristic', VersionTypeMap::getTypeClassName('ResearchElementDefinition.Characteristic'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm', VersionTypeMap::getTypeClassName('ResearchStudy.Arm'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective', VersionTypeMap::getTypeClassName('ResearchStudy.Objective'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction', VersionTypeMap::getTypeClassName('RiskAssessment.Prediction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent', VersionTypeMap::getTypeClassName('SearchParameter.Component'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive', VersionTypeMap::getTypeClassName('SpecimenDefinition.Additive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer', VersionTypeMap::getTypeClassName('SpecimenDefinition.Container'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling', VersionTypeMap::getTypeClassName('SpecimenDefinition.Handling'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested', VersionTypeMap::getTypeClassName('SpecimenDefinition.TypeTested'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection', VersionTypeMap::getTypeClassName('Specimen.Collection'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer', VersionTypeMap::getTypeClassName('Specimen.Container'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing', VersionTypeMap::getTypeClassName('Specimen.Processing'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext', VersionTypeMap::getTypeClassName('StructureDefinition.Context'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential', VersionTypeMap::getTypeClassName('StructureDefinition.Differential'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping', VersionTypeMap::getTypeClassName('StructureDefinition.Mapping'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot', VersionTypeMap::getTypeClassName('StructureDefinition.Snapshot'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent', VersionTypeMap::getTypeClassName('StructureMap.Dependent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup', VersionTypeMap::getTypeClassName('StructureMap.Group'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput', VersionTypeMap::getTypeClassName('StructureMap.Input'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter', VersionTypeMap::getTypeClassName('StructureMap.Parameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule', VersionTypeMap::getTypeClassName('StructureMap.Rule'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource', VersionTypeMap::getTypeClassName('StructureMap.Source'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure', VersionTypeMap::getTypeClassName('StructureMap.Structure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget', VersionTypeMap::getTypeClassName('StructureMap.Target'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionStatus\FHIRSubscriptionStatusNotificationEvent', VersionTypeMap::getTypeClassName('SubscriptionStatus.NotificationEvent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicCanFilterBy', VersionTypeMap::getTypeClassName('SubscriptionTopic.CanFilterBy'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicEventTrigger', VersionTypeMap::getTypeClassName('SubscriptionTopic.EventTrigger'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicNotificationShape', VersionTypeMap::getTypeClassName('SubscriptionTopic.NotificationShape'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicQueryCriteria', VersionTypeMap::getTypeClassName('SubscriptionTopic.QueryCriteria'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicResourceTrigger', VersionTypeMap::getTypeClassName('SubscriptionTopic.ResourceTrigger'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel', VersionTypeMap::getTypeClassName('Subscription.Channel'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCode', VersionTypeMap::getTypeClassName('SubstanceDefinition.Code'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMoiety', VersionTypeMap::getTypeClassName('SubstanceDefinition.Moiety'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMolecularWeight', VersionTypeMap::getTypeClassName('SubstanceDefinition.MolecularWeight'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionName', VersionTypeMap::getTypeClassName('SubstanceDefinition.Name'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionOfficial', VersionTypeMap::getTypeClassName('SubstanceDefinition.Official'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionProperty', VersionTypeMap::getTypeClassName('SubstanceDefinition.Property'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRelationship', VersionTypeMap::getTypeClassName('SubstanceDefinition.Relationship'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRepresentation', VersionTypeMap::getTypeClassName('SubstanceDefinition.Representation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionSourceMaterial', VersionTypeMap::getTypeClassName('SubstanceDefinition.SourceMaterial'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionStructure', VersionTypeMap::getTypeClassName('SubstanceDefinition.Structure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient', VersionTypeMap::getTypeClassName('Substance.Ingredient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance', VersionTypeMap::getTypeClassName('Substance.Instance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem', VersionTypeMap::getTypeClassName('SupplyDelivery.SuppliedItem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter', VersionTypeMap::getTypeClassName('SupplyRequest.Parameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput', VersionTypeMap::getTypeClassName('Task.Input'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput', VersionTypeMap::getTypeClassName('Task.Output'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction', VersionTypeMap::getTypeClassName('Task.Restriction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure', VersionTypeMap::getTypeClassName('TerminologyCapabilities.Closure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem', VersionTypeMap::getTypeClassName('TerminologyCapabilities.CodeSystem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion', VersionTypeMap::getTypeClassName('TerminologyCapabilities.Expansion'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter', VersionTypeMap::getTypeClassName('TerminologyCapabilities.Filter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation', VersionTypeMap::getTypeClassName('TerminologyCapabilities.Implementation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter', VersionTypeMap::getTypeClassName('TerminologyCapabilities.Parameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware', VersionTypeMap::getTypeClassName('TerminologyCapabilities.Software'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation', VersionTypeMap::getTypeClassName('TerminologyCapabilities.Translation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode', VersionTypeMap::getTypeClassName('TerminologyCapabilities.ValidateCode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion', VersionTypeMap::getTypeClassName('TerminologyCapabilities.Version'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction', VersionTypeMap::getTypeClassName('TestReport.Action'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1', VersionTypeMap::getTypeClassName('TestReport.Action1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2', VersionTypeMap::getTypeClassName('TestReport.Action2'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert', VersionTypeMap::getTypeClassName('TestReport.Assert'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation', VersionTypeMap::getTypeClassName('TestReport.Operation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant', VersionTypeMap::getTypeClassName('TestReport.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup', VersionTypeMap::getTypeClassName('TestReport.Setup'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown', VersionTypeMap::getTypeClassName('TestReport.Teardown'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest', VersionTypeMap::getTypeClassName('TestReport.Test'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction', VersionTypeMap::getTypeClassName('TestScript.Action'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1', VersionTypeMap::getTypeClassName('TestScript.Action1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2', VersionTypeMap::getTypeClassName('TestScript.Action2'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert', VersionTypeMap::getTypeClassName('TestScript.Assert'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability', VersionTypeMap::getTypeClassName('TestScript.Capability'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination', VersionTypeMap::getTypeClassName('TestScript.Destination'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture', VersionTypeMap::getTypeClassName('TestScript.Fixture'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink', VersionTypeMap::getTypeClassName('TestScript.Link'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata', VersionTypeMap::getTypeClassName('TestScript.Metadata'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation', VersionTypeMap::getTypeClassName('TestScript.Operation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin', VersionTypeMap::getTypeClassName('TestScript.Origin'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader', VersionTypeMap::getTypeClassName('TestScript.RequestHeader'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup', VersionTypeMap::getTypeClassName('TestScript.Setup'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown', VersionTypeMap::getTypeClassName('TestScript.Teardown'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest', VersionTypeMap::getTypeClassName('TestScript.Test'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable', VersionTypeMap::getTypeClassName('TestScript.Variable'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTiming', VersionTypeMap::getTypeClassName('Timing'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTiming\FHIRTimingRepeat', VersionTypeMap::getTypeClassName('Timing.Repeat'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose', VersionTypeMap::getTypeClassName('ValueSet.Compose'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept', VersionTypeMap::getTypeClassName('ValueSet.Concept'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains', VersionTypeMap::getTypeClassName('ValueSet.Contains'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation', VersionTypeMap::getTypeClassName('ValueSet.Designation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion', VersionTypeMap::getTypeClassName('ValueSet.Expansion'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter', VersionTypeMap::getTypeClassName('ValueSet.Filter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude', VersionTypeMap::getTypeClassName('ValueSet.Include'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter', VersionTypeMap::getTypeClassName('ValueSet.Parameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation', VersionTypeMap::getTypeClassName('VerificationResult.Attestation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource', VersionTypeMap::getTypeClassName('VerificationResult.PrimarySource'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator', VersionTypeMap::getTypeClassName('VerificationResult.Validator'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification', VersionTypeMap::getTypeClassName('VisionPrescription.LensSpecification'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism', VersionTypeMap::getTypeClassName('VisionPrescription.Prism'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBase64Binary', VersionTypeMap::getTypeClassName('base64Binary'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBindingStrength', VersionTypeMap::getTypeClassName('BindingStrength'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBiologicallyDerivedProductCategory', VersionTypeMap::getTypeClassName('BiologicallyDerivedProductCategory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBiologicallyDerivedProductStatus', VersionTypeMap::getTypeClassName('BiologicallyDerivedProductStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBiologicallyDerivedProductStorageScale', VersionTypeMap::getTypeClassName('BiologicallyDerivedProductStorageScale'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBoolean', VersionTypeMap::getTypeClassName('boolean'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBundleType', VersionTypeMap::getTypeClassName('BundleType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCanonical', VersionTypeMap::getTypeClassName('canonical'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCapabilityStatementKind', VersionTypeMap::getTypeClassName('CapabilityStatementKind'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCarePlanActivityKind', VersionTypeMap::getTypeClassName('CarePlanActivityKind'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCarePlanActivityStatus', VersionTypeMap::getTypeClassName('CarePlanActivityStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCarePlanIntent', VersionTypeMap::getTypeClassName('CarePlanIntent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCareTeamStatus', VersionTypeMap::getTypeClassName('CareTeamStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCatalogEntryRelationType', VersionTypeMap::getTypeClassName('CatalogEntryRelationType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCharacteristicCombination', VersionTypeMap::getTypeClassName('CharacteristicCombination'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRChargeItemStatus', VersionTypeMap::getTypeClassName('ChargeItemStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRClinicalImpressionStatus', VersionTypeMap::getTypeClassName('ClinicalImpressionStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRClinicalUseDefinitionType', VersionTypeMap::getTypeClassName('ClinicalUseDefinitionType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCode', VersionTypeMap::getTypeClassName('code'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeableConcept', VersionTypeMap::getTypeClassName('CodeableConcept'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeableReference', VersionTypeMap::getTypeClassName('CodeableReference'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeSearchSupport', VersionTypeMap::getTypeClassName('CodeSearchSupport'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeSystemContentMode', VersionTypeMap::getTypeClassName('CodeSystemContentMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeSystemHierarchyMeaning', VersionTypeMap::getTypeClassName('CodeSystemHierarchyMeaning'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCoding', VersionTypeMap::getTypeClassName('Coding'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCompartmentType', VersionTypeMap::getTypeClassName('CompartmentType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCompositionAttestationMode', VersionTypeMap::getTypeClassName('CompositionAttestationMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCompositionStatus', VersionTypeMap::getTypeClassName('CompositionStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConceptMapEquivalence', VersionTypeMap::getTypeClassName('ConceptMapEquivalence'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConceptMapGroupUnmappedMode', VersionTypeMap::getTypeClassName('ConceptMapGroupUnmappedMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConditionalDeleteStatus', VersionTypeMap::getTypeClassName('ConditionalDeleteStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConditionalReadStatus', VersionTypeMap::getTypeClassName('ConditionalReadStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConfidentiality', VersionTypeMap::getTypeClassName('Confidentiality'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConsentDataMeaning', VersionTypeMap::getTypeClassName('ConsentDataMeaning'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConsentProvisionType', VersionTypeMap::getTypeClassName('ConsentProvisionType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConsentState', VersionTypeMap::getTypeClassName('ConsentState'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConstraintSeverity', VersionTypeMap::getTypeClassName('ConstraintSeverity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContactDetail', VersionTypeMap::getTypeClassName('ContactDetail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContactPoint', VersionTypeMap::getTypeClassName('ContactPoint'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContactPointSystem', VersionTypeMap::getTypeClassName('ContactPointSystem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContactPointUse', VersionTypeMap::getTypeClassName('ContactPointUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContractResourcePublicationStatusCodes', VersionTypeMap::getTypeClassName('ContractResourcePublicationStatusCodes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContractResourceStatusCodes', VersionTypeMap::getTypeClassName('ContractResourceStatusCodes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContributor', VersionTypeMap::getTypeClassName('Contributor'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContributorType', VersionTypeMap::getTypeClassName('ContributorType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCriteriaNotExistsBehavior', VersionTypeMap::getTypeClassName('CriteriaNotExistsBehavior'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDataRequirement', VersionTypeMap::getTypeClassName('DataRequirement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter', VersionTypeMap::getTypeClassName('DataRequirement.CodeFilter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter', VersionTypeMap::getTypeClassName('DataRequirement.DateFilter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementSort', VersionTypeMap::getTypeClassName('DataRequirement.Sort'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDate', VersionTypeMap::getTypeClassName('date'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDateTime', VersionTypeMap::getTypeClassName('dateTime'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDaysOfWeek', VersionTypeMap::getTypeClassName('DaysOfWeek'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDecimal', VersionTypeMap::getTypeClassName('decimal'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDefinitionResourceType', VersionTypeMap::getTypeClassName('DefinitionResourceType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDetectedIssueSeverity', VersionTypeMap::getTypeClassName('DetectedIssueSeverity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricCalibrationState', VersionTypeMap::getTypeClassName('DeviceMetricCalibrationState'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricCalibrationType', VersionTypeMap::getTypeClassName('DeviceMetricCalibrationType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricCategory', VersionTypeMap::getTypeClassName('DeviceMetricCategory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricColor', VersionTypeMap::getTypeClassName('DeviceMetricColor'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricOperationalStatus', VersionTypeMap::getTypeClassName('DeviceMetricOperationalStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceNameType', VersionTypeMap::getTypeClassName('DeviceNameType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceUseStatementStatus', VersionTypeMap::getTypeClassName('DeviceUseStatementStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDiagnosticReportStatus', VersionTypeMap::getTypeClassName('DiagnosticReportStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDiscriminatorType', VersionTypeMap::getTypeClassName('DiscriminatorType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDocumentMode', VersionTypeMap::getTypeClassName('DocumentMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDocumentReferenceStatus', VersionTypeMap::getTypeClassName('DocumentReferenceStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDocumentRelationshipType', VersionTypeMap::getTypeClassName('DocumentRelationshipType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREligibilityRequestPurpose', VersionTypeMap::getTypeClassName('EligibilityRequestPurpose'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREligibilityResponsePurpose', VersionTypeMap::getTypeClassName('EligibilityResponsePurpose'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREnableWhenBehavior', VersionTypeMap::getTypeClassName('EnableWhenBehavior'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREncounterLocationStatus', VersionTypeMap::getTypeClassName('EncounterLocationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREncounterStatus', VersionTypeMap::getTypeClassName('EncounterStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREndpointStatus', VersionTypeMap::getTypeClassName('EndpointStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREpisodeOfCareStatus', VersionTypeMap::getTypeClassName('EpisodeOfCareStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventCapabilityMode', VersionTypeMap::getTypeClassName('EventCapabilityMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventOrRequestResourceTypes', VersionTypeMap::getTypeClassName('EventOrRequestResourceTypes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventResourceType', VersionTypeMap::getTypeClassName('EventResourceType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventStatus', VersionTypeMap::getTypeClassName('EventStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventTiming', VersionTypeMap::getTypeClassName('EventTiming'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREvidenceVariableHandling', VersionTypeMap::getTypeClassName('EvidenceVariableHandling'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExampleScenarioActorType', VersionTypeMap::getTypeClassName('ExampleScenarioActorType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExplanationOfBenefitStatus', VersionTypeMap::getTypeClassName('ExplanationOfBenefitStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExpression', VersionTypeMap::getTypeClassName('Expression'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExpressionLanguage', VersionTypeMap::getTypeClassName('ExpressionLanguage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExtension', VersionTypeMap::getTypeClassName('Extension'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExtensionContextType', VersionTypeMap::getTypeClassName('ExtensionContextType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFamilyHistoryStatus', VersionTypeMap::getTypeClassName('FamilyHistoryStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRAllTypes', VersionTypeMap::getTypeClassName('FHIRAllTypes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRDefinedType', VersionTypeMap::getTypeClassName('FHIRDefinedType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRDeviceStatus', VersionTypeMap::getTypeClassName('FHIRDeviceStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRPathTypes', VersionTypeMap::getTypeClassName('FHIRPathTypes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRSubstanceStatus', VersionTypeMap::getTypeClassName('FHIRSubstanceStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRVersion', VersionTypeMap::getTypeClassName('FHIRVersion'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFilterOperator', VersionTypeMap::getTypeClassName('FilterOperator'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFinancialResourceStatusCodes', VersionTypeMap::getTypeClassName('FinancialResourceStatusCodes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFlagStatus', VersionTypeMap::getTypeClassName('FlagStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGoalLifecycleStatus', VersionTypeMap::getTypeClassName('GoalLifecycleStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGraphCompartmentRule', VersionTypeMap::getTypeClassName('GraphCompartmentRule'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGraphCompartmentUse', VersionTypeMap::getTypeClassName('GraphCompartmentUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGroupMeasure', VersionTypeMap::getTypeClassName('GroupMeasure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGroupType', VersionTypeMap::getTypeClassName('GroupType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGuidanceResponseStatus', VersionTypeMap::getTypeClassName('GuidanceResponseStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGuidePageGeneration', VersionTypeMap::getTypeClassName('GuidePageGeneration'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGuideParameterCode', VersionTypeMap::getTypeClassName('GuideParameterCode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRHTTPVerb', VersionTypeMap::getTypeClassName('HTTPVerb'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRHumanName', VersionTypeMap::getTypeClassName('HumanName'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRId', VersionTypeMap::getTypeClassName('id'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIdentifier', VersionTypeMap::getTypeClassName('Identifier'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIdentifierUse', VersionTypeMap::getTypeClassName('IdentifierUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIdentityAssuranceLevel', VersionTypeMap::getTypeClassName('IdentityAssuranceLevel'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRImagingStudyStatus', VersionTypeMap::getTypeClassName('ImagingStudyStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRImmunizationEvaluationStatusCodes', VersionTypeMap::getTypeClassName('ImmunizationEvaluationStatusCodes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRImmunizationStatusCodes', VersionTypeMap::getTypeClassName('ImmunizationStatusCodes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIngredientManufacturerRole', VersionTypeMap::getTypeClassName('IngredientManufacturerRole'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInstant', VersionTypeMap::getTypeClassName('instant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInteger', VersionTypeMap::getTypeClassName('integer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInteractionTrigger', VersionTypeMap::getTypeClassName('InteractionTrigger'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInvoicePriceComponentType', VersionTypeMap::getTypeClassName('InvoicePriceComponentType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInvoiceStatus', VersionTypeMap::getTypeClassName('InvoiceStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIssueSeverity', VersionTypeMap::getTypeClassName('IssueSeverity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIssueType', VersionTypeMap::getTypeClassName('IssueType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRKnowledgeResourceType', VersionTypeMap::getTypeClassName('KnowledgeResourceType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRLinkageType', VersionTypeMap::getTypeClassName('LinkageType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRLinkType', VersionTypeMap::getTypeClassName('LinkType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRListMode', VersionTypeMap::getTypeClassName('ListMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRListStatus', VersionTypeMap::getTypeClassName('ListStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRLocationMode', VersionTypeMap::getTypeClassName('LocationMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRLocationStatus', VersionTypeMap::getTypeClassName('LocationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMarkdown', VersionTypeMap::getTypeClassName('markdown'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMeasureReportStatus', VersionTypeMap::getTypeClassName('MeasureReportStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMeasureReportType', VersionTypeMap::getTypeClassName('MeasureReportType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMedicationRequestIntent', VersionTypeMap::getTypeClassName('medicationRequestIntent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMedicationrequestStatus', VersionTypeMap::getTypeClassName('medicationrequestStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMedicationStatementStatusCodes', VersionTypeMap::getTypeClassName('MedicationStatementStatusCodes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMedicationStatusCodes', VersionTypeMap::getTypeClassName('MedicationStatusCodes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMessageheaderResponseRequest', VersionTypeMap::getTypeClassName('messageheaderResponseRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMessageSignificanceCategory', VersionTypeMap::getTypeClassName('MessageSignificanceCategory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMeta', VersionTypeMap::getTypeClassName('Meta'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMoney', VersionTypeMap::getTypeClassName('Money'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNameUse', VersionTypeMap::getTypeClassName('NameUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNamingSystemIdentifierType', VersionTypeMap::getTypeClassName('NamingSystemIdentifierType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNamingSystemType', VersionTypeMap::getTypeClassName('NamingSystemType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNarrative', VersionTypeMap::getTypeClassName('Narrative'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNarrativeStatus', VersionTypeMap::getTypeClassName('NarrativeStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNoteType', VersionTypeMap::getTypeClassName('NoteType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNutritionProductStatus', VersionTypeMap::getTypeClassName('NutritionProductStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRObservationDataType', VersionTypeMap::getTypeClassName('ObservationDataType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRObservationRangeCategory', VersionTypeMap::getTypeClassName('ObservationRangeCategory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRObservationStatus', VersionTypeMap::getTypeClassName('ObservationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIROid', VersionTypeMap::getTypeClassName('oid'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIROperationKind', VersionTypeMap::getTypeClassName('OperationKind'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIROperationParameterUse', VersionTypeMap::getTypeClassName('OperationParameterUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIROrientationType', VersionTypeMap::getTypeClassName('orientationType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRParameterDefinition', VersionTypeMap::getTypeClassName('ParameterDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRParticipantRequired', VersionTypeMap::getTypeClassName('ParticipantRequired'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRParticipationStatus', VersionTypeMap::getTypeClassName('ParticipationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPeriod', VersionTypeMap::getTypeClassName('Period'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPositiveInt', VersionTypeMap::getTypeClassName('positiveInt'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPropertyRepresentation', VersionTypeMap::getTypeClassName('PropertyRepresentation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPropertyType', VersionTypeMap::getTypeClassName('PropertyType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRProvenanceEntityRole', VersionTypeMap::getTypeClassName('ProvenanceEntityRole'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPublicationStatus', VersionTypeMap::getTypeClassName('PublicationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQualityType', VersionTypeMap::getTypeClassName('qualityType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity', VersionTypeMap::getTypeClassName('Quantity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantityComparator', VersionTypeMap::getTypeClassName('QuantityComparator'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity\FHIRAge', VersionTypeMap::getTypeClassName('Age'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity\FHIRCount', VersionTypeMap::getTypeClassName('Count'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity\FHIRDistance', VersionTypeMap::getTypeClassName('Distance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity\FHIRDuration', VersionTypeMap::getTypeClassName('Duration'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuestionnaireItemOperator', VersionTypeMap::getTypeClassName('QuestionnaireItemOperator'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuestionnaireItemType', VersionTypeMap::getTypeClassName('QuestionnaireItemType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuestionnaireResponseStatus', VersionTypeMap::getTypeClassName('QuestionnaireResponseStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRange', VersionTypeMap::getTypeClassName('Range'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRatio', VersionTypeMap::getTypeClassName('Ratio'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRatioRange', VersionTypeMap::getTypeClassName('RatioRange'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRReference', VersionTypeMap::getTypeClassName('Reference'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRReferenceHandlingPolicy', VersionTypeMap::getTypeClassName('ReferenceHandlingPolicy'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRReferenceVersionRules', VersionTypeMap::getTypeClassName('ReferenceVersionRules'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRelatedArtifact', VersionTypeMap::getTypeClassName('RelatedArtifact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRelatedArtifactType', VersionTypeMap::getTypeClassName('RelatedArtifactType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRemittanceOutcome', VersionTypeMap::getTypeClassName('RemittanceOutcome'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRReportRelationshipType', VersionTypeMap::getTypeClassName('ReportRelationshipType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRepositoryType', VersionTypeMap::getTypeClassName('repositoryType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRequestIntent', VersionTypeMap::getTypeClassName('RequestIntent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRequestPriority', VersionTypeMap::getTypeClassName('RequestPriority'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRequestResourceType', VersionTypeMap::getTypeClassName('RequestResourceType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRequestStatus', VersionTypeMap::getTypeClassName('RequestStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResearchElementType', VersionTypeMap::getTypeClassName('ResearchElementType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResearchStudyStatus', VersionTypeMap::getTypeClassName('ResearchStudyStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResearchSubjectStatus', VersionTypeMap::getTypeClassName('ResearchSubjectStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResourceType', VersionTypeMap::getTypeClassName('ResourceType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResourceVersionPolicy', VersionTypeMap::getTypeClassName('ResourceVersionPolicy'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResponseType', VersionTypeMap::getTypeClassName('ResponseType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRestfulCapabilityMode', VersionTypeMap::getTypeClassName('RestfulCapabilityMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSampledData', VersionTypeMap::getTypeClassName('SampledData'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSampledDataDataType', VersionTypeMap::getTypeClassName('SampledDataDataType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSearchComparator', VersionTypeMap::getTypeClassName('SearchComparator'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSearchEntryMode', VersionTypeMap::getTypeClassName('SearchEntryMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSearchModifierCode', VersionTypeMap::getTypeClassName('SearchModifierCode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSearchParamType', VersionTypeMap::getTypeClassName('SearchParamType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSequenceType', VersionTypeMap::getTypeClassName('sequenceType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSignature', VersionTypeMap::getTypeClassName('Signature'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSlicingRules', VersionTypeMap::getTypeClassName('SlicingRules'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSlotStatus', VersionTypeMap::getTypeClassName('SlotStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSortDirection', VersionTypeMap::getTypeClassName('SortDirection'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSPDXLicense', VersionTypeMap::getTypeClassName('SPDXLicense'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSpecimenContainedPreference', VersionTypeMap::getTypeClassName('SpecimenContainedPreference'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSpecimenStatus', VersionTypeMap::getTypeClassName('SpecimenStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStatus', VersionTypeMap::getTypeClassName('status'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStrandType', VersionTypeMap::getTypeClassName('strandType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRString', VersionTypeMap::getTypeClassName('string'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureDefinitionKind', VersionTypeMap::getTypeClassName('StructureDefinitionKind'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapContextType', VersionTypeMap::getTypeClassName('StructureMapContextType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapGroupTypeMode', VersionTypeMap::getTypeClassName('StructureMapGroupTypeMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapInputMode', VersionTypeMap::getTypeClassName('StructureMapInputMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapModelMode', VersionTypeMap::getTypeClassName('StructureMapModelMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapSourceListMode', VersionTypeMap::getTypeClassName('StructureMapSourceListMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapTargetListMode', VersionTypeMap::getTypeClassName('StructureMapTargetListMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapTransform', VersionTypeMap::getTypeClassName('StructureMapTransform'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSubscriptionChannelType', VersionTypeMap::getTypeClassName('SubscriptionChannelType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSubscriptionNotificationType', VersionTypeMap::getTypeClassName('SubscriptionNotificationType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSubscriptionStatusCodes', VersionTypeMap::getTypeClassName('SubscriptionStatusCodes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSupplyDeliveryStatus', VersionTypeMap::getTypeClassName('SupplyDeliveryStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSupplyRequestStatus', VersionTypeMap::getTypeClassName('SupplyRequestStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSystemRestfulInteraction', VersionTypeMap::getTypeClassName('SystemRestfulInteraction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTaskIntent', VersionTypeMap::getTypeClassName('TaskIntent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTaskStatus', VersionTypeMap::getTypeClassName('TaskStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestReportActionResult', VersionTypeMap::getTypeClassName('TestReportActionResult'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestReportParticipantType', VersionTypeMap::getTypeClassName('TestReportParticipantType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestReportResult', VersionTypeMap::getTypeClassName('TestReportResult'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestReportStatus', VersionTypeMap::getTypeClassName('TestReportStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestScriptRequestMethodCode', VersionTypeMap::getTypeClassName('TestScriptRequestMethodCode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTime', VersionTypeMap::getTypeClassName('time'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTriggerDefinition', VersionTypeMap::getTypeClassName('TriggerDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTriggerType', VersionTypeMap::getTypeClassName('TriggerType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTypeDerivationRule', VersionTypeMap::getTypeClassName('TypeDerivationRule'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTypeRestfulInteraction', VersionTypeMap::getTypeClassName('TypeRestfulInteraction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUDIEntryType', VersionTypeMap::getTypeClassName('UDIEntryType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUnitsOfTime', VersionTypeMap::getTypeClassName('UnitsOfTime'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUnsignedInt', VersionTypeMap::getTypeClassName('unsignedInt'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUri', VersionTypeMap::getTypeClassName('uri'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUrl', VersionTypeMap::getTypeClassName('url'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUsageContext', VersionTypeMap::getTypeClassName('UsageContext'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUse', VersionTypeMap::getTypeClassName('Use'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUuid', VersionTypeMap::getTypeClassName('uuid'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRVariableType', VersionTypeMap::getTypeClassName('VariableType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRVisionBase', VersionTypeMap::getTypeClassName('VisionBase'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRVisionEyes', VersionTypeMap::getTypeClassName('VisionEyes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRXPathUsageType', VersionTypeMap::getTypeClassName('XPathUsageType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRIdPrimitive', VersionTypeMap::getTypeClassName('id-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRInstantPrimitive', VersionTypeMap::getTypeClassName('instant-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRIntegerPrimitive', VersionTypeMap::getTypeClassName('integer-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRMarkdownPrimitive', VersionTypeMap::getTypeClassName('markdown-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIROidPrimitive', VersionTypeMap::getTypeClassName('oid-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRPositiveIntPrimitive', VersionTypeMap::getTypeClassName('positiveInt-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource', VersionTypeMap::getTypeClassName('Resource'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResourceContainer', VersionTypeMap::getTypeClassName('ResourceContainer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRBinary', VersionTypeMap::getTypeClassName('Binary'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRBundle', VersionTypeMap::getTypeClassName('Bundle'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource', VersionTypeMap::getTypeClassName('DomainResource'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAccount', VersionTypeMap::getTypeClassName('Account'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRActivityDefinition', VersionTypeMap::getTypeClassName('ActivityDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAdministrableProductDefinition', VersionTypeMap::getTypeClassName('AdministrableProductDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAdverseEvent', VersionTypeMap::getTypeClassName('AdverseEvent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', VersionTypeMap::getTypeClassName('AllergyIntolerance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAppointment', VersionTypeMap::getTypeClassName('Appointment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', VersionTypeMap::getTypeClassName('AppointmentResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent', VersionTypeMap::getTypeClassName('AuditEvent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRBasic', VersionTypeMap::getTypeClassName('Basic'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct', VersionTypeMap::getTypeClassName('BiologicallyDerivedProduct'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRBodyStructure', VersionTypeMap::getTypeClassName('BodyStructure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement', VersionTypeMap::getTypeClassName('CapabilityStatement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan', VersionTypeMap::getTypeClassName('CarePlan'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCareTeam', VersionTypeMap::getTypeClassName('CareTeam'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCatalogEntry', VersionTypeMap::getTypeClassName('CatalogEntry'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRChargeItem', VersionTypeMap::getTypeClassName('ChargeItem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRChargeItemDefinition', VersionTypeMap::getTypeClassName('ChargeItemDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCitation', VersionTypeMap::getTypeClassName('Citation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClaim', VersionTypeMap::getTypeClassName('Claim'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse', VersionTypeMap::getTypeClassName('ClaimResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', VersionTypeMap::getTypeClassName('ClinicalImpression'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClinicalUseDefinition', VersionTypeMap::getTypeClassName('ClinicalUseDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCodeSystem', VersionTypeMap::getTypeClassName('CodeSystem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCommunication', VersionTypeMap::getTypeClassName('Communication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', VersionTypeMap::getTypeClassName('CommunicationRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition', VersionTypeMap::getTypeClassName('CompartmentDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRComposition', VersionTypeMap::getTypeClassName('Composition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap', VersionTypeMap::getTypeClassName('ConceptMap'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCondition', VersionTypeMap::getTypeClassName('Condition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRConsent', VersionTypeMap::getTypeClassName('Consent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRContract', VersionTypeMap::getTypeClassName('Contract'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCoverage', VersionTypeMap::getTypeClassName('Coverage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest', VersionTypeMap::getTypeClassName('CoverageEligibilityRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse', VersionTypeMap::getTypeClassName('CoverageEligibilityResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', VersionTypeMap::getTypeClassName('DetectedIssue'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDevice', VersionTypeMap::getTypeClassName('Device'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition', VersionTypeMap::getTypeClassName('DeviceDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', VersionTypeMap::getTypeClassName('DeviceMetric'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceRequest', VersionTypeMap::getTypeClassName('DeviceRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement', VersionTypeMap::getTypeClassName('DeviceUseStatement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', VersionTypeMap::getTypeClassName('DiagnosticReport'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest', VersionTypeMap::getTypeClassName('DocumentManifest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference', VersionTypeMap::getTypeClassName('DocumentReference'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREncounter', VersionTypeMap::getTypeClassName('Encounter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREndpoint', VersionTypeMap::getTypeClassName('Endpoint'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', VersionTypeMap::getTypeClassName('EnrollmentRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', VersionTypeMap::getTypeClassName('EnrollmentResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', VersionTypeMap::getTypeClassName('EpisodeOfCare'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREventDefinition', VersionTypeMap::getTypeClassName('EventDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREvidence', VersionTypeMap::getTypeClassName('Evidence'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREvidenceReport', VersionTypeMap::getTypeClassName('EvidenceReport'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREvidenceVariable', VersionTypeMap::getTypeClassName('EvidenceVariable'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRExampleScenario', VersionTypeMap::getTypeClassName('ExampleScenario'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', VersionTypeMap::getTypeClassName('ExplanationOfBenefit'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', VersionTypeMap::getTypeClassName('FamilyMemberHistory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRFlag', VersionTypeMap::getTypeClassName('Flag'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGoal', VersionTypeMap::getTypeClassName('Goal'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGraphDefinition', VersionTypeMap::getTypeClassName('GraphDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGroup', VersionTypeMap::getTypeClassName('Group'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse', VersionTypeMap::getTypeClassName('GuidanceResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService', VersionTypeMap::getTypeClassName('HealthcareService'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy', VersionTypeMap::getTypeClassName('ImagingStudy'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImmunization', VersionTypeMap::getTypeClassName('Immunization'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation', VersionTypeMap::getTypeClassName('ImmunizationEvaluation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', VersionTypeMap::getTypeClassName('ImmunizationRecommendation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide', VersionTypeMap::getTypeClassName('ImplementationGuide'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRIngredient', VersionTypeMap::getTypeClassName('Ingredient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRInsurancePlan', VersionTypeMap::getTypeClassName('InsurancePlan'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRInvoice', VersionTypeMap::getTypeClassName('Invoice'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRLibrary', VersionTypeMap::getTypeClassName('Library'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRLinkage', VersionTypeMap::getTypeClassName('Linkage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRList', VersionTypeMap::getTypeClassName('List'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRLocation', VersionTypeMap::getTypeClassName('Location'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRManufacturedItemDefinition', VersionTypeMap::getTypeClassName('ManufacturedItemDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMeasure', VersionTypeMap::getTypeClassName('Measure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMeasureReport', VersionTypeMap::getTypeClassName('MeasureReport'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedia', VersionTypeMap::getTypeClassName('Media'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedication', VersionTypeMap::getTypeClassName('Medication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', VersionTypeMap::getTypeClassName('MedicationAdministration'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', VersionTypeMap::getTypeClassName('MedicationDispense'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationKnowledge', VersionTypeMap::getTypeClassName('MedicationKnowledge'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationRequest', VersionTypeMap::getTypeClassName('MedicationRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', VersionTypeMap::getTypeClassName('MedicationStatement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicinalProductDefinition', VersionTypeMap::getTypeClassName('MedicinalProductDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMessageDefinition', VersionTypeMap::getTypeClassName('MessageDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader', VersionTypeMap::getTypeClassName('MessageHeader'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMolecularSequence', VersionTypeMap::getTypeClassName('MolecularSequence'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem', VersionTypeMap::getTypeClassName('NamingSystem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', VersionTypeMap::getTypeClassName('NutritionOrder'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRNutritionProduct', VersionTypeMap::getTypeClassName('NutritionProduct'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRObservation', VersionTypeMap::getTypeClassName('Observation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRObservationDefinition', VersionTypeMap::getTypeClassName('ObservationDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition', VersionTypeMap::getTypeClassName('OperationDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome', VersionTypeMap::getTypeClassName('OperationOutcome'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROrganization', VersionTypeMap::getTypeClassName('Organization'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation', VersionTypeMap::getTypeClassName('OrganizationAffiliation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPackagedProductDefinition', VersionTypeMap::getTypeClassName('PackagedProductDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPatient', VersionTypeMap::getTypeClassName('Patient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', VersionTypeMap::getTypeClassName('PaymentNotice'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', VersionTypeMap::getTypeClassName('PaymentReconciliation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPerson', VersionTypeMap::getTypeClassName('Person'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPlanDefinition', VersionTypeMap::getTypeClassName('PlanDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner', VersionTypeMap::getTypeClassName('Practitioner'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPractitionerRole', VersionTypeMap::getTypeClassName('PractitionerRole'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRProcedure', VersionTypeMap::getTypeClassName('Procedure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRProvenance', VersionTypeMap::getTypeClassName('Provenance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire', VersionTypeMap::getTypeClassName('Questionnaire'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', VersionTypeMap::getTypeClassName('QuestionnaireResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRegulatedAuthorization', VersionTypeMap::getTypeClassName('RegulatedAuthorization'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', VersionTypeMap::getTypeClassName('RelatedPerson'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRequestGroup', VersionTypeMap::getTypeClassName('RequestGroup'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchDefinition', VersionTypeMap::getTypeClassName('ResearchDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchElementDefinition', VersionTypeMap::getTypeClassName('ResearchElementDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchStudy', VersionTypeMap::getTypeClassName('ResearchStudy'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchSubject', VersionTypeMap::getTypeClassName('ResearchSubject'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', VersionTypeMap::getTypeClassName('RiskAssessment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSchedule', VersionTypeMap::getTypeClassName('Schedule'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter', VersionTypeMap::getTypeClassName('SearchParameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRServiceRequest', VersionTypeMap::getTypeClassName('ServiceRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSlot', VersionTypeMap::getTypeClassName('Slot'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen', VersionTypeMap::getTypeClassName('Specimen'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSpecimenDefinition', VersionTypeMap::getTypeClassName('SpecimenDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition', VersionTypeMap::getTypeClassName('StructureDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRStructureMap', VersionTypeMap::getTypeClassName('StructureMap'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubscription', VersionTypeMap::getTypeClassName('Subscription'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubscriptionStatus', VersionTypeMap::getTypeClassName('SubscriptionStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubscriptionTopic', VersionTypeMap::getTypeClassName('SubscriptionTopic'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubstance', VersionTypeMap::getTypeClassName('Substance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubstanceDefinition', VersionTypeMap::getTypeClassName('SubstanceDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', VersionTypeMap::getTypeClassName('SupplyDelivery'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', VersionTypeMap::getTypeClassName('SupplyRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTask', VersionTypeMap::getTypeClassName('Task'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTerminologyCapabilities', VersionTypeMap::getTypeClassName('TerminologyCapabilities'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTestReport', VersionTypeMap::getTypeClassName('TestReport'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTestScript', VersionTypeMap::getTypeClassName('TestScript'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRValueSet', VersionTypeMap::getTypeClassName('ValueSet'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRVerificationResult', VersionTypeMap::getTypeClassName('VerificationResult'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', VersionTypeMap::getTypeClassName('VisionPrescription'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRParameters', VersionTypeMap::getTypeClassName('Parameters'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRSampledDataDataTypePrimitive', VersionTypeMap::getTypeClassName('SampledDataDataType-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRStringPrimitive', VersionTypeMap::getTypeClassName('string-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRTimePrimitive', VersionTypeMap::getTypeClassName('time-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRUnsignedIntPrimitive', VersionTypeMap::getTypeClassName('unsignedInt-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRUriPrimitive', VersionTypeMap::getTypeClassName('uri-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRUrlPrimitive', VersionTypeMap::getTypeClassName('url-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRUuidPrimitive', VersionTypeMap::getTypeClassName('uuid-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRXHTML', VersionTypeMap::getTypeClassName('XHTML'));
    }

    public function testGetContainedTypeClassName()
    {
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAccount', VersionTypeMap::getContainedTypeClassName('Account'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Account.Coverage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Account.Guarantor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AccountStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AccountStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionCardinalityBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionCardinalityBehaviorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionConditionKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionConditionKindEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionGroupingBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionGroupingBehaviorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionParticipantType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionParticipantTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionPrecheckBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionPrecheckBehaviorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionRelationshipTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionRequiredBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionRequiredBehaviorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionSelectionBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionSelectionBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRActivityDefinition', VersionTypeMap::getContainedTypeClassName('ActivityDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActivityDefinition.DynamicValue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActivityDefinition.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Address'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AddressType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AddressTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AddressUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AddressUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAdministrableProductDefinition', VersionTypeMap::getContainedTypeClassName('AdministrableProductDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdministrableProductDefinition.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdministrableProductDefinition.RouteOfAdministration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdministrableProductDefinition.TargetSpecies'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdministrableProductDefinition.WithdrawalPeriod'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdministrativeGender'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdministrativeGenderEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAdverseEvent', VersionTypeMap::getContainedTypeClassName('AdverseEvent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdverseEvent.Causality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdverseEvent.SuspectEntity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdverseEventActuality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdverseEventActualityEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Age'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AgeUnits'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AgeUnitsEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AggregationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AggregationModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', VersionTypeMap::getContainedTypeClassName('AllergyIntolerance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntolerance.Reaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceCategoryEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceCriticality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceCriticalityEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceSeverityEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Annotation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAppointment', VersionTypeMap::getContainedTypeClassName('Appointment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Appointment.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', VersionTypeMap::getContainedTypeClassName('AppointmentResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AppointmentStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AppointmentStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionDirectionType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionDirectionTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionOperatorType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionOperatorTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionResponseTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionResponseTypesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Attachment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent', VersionTypeMap::getContainedTypeClassName('AuditEvent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEvent.Agent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEvent.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEvent.Entity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEvent.Network'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEvent.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventActionEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventAgentNetworkType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventAgentNetworkTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventOutcomeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BackboneElement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('base64Binary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('base64Binary-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRBasic', VersionTypeMap::getContainedTypeClassName('Basic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRBinary', VersionTypeMap::getContainedTypeClassName('Binary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BindingStrength'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BindingStrengthEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct', VersionTypeMap::getContainedTypeClassName('BiologicallyDerivedProduct'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BiologicallyDerivedProduct.Collection'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BiologicallyDerivedProduct.Manipulation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BiologicallyDerivedProduct.Processing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BiologicallyDerivedProduct.Storage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BiologicallyDerivedProductCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BiologicallyDerivedProductCategoryEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BiologicallyDerivedProductStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BiologicallyDerivedProductStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BiologicallyDerivedProductStorageScale'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BiologicallyDerivedProductStorageScaleEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRBodyStructure', VersionTypeMap::getContainedTypeClassName('BodyStructure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('boolean'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('boolean-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRBundle', VersionTypeMap::getContainedTypeClassName('Bundle'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Bundle.Entry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Bundle.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Bundle.Request'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Bundle.Response'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Bundle.Search'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BundleType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BundleTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('canonical'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('canonical-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement', VersionTypeMap::getContainedTypeClassName('CapabilityStatement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Document'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Endpoint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Implementation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Interaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Interaction1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Messaging'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Rest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.SearchParam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Security'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Software'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.SupportedMessage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatementKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatementKindEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan', VersionTypeMap::getContainedTypeClassName('CarePlan'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlan.Activity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlan.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanActivityKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanActivityKindEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanActivityStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanActivityStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanIntent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanIntentEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCareTeam', VersionTypeMap::getContainedTypeClassName('CareTeam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CareTeam.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CareTeamStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CareTeamStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCatalogEntry', VersionTypeMap::getContainedTypeClassName('CatalogEntry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CatalogEntry.RelatedEntry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CatalogEntryRelationType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CatalogEntryRelationTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CharacteristicCombination'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CharacteristicCombinationEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRChargeItem', VersionTypeMap::getContainedTypeClassName('ChargeItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ChargeItem.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRChargeItemDefinition', VersionTypeMap::getContainedTypeClassName('ChargeItemDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ChargeItemDefinition.Applicability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ChargeItemDefinition.PriceComponent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ChargeItemDefinition.PropertyGroup'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ChargeItemStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ChargeItemStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCitation', VersionTypeMap::getContainedTypeClassName('Citation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.Abstract'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.AffiliationInfo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.CitedArtifact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.Classification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.Classification1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.ContributionInstance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.Contributorship'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.DateOfPublication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.Entry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.Part'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.PeriodicRelease'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.PublicationForm'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.PublishedIn'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.RelatesTo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.RelatesTo1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.StatusDate'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.StatusDate1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.Summary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.Summary1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.Title'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.Version'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.WebLocation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Citation.WhoClassified'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClaim', VersionTypeMap::getContainedTypeClassName('Claim'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Accident'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.CareTeam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Insurance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Payee'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Procedure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.SubDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.SupportingInfo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse', VersionTypeMap::getContainedTypeClassName('ClaimResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.AddItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Adjudication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Detail1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Error'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Insurance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Payment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.ProcessNote'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.SubDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.SubDetail1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Total'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', VersionTypeMap::getContainedTypeClassName('ClinicalImpression'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalImpression.Finding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalImpression.Investigation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalImpressionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalImpressionStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClinicalUseDefinition', VersionTypeMap::getContainedTypeClassName('ClinicalUseDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalUseDefinition.Contraindication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalUseDefinition.Indication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalUseDefinition.Interactant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalUseDefinition.Interaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalUseDefinition.OtherTherapy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalUseDefinition.UndesirableEffect'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalUseDefinition.Warning'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalUseDefinitionType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalUseDefinitionTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('code'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('code-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeableConcept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeableReference'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSearchSupport'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSearchSupportEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCodeSystem', VersionTypeMap::getContainedTypeClassName('CodeSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystem.Concept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystem.Designation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystem.Filter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystem.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystem.Property1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystemContentMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystemContentModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystemHierarchyMeaning'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystemHierarchyMeaningEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Coding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCommunication', VersionTypeMap::getContainedTypeClassName('Communication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Communication.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', VersionTypeMap::getContainedTypeClassName('CommunicationRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CommunicationRequest.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition', VersionTypeMap::getContainedTypeClassName('CompartmentDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompartmentDefinition.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompartmentType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompartmentTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRComposition', VersionTypeMap::getContainedTypeClassName('Composition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Composition.Attester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Composition.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Composition.RelatesTo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Composition.Section'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompositionAttestationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompositionAttestationModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompositionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompositionStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap', VersionTypeMap::getContainedTypeClassName('ConceptMap'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMap.DependsOn'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMap.Element'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMap.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMap.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMap.Unmapped'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMapEquivalence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMapEquivalenceEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMapGroupUnmappedMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMapGroupUnmappedModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCondition', VersionTypeMap::getContainedTypeClassName('Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Condition.Evidence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Condition.Stage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionalDeleteStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionalDeleteStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionalReadStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionalReadStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Confidentiality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConfidentialityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRConsent', VersionTypeMap::getContainedTypeClassName('Consent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Consent.Actor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Consent.Data'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Consent.Policy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Consent.Provision'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Consent.Verification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConsentDataMeaning'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConsentDataMeaningEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConsentProvisionType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConsentProvisionTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConsentState'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConsentStateEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConstraintSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConstraintSeverityEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactPoint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactPointSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactPointSystemEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactPointUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactPointUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRContract', VersionTypeMap::getContainedTypeClassName('Contract'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Answer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Asset'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.ContentDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Context'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Friendly'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Legal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Offer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Party'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Rule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.SecurityLabel'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Signer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Subject'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Term'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.ValuedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContractResourcePublicationStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContractResourcePublicationStatusCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContractResourceStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContractResourceStatusCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contributor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContributorType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContributorTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Count'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCoverage', VersionTypeMap::getContainedTypeClassName('Coverage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Coverage.Class'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Coverage.CostToBeneficiary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Coverage.Exception'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest', VersionTypeMap::getContainedTypeClassName('CoverageEligibilityRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CoverageEligibilityRequest.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CoverageEligibilityRequest.Insurance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CoverageEligibilityRequest.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CoverageEligibilityRequest.SupportingInfo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse', VersionTypeMap::getContainedTypeClassName('CoverageEligibilityResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CoverageEligibilityResponse.Benefit'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CoverageEligibilityResponse.Error'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CoverageEligibilityResponse.Insurance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CoverageEligibilityResponse.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CriteriaNotExistsBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CriteriaNotExistsBehaviorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DataRequirement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DataRequirement.CodeFilter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DataRequirement.DateFilter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DataRequirement.Sort'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('date'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('date-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('dateTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('dateTime-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DaysOfWeek'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DaysOfWeekEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('decimal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('decimal-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DefinitionResourceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DefinitionResourceTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', VersionTypeMap::getContainedTypeClassName('DetectedIssue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DetectedIssue.Evidence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DetectedIssue.Mitigation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DetectedIssueSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DetectedIssueSeverityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDevice', VersionTypeMap::getContainedTypeClassName('Device'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Device.DeviceName'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Device.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Device.Specialization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Device.UdiCarrier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Device.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition', VersionTypeMap::getContainedTypeClassName('DeviceDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceDefinition.Capability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceDefinition.DeviceName'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceDefinition.Material'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceDefinition.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceDefinition.Specialization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceDefinition.UdiDeviceIdentifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', VersionTypeMap::getContainedTypeClassName('DeviceMetric'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetric.Calibration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCalibrationState'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCalibrationStateEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCalibrationType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCalibrationTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCategoryEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricColor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricColorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricOperationalStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricOperationalStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceNameType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceNameTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceRequest', VersionTypeMap::getContainedTypeClassName('DeviceRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceRequest.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement', VersionTypeMap::getContainedTypeClassName('DeviceUseStatement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceUseStatementStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceUseStatementStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', VersionTypeMap::getContainedTypeClassName('DiagnosticReport'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticReport.Media'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticReportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticReportStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiscriminatorType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiscriminatorTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Distance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest', VersionTypeMap::getContainedTypeClassName('DocumentManifest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentManifest.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference', VersionTypeMap::getContainedTypeClassName('DocumentReference'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReference.Content'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReference.Context'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReference.RelatesTo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReferenceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReferenceStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentRelationshipTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DomainResource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Dosage.DoseAndRate'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Duration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Element'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Base'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Binding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Constraint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Discriminator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Example'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Slicing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Type'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EligibilityRequestPurpose'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EligibilityRequestPurposeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EligibilityResponsePurpose'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EligibilityResponsePurposeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EnableWhenBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EnableWhenBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREncounter', VersionTypeMap::getContainedTypeClassName('Encounter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.ClassHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.Hospitalization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.Location'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.StatusHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterLocationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterLocationStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREndpoint', VersionTypeMap::getContainedTypeClassName('Endpoint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EndpointStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EndpointStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', VersionTypeMap::getContainedTypeClassName('EnrollmentRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', VersionTypeMap::getContainedTypeClassName('EnrollmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', VersionTypeMap::getContainedTypeClassName('EpisodeOfCare'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EpisodeOfCare.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EpisodeOfCare.StatusHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EpisodeOfCareStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EpisodeOfCareStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventCapabilityMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventCapabilityModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREventDefinition', VersionTypeMap::getContainedTypeClassName('EventDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventOrRequestResourceTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventOrRequestResourceTypesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventResourceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventResourceTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventTiming'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventTimingEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREvidence', VersionTypeMap::getContainedTypeClassName('Evidence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Evidence.AttributeEstimate'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Evidence.Certainty'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Evidence.ModelCharacteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Evidence.SampleSize'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Evidence.Statistic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Evidence.Variable'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Evidence.VariableDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREvidenceReport', VersionTypeMap::getContainedTypeClassName('EvidenceReport'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EvidenceReport.Characteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EvidenceReport.RelatesTo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EvidenceReport.Section'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EvidenceReport.Subject'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREvidenceVariable', VersionTypeMap::getContainedTypeClassName('EvidenceVariable'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EvidenceVariable.Category'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EvidenceVariable.Characteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EvidenceVariable.TimeFromStart'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EvidenceVariableHandling'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EvidenceVariableHandlingEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRExampleScenario', VersionTypeMap::getContainedTypeClassName('ExampleScenario'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExampleScenario.Actor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExampleScenario.Alternative'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExampleScenario.ContainedInstance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExampleScenario.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExampleScenario.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExampleScenario.Process'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExampleScenario.Step'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExampleScenario.Version'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExampleScenarioActorType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExampleScenarioActorTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Accident'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.AddItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Adjudication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.BenefitBalance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.CareTeam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Detail1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Financial'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Insurance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Payee'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Payment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Procedure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.ProcessNote'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.SubDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.SubDetail1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.SupportingInfo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Total'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefitStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefitStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Expression'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExpressionLanguage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExpressionLanguageEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Extension'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExtensionContextType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExtensionContextTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FamilyHistoryStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FamilyHistoryStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', VersionTypeMap::getContainedTypeClassName('FamilyMemberHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FamilyMemberHistory.Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRAllTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRAllTypesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRDefinedType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRDefinedTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRDeviceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRDeviceStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRPathTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRPathTypesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRSubstanceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRSubstanceStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRVersion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRVersionEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FilterOperator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FilterOperatorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FinancialResourceStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FinancialResourceStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRFlag', VersionTypeMap::getContainedTypeClassName('Flag'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FlagStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FlagStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGoal', VersionTypeMap::getContainedTypeClassName('Goal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Goal.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GoalLifecycleStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GoalLifecycleStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GraphCompartmentRule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GraphCompartmentRuleEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GraphCompartmentUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GraphCompartmentUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGraphDefinition', VersionTypeMap::getContainedTypeClassName('GraphDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GraphDefinition.Compartment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GraphDefinition.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GraphDefinition.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGroup', VersionTypeMap::getContainedTypeClassName('Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Group.Characteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Group.Member'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GroupMeasure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GroupMeasureEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GroupType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GroupTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse', VersionTypeMap::getContainedTypeClassName('GuidanceResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuidanceResponseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuidanceResponseStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuidePageGeneration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuidePageGenerationEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuideParameterCode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuideParameterCodeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService', VersionTypeMap::getContainedTypeClassName('HealthcareService'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HealthcareService.AvailableTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HealthcareService.Eligibility'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HealthcareService.NotAvailable'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HTTPVerb'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HTTPVerbEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HumanName'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('id'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('id-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Identifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IdentifierUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IdentifierUseEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IdentityAssuranceLevel'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IdentityAssuranceLevelEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy', VersionTypeMap::getContainedTypeClassName('ImagingStudy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingStudy.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingStudy.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingStudy.Series'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingStudyStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingStudyStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImmunization', VersionTypeMap::getContainedTypeClassName('Immunization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Immunization.Education'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Immunization.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Immunization.ProtocolApplied'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Immunization.Reaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation', VersionTypeMap::getContainedTypeClassName('ImmunizationEvaluation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImmunizationEvaluationStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImmunizationEvaluationStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', VersionTypeMap::getContainedTypeClassName('ImmunizationRecommendation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImmunizationRecommendation.DateCriterion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImmunizationRecommendation.Recommendation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImmunizationStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImmunizationStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide', VersionTypeMap::getContainedTypeClassName('ImplementationGuide'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Definition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.DependsOn'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Global'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Grouping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Manifest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Page'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Page1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Resource1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Template'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRIngredient', VersionTypeMap::getContainedTypeClassName('Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Ingredient.Manufacturer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Ingredient.ReferenceStrength'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Ingredient.Strength'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Ingredient.Substance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IngredientManufacturerRole'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IngredientManufacturerRoleEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('instant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('instant-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRInsurancePlan', VersionTypeMap::getContainedTypeClassName('InsurancePlan'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InsurancePlan.Benefit'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InsurancePlan.Benefit1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InsurancePlan.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InsurancePlan.Cost'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InsurancePlan.Coverage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InsurancePlan.GeneralCost'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InsurancePlan.Limit'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InsurancePlan.Plan'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InsurancePlan.SpecificCost'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('integer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('integer-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InteractionTrigger'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InteractionTriggerEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRInvoice', VersionTypeMap::getContainedTypeClassName('Invoice'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Invoice.LineItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Invoice.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Invoice.PriceComponent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InvoicePriceComponentType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InvoicePriceComponentTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InvoiceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InvoiceStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IssueSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IssueSeverityEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IssueType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IssueTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('KnowledgeResourceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('KnowledgeResourceTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRLibrary', VersionTypeMap::getContainedTypeClassName('Library'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRLinkage', VersionTypeMap::getContainedTypeClassName('Linkage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Linkage.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LinkageType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LinkageTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LinkType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LinkTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRList', VersionTypeMap::getContainedTypeClassName('List'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('List.Entry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ListMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ListModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ListStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ListStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRLocation', VersionTypeMap::getContainedTypeClassName('Location'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Location.HoursOfOperation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Location.Position'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LocationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LocationModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LocationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LocationStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRManufacturedItemDefinition', VersionTypeMap::getContainedTypeClassName('ManufacturedItemDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ManufacturedItemDefinition.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('markdown'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('markdown-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MarketingStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMeasure', VersionTypeMap::getContainedTypeClassName('Measure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Measure.Component'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Measure.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Measure.Population'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Measure.Stratifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Measure.SupplementalData'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMeasureReport', VersionTypeMap::getContainedTypeClassName('MeasureReport'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReport.Component'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReport.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReport.Population'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReport.Population1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReport.Stratifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReport.Stratum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReportStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReportType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReportTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedia', VersionTypeMap::getContainedTypeClassName('Media'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedication', VersionTypeMap::getContainedTypeClassName('Medication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Medication.Batch'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Medication.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', VersionTypeMap::getContainedTypeClassName('MedicationAdministration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationAdministration.Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationAdministration.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', VersionTypeMap::getContainedTypeClassName('MedicationDispense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationDispense.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationDispense.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationKnowledge', VersionTypeMap::getContainedTypeClassName('MedicationKnowledge'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKnowledge.AdministrationGuidelines'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKnowledge.Cost'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKnowledge.Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKnowledge.DrugCharacteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKnowledge.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKnowledge.Kinetics'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKnowledge.MaxDispense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKnowledge.MedicineClassification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKnowledge.MonitoringProgram'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKnowledge.Monograph'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKnowledge.Packaging'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKnowledge.PatientCharacteristics'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKnowledge.Regulatory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKnowledge.RelatedMedicationKnowledge'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKnowledge.Schedule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKnowledge.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationRequest', VersionTypeMap::getContainedTypeClassName('MedicationRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationRequest.DispenseRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationRequest.InitialFill'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationRequest.Substitution'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('medicationRequestIntent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('medicationRequestIntentEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('medicationrequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('medicationrequestStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', VersionTypeMap::getContainedTypeClassName('MedicationStatement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationStatementStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationStatementStatusCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicinalProductDefinition', VersionTypeMap::getContainedTypeClassName('MedicinalProductDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicinalProductDefinition.Characteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicinalProductDefinition.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicinalProductDefinition.CountryLanguage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicinalProductDefinition.CrossReference'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicinalProductDefinition.Name'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicinalProductDefinition.NamePart'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicinalProductDefinition.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMessageDefinition', VersionTypeMap::getContainedTypeClassName('MessageDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageDefinition.AllowedResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageDefinition.Focus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader', VersionTypeMap::getContainedTypeClassName('MessageHeader'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageHeader.Destination'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageHeader.Response'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageHeader.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('messageheaderResponseRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('messageheaderResponseRequestEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageSignificanceCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageSignificanceCategoryEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Meta'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMolecularSequence', VersionTypeMap::getContainedTypeClassName('MolecularSequence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MolecularSequence.Inner'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MolecularSequence.Outer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MolecularSequence.Quality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MolecularSequence.ReferenceSeq'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MolecularSequence.Repository'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MolecularSequence.Roc'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MolecularSequence.StructureVariant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MolecularSequence.Variant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Money'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NameUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NameUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem', VersionTypeMap::getContainedTypeClassName('NamingSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NamingSystem.UniqueId'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NamingSystemIdentifierType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NamingSystemIdentifierTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NamingSystemType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NamingSystemTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Narrative'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NarrativeStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NarrativeStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NoteType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NoteTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', VersionTypeMap::getContainedTypeClassName('NutritionOrder'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.Administration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.EnteralFormula'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.Nutrient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.OralDiet'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.Supplement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.Texture'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRNutritionProduct', VersionTypeMap::getContainedTypeClassName('NutritionProduct'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionProduct.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionProduct.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionProduct.Nutrient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionProduct.ProductCharacteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionProductStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionProductStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRObservation', VersionTypeMap::getContainedTypeClassName('Observation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Observation.Component'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Observation.ReferenceRange'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationDataType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationDataTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRObservationDefinition', VersionTypeMap::getContainedTypeClassName('ObservationDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationDefinition.QualifiedInterval'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationDefinition.QuantitativeDetails'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationRangeCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationRangeCategoryEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('oid'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('oid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition', VersionTypeMap::getContainedTypeClassName('OperationDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationDefinition.Binding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationDefinition.Overload'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationDefinition.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationDefinition.ReferencedFrom'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationKindEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome', VersionTypeMap::getContainedTypeClassName('OperationOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationOutcome.Issue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationParameterUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationParameterUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROrganization', VersionTypeMap::getContainedTypeClassName('Organization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Organization.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation', VersionTypeMap::getContainedTypeClassName('OrganizationAffiliation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('orientationType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('orientationTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPackagedProductDefinition', VersionTypeMap::getContainedTypeClassName('PackagedProductDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PackagedProductDefinition.ContainedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PackagedProductDefinition.LegalStatusOfSupply'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PackagedProductDefinition.Package'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PackagedProductDefinition.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PackagedProductDefinition.ShelfLifeStorage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ParameterDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRParameters', VersionTypeMap::getContainedTypeClassName('Parameters'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Parameters.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ParticipantRequired'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ParticipantRequiredEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ParticipationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ParticipationStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPatient', VersionTypeMap::getContainedTypeClassName('Patient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Patient.Communication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Patient.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Patient.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', VersionTypeMap::getContainedTypeClassName('PaymentNotice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', VersionTypeMap::getContainedTypeClassName('PaymentReconciliation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PaymentReconciliation.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PaymentReconciliation.ProcessNote'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Period'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPerson', VersionTypeMap::getContainedTypeClassName('Person'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Person.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPlanDefinition', VersionTypeMap::getContainedTypeClassName('PlanDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PlanDefinition.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PlanDefinition.Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PlanDefinition.DynamicValue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PlanDefinition.Goal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PlanDefinition.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PlanDefinition.RelatedAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PlanDefinition.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Population'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('positiveInt'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('positiveInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner', VersionTypeMap::getContainedTypeClassName('Practitioner'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Practitioner.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPractitionerRole', VersionTypeMap::getContainedTypeClassName('PractitionerRole'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PractitionerRole.AvailableTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PractitionerRole.NotAvailable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRProcedure', VersionTypeMap::getContainedTypeClassName('Procedure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Procedure.FocalDevice'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Procedure.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProdCharacteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProductShelfLife'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PropertyRepresentation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PropertyRepresentationEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PropertyType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PropertyTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRProvenance', VersionTypeMap::getContainedTypeClassName('Provenance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Provenance.Agent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Provenance.Entity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProvenanceEntityRole'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProvenanceEntityRoleEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PublicationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PublicationStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('qualityType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('qualityTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Quantity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuantityComparator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuantityComparatorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire', VersionTypeMap::getContainedTypeClassName('Questionnaire'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Questionnaire.AnswerOption'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Questionnaire.EnableWhen'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Questionnaire.Initial'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Questionnaire.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireItemOperator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireItemOperatorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireItemType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireItemTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', VersionTypeMap::getContainedTypeClassName('QuestionnaireResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireResponse.Answer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireResponse.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireResponseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireResponseStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Range'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Ratio'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RatioRange'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Reference'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ReferenceHandlingPolicy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ReferenceHandlingPolicyEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ReferenceVersionRules'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ReferenceVersionRulesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRegulatedAuthorization', VersionTypeMap::getContainedTypeClassName('RegulatedAuthorization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RegulatedAuthorization.Case'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RelatedArtifact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RelatedArtifactType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RelatedArtifactTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', VersionTypeMap::getContainedTypeClassName('RelatedPerson'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RelatedPerson.Communication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RemittanceOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RemittanceOutcomeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ReportRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ReportRelationshipTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('repositoryType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('repositoryTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRequestGroup', VersionTypeMap::getContainedTypeClassName('RequestGroup'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestGroup.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestGroup.Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestGroup.RelatedAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestIntent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestIntentEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestPriority'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestPriorityEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestResourceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestResourceTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchDefinition', VersionTypeMap::getContainedTypeClassName('ResearchDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchElementDefinition', VersionTypeMap::getContainedTypeClassName('ResearchElementDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResearchElementDefinition.Characteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResearchElementType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResearchElementTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchStudy', VersionTypeMap::getContainedTypeClassName('ResearchStudy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResearchStudy.Arm'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResearchStudy.Objective'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResearchStudyStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResearchStudyStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchSubject', VersionTypeMap::getContainedTypeClassName('ResearchSubject'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResearchSubjectStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResearchSubjectStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceContainer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceVersionPolicy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceVersionPolicyEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResponseType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResponseTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RestfulCapabilityMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RestfulCapabilityModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', VersionTypeMap::getContainedTypeClassName('RiskAssessment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RiskAssessment.Prediction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SampledData'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SampledDataDataType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SampledDataDataType-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSchedule', VersionTypeMap::getContainedTypeClassName('Schedule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchComparator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchComparatorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchEntryMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchEntryModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchModifierCode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchModifierCodeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter', VersionTypeMap::getContainedTypeClassName('SearchParameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchParameter.Component'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchParamType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchParamTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('sequenceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('sequenceTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRServiceRequest', VersionTypeMap::getContainedTypeClassName('ServiceRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Signature'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SlicingRules'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SlicingRulesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSlot', VersionTypeMap::getContainedTypeClassName('Slot'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SlotStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SlotStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SortDirection'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SortDirectionEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SPDXLicense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SPDXLicenseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen', VersionTypeMap::getContainedTypeClassName('Specimen'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Specimen.Collection'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Specimen.Container'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Specimen.Processing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SpecimenContainedPreference'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SpecimenContainedPreferenceEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSpecimenDefinition', VersionTypeMap::getContainedTypeClassName('SpecimenDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SpecimenDefinition.Additive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SpecimenDefinition.Container'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SpecimenDefinition.Handling'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SpecimenDefinition.TypeTested'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SpecimenStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SpecimenStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('status'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('statusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('strandType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('strandTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('string'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('string-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition', VersionTypeMap::getContainedTypeClassName('StructureDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureDefinition.Context'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureDefinition.Differential'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureDefinition.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureDefinition.Snapshot'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureDefinitionKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureDefinitionKindEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRStructureMap', VersionTypeMap::getContainedTypeClassName('StructureMap'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMap.Dependent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMap.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMap.Input'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMap.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMap.Rule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMap.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMap.Structure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMap.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapContextType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapContextTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapGroupTypeMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapGroupTypeModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapInputMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapInputModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapModelMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapModelModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapSourceListMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapSourceListModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapTargetListMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapTargetListModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapTransform'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapTransformEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubscription', VersionTypeMap::getContainedTypeClassName('Subscription'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Subscription.Channel'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionChannelType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionChannelTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionNotificationType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionNotificationTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubscriptionStatus', VersionTypeMap::getContainedTypeClassName('SubscriptionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionStatus.NotificationEvent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubscriptionTopic', VersionTypeMap::getContainedTypeClassName('SubscriptionTopic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionTopic.CanFilterBy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionTopic.EventTrigger'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionTopic.NotificationShape'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionTopic.QueryCriteria'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionTopic.ResourceTrigger'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubstance', VersionTypeMap::getContainedTypeClassName('Substance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Substance.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Substance.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubstanceDefinition', VersionTypeMap::getContainedTypeClassName('SubstanceDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubstanceDefinition.Code'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubstanceDefinition.Moiety'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubstanceDefinition.MolecularWeight'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubstanceDefinition.Name'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubstanceDefinition.Official'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubstanceDefinition.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubstanceDefinition.Relationship'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubstanceDefinition.Representation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubstanceDefinition.SourceMaterial'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubstanceDefinition.Structure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', VersionTypeMap::getContainedTypeClassName('SupplyDelivery'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyDelivery.SuppliedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyDeliveryStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyDeliveryStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', VersionTypeMap::getContainedTypeClassName('SupplyRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyRequest.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyRequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyRequestStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SystemRestfulInteraction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SystemRestfulInteractionEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTask', VersionTypeMap::getContainedTypeClassName('Task'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Task.Input'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Task.Output'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Task.Restriction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TaskIntent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TaskIntentEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TaskStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TaskStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTerminologyCapabilities', VersionTypeMap::getContainedTypeClassName('TerminologyCapabilities'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TerminologyCapabilities.Closure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TerminologyCapabilities.CodeSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TerminologyCapabilities.Expansion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TerminologyCapabilities.Filter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TerminologyCapabilities.Implementation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TerminologyCapabilities.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TerminologyCapabilities.Software'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TerminologyCapabilities.Translation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TerminologyCapabilities.ValidateCode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TerminologyCapabilities.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTestReport', VersionTypeMap::getContainedTypeClassName('TestReport'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Action1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Action2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Assert'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Setup'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Teardown'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Test'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReportActionResult'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReportActionResultEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReportParticipantType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReportParticipantTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReportResult'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReportResultEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReportStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTestScript', VersionTypeMap::getContainedTypeClassName('TestScript'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Action1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Action2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Assert'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Capability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Destination'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Fixture'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Metadata'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Origin'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.RequestHeader'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Setup'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Teardown'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Test'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Variable'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScriptRequestMethodCode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScriptRequestMethodCodeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('time'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('time-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Timing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Timing.Repeat'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TriggerDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TriggerType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TriggerTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TypeDerivationRule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TypeDerivationRuleEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TypeRestfulInteraction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TypeRestfulInteractionEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UDIEntryType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UDIEntryTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UnitsOfTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UnitsOfTimeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('unsignedInt'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('unsignedInt-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('uri'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('uri-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('url'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('url-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UsageContext'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Use'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UseEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('uuid'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('uuid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRValueSet', VersionTypeMap::getContainedTypeClassName('ValueSet'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Compose'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Concept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Contains'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Designation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Expansion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Filter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Include'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VariableType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VariableTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRVerificationResult', VersionTypeMap::getContainedTypeClassName('VerificationResult'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VerificationResult.Attestation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VerificationResult.PrimarySource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VerificationResult.Validator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VisionBase'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VisionBaseEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VisionEyes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VisionEyesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', VersionTypeMap::getContainedTypeClassName('VisionPrescription'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VisionPrescription.LensSpecification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VisionPrescription.Prism'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('XHTML'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('XPathUsageType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('XPathUsageTypeEnum'));
    }

    public function testIsContainableResourceWithClassname()
    {
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAccountStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAccountStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionCardinalityBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionCardinalityBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionConditionKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionConditionKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionConditionKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionConditionKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionGroupingBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionGroupingBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionParticipantTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionParticipantTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionPrecheckBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionPrecheckBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionRequiredBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionRequiredBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionSelectionBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionSelectionBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRActivityDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRActivityDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAddress'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAddress'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAddressType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAddressType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAddressTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAddressTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAddressUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAddressUseEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAdministrableProductDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAdministrableProductDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionRouteOfAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionRouteOfAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionTargetSpecies'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionTargetSpecies'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionWithdrawalPeriod'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionWithdrawalPeriod'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAdministrativeGenderEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAdministrativeGenderEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAdverseEvent'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAdverseEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAdverseEventActuality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAdverseEventActuality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAdverseEventActualityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAdverseEventActualityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAgeUnits'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAgeUnits'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAgeUnitsEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAgeUnitsEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAggregationModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAggregationModeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAllergyIntoleranceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAllergyIntoleranceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAnnotation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAnnotation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAppointmentStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAppointmentStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAttachment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAttachment'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAuditEventActionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAuditEventActionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAuditEventAgentNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAuditEventAgentNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAuditEventAgentNetworkTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAuditEventAgentNetworkTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAuditEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAuditEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAuditEventOutcomeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAuditEventOutcomeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRBase64BinaryPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRBase64BinaryPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRBinary'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRBinary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBindingStrengthEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBindingStrengthEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductManipulation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductManipulation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProcessing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProcessing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductStorage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductStorage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBiologicallyDerivedProductCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBiologicallyDerivedProductCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBiologicallyDerivedProductStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBiologicallyDerivedProductStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBiologicallyDerivedProductStorageScale'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBiologicallyDerivedProductStorageScale'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductStorageScaleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductStorageScaleEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRBodyStructure'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRBodyStructure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBoolean'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBoolean'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRBooleanPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRBooleanPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRBundle'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRBundle'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBundleType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBundleType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBundleTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBundleTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCanonical'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCanonical'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCanonicalPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCanonicalPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCapabilityStatementKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCapabilityStatementKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCarePlanActivityKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCarePlanActivityKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCarePlanActivityKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCarePlanActivityKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCarePlanActivityStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCarePlanActivityStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCarePlanIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCarePlanIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCarePlanIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCarePlanIntentEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCareTeam'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCareTeamStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCareTeamStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCareTeamStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCareTeamStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCatalogEntry'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCatalogEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCatalogEntry\FHIRCatalogEntryRelatedEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCatalogEntry\FHIRCatalogEntryRelatedEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCatalogEntryRelationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCatalogEntryRelationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCatalogEntryRelationTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCatalogEntryRelationTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCharacteristicCombination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCharacteristicCombination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCharacteristicCombinationEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCharacteristicCombinationEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRChargeItem'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRChargeItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRChargeItemDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRChargeItemDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPriceComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPriceComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRChargeItemStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRChargeItemStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRChargeItemStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRChargeItemStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCitation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCitation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAbstract'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAbstract'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAffiliationInfo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAffiliationInfo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationCitedArtifact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationCitedArtifact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributionInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributionInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributorship'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributorship'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationDateOfPublication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationDateOfPublication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPart'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPart'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPeriodicRelease'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPeriodicRelease'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublicationForm'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublicationForm'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublishedIn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublishedIn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationTitle'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationTitle'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationVersion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationVersion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWebLocation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWebLocation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWhoClassified'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWhoClassified'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRClinicalImpressionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRClinicalImpressionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRClinicalImpressionStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRClinicalImpressionStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClinicalUseDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClinicalUseDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionContraindication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionContraindication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionIndication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionIndication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteractant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteractant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionOtherTherapy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionOtherTherapy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionUndesirableEffect'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionUndesirableEffect'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionWarning'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionWarning'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRClinicalUseDefinitionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRClinicalUseDefinitionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRClinicalUseDefinitionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRClinicalUseDefinitionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeableReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeableReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeSearchSupport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeSearchSupport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCodeSearchSupportEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCodeSearchSupportEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCodeSystem'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCodeSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeSystemContentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeSystemContentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeSystemHierarchyMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeSystemHierarchyMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCoding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCoding'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCompartmentType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCompartmentType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCompartmentTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCompartmentTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCompositionAttestationModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCompositionAttestationModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCompositionStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCompositionStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConceptMapEquivalenceEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConceptMapEquivalenceEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConceptMapGroupUnmappedMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConceptMapGroupUnmappedMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConditionalReadStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConditionalReadStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConditionalReadStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConditionalReadStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConfidentiality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConfidentiality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConfidentialityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConfidentialityEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRConsent'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRConsent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConsentDataMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConsentDataMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConsentDataMeaningEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConsentDataMeaningEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConsentProvisionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConsentProvisionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConsentProvisionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConsentProvisionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConsentState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConsentState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConsentStateEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConsentStateEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConstraintSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConstraintSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContactDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContactDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContactPoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContactPoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContactPointSystemEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContactPointSystemEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContactPointUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContactPointUseEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContractResourcePublicationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContractResourcePublicationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContractResourcePublicationStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContractResourcePublicationStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContractResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContractResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContributor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContributor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContributorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContributorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContributorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContributorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCriteriaNotExistsBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCriteriaNotExistsBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCriteriaNotExistsBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCriteriaNotExistsBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDataRequirement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDataRequirement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementSort'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementSort'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRDatePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRDatePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDateTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDateTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRDateTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRDateTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDaysOfWeek'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDaysOfWeek'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDaysOfWeekEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDaysOfWeekEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDecimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDecimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRDecimalPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRDecimalPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDefinitionResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDefinitionResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDefinitionResourceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDefinitionResourceTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceDeviceName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceDeviceName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceSpecialization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceSpecialization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCapability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCapability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionSpecialization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionSpecialization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricColor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricColor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricColorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricColorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceNameType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceNameType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceNameTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceNameTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceUseStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceUseStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceUseStatementStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceUseStatementStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDiscriminatorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDiscriminatorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDocumentModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDocumentModeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDocumentRelationshipTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDocumentRelationshipTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDosage\FHIRDosageDoseAndRate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDosage\FHIRDosageDoseAndRate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionExample'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionExample'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREligibilityRequestPurpose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREligibilityRequestPurpose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREligibilityRequestPurposeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREligibilityRequestPurposeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREligibilityResponsePurpose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREligibilityResponsePurpose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREligibilityResponsePurposeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREligibilityResponsePurposeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREnableWhenBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREnableWhenBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREnableWhenBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREnableWhenBehaviorEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREncounterLocationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREncounterLocationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREncounterStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREncounterStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREncounterStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREncounterStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREndpoint'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREndpoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREndpointStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREndpointStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREndpointStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREndpointStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventCapabilityModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventCapabilityModeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREventDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREventDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventOrRequestResourceTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventOrRequestResourceTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventOrRequestResourceTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventOrRequestResourceTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventResourceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventResourceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventTimingEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventTimingEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREvidence'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREvidence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceAttributeEstimate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceAttributeEstimate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceCertainty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceCertainty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceModelCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceModelCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceSampleSize'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceSampleSize'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceStatistic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceStatistic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariableDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariableDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREvidenceReport'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREvidenceReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSubject'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSubject'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREvidenceVariable'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREvidenceVariable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableTimeFromStart'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableTimeFromStart'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREvidenceVariableHandling'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREvidenceVariableHandling'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREvidenceVariableHandlingEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREvidenceVariableHandlingEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRExampleScenario'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRExampleScenario'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExampleScenarioActorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExampleScenarioActorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRExampleScenarioActorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRExampleScenarioActorTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExplanationOfBenefitStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExplanationOfBenefitStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExpression'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExpression'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExpressionLanguage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExpressionLanguage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRExpressionLanguageEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRExpressionLanguageEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExtension'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExtension'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExtensionContextType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExtensionContextType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRExtensionContextTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRExtensionContextTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRAllTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRAllTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRAllTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRAllTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRDefinedType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRDefinedType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRDefinedTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRDefinedTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRDeviceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRDeviceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRPathTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRPathTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRPathTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRPathTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRSubstanceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRSubstanceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRVersion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRVersion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRVersionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRVersionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFilterOperatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFilterOperatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFinancialResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFinancialResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFlagStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFlagStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGoalLifecycleStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGoalLifecycleStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGoalLifecycleStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGoalLifecycleStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGraphCompartmentRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGraphCompartmentRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGraphCompartmentUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGraphCompartmentUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGraphCompartmentUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGraphCompartmentUseEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGraphDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGraphDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGroupMeasure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGroupMeasure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGroupMeasureEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGroupMeasureEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGroupType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGroupType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGroupTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGroupTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGuidanceResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGuidanceResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGuidePageGeneration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGuidePageGeneration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGuidePageGenerationEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGuidePageGenerationEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGuideParameterCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGuideParameterCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGuideParameterCodeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGuideParameterCodeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRHTTPVerbEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRHTTPVerbEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRHumanName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRHumanName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRId'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRId'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRIdPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRIdPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIdentifierUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIdentifierUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRImagingStudyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRImagingStudyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRImagingStudyStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRImagingStudyStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationEducation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationEducation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRImmunizationEvaluationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRImmunizationEvaluationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRImmunizationEvaluationStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRImmunizationEvaluationStatusCodesEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRImmunizationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRImmunizationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRIngredient'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientManufacturer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientManufacturer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientReferenceStrength'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientReferenceStrength'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientStrength'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientStrength'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientSubstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientSubstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIngredientManufacturerRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIngredientManufacturerRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIngredientManufacturerRoleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIngredientManufacturerRoleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInstant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInstant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRInstantPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRInstantPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRInsurancePlan'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRInsurancePlan'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInteger'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInteger'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRIntegerPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRIntegerPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInteractionTrigger'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInteractionTrigger'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRInteractionTriggerEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRInteractionTriggerEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRInvoice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRInvoice'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoicePriceComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoicePriceComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInvoicePriceComponentType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInvoicePriceComponentType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRInvoicePriceComponentTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRInvoicePriceComponentTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInvoiceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInvoiceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRInvoiceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRInvoiceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIssueSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIssueSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIssueType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIssueType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIssueTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIssueTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRKnowledgeResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRKnowledgeResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRKnowledgeResourceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRKnowledgeResourceTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRLibrary'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRLibrary'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRLinkage'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRLinkage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRLinkageType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRLinkageType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRLinkageTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRLinkageTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRLinkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRLinkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRLinkTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRLinkTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRListModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRListModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRListStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRListStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRListStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRListStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationHoursOfOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationHoursOfOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRLocationModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRLocationModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRLocationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRLocationStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRManufacturedItemDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRManufacturedItemDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRMarkdownPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRMarkdownPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMarketingStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMarketingStatus'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMeasure'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMeasure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMeasureReport'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMeasureReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMeasureReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMeasureReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMeasureReportStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMeasureReportStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMeasureReportType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMeasureReportType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMeasureReportTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMeasureReportTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedia'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedia'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationKnowledge'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationKnowledge'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeAdministrationGuidelines'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeAdministrationGuidelines'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeKinetics'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeKinetics'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristics'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristics'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSchedule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSchedule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMedicationRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMedicationRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMedicationrequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMedicationrequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMedicationrequestStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMedicationrequestStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMedicationStatementStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMedicationStatementStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMedicationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMedicationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMedicationStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMedicationStatusCodesEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicinalProductDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicinalProductDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCountryLanguage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCountryLanguage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCrossReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCrossReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionNamePart'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionNamePart'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionOperation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMessageDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMessageDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMessageheaderResponseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMessageheaderResponseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMessageheaderResponseRequestEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMessageheaderResponseRequestEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMeta'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMeta'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMolecularSequence'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMolecularSequence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceInner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceInner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceOuter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceOuter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceQuality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceQuality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceReferenceSeq'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceReferenceSeq'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRepository'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRepository'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRoc'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRoc'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStructureVariant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStructureVariant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceVariant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceVariant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMoney'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMoney'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNameUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNameUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNameUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNameUseEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNamingSystemTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNamingSystemTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNarrative'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNarrative'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNarrativeStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNarrativeStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNoteType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNoteType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNoteTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNoteTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRNutritionProduct'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRNutritionProduct'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductNutrient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductNutrient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductProductCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductProductCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNutritionProductStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNutritionProductStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNutritionProductStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNutritionProductStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRObservationDataType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRObservationDataType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRObservationDataTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRObservationDataTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRObservationDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRObservationDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedInterval'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedInterval'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQuantitativeDetails'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQuantitativeDetails'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRObservationRangeCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRObservationRangeCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRObservationRangeCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRObservationRangeCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRObservationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRObservationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIROid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIROid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIROidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIROidPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIROperationKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIROperationKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIROperationKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIROperationKindEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIROperationParameterUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIROperationParameterUseEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIROrientationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIROrientationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIROrientationTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIROrientationTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPackagedProductDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPackagedProductDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionContainedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionContainedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionLegalStatusOfSupply'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionLegalStatusOfSupply'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionPackage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionPackage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionShelfLifeStorage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionShelfLifeStorage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRParameterDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRParameterDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRParameters'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRParameters'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRParticipantRequired'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRParticipantRequired'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRParticipantRequiredEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRParticipantRequiredEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRParticipationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRParticipationStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPeriod'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPeriod'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPlanDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPlanDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPopulation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPopulation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRPositiveIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRPositiveIntPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPractitionerRole'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPractitionerRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProdCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProdCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProductShelfLife'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProductShelfLife'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRPropertyRepresentationEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRPropertyRepresentationEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPropertyType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPropertyType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRPropertyTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRPropertyTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPublicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPublicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRPublicationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRPublicationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQualityType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQualityType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQualityTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQualityTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQuantityComparatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQuantityComparatorEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuestionnaireItemOperator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuestionnaireItemOperator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQuestionnaireItemOperatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQuestionnaireItemOperatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuestionnaireItemType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuestionnaireItemType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRatio'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRatio'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRatioRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRatioRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRReferenceHandlingPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRReferenceHandlingPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRReferenceVersionRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRReferenceVersionRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRegulatedAuthorization'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRegulatedAuthorization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRegulatedAuthorization\FHIRRegulatedAuthorizationCase'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRegulatedAuthorization\FHIRRegulatedAuthorizationCase'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRelatedArtifact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRelatedArtifact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRelatedArtifactType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRelatedArtifactType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRReportRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRReportRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRReportRelationshipTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRReportRelationshipTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRepositoryType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRepositoryType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRepositoryTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRepositoryTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRequestGroup'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRequestGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRequestIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRequestIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRequestPriorityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRequestPriorityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRequestResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRequestResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRequestResourceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRequestResourceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRequestStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRequestStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchElementDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchElementDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRResearchElementDefinition\FHIRResearchElementDefinitionCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRResearchElementDefinition\FHIRResearchElementDefinitionCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResearchElementType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResearchElementType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResearchElementTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResearchElementTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchStudy'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchStudy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResearchStudyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResearchStudyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResearchStudyStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResearchStudyStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchSubject'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchSubject'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResearchSubjectStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResearchSubjectStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResearchSubjectStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResearchSubjectStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResourceContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResourceContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResourceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResourceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResponseTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResponseTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRestfulCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRestfulCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSampledData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSampledData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRSampledDataDataTypePrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSearchComparator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSearchComparator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSearchComparatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSearchComparatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSearchEntryModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSearchEntryModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSearchModifierCodeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSearchModifierCodeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSearchParamTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSearchParamTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSequenceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSequenceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSequenceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSequenceTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRServiceRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRServiceRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSignature'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSignature'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSlicingRulesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSlicingRulesEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSlotStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSlotStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSortDirection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSortDirection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSortDirectionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSortDirectionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSPDXLicense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSPDXLicense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSPDXLicenseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSPDXLicenseEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSpecimenContainedPreference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSpecimenContainedPreference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSpecimenContainedPreferenceEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSpecimenContainedPreferenceEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSpecimenDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSpecimenDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSpecimenStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSpecimenStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStrandType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStrandType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStrandTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStrandTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRString'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRString'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRStringPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRStringPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRStructureMap'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRStructureMap'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapContextType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapContextType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapContextTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapContextTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapGroupTypeMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapGroupTypeMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapInputMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapInputMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapInputModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapInputModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapModelMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapModelMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapModelModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapModelModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapSourceListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapSourceListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapTargetListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapTargetListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapTransform'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapTransform'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapTransformEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapTransformEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSubscriptionChannelType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSubscriptionChannelType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSubscriptionChannelTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSubscriptionChannelTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSubscriptionNotificationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSubscriptionNotificationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSubscriptionNotificationTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSubscriptionNotificationTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubscriptionStatus'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubscriptionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionStatus\FHIRSubscriptionStatusNotificationEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionStatus\FHIRSubscriptionStatusNotificationEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSubscriptionStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSubscriptionStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSubscriptionStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSubscriptionStatusCodesEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubscriptionTopic'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubscriptionTopic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicCanFilterBy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicCanFilterBy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicEventTrigger'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicEventTrigger'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicNotificationShape'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicNotificationShape'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicQueryCriteria'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicQueryCriteria'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicResourceTrigger'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicResourceTrigger'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubstanceDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubstanceDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMoiety'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMoiety'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMolecularWeight'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMolecularWeight'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionOfficial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionOfficial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRelationship'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRelationship'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionSourceMaterial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionSourceMaterial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionStructure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionStructure'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTask'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTask'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTaskIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTaskIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTaskIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTaskIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTaskStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTaskStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTaskStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTaskStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTerminologyCapabilities'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTerminologyCapabilities'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTestReport'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTestReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestReportActionResult'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestReportActionResult'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestReportActionResultEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestReportActionResultEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestReportParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestReportParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestReportResult'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestReportResult'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestReportResultEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestReportResultEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestReportStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestReportStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTestScript'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTestScript'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestScriptRequestMethodCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestScriptRequestMethodCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTiming\FHIRTimingRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTiming\FHIRTimingRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTriggerDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTriggerDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTriggerType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTriggerType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTriggerTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTriggerTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTypeDerivationRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTypeDerivationRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUDIEntryType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUDIEntryType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRUDIEntryTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRUDIEntryTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRUnitsOfTimeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRUnitsOfTimeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUri'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUri'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRUriPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRUriPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUrl'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUrl'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRUrlPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRUrlPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUsageContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUsageContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUuid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUuid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRUuidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRUuidPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRValueSet'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRValueSet'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRVariableType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRVariableType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRVariableTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRVariableTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRVerificationResult'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRVerificationResult'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRVisionBaseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRVisionBaseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRVisionEyesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRVisionEyesEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRXPathUsageType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRXPathUsageType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRXPathUsageTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRXPathUsageTypeEnum'));
    }

    public function testIsContainableResourceWithTypeName()
    {
        $this->assertTrue(VersionTypeMap::isContainableResource('Account'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Account.Coverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Account.Guarantor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AccountStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AccountStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionCardinalityBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionCardinalityBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionConditionKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionConditionKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionGroupingBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionGroupingBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionParticipantTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionPrecheckBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionPrecheckBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionRelationshipTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionRequiredBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionRequiredBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionSelectionBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionSelectionBehaviorEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ActivityDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActivityDefinition.DynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActivityDefinition.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Address'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AddressType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AddressTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AddressUseEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('AdministrableProductDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdministrableProductDefinition.Property'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdministrableProductDefinition.RouteOfAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdministrableProductDefinition.TargetSpecies'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdministrableProductDefinition.WithdrawalPeriod'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdministrativeGender'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdministrativeGenderEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('AdverseEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdverseEvent.Causality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdverseEvent.SuspectEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdverseEventActuality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdverseEventActualityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Age'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AgeUnits'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AgeUnitsEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AggregationModeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('AllergyIntolerance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntolerance.Reaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceCriticalityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Annotation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Appointment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Appointment.Participant'));
        $this->assertTrue(VersionTypeMap::isContainableResource('AppointmentResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AppointmentStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AppointmentStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionDirectionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionDirectionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionOperatorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionOperatorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionResponseTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionResponseTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Attachment'));
        $this->assertTrue(VersionTypeMap::isContainableResource('AuditEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEvent.Agent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEvent.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEvent.Entity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEvent.Network'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEvent.Source'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventActionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventAgentNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventAgentNetworkTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventOutcomeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('base64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('base64Binary-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Basic'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Binary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BindingStrength'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BindingStrengthEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('BiologicallyDerivedProduct'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BiologicallyDerivedProduct.Collection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BiologicallyDerivedProduct.Manipulation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BiologicallyDerivedProduct.Processing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BiologicallyDerivedProduct.Storage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BiologicallyDerivedProductCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BiologicallyDerivedProductCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BiologicallyDerivedProductStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BiologicallyDerivedProductStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BiologicallyDerivedProductStorageScale'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BiologicallyDerivedProductStorageScaleEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('BodyStructure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('boolean'));
        $this->assertFalse(VersionTypeMap::isContainableResource('boolean-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Bundle'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Bundle.Entry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Bundle.Link'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Bundle.Request'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Bundle.Response'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Bundle.Search'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BundleType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BundleTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('canonical'));
        $this->assertFalse(VersionTypeMap::isContainableResource('canonical-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CapabilityStatement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Document'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Endpoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Implementation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Interaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Interaction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Messaging'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Operation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Resource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Rest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.SearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Security'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Software'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.SupportedMessage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatementKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatementKindEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CarePlan'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlan.Activity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlan.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanActivityKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanActivityKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanActivityStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanIntentEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CareTeam.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CareTeamStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CareTeamStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CatalogEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CatalogEntry.RelatedEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CatalogEntryRelationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CatalogEntryRelationTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CharacteristicCombination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CharacteristicCombinationEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ChargeItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ChargeItem.Performer'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ChargeItemDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ChargeItemDefinition.Applicability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ChargeItemDefinition.PriceComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ChargeItemDefinition.PropertyGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ChargeItemStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ChargeItemStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Citation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.Abstract'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.AffiliationInfo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.CitedArtifact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.Classification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.Classification1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.ContributionInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.Contributorship'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.DateOfPublication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.Entry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.Part'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.PeriodicRelease'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.PublicationForm'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.PublishedIn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.RelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.RelatesTo1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.StatusDate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.StatusDate1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.Summary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.Summary1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.Title'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.Version'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.WebLocation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Citation.WhoClassified'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Claim'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Accident'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.CareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Diagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Insurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Payee'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Procedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Related'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.SubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.SupportingInfo'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ClaimResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.AddItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Adjudication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Detail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Error'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Insurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Payment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.ProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.SubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.SubDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Total'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ClinicalImpression'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalImpression.Finding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalImpression.Investigation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalImpressionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalImpressionStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ClinicalUseDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalUseDefinition.Contraindication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalUseDefinition.Indication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalUseDefinition.Interactant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalUseDefinition.Interaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalUseDefinition.OtherTherapy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalUseDefinition.UndesirableEffect'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalUseDefinition.Warning'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalUseDefinitionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalUseDefinitionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('code'));
        $this->assertFalse(VersionTypeMap::isContainableResource('code-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeableReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSearchSupport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSearchSupportEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CodeSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystem.Concept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystem.Designation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystem.Filter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystem.Property'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystem.Property1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystemContentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystemContentModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystemHierarchyMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystemHierarchyMeaningEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Coding'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Communication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Communication.Payload'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CommunicationRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CommunicationRequest.Payload'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CompartmentDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompartmentDefinition.Resource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompartmentType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompartmentTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Composition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Composition.Attester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Composition.Event'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Composition.RelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Composition.Section'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompositionAttestationModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompositionStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ConceptMap'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMap.DependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMap.Element'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMap.Group'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMap.Target'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMap.Unmapped'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMapEquivalenceEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMapGroupUnmappedMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMapGroupUnmappedModeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Condition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Condition.Evidence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Condition.Stage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionalDeleteStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionalDeleteStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionalReadStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionalReadStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Confidentiality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConfidentialityEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Consent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Consent.Actor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Consent.Data'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Consent.Policy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Consent.Provision'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Consent.Verification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConsentDataMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConsentDataMeaningEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConsentProvisionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConsentProvisionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConsentState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConsentStateEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConstraintSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactPoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactPointSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactPointSystemEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactPointUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactPointUseEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Contract'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Action'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Answer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Asset'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.ContentDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Context'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Friendly'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Legal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Offer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Party'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Rule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.SecurityLabel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Signer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Subject'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Term'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.ValuedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContractResourcePublicationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContractResourcePublicationStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContractResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContractResourceStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contributor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContributorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContributorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Count'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Coverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Coverage.Class'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Coverage.CostToBeneficiary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Coverage.Exception'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CoverageEligibilityRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CoverageEligibilityRequest.Diagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CoverageEligibilityRequest.Insurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CoverageEligibilityRequest.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CoverageEligibilityRequest.SupportingInfo'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CoverageEligibilityResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CoverageEligibilityResponse.Benefit'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CoverageEligibilityResponse.Error'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CoverageEligibilityResponse.Insurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CoverageEligibilityResponse.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CriteriaNotExistsBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CriteriaNotExistsBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DataRequirement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DataRequirement.CodeFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DataRequirement.DateFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DataRequirement.Sort'));
        $this->assertFalse(VersionTypeMap::isContainableResource('date'));
        $this->assertFalse(VersionTypeMap::isContainableResource('date-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('dateTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('dateTime-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DaysOfWeek'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DaysOfWeekEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('decimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('decimal-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DefinitionResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DefinitionResourceTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DetectedIssue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DetectedIssue.Evidence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DetectedIssue.Mitigation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DetectedIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DetectedIssueSeverityEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Device'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Device.DeviceName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Device.Property'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Device.Specialization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Device.UdiCarrier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Device.Version'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DeviceDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceDefinition.Capability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceDefinition.DeviceName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceDefinition.Material'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceDefinition.Property'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceDefinition.Specialization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceDefinition.UdiDeviceIdentifier'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DeviceMetric'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetric.Calibration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCalibrationState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCalibrationStateEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCalibrationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCalibrationTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricColor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricColorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricOperationalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricOperationalStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceNameType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceNameTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DeviceRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceRequest.Parameter'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DeviceUseStatement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceUseStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceUseStatementStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DiagnosticReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticReport.Media'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticReportStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiscriminatorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiscriminatorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Distance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DocumentManifest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentManifest.Related'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentModeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DocumentReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReference.Content'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReference.Context'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReference.RelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReferenceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentRelationshipTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DomainResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Dosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Dosage.DoseAndRate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Duration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Element'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Base'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Binding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Constraint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Discriminator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Example'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Mapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Slicing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Type'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EligibilityRequestPurpose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EligibilityRequestPurposeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EligibilityResponsePurpose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EligibilityResponsePurposeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EnableWhenBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EnableWhenBehaviorEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Encounter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.ClassHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.Diagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.Hospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.Location'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.StatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterLocationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Endpoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EndpointStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EndpointStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('EnrollmentRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('EnrollmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('EpisodeOfCare'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EpisodeOfCare.Diagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EpisodeOfCare.StatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EpisodeOfCareStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EpisodeOfCareStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventCapabilityModeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('EventDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventOrRequestResourceTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventOrRequestResourceTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventResourceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventTimingEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Evidence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Evidence.AttributeEstimate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Evidence.Certainty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Evidence.ModelCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Evidence.SampleSize'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Evidence.Statistic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Evidence.Variable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Evidence.VariableDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('EvidenceReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EvidenceReport.Characteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EvidenceReport.RelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EvidenceReport.Section'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EvidenceReport.Subject'));
        $this->assertTrue(VersionTypeMap::isContainableResource('EvidenceVariable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EvidenceVariable.Category'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EvidenceVariable.Characteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EvidenceVariable.TimeFromStart'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EvidenceVariableHandling'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EvidenceVariableHandlingEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ExampleScenario'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExampleScenario.Actor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExampleScenario.Alternative'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExampleScenario.ContainedInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExampleScenario.Instance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExampleScenario.Operation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExampleScenario.Process'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExampleScenario.Step'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExampleScenario.Version'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExampleScenarioActorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExampleScenarioActorTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ExplanationOfBenefit'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Accident'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.AddItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Adjudication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.BenefitBalance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.CareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Detail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Diagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Financial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Insurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Payee'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Payment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Procedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.ProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Related'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.SubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.SubDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.SupportingInfo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Total'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefitStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefitStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Expression'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExpressionLanguage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExpressionLanguageEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Extension'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExtensionContextType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExtensionContextTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FamilyHistoryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FamilyHistoryStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('FamilyMemberHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FamilyMemberHistory.Condition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRAllTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRAllTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRDefinedType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRDefinedTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRDeviceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRDeviceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRPathTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRPathTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRSubstanceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRSubstanceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRVersion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRVersionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FilterOperatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FinancialResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FinancialResourceStatusCodesEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Flag'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FlagStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FlagStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Goal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Goal.Target'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GoalLifecycleStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GoalLifecycleStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GraphCompartmentRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GraphCompartmentRuleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GraphCompartmentUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GraphCompartmentUseEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('GraphDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GraphDefinition.Compartment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GraphDefinition.Link'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GraphDefinition.Target'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Group'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Group.Characteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Group.Member'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GroupMeasure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GroupMeasureEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GroupType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GroupTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('GuidanceResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuidanceResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuidanceResponseStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuidePageGeneration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuidePageGenerationEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuideParameterCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuideParameterCodeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('HealthcareService'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HealthcareService.AvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HealthcareService.Eligibility'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HealthcareService.NotAvailable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HTTPVerb'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HTTPVerbEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HumanName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('id'));
        $this->assertFalse(VersionTypeMap::isContainableResource('id-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Identifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IdentifierUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IdentityAssuranceLevel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IdentityAssuranceLevelEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ImagingStudy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingStudy.Instance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingStudy.Performer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingStudy.Series'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingStudyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingStudyStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Immunization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Immunization.Education'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Immunization.Performer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Immunization.ProtocolApplied'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Immunization.Reaction'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ImmunizationEvaluation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImmunizationEvaluationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImmunizationEvaluationStatusCodesEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ImmunizationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImmunizationRecommendation.DateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImmunizationRecommendation.Recommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImmunizationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImmunizationStatusCodesEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ImplementationGuide'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Definition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.DependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Global'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Grouping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Manifest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Page'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Page1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Parameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Resource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Resource1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Template'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Ingredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Ingredient.Manufacturer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Ingredient.ReferenceStrength'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Ingredient.Strength'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Ingredient.Substance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IngredientManufacturerRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IngredientManufacturerRoleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('instant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('instant-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('InsurancePlan'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InsurancePlan.Benefit'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InsurancePlan.Benefit1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InsurancePlan.Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InsurancePlan.Cost'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InsurancePlan.Coverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InsurancePlan.GeneralCost'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InsurancePlan.Limit'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InsurancePlan.Plan'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InsurancePlan.SpecificCost'));
        $this->assertFalse(VersionTypeMap::isContainableResource('integer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('integer-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InteractionTrigger'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InteractionTriggerEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Invoice'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Invoice.LineItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Invoice.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Invoice.PriceComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InvoicePriceComponentType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InvoicePriceComponentTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InvoiceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InvoiceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IssueSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IssueType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IssueTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('KnowledgeResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('KnowledgeResourceTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Library'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Linkage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Linkage.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LinkageType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LinkageTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LinkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LinkTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('List'));
        $this->assertFalse(VersionTypeMap::isContainableResource('List.Entry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ListModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ListStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ListStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Location'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Location.HoursOfOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Location.Position'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LocationModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LocationStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ManufacturedItemDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ManufacturedItemDefinition.Property'));
        $this->assertFalse(VersionTypeMap::isContainableResource('markdown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('markdown-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MarketingStatus'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Measure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Measure.Component'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Measure.Group'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Measure.Population'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Measure.Stratifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Measure.SupplementalData'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MeasureReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReport.Component'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReport.Group'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReport.Population'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReport.Population1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReport.Stratifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReport.Stratum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReportStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReportType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReportTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Media'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Medication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Medication.Batch'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Medication.Ingredient'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicationAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationAdministration.Dosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationAdministration.Performer'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicationDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationDispense.Performer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationDispense.Substitution'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicationKnowledge'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKnowledge.AdministrationGuidelines'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKnowledge.Cost'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKnowledge.Dosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKnowledge.DrugCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKnowledge.Ingredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKnowledge.Kinetics'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKnowledge.MaxDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKnowledge.MedicineClassification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKnowledge.MonitoringProgram'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKnowledge.Monograph'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKnowledge.Packaging'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKnowledge.PatientCharacteristics'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKnowledge.Regulatory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKnowledge.RelatedMedicationKnowledge'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKnowledge.Schedule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKnowledge.Substitution'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicationRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationRequest.DispenseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationRequest.InitialFill'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationRequest.Substitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('medicationRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('medicationRequestIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('medicationrequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('medicationrequestStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicationStatement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationStatementStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationStatementStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationStatusCodesEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicinalProductDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicinalProductDefinition.Characteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicinalProductDefinition.Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicinalProductDefinition.CountryLanguage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicinalProductDefinition.CrossReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicinalProductDefinition.Name'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicinalProductDefinition.NamePart'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicinalProductDefinition.Operation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MessageDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageDefinition.AllowedResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageDefinition.Focus'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MessageHeader'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageHeader.Destination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageHeader.Response'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageHeader.Source'));
        $this->assertFalse(VersionTypeMap::isContainableResource('messageheaderResponseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('messageheaderResponseRequestEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageSignificanceCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Meta'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MolecularSequence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MolecularSequence.Inner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MolecularSequence.Outer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MolecularSequence.Quality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MolecularSequence.ReferenceSeq'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MolecularSequence.Repository'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MolecularSequence.Roc'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MolecularSequence.StructureVariant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MolecularSequence.Variant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Money'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NameUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NameUseEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('NamingSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NamingSystem.UniqueId'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NamingSystemIdentifierType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NamingSystemIdentifierTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NamingSystemType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NamingSystemTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Narrative'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NarrativeStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NoteType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NoteTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('NutritionOrder'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.Administration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.EnteralFormula'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.Nutrient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.OralDiet'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.Supplement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.Texture'));
        $this->assertTrue(VersionTypeMap::isContainableResource('NutritionProduct'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionProduct.Ingredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionProduct.Instance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionProduct.Nutrient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionProduct.ProductCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionProductStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionProductStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Observation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Observation.Component'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Observation.ReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationDataType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationDataTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ObservationDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationDefinition.QualifiedInterval'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationDefinition.QuantitativeDetails'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationRangeCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationRangeCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('oid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('oid-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('OperationDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationDefinition.Binding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationDefinition.Overload'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationDefinition.Parameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationDefinition.ReferencedFrom'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationKindEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('OperationOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationOutcome.Issue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationParameterUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationParameterUseEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Organization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Organization.Contact'));
        $this->assertTrue(VersionTypeMap::isContainableResource('OrganizationAffiliation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('orientationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('orientationTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('PackagedProductDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PackagedProductDefinition.ContainedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PackagedProductDefinition.LegalStatusOfSupply'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PackagedProductDefinition.Package'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PackagedProductDefinition.Property'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PackagedProductDefinition.ShelfLifeStorage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ParameterDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Parameters'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Parameters.Parameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ParticipantRequired'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ParticipantRequiredEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ParticipationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ParticipationStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Patient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Patient.Communication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Patient.Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Patient.Link'));
        $this->assertTrue(VersionTypeMap::isContainableResource('PaymentNotice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('PaymentReconciliation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PaymentReconciliation.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PaymentReconciliation.ProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Period'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Person'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Person.Link'));
        $this->assertTrue(VersionTypeMap::isContainableResource('PlanDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PlanDefinition.Action'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PlanDefinition.Condition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PlanDefinition.DynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PlanDefinition.Goal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PlanDefinition.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PlanDefinition.RelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PlanDefinition.Target'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Population'));
        $this->assertFalse(VersionTypeMap::isContainableResource('positiveInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('positiveInt-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Practitioner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Practitioner.Qualification'));
        $this->assertTrue(VersionTypeMap::isContainableResource('PractitionerRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PractitionerRole.AvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PractitionerRole.NotAvailable'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Procedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Procedure.FocalDevice'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Procedure.Performer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProdCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProductShelfLife'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PropertyRepresentationEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PropertyType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PropertyTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Provenance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Provenance.Agent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Provenance.Entity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProvenanceEntityRoleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PublicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PublicationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('qualityType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('qualityTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Quantity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuantityComparator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuantityComparatorEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Questionnaire'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Questionnaire.AnswerOption'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Questionnaire.EnableWhen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Questionnaire.Initial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Questionnaire.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireItemOperator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireItemOperatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireItemType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireItemTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('QuestionnaireResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireResponse.Answer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireResponse.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireResponseStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Range'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Ratio'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RatioRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Reference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ReferenceHandlingPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ReferenceHandlingPolicyEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ReferenceVersionRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ReferenceVersionRulesEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('RegulatedAuthorization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RegulatedAuthorization.Case'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RelatedArtifact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RelatedArtifactType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RelatedArtifactTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('RelatedPerson'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RelatedPerson.Communication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RemittanceOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RemittanceOutcomeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ReportRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ReportRelationshipTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('repositoryType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('repositoryTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('RequestGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestGroup.Action'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestGroup.Condition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestGroup.RelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestPriorityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestResourceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ResearchDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ResearchElementDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResearchElementDefinition.Characteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResearchElementType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResearchElementTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ResearchStudy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResearchStudy.Arm'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResearchStudy.Objective'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResearchStudyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResearchStudyStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ResearchSubject'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResearchSubjectStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResearchSubjectStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Resource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceVersionPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceVersionPolicyEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResponseTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RestfulCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RestfulCapabilityModeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('RiskAssessment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RiskAssessment.Prediction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SampledData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SampledDataDataType-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Schedule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchComparator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchComparatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchEntryMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchEntryModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchModifierCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchModifierCodeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('SearchParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchParameter.Component'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchParamTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('sequenceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('sequenceTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ServiceRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Signature'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SlicingRulesEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Slot'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SlotStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SlotStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SortDirection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SortDirectionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SPDXLicense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SPDXLicenseEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Specimen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Specimen.Collection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Specimen.Container'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Specimen.Processing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SpecimenContainedPreference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SpecimenContainedPreferenceEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('SpecimenDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SpecimenDefinition.Additive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SpecimenDefinition.Container'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SpecimenDefinition.Handling'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SpecimenDefinition.TypeTested'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SpecimenStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SpecimenStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('status'));
        $this->assertFalse(VersionTypeMap::isContainableResource('statusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('strandType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('strandTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('string'));
        $this->assertFalse(VersionTypeMap::isContainableResource('string-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('StructureDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureDefinition.Context'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureDefinition.Differential'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureDefinition.Mapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureDefinition.Snapshot'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureDefinitionKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureDefinitionKindEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('StructureMap'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMap.Dependent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMap.Group'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMap.Input'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMap.Parameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMap.Rule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMap.Source'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMap.Structure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMap.Target'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapContextType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapContextTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapGroupTypeMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapGroupTypeModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapInputMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapInputModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapModelMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapModelModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapSourceListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapSourceListModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapTargetListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapTargetListModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapTransform'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapTransformEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Subscription'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Subscription.Channel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionChannelType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionChannelTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionNotificationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionNotificationTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('SubscriptionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionStatus.NotificationEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionStatusCodesEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('SubscriptionTopic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionTopic.CanFilterBy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionTopic.EventTrigger'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionTopic.NotificationShape'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionTopic.QueryCriteria'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionTopic.ResourceTrigger'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Substance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Substance.Ingredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Substance.Instance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('SubstanceDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubstanceDefinition.Code'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubstanceDefinition.Moiety'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubstanceDefinition.MolecularWeight'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubstanceDefinition.Name'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubstanceDefinition.Official'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubstanceDefinition.Property'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubstanceDefinition.Relationship'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubstanceDefinition.Representation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubstanceDefinition.SourceMaterial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubstanceDefinition.Structure'));
        $this->assertTrue(VersionTypeMap::isContainableResource('SupplyDelivery'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyDelivery.SuppliedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyDeliveryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyDeliveryStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('SupplyRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyRequest.Parameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyRequestStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SystemRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SystemRestfulInteractionEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Task'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Task.Input'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Task.Output'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Task.Restriction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TaskIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TaskIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TaskStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TaskStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('TerminologyCapabilities'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TerminologyCapabilities.Closure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TerminologyCapabilities.CodeSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TerminologyCapabilities.Expansion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TerminologyCapabilities.Filter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TerminologyCapabilities.Implementation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TerminologyCapabilities.Parameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TerminologyCapabilities.Software'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TerminologyCapabilities.Translation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TerminologyCapabilities.ValidateCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TerminologyCapabilities.Version'));
        $this->assertTrue(VersionTypeMap::isContainableResource('TestReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Action'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Action1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Action2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Assert'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Operation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Setup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Teardown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Test'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReportActionResult'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReportActionResultEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReportParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReportParticipantTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReportResult'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReportResultEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReportStatusEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('TestScript'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Action'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Action1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Action2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Assert'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Capability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Destination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Fixture'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Link'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Metadata'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Operation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Origin'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.RequestHeader'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Setup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Teardown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Test'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Variable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScriptRequestMethodCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScriptRequestMethodCodeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('time'));
        $this->assertFalse(VersionTypeMap::isContainableResource('time-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Timing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Timing.Repeat'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TriggerDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TriggerType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TriggerTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TypeDerivationRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TypeDerivationRuleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TypeRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TypeRestfulInteractionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UDIEntryType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UDIEntryTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UnitsOfTimeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('unsignedInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('unsignedInt-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('uri'));
        $this->assertFalse(VersionTypeMap::isContainableResource('uri-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('url'));
        $this->assertFalse(VersionTypeMap::isContainableResource('url-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UsageContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Use'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('uuid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('uuid-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ValueSet'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Compose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Concept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Contains'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Designation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Expansion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Filter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Include'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Parameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VariableType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VariableTypeEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('VerificationResult'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VerificationResult.Attestation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VerificationResult.PrimarySource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VerificationResult.Validator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VisionBase'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VisionBaseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VisionEyes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VisionEyesEnum'));
        $this->assertTrue(VersionTypeMap::isContainableResource('VisionPrescription'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VisionPrescription.LensSpecification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VisionPrescription.Prism'));
        $this->assertFalse(VersionTypeMap::isContainableResource('XPathUsageType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('XPathUsageTypeEnum'));
    }

    public function testIsContainableResourceWithInstance()
    {
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAccount;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAccountStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAccountStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionCardinalityBehavior;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionConditionKind;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionConditionKindEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionGroupingBehavior;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionParticipantType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionParticipantTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionPrecheckBehavior;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionRequiredBehavior;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRActionSelectionBehavior;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRActivityDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAddress;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAddressType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAddressTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAddressUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAddressUseEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAdministrableProductDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionProperty;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionRouteOfAdministration;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionTargetSpecies;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionWithdrawalPeriod;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAdministrativeGender;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAdministrativeGenderEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAdverseEvent;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAdverseEventActuality;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAdverseEventActualityEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity\FHIRAge;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAgeUnits;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAgeUnitsEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAggregationMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAggregationModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAllergyIntoleranceCategory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAllergyIntoleranceCriticality;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAllergyIntoleranceSeverity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAllergyIntoleranceType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAnnotation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAppointment;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAppointmentStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAppointmentStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAssertionDirectionType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAssertionOperatorType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAssertionResponseTypes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAttachment;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAuditEventAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAuditEventActionEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAuditEventAgentNetworkType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAuditEventAgentNetworkTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRAuditEventOutcome;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRAuditEventOutcomeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBase64Binary;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRBase64BinaryPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRBasic;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRBinary;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBindingStrength;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBindingStrengthEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductManipulation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProcessing;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductStorage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBiologicallyDerivedProductCategory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductCategoryEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBiologicallyDerivedProductStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBiologicallyDerivedProductStorageScale;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductStorageScaleEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRBodyStructure;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBoolean;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRBooleanPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRBundle;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBundleType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRBundleTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCanonical;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCanonicalPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCapabilityStatementKind;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCarePlanActivityKind;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCarePlanActivityKindEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCarePlanActivityStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCarePlanActivityStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCarePlanIntent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCarePlanIntentEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCareTeam;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCareTeamStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCareTeamStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCatalogEntry;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCatalogEntry\FHIRCatalogEntryRelatedEntry;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCatalogEntryRelationType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCatalogEntryRelationTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCharacteristicCombination;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCharacteristicCombinationEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRChargeItem;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRChargeItemDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPriceComponent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRChargeItemStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRChargeItemStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCitation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAbstract;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAffiliationInfo;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationCitedArtifact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributionInstance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributorship;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationDateOfPublication;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationEntry;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPart;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPeriodicRelease;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublicationForm;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublishedIn;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationTitle;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationVersion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWebLocation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWhoClassified;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClaim;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRClinicalImpressionStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRClinicalImpressionStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRClinicalUseDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionContraindication;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionIndication;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteractant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteraction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionOtherTherapy;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionUndesirableEffect;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionWarning;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRClinicalUseDefinitionType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRClinicalUseDefinitionTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeableConcept;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeableReference;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeSearchSupport;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCodeSearchSupportEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCodeSystem;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeSystemContentMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCodeSystemHierarchyMeaning;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCoding;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCommunication;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCompartmentType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCompartmentTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRComposition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCompositionAttestationMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCompositionAttestationModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCompositionStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCompositionStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConceptMapEquivalence;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConceptMapEquivalenceEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConceptMapGroupUnmappedMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCondition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConditionalDeleteStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConditionalReadStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConditionalReadStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConfidentiality;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConfidentialityEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRConsent;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConsentDataMeaning;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConsentDataMeaningEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConsentProvisionType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConsentProvisionTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConsentState;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConsentStateEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRConstraintSeverity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRConstraintSeverityEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContactDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContactPoint;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContactPointSystem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContactPointSystemEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContactPointUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContactPointUseEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRContract;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContractResourcePublicationStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContractResourcePublicationStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContractResourceStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContributor;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRContributorType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRContributorTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity\FHIRCount;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCoverage;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRCriteriaNotExistsBehavior;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRCriteriaNotExistsBehaviorEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDataRequirement;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementSort;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDate;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRDatePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDateTime;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRDateTimePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDaysOfWeek;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDaysOfWeekEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDecimal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRDecimalPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDefinitionResourceType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDefinitionResourceTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDetectedIssueSeverity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDevice;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceDeviceName;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceSpecialization;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCapability;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionSpecialization;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricCalibrationState;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricCalibrationType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricCategory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricColor;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricColorEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceMetricOperationalStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceNameType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceNameTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDeviceUseStatementStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDeviceUseStatementStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDiagnosticReportStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDiscriminatorType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity\FHIRDistance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDocumentMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDocumentModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDocumentReferenceStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRDocumentRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRDocumentRelationshipTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDosage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRDosage\FHIRDosageDoseAndRate;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity\FHIRDuration;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionBase;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionBinding;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionConstraint;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionExample;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionMapping;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionSlicing;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRElementDefinition\FHIRElementDefinitionType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREligibilityRequestPurpose;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREligibilityRequestPurposeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREligibilityResponsePurpose;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREligibilityResponsePurposeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREnableWhenBehavior;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREnableWhenBehaviorEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREncounter;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREncounterLocationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREncounterLocationStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREncounterStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREncounterStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREndpoint;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREndpointStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREndpointStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREpisodeOfCareStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventCapabilityMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventCapabilityModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREventDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventOrRequestResourceTypes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventOrRequestResourceTypesEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventResourceType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventResourceTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREventTiming;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREventTimingEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREvidence;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceAttributeEstimate;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceCertainty;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceModelCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceSampleSize;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceStatistic;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariable;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariableDefinition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREvidenceReport;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportRelatesTo;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSection;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSubject;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIREvidenceVariable;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCategory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableTimeFromStart;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIREvidenceVariableHandling;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIREvidenceVariableHandlingEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRExampleScenario;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExampleScenarioActorType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRExampleScenarioActorTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExplanationOfBenefitStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExpression;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExpressionLanguage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRExpressionLanguageEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExtension;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRExtensionContextType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRExtensionContextTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFamilyHistoryStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRAllTypes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRAllTypesEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRDefinedType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRDefinedTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRDeviceStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRPathTypes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRPathTypesEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRSubstanceStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFHIRVersion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFHIRVersionEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFilterOperator;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFilterOperatorEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFinancialResourceStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRFlag;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRFlagStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRFlagStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGoal;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGoalLifecycleStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGoalLifecycleStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGraphCompartmentRule;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGraphCompartmentUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGraphCompartmentUseEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGraphDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGroup;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGroupMeasure;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGroupMeasureEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGroupType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGroupTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGuidanceResponseStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGuidePageGeneration;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGuidePageGenerationEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRGuideParameterCode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRGuideParameterCodeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRHTTPVerb;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRHTTPVerbEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRHumanName;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRId;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRIdPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIdentifier;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIdentifierUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIdentifierUseEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIdentityAssuranceLevel;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRImagingStudyStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRImagingStudyStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImmunization;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationEducation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRImmunizationEvaluationStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRImmunizationEvaluationStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRImmunizationStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRIngredient;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientManufacturer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientReferenceStrength;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientStrength;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientSubstance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIngredientManufacturerRole;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIngredientManufacturerRoleEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInstant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRInstantPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRInsurancePlan;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInteger;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRIntegerPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInteractionTrigger;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRInteractionTriggerEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRInvoice;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoicePriceComponent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInvoicePriceComponentType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRInvoicePriceComponentTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRInvoiceStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRInvoiceStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIssueSeverity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIssueSeverityEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRIssueType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRIssueTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRKnowledgeResourceType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRKnowledgeResourceTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRLibrary;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRLinkage;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRLinkageType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRLinkageTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRLinkType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRLinkTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRList;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRListMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRListModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRListStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRListStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRLocation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationHoursOfOperation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRLocationMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRLocationModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRLocationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRLocationStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRManufacturedItemDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionProperty;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMarkdown;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRMarkdownPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMarketingStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMeasure;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMeasureReport;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMeasureReportStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMeasureReportStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMeasureReportType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMeasureReportTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedia;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedication;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationKnowledge;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeAdministrationGuidelines;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeKinetics;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristics;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSchedule;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMedicationRequestIntent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMedicationrequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMedicationrequestStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMedicationStatementStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMedicationStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMedicationStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMedicinalProductDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCountryLanguage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCrossReference;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionName;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionNamePart;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionOperation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMessageDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMessageheaderResponseRequest;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMessageheaderResponseRequestEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMessageSignificanceCategory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMeta;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRMolecularSequence;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceInner;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceOuter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceQuality;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceReferenceSeq;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRepository;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRoc;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStructureVariant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceVariant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRMoney;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNameUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNameUseEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNamingSystemIdentifierType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNamingSystemType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNamingSystemTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNarrative;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNarrativeStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNarrativeStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNoteType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNoteTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRNutritionProduct;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductIngredient;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductInstance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductNutrient;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductProductCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRNutritionProductStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRNutritionProductStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRObservation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRObservationDataType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRObservationDataTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRObservationDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedInterval;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQuantitativeDetails;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRObservationRangeCategory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRObservationRangeCategoryEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRObservationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRObservationStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIROid;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIROidPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIROperationKind;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIROperationKindEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIROperationParameterUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIROperationParameterUseEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROrganization;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIROrientationType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIROrientationTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPackagedProductDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionContainedItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionLegalStatusOfSupply;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionPackage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionProperty;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionShelfLifeStorage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRParameterDefinition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRParameters;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRParticipantRequired;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRParticipantRequiredEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRParticipationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRParticipationStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPatient;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPeriod;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPerson;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPlanDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPopulation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPositiveInt;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRPositiveIntPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRPractitionerRole;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRProcedure;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProdCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProductShelfLife;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPropertyRepresentation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRPropertyRepresentationEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPropertyType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRPropertyTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRProvenance;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRProvenanceEntityRole;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRPublicationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRPublicationStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQualityType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQualityTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuantityComparator;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQuantityComparatorEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuestionnaireItemOperator;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQuestionnaireItemOperatorEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuestionnaireItemType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRQuestionnaireResponseStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRange;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRatio;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRatioRange;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRReference;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRReferenceHandlingPolicy;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRReferenceVersionRules;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRegulatedAuthorization;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRegulatedAuthorization\FHIRRegulatedAuthorizationCase;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRelatedArtifact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRelatedArtifactType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRemittanceOutcome;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRReportRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRReportRelationshipTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRepositoryType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRepositoryTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRequestGroup;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRequestIntent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRequestIntentEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRequestPriority;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRequestPriorityEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRequestResourceType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRequestResourceTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRequestStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchElementDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRResearchElementDefinition\FHIRResearchElementDefinitionCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResearchElementType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResearchElementTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchStudy;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResearchStudyStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResearchStudyStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRResearchSubject;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResearchSubjectStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResearchSubjectStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResourceContainer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResourceType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResourceTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResourceVersionPolicy;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRResponseType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRResponseTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRRestfulCapabilityMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSampledData;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSampledDataDataType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRSampledDataDataTypePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSchedule;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSearchComparator;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSearchComparatorEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSearchEntryMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSearchEntryModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSearchModifierCode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSearchModifierCodeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSearchParamType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSearchParamTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSequenceType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSequenceTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRServiceRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSignature;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSlicingRules;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSlicingRulesEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSlot;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSlotStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSlotStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSortDirection;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSortDirectionEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSPDXLicense;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSPDXLicenseEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSpecimenContainedPreference;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSpecimenContainedPreferenceEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSpecimenDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSpecimenStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSpecimenStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStrandType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStrandTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRString;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRStringPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureDefinitionKind;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRStructureMap;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapContextType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapContextTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapGroupTypeMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapInputMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapInputModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapModelMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapModelModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapSourceListMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapTargetListMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRStructureMapTransform;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRStructureMapTransformEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubscription;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSubscriptionChannelType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSubscriptionChannelTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSubscriptionNotificationType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSubscriptionNotificationTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubscriptionStatus;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionStatus\FHIRSubscriptionStatusNotificationEvent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSubscriptionStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSubscriptionStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubscriptionTopic;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicCanFilterBy;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicEventTrigger;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicNotificationShape;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicQueryCriteria;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicResourceTrigger;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubstance;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSubstanceDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMoiety;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMolecularWeight;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionName;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionOfficial;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionProperty;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRelationship;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRepresentation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionSourceMaterial;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionStructure;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSupplyDeliveryStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSupplyRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRSystemRestfulInteraction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTask;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTaskIntent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTaskIntentEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTaskStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTaskStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTerminologyCapabilities;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTestReport;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestReportActionResult;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestReportActionResultEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestReportParticipantType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestReportResult;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestReportResultEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestReportStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestReportStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRTestScript;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTestScriptRequestMethodCode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTime;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRTimePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTiming;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRTiming\FHIRTimingRepeat;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTriggerDefinition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTriggerType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTriggerTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTypeDerivationRule;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRTypeRestfulInteraction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUDIEntryType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRUDIEntryTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUnitsOfTime;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRUnitsOfTimeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUnsignedInt;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRUnsignedIntPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUri;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRUriPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUrl;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRUrlPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUsageContext;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRUseEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRUuid;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRUuidPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRValueSet;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRVariableType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRVariableTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRVerificationResult;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRVisionBase;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRVisionBaseEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRVisionEyes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRVisionEyesEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRElement\FHIRXPathUsageType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R4B\Types\FHIRCodePrimitive\FHIRXPathUsageTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
    }
}
