<?php /** @noinspection PhpFullyQualifiedNameUsageInspection */

namespace Tests\DCarbone\PHPFHIRGenerated\Versions\R5;

/*!
 * This class was generated with the PHPFHIR library (https://github.com/dcarbone/php-fhir) using
 * class definitions from HL7 FHIR (https://www.hl7.org/fhir/)
 * 
 * Class creation date: February 22nd, 2025 18:56+0000
 * 
 * PHPFHIR Copyright:
 * 
 * Copyright 2016-2025 Daniel Carbone (daniel.p.carbone@gmail.com)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 *
 * FHIR Copyright Notice:
 *
 *  * #%L
 *  * org.hl7.fhir.r5
 *  * %%
 *  * Copyright (C) 2014 - 2019 Health Level 7
 *  * %%
 *  * Licensed under the Apache License, Version 2.0 (the "License");
 *  * you may not use this file except in compliance with the License.
 *  * You may obtain a copy of the License at
 *  *
 *  *      http://www.apache.org/licenses/LICENSE-2.0
 *  *
 *  * Unless required by applicable law or agreed to in writing, software
 *  * distributed under the License is distributed on an "AS IS" BASIS,
 *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  * See the License for the specific language governing permissions and
 *  * limitations under the License.
 *  * #L%
 *  
 * 
 * 
 *   Copyright (c) 2011+, HL7, Inc.
 *   All rights reserved.
 * 
 *   Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *    * Neither the name of HL7 nor the names of its contributors may be used to
 *      endorse or promote products derived from this software without specific
 *      prior written permission.
 * 
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *   IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 * 
 * 
 *   Generated on Sun, Mar 26, 2023 15:21+1100 for FHIR v5.0.0
 * 
 *   Note: the schemas & schematrons do not contain all of the rules about what makes resources
 *   valid. Implementers will still need to be familiar with the content of the specification and with
 *   any profiles that apply to the resources in order to make a conformant implementation.
 * 
 */
use DCarbone\PHPFHIRGenerated\Versions\R5\VersionTypeMap;
use PHPUnit\Framework\TestCase;

class VersionTypeMapTest extends TestCase
{
    public function testGetTypeClassnameWithInvalidString()
    {
        $this->assertNull(VersionTypeMap::getTypeClassname('\\stdClass'));
    }

    public function testGetTypeClassnameWithInvalidXML()
    {
        $sxe = new \SimpleXMLElement('<NotAResource></NotAResource>');
        $this->assertNull(VersionTypeMap::getTypeClassname($sxe));
    }

    public function testGetTypeClassnameWithJSONMissingResourceType()
    {
        $json = new \stdClass();
        $json->jimmy = 'Observation';
        $this->assertNull(VersionTypeMap::getTypeClassname($json));
    }

    public function testGetTypeClassnameWithJSONInvalidResourceType()
    {
        $json = new \stdClass();
        $json->resourceType = 'Steve';
        $this->assertNull(VersionTypeMap::getTypeClassname($json));
    }

    public function testGetTypeClassnameWithTypeName()
    {
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase', VersionTypeMap::getTypeClassname('Base'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase64BinaryPrimitive', VersionTypeMap::getTypeClassname('base64Binary-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement', VersionTypeMap::getTypeClassname('Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAccountStatus', VersionTypeMap::getTypeClassname('AccountStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionCardinalityBehavior', VersionTypeMap::getTypeClassname('ActionCardinalityBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionConditionKind', VersionTypeMap::getTypeClassname('ActionConditionKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionGroupingBehavior', VersionTypeMap::getTypeClassname('ActionGroupingBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionParticipantType', VersionTypeMap::getTypeClassname('ActionParticipantType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionPrecheckBehavior', VersionTypeMap::getTypeClassname('ActionPrecheckBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionRelationshipType', VersionTypeMap::getTypeClassname('ActionRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionRequiredBehavior', VersionTypeMap::getTypeClassname('ActionRequiredBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionSelectionBehavior', VersionTypeMap::getTypeClassname('ActionSelectionBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAddressType', VersionTypeMap::getTypeClassname('AddressType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAddressUse', VersionTypeMap::getTypeClassname('AddressUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdministrativeGender', VersionTypeMap::getTypeClassname('AdministrativeGender'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdverseEventActuality', VersionTypeMap::getTypeClassname('AdverseEventActuality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdverseEventStatus', VersionTypeMap::getTypeClassname('AdverseEventStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAgeUnits', VersionTypeMap::getTypeClassname('AgeUnits'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAggregationMode', VersionTypeMap::getTypeClassname('AggregationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCategory', VersionTypeMap::getTypeClassname('AllergyIntoleranceCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCriticality', VersionTypeMap::getTypeClassname('AllergyIntoleranceCriticality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceSeverity', VersionTypeMap::getTypeClassname('AllergyIntoleranceSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllResourceTypes', VersionTypeMap::getTypeClassname('AllResourceTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAppointmentResponseStatus', VersionTypeMap::getTypeClassname('AppointmentResponseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAppointmentStatus', VersionTypeMap::getTypeClassname('AppointmentStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentDisposition', VersionTypeMap::getTypeClassname('ArtifactAssessmentDisposition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentInformationType', VersionTypeMap::getTypeClassname('ArtifactAssessmentInformationType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentWorkflowStatus', VersionTypeMap::getTypeClassname('ArtifactAssessmentWorkflowStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionDirectionType', VersionTypeMap::getTypeClassname('AssertionDirectionType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionManualCompletionType', VersionTypeMap::getTypeClassname('AssertionManualCompletionType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionOperatorType', VersionTypeMap::getTypeClassname('AssertionOperatorType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionResponseTypes', VersionTypeMap::getTypeClassname('AssertionResponseTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAuditEventAction', VersionTypeMap::getTypeClassname('AuditEventAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAuditEventSeverity', VersionTypeMap::getTypeClassname('AuditEventSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement', VersionTypeMap::getTypeClassname('BackboneElement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountBalance', VersionTypeMap::getTypeClassname('Account.Balance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage', VersionTypeMap::getTypeClassname('Account.Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountDiagnosis', VersionTypeMap::getTypeClassname('Account.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor', VersionTypeMap::getTypeClassname('Account.Guarantor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountProcedure', VersionTypeMap::getTypeClassname('Account.Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountRelatedAccount', VersionTypeMap::getTypeClassname('Account.RelatedAccount'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue', VersionTypeMap::getTypeClassname('ActivityDefinition.DynamicValue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant', VersionTypeMap::getTypeClassname('ActivityDefinition.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionProperty', VersionTypeMap::getTypeClassname('AdministrableProductDefinition.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionRouteOfAdministration', VersionTypeMap::getTypeClassname('AdministrableProductDefinition.RouteOfAdministration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionTargetSpecies', VersionTypeMap::getTypeClassname('AdministrableProductDefinition.TargetSpecies'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionWithdrawalPeriod', VersionTypeMap::getTypeClassname('AdministrableProductDefinition.WithdrawalPeriod'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality', VersionTypeMap::getTypeClassname('AdverseEvent.Causality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventContributingFactor', VersionTypeMap::getTypeClassname('AdverseEvent.ContributingFactor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventMitigatingAction', VersionTypeMap::getTypeClassname('AdverseEvent.MitigatingAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventParticipant', VersionTypeMap::getTypeClassname('AdverseEvent.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventPreventiveAction', VersionTypeMap::getTypeClassname('AdverseEvent.PreventiveAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSupportingInfo', VersionTypeMap::getTypeClassname('AdverseEvent.SupportingInfo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity', VersionTypeMap::getTypeClassname('AdverseEvent.SuspectEntity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceParticipant', VersionTypeMap::getTypeClassname('AllergyIntolerance.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction', VersionTypeMap::getTypeClassname('AllergyIntolerance.Reaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentMonthlyTemplate', VersionTypeMap::getTypeClassname('Appointment.MonthlyTemplate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant', VersionTypeMap::getTypeClassname('Appointment.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentRecurrenceTemplate', VersionTypeMap::getTypeClassname('Appointment.RecurrenceTemplate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentWeeklyTemplate', VersionTypeMap::getTypeClassname('Appointment.WeeklyTemplate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentYearlyTemplate', VersionTypeMap::getTypeClassname('Appointment.YearlyTemplate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRArtifactAssessment\FHIRArtifactAssessmentContent', VersionTypeMap::getTypeClassname('ArtifactAssessment.Content'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent', VersionTypeMap::getTypeClassname('AuditEvent.Agent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail', VersionTypeMap::getTypeClassname('AuditEvent.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity', VersionTypeMap::getTypeClassname('AuditEvent.Entity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventOutcome', VersionTypeMap::getTypeClassname('AuditEvent.Outcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource', VersionTypeMap::getTypeClassname('AuditEvent.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProductDispense\FHIRBiologicallyDerivedProductDispensePerformer', VersionTypeMap::getTypeClassname('BiologicallyDerivedProductDispense.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection', VersionTypeMap::getTypeClassname('BiologicallyDerivedProduct.Collection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProperty', VersionTypeMap::getTypeClassname('BiologicallyDerivedProduct.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureBodyLandmarkOrientation', VersionTypeMap::getTypeClassname('BodyStructure.BodyLandmarkOrientation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureDistanceFromLandmark', VersionTypeMap::getTypeClassname('BodyStructure.DistanceFromLandmark'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureIncludedStructure', VersionTypeMap::getTypeClassname('BodyStructure.IncludedStructure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry', VersionTypeMap::getTypeClassname('Bundle.Entry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink', VersionTypeMap::getTypeClassname('Bundle.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest', VersionTypeMap::getTypeClassname('Bundle.Request'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse', VersionTypeMap::getTypeClassname('Bundle.Response'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch', VersionTypeMap::getTypeClassname('Bundle.Search'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument', VersionTypeMap::getTypeClassname('CapabilityStatement.Document'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint', VersionTypeMap::getTypeClassname('CapabilityStatement.Endpoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation', VersionTypeMap::getTypeClassname('CapabilityStatement.Implementation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction', VersionTypeMap::getTypeClassname('CapabilityStatement.Interaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1', VersionTypeMap::getTypeClassname('CapabilityStatement.Interaction1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging', VersionTypeMap::getTypeClassname('CapabilityStatement.Messaging'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation', VersionTypeMap::getTypeClassname('CapabilityStatement.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource', VersionTypeMap::getTypeClassname('CapabilityStatement.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest', VersionTypeMap::getTypeClassname('CapabilityStatement.Rest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam', VersionTypeMap::getTypeClassname('CapabilityStatement.SearchParam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity', VersionTypeMap::getTypeClassname('CapabilityStatement.Security'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware', VersionTypeMap::getTypeClassname('CapabilityStatement.Software'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage', VersionTypeMap::getTypeClassname('CapabilityStatement.SupportedMessage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity', VersionTypeMap::getTypeClassname('CarePlan.Activity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant', VersionTypeMap::getTypeClassname('CareTeam.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability', VersionTypeMap::getTypeClassname('ChargeItemDefinition.Applicability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup', VersionTypeMap::getTypeClassname('ChargeItemDefinition.PropertyGroup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer', VersionTypeMap::getTypeClassname('ChargeItem.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAbstract', VersionTypeMap::getTypeClassname('Citation.Abstract'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationCitedArtifact', VersionTypeMap::getTypeClassname('Citation.CitedArtifact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification', VersionTypeMap::getTypeClassname('Citation.Classification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification1', VersionTypeMap::getTypeClassname('Citation.Classification1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributionInstance', VersionTypeMap::getTypeClassname('Citation.ContributionInstance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributorship', VersionTypeMap::getTypeClassname('Citation.Contributorship'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationEntry', VersionTypeMap::getTypeClassname('Citation.Entry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPart', VersionTypeMap::getTypeClassname('Citation.Part'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublicationForm', VersionTypeMap::getTypeClassname('Citation.PublicationForm'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublishedIn', VersionTypeMap::getTypeClassname('Citation.PublishedIn'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo', VersionTypeMap::getTypeClassname('Citation.RelatesTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate', VersionTypeMap::getTypeClassname('Citation.StatusDate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate1', VersionTypeMap::getTypeClassname('Citation.StatusDate1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary', VersionTypeMap::getTypeClassname('Citation.Summary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary1', VersionTypeMap::getTypeClassname('Citation.Summary1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationTitle', VersionTypeMap::getTypeClassname('Citation.Title'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationVersion', VersionTypeMap::getTypeClassname('Citation.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWebLocation', VersionTypeMap::getTypeClassname('Citation.WebLocation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem', VersionTypeMap::getTypeClassname('ClaimResponse.AddItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication', VersionTypeMap::getTypeClassname('ClaimResponse.Adjudication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseBodySite', VersionTypeMap::getTypeClassname('ClaimResponse.BodySite'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail', VersionTypeMap::getTypeClassname('ClaimResponse.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1', VersionTypeMap::getTypeClassname('ClaimResponse.Detail1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError', VersionTypeMap::getTypeClassname('ClaimResponse.Error'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseEvent', VersionTypeMap::getTypeClassname('ClaimResponse.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance', VersionTypeMap::getTypeClassname('ClaimResponse.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem', VersionTypeMap::getTypeClassname('ClaimResponse.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment', VersionTypeMap::getTypeClassname('ClaimResponse.Payment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote', VersionTypeMap::getTypeClassname('ClaimResponse.ProcessNote'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseReviewOutcome', VersionTypeMap::getTypeClassname('ClaimResponse.ReviewOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail', VersionTypeMap::getTypeClassname('ClaimResponse.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1', VersionTypeMap::getTypeClassname('ClaimResponse.SubDetail1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal', VersionTypeMap::getTypeClassname('ClaimResponse.Total'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident', VersionTypeMap::getTypeClassname('Claim.Accident'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimBodySite', VersionTypeMap::getTypeClassname('Claim.BodySite'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam', VersionTypeMap::getTypeClassname('Claim.CareTeam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail', VersionTypeMap::getTypeClassname('Claim.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis', VersionTypeMap::getTypeClassname('Claim.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimEvent', VersionTypeMap::getTypeClassname('Claim.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance', VersionTypeMap::getTypeClassname('Claim.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem', VersionTypeMap::getTypeClassname('Claim.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee', VersionTypeMap::getTypeClassname('Claim.Payee'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure', VersionTypeMap::getTypeClassname('Claim.Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated', VersionTypeMap::getTypeClassname('Claim.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail', VersionTypeMap::getTypeClassname('Claim.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo', VersionTypeMap::getTypeClassname('Claim.SupportingInfo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding', VersionTypeMap::getTypeClassname('ClinicalImpression.Finding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionContraindication', VersionTypeMap::getTypeClassname('ClinicalUseDefinition.Contraindication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionIndication', VersionTypeMap::getTypeClassname('ClinicalUseDefinition.Indication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteractant', VersionTypeMap::getTypeClassname('ClinicalUseDefinition.Interactant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteraction', VersionTypeMap::getTypeClassname('ClinicalUseDefinition.Interaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionOtherTherapy', VersionTypeMap::getTypeClassname('ClinicalUseDefinition.OtherTherapy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionUndesirableEffect', VersionTypeMap::getTypeClassname('ClinicalUseDefinition.UndesirableEffect'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionWarning', VersionTypeMap::getTypeClassname('ClinicalUseDefinition.Warning'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept', VersionTypeMap::getTypeClassname('CodeSystem.Concept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation', VersionTypeMap::getTypeClassname('CodeSystem.Designation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter', VersionTypeMap::getTypeClassname('CodeSystem.Filter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty', VersionTypeMap::getTypeClassname('CodeSystem.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1', VersionTypeMap::getTypeClassname('CodeSystem.Property1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload', VersionTypeMap::getTypeClassname('CommunicationRequest.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload', VersionTypeMap::getTypeClassname('Communication.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource', VersionTypeMap::getTypeClassname('CompartmentDefinition.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester', VersionTypeMap::getTypeClassname('Composition.Attester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent', VersionTypeMap::getTypeClassname('Composition.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection', VersionTypeMap::getTypeClassname('Composition.Section'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapAdditionalAttribute', VersionTypeMap::getTypeClassname('ConceptMap.AdditionalAttribute'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn', VersionTypeMap::getTypeClassname('ConceptMap.DependsOn'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement', VersionTypeMap::getTypeClassname('ConceptMap.Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup', VersionTypeMap::getTypeClassname('ConceptMap.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty', VersionTypeMap::getTypeClassname('ConceptMap.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty1', VersionTypeMap::getTypeClassname('ConceptMap.Property1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget', VersionTypeMap::getTypeClassname('ConceptMap.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped', VersionTypeMap::getTypeClassname('ConceptMap.Unmapped'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionMedication', VersionTypeMap::getTypeClassname('ConditionDefinition.Medication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionObservation', VersionTypeMap::getTypeClassname('ConditionDefinition.Observation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPlan', VersionTypeMap::getTypeClassname('ConditionDefinition.Plan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPrecondition', VersionTypeMap::getTypeClassname('ConditionDefinition.Precondition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionQuestionnaire', VersionTypeMap::getTypeClassname('ConditionDefinition.Questionnaire'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionParticipant', VersionTypeMap::getTypeClassname('Condition.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage', VersionTypeMap::getTypeClassname('Condition.Stage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor', VersionTypeMap::getTypeClassname('Consent.Actor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData', VersionTypeMap::getTypeClassname('Consent.Data'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicyBasis', VersionTypeMap::getTypeClassname('Consent.PolicyBasis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision', VersionTypeMap::getTypeClassname('Consent.Provision'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification', VersionTypeMap::getTypeClassname('Consent.Verification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction', VersionTypeMap::getTypeClassname('Contract.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer', VersionTypeMap::getTypeClassname('Contract.Answer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset', VersionTypeMap::getTypeClassname('Contract.Asset'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition', VersionTypeMap::getTypeClassname('Contract.ContentDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext', VersionTypeMap::getTypeClassname('Contract.Context'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly', VersionTypeMap::getTypeClassname('Contract.Friendly'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal', VersionTypeMap::getTypeClassname('Contract.Legal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer', VersionTypeMap::getTypeClassname('Contract.Offer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty', VersionTypeMap::getTypeClassname('Contract.Party'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule', VersionTypeMap::getTypeClassname('Contract.Rule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel', VersionTypeMap::getTypeClassname('Contract.SecurityLabel'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner', VersionTypeMap::getTypeClassname('Contract.Signer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject', VersionTypeMap::getTypeClassname('Contract.Subject'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm', VersionTypeMap::getTypeClassname('Contract.Term'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem', VersionTypeMap::getTypeClassname('Contract.ValuedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis', VersionTypeMap::getTypeClassname('CoverageEligibilityRequest.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestEvent', VersionTypeMap::getTypeClassname('CoverageEligibilityRequest.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance', VersionTypeMap::getTypeClassname('CoverageEligibilityRequest.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem', VersionTypeMap::getTypeClassname('CoverageEligibilityRequest.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo', VersionTypeMap::getTypeClassname('CoverageEligibilityRequest.SupportingInfo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit', VersionTypeMap::getTypeClassname('CoverageEligibilityResponse.Benefit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError', VersionTypeMap::getTypeClassname('CoverageEligibilityResponse.Error'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseEvent', VersionTypeMap::getTypeClassname('CoverageEligibilityResponse.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance', VersionTypeMap::getTypeClassname('CoverageEligibilityResponse.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem', VersionTypeMap::getTypeClassname('CoverageEligibilityResponse.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass', VersionTypeMap::getTypeClassname('Coverage.Class'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary', VersionTypeMap::getTypeClassname('Coverage.CostToBeneficiary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException', VersionTypeMap::getTypeClassname('Coverage.Exception'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoveragePaymentBy', VersionTypeMap::getTypeClassname('Coverage.PaymentBy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence', VersionTypeMap::getTypeClassname('DetectedIssue.Evidence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation', VersionTypeMap::getTypeClassname('DetectedIssue.Mitigation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceAssociation\FHIRDeviceAssociationOperation', VersionTypeMap::getTypeClassname('DeviceAssociation.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionChargeItem', VersionTypeMap::getTypeClassname('DeviceDefinition.ChargeItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionClassification', VersionTypeMap::getTypeClassname('DeviceDefinition.Classification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionConformsTo', VersionTypeMap::getTypeClassname('DeviceDefinition.ConformsTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCorrectiveAction', VersionTypeMap::getTypeClassname('DeviceDefinition.CorrectiveAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName', VersionTypeMap::getTypeClassname('DeviceDefinition.DeviceName'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDistributor', VersionTypeMap::getTypeClassname('DeviceDefinition.Distributor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionGuideline', VersionTypeMap::getTypeClassname('DeviceDefinition.Guideline'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionHasPart', VersionTypeMap::getTypeClassname('DeviceDefinition.HasPart'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionLink', VersionTypeMap::getTypeClassname('DeviceDefinition.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMarketDistribution', VersionTypeMap::getTypeClassname('DeviceDefinition.MarketDistribution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial', VersionTypeMap::getTypeClassname('DeviceDefinition.Material'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionPackaging', VersionTypeMap::getTypeClassname('DeviceDefinition.Packaging'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty', VersionTypeMap::getTypeClassname('DeviceDefinition.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionRegulatoryIdentifier', VersionTypeMap::getTypeClassname('DeviceDefinition.RegulatoryIdentifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier', VersionTypeMap::getTypeClassname('DeviceDefinition.UdiDeviceIdentifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionVersion', VersionTypeMap::getTypeClassname('DeviceDefinition.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDispense\FHIRDeviceDispensePerformer', VersionTypeMap::getTypeClassname('DeviceDispense.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration', VersionTypeMap::getTypeClassname('DeviceMetric.Calibration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter', VersionTypeMap::getTypeClassname('DeviceRequest.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceUsage\FHIRDeviceUsageAdherence', VersionTypeMap::getTypeClassname('DeviceUsage.Adherence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceConformsTo', VersionTypeMap::getTypeClassname('Device.ConformsTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceName', VersionTypeMap::getTypeClassname('Device.Name'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty', VersionTypeMap::getTypeClassname('Device.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier', VersionTypeMap::getTypeClassname('Device.UdiCarrier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion', VersionTypeMap::getTypeClassname('Device.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia', VersionTypeMap::getTypeClassname('DiagnosticReport.Media'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportSupportingInfo', VersionTypeMap::getTypeClassname('DiagnosticReport.SupportingInfo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceAttester', VersionTypeMap::getTypeClassname('DocumentReference.Attester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent', VersionTypeMap::getTypeClassname('DocumentReference.Content'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceProfile', VersionTypeMap::getTypeClassname('DocumentReference.Profile'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo', VersionTypeMap::getTypeClassname('DocumentReference.RelatesTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounterHistory\FHIREncounterHistoryLocation', VersionTypeMap::getTypeClassname('EncounterHistory.Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAdmission', VersionTypeMap::getTypeClassname('Encounter.Admission'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis', VersionTypeMap::getTypeClassname('Encounter.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation', VersionTypeMap::getTypeClassname('Encounter.Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant', VersionTypeMap::getTypeClassname('Encounter.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterReason', VersionTypeMap::getTypeClassname('Encounter.Reason'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREndpoint\FHIREndpointPayload', VersionTypeMap::getTypeClassname('Endpoint.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis', VersionTypeMap::getTypeClassname('EpisodeOfCare.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareReason', VersionTypeMap::getTypeClassname('EpisodeOfCare.Reason'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory', VersionTypeMap::getTypeClassname('EpisodeOfCare.StatusHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportCharacteristic', VersionTypeMap::getTypeClassname('EvidenceReport.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportRelatesTo', VersionTypeMap::getTypeClassname('EvidenceReport.RelatesTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSection', VersionTypeMap::getTypeClassname('EvidenceReport.Section'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSubject', VersionTypeMap::getTypeClassname('EvidenceReport.Subject'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportTarget', VersionTypeMap::getTypeClassname('EvidenceReport.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCategory', VersionTypeMap::getTypeClassname('EvidenceVariable.Category'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic', VersionTypeMap::getTypeClassname('EvidenceVariable.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByCombination', VersionTypeMap::getTypeClassname('EvidenceVariable.DefinitionByCombination'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByTypeAndValue', VersionTypeMap::getTypeClassname('EvidenceVariable.DefinitionByTypeAndValue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableTimeFromEvent', VersionTypeMap::getTypeClassname('EvidenceVariable.TimeFromEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceAttributeEstimate', VersionTypeMap::getTypeClassname('Evidence.AttributeEstimate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceCertainty', VersionTypeMap::getTypeClassname('Evidence.Certainty'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceModelCharacteristic', VersionTypeMap::getTypeClassname('Evidence.ModelCharacteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceSampleSize', VersionTypeMap::getTypeClassname('Evidence.SampleSize'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceStatistic', VersionTypeMap::getTypeClassname('Evidence.Statistic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariable', VersionTypeMap::getTypeClassname('Evidence.Variable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariableDefinition', VersionTypeMap::getTypeClassname('Evidence.VariableDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor', VersionTypeMap::getTypeClassname('ExampleScenario.Actor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative', VersionTypeMap::getTypeClassname('ExampleScenario.Alternative'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance', VersionTypeMap::getTypeClassname('ExampleScenario.ContainedInstance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance', VersionTypeMap::getTypeClassname('ExampleScenario.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation', VersionTypeMap::getTypeClassname('ExampleScenario.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess', VersionTypeMap::getTypeClassname('ExampleScenario.Process'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep', VersionTypeMap::getTypeClassname('ExampleScenario.Step'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion', VersionTypeMap::getTypeClassname('ExampleScenario.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Accident'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.AddItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Adjudication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.BenefitBalance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.BodySite'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite1', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.BodySite1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.CareTeam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Detail1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitEvent', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Financial'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Payee'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Payment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.ProcessNote'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitReviewOutcome', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.ReviewOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.SubDetail1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.SupportingInfo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Total'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition', VersionTypeMap::getTypeClassname('FamilyMemberHistory.Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryParticipant', VersionTypeMap::getTypeClassname('FamilyMemberHistory.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryProcedure', VersionTypeMap::getTypeClassname('FamilyMemberHistory.Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyAnalysis', VersionTypeMap::getTypeClassname('GenomicStudy.Analysis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyDevice', VersionTypeMap::getTypeClassname('GenomicStudy.Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyInput', VersionTypeMap::getTypeClassname('GenomicStudy.Input'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyOutput', VersionTypeMap::getTypeClassname('GenomicStudy.Output'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyPerformer', VersionTypeMap::getTypeClassname('GenomicStudy.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget', VersionTypeMap::getTypeClassname('Goal.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment', VersionTypeMap::getTypeClassname('GraphDefinition.Compartment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink', VersionTypeMap::getTypeClassname('GraphDefinition.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionNode', VersionTypeMap::getTypeClassname('GraphDefinition.Node'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic', VersionTypeMap::getTypeClassname('Group.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember', VersionTypeMap::getTypeClassname('Group.Member'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility', VersionTypeMap::getTypeClassname('HealthcareService.Eligibility'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion2D', VersionTypeMap::getTypeClassname('ImagingSelection.ImageRegion2D'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion3D', VersionTypeMap::getTypeClassname('ImagingSelection.ImageRegion3D'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionInstance', VersionTypeMap::getTypeClassname('ImagingSelection.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionPerformer', VersionTypeMap::getTypeClassname('ImagingSelection.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance', VersionTypeMap::getTypeClassname('ImagingStudy.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer', VersionTypeMap::getTypeClassname('ImagingStudy.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries', VersionTypeMap::getTypeClassname('ImagingStudy.Series'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion', VersionTypeMap::getTypeClassname('ImmunizationRecommendation.DateCriterion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation', VersionTypeMap::getTypeClassname('ImmunizationRecommendation.Recommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer', VersionTypeMap::getTypeClassname('Immunization.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProgramEligibility', VersionTypeMap::getTypeClassname('Immunization.ProgramEligibility'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied', VersionTypeMap::getTypeClassname('Immunization.ProtocolApplied'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction', VersionTypeMap::getTypeClassname('Immunization.Reaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition', VersionTypeMap::getTypeClassname('ImplementationGuide.Definition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn', VersionTypeMap::getTypeClassname('ImplementationGuide.DependsOn'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal', VersionTypeMap::getTypeClassname('ImplementationGuide.Global'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping', VersionTypeMap::getTypeClassname('ImplementationGuide.Grouping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest', VersionTypeMap::getTypeClassname('ImplementationGuide.Manifest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage', VersionTypeMap::getTypeClassname('ImplementationGuide.Page'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1', VersionTypeMap::getTypeClassname('ImplementationGuide.Page1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter', VersionTypeMap::getTypeClassname('ImplementationGuide.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource', VersionTypeMap::getTypeClassname('ImplementationGuide.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1', VersionTypeMap::getTypeClassname('ImplementationGuide.Resource1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate', VersionTypeMap::getTypeClassname('ImplementationGuide.Template'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientManufacturer', VersionTypeMap::getTypeClassname('Ingredient.Manufacturer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientReferenceStrength', VersionTypeMap::getTypeClassname('Ingredient.ReferenceStrength'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientStrength', VersionTypeMap::getTypeClassname('Ingredient.Strength'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientSubstance', VersionTypeMap::getTypeClassname('Ingredient.Substance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit', VersionTypeMap::getTypeClassname('InsurancePlan.Benefit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1', VersionTypeMap::getTypeClassname('InsurancePlan.Benefit1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost', VersionTypeMap::getTypeClassname('InsurancePlan.Cost'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage', VersionTypeMap::getTypeClassname('InsurancePlan.Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost', VersionTypeMap::getTypeClassname('InsurancePlan.GeneralCost'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit', VersionTypeMap::getTypeClassname('InsurancePlan.Limit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan', VersionTypeMap::getTypeClassname('InsurancePlan.Plan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost', VersionTypeMap::getTypeClassname('InsurancePlan.SpecificCost'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemAssociation', VersionTypeMap::getTypeClassname('InventoryItem.Association'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemCharacteristic', VersionTypeMap::getTypeClassname('InventoryItem.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemDescription', VersionTypeMap::getTypeClassname('InventoryItem.Description'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemInstance', VersionTypeMap::getTypeClassname('InventoryItem.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemName', VersionTypeMap::getTypeClassname('InventoryItem.Name'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemResponsibleOrganization', VersionTypeMap::getTypeClassname('InventoryItem.ResponsibleOrganization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportInventoryListing', VersionTypeMap::getTypeClassname('InventoryReport.InventoryListing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportItem', VersionTypeMap::getTypeClassname('InventoryReport.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem', VersionTypeMap::getTypeClassname('Invoice.LineItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant', VersionTypeMap::getTypeClassname('Invoice.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem', VersionTypeMap::getTypeClassname('Linkage.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry', VersionTypeMap::getTypeClassname('List.Entry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition', VersionTypeMap::getTypeClassname('Location.Position'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionComponent', VersionTypeMap::getTypeClassname('ManufacturedItemDefinition.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionConstituent', VersionTypeMap::getTypeClassname('ManufacturedItemDefinition.Constituent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionProperty', VersionTypeMap::getTypeClassname('ManufacturedItemDefinition.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent', VersionTypeMap::getTypeClassname('MeasureReport.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup', VersionTypeMap::getTypeClassname('MeasureReport.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation', VersionTypeMap::getTypeClassname('MeasureReport.Population'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1', VersionTypeMap::getTypeClassname('MeasureReport.Population1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier', VersionTypeMap::getTypeClassname('MeasureReport.Stratifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum', VersionTypeMap::getTypeClassname('MeasureReport.Stratum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent', VersionTypeMap::getTypeClassname('Measure.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup', VersionTypeMap::getTypeClassname('Measure.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation', VersionTypeMap::getTypeClassname('Measure.Population'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier', VersionTypeMap::getTypeClassname('Measure.Stratifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData', VersionTypeMap::getTypeClassname('Measure.SupplementalData'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureTerm', VersionTypeMap::getTypeClassname('Measure.Term'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage', VersionTypeMap::getTypeClassname('MedicationAdministration.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer', VersionTypeMap::getTypeClassname('MedicationAdministration.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer', VersionTypeMap::getTypeClassname('MedicationDispense.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution', VersionTypeMap::getTypeClassname('MedicationDispense.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost', VersionTypeMap::getTypeClassname('MedicationKnowledge.Cost'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDefinitional', VersionTypeMap::getTypeClassname('MedicationKnowledge.Definitional'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage', VersionTypeMap::getTypeClassname('MedicationKnowledge.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosingGuideline', VersionTypeMap::getTypeClassname('MedicationKnowledge.DosingGuideline'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic', VersionTypeMap::getTypeClassname('MedicationKnowledge.DrugCharacteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeEnvironmentalSetting', VersionTypeMap::getTypeClassname('MedicationKnowledge.EnvironmentalSetting'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIndicationGuideline', VersionTypeMap::getTypeClassname('MedicationKnowledge.IndicationGuideline'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient', VersionTypeMap::getTypeClassname('MedicationKnowledge.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense', VersionTypeMap::getTypeClassname('MedicationKnowledge.MaxDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification', VersionTypeMap::getTypeClassname('MedicationKnowledge.MedicineClassification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram', VersionTypeMap::getTypeClassname('MedicationKnowledge.MonitoringProgram'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph', VersionTypeMap::getTypeClassname('MedicationKnowledge.Monograph'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging', VersionTypeMap::getTypeClassname('MedicationKnowledge.Packaging'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristic', VersionTypeMap::getTypeClassname('MedicationKnowledge.PatientCharacteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory', VersionTypeMap::getTypeClassname('MedicationKnowledge.Regulatory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge', VersionTypeMap::getTypeClassname('MedicationKnowledge.RelatedMedicationKnowledge'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeStorageGuideline', VersionTypeMap::getTypeClassname('MedicationKnowledge.StorageGuideline'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution', VersionTypeMap::getTypeClassname('MedicationKnowledge.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest', VersionTypeMap::getTypeClassname('MedicationRequest.DispenseRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill', VersionTypeMap::getTypeClassname('MedicationRequest.InitialFill'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution', VersionTypeMap::getTypeClassname('MedicationRequest.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementAdherence', VersionTypeMap::getTypeClassname('MedicationStatement.Adherence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch', VersionTypeMap::getTypeClassname('Medication.Batch'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient', VersionTypeMap::getTypeClassname('Medication.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCharacteristic', VersionTypeMap::getTypeClassname('MedicinalProductDefinition.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionContact', VersionTypeMap::getTypeClassname('MedicinalProductDefinition.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCrossReference', VersionTypeMap::getTypeClassname('MedicinalProductDefinition.CrossReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionName', VersionTypeMap::getTypeClassname('MedicinalProductDefinition.Name'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionOperation', VersionTypeMap::getTypeClassname('MedicinalProductDefinition.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionPart', VersionTypeMap::getTypeClassname('MedicinalProductDefinition.Part'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionUsage', VersionTypeMap::getTypeClassname('MedicinalProductDefinition.Usage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse', VersionTypeMap::getTypeClassname('MessageDefinition.AllowedResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus', VersionTypeMap::getTypeClassname('MessageDefinition.Focus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination', VersionTypeMap::getTypeClassname('MessageHeader.Destination'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse', VersionTypeMap::getTypeClassname('MessageHeader.Response'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource', VersionTypeMap::getTypeClassname('MessageHeader.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceEdit', VersionTypeMap::getTypeClassname('MolecularSequence.Edit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRelative', VersionTypeMap::getTypeClassname('MolecularSequence.Relative'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStartingSequence', VersionTypeMap::getTypeClassname('MolecularSequence.StartingSequence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId', VersionTypeMap::getTypeClassname('NamingSystem.UniqueId'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeConsumedItem', VersionTypeMap::getTypeClassname('NutritionIntake.ConsumedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeIngredientLabel', VersionTypeMap::getTypeClassname('NutritionIntake.IngredientLabel'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakePerformer', VersionTypeMap::getTypeClassname('NutritionIntake.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdditive', VersionTypeMap::getTypeClassname('NutritionOrder.Additive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration', VersionTypeMap::getTypeClassname('NutritionOrder.Administration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula', VersionTypeMap::getTypeClassname('NutritionOrder.EnteralFormula'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient', VersionTypeMap::getTypeClassname('NutritionOrder.Nutrient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet', VersionTypeMap::getTypeClassname('NutritionOrder.OralDiet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule', VersionTypeMap::getTypeClassname('NutritionOrder.Schedule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule1', VersionTypeMap::getTypeClassname('NutritionOrder.Schedule1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule2', VersionTypeMap::getTypeClassname('NutritionOrder.Schedule2'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement', VersionTypeMap::getTypeClassname('NutritionOrder.Supplement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture', VersionTypeMap::getTypeClassname('NutritionOrder.Texture'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductCharacteristic', VersionTypeMap::getTypeClassname('NutritionProduct.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductIngredient', VersionTypeMap::getTypeClassname('NutritionProduct.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductInstance', VersionTypeMap::getTypeClassname('NutritionProduct.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductNutrient', VersionTypeMap::getTypeClassname('NutritionProduct.Nutrient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionComponent', VersionTypeMap::getTypeClassname('ObservationDefinition.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedValue', VersionTypeMap::getTypeClassname('ObservationDefinition.QualifiedValue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent', VersionTypeMap::getTypeClassname('Observation.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange', VersionTypeMap::getTypeClassname('Observation.ReferenceRange'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationTriggeredBy', VersionTypeMap::getTypeClassname('Observation.TriggeredBy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding', VersionTypeMap::getTypeClassname('OperationDefinition.Binding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload', VersionTypeMap::getTypeClassname('OperationDefinition.Overload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter', VersionTypeMap::getTypeClassname('OperationDefinition.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom', VersionTypeMap::getTypeClassname('OperationDefinition.ReferencedFrom'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue', VersionTypeMap::getTypeClassname('OperationOutcome.Issue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationQualification', VersionTypeMap::getTypeClassname('Organization.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionContainedItem', VersionTypeMap::getTypeClassname('PackagedProductDefinition.ContainedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionLegalStatusOfSupply', VersionTypeMap::getTypeClassname('PackagedProductDefinition.LegalStatusOfSupply'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionPackaging', VersionTypeMap::getTypeClassname('PackagedProductDefinition.Packaging'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionProperty', VersionTypeMap::getTypeClassname('PackagedProductDefinition.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter', VersionTypeMap::getTypeClassname('Parameters.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication', VersionTypeMap::getTypeClassname('Patient.Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact', VersionTypeMap::getTypeClassname('Patient.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink', VersionTypeMap::getTypeClassname('Patient.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationAllocation', VersionTypeMap::getTypeClassname('PaymentReconciliation.Allocation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote', VersionTypeMap::getTypeClassname('PaymentReconciliation.ProcessNote'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionActivity', VersionTypeMap::getTypeClassname('Permission.Activity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionData', VersionTypeMap::getTypeClassname('Permission.Data'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionJustification', VersionTypeMap::getTypeClassname('Permission.Justification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionResource', VersionTypeMap::getTypeClassname('Permission.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionRule', VersionTypeMap::getTypeClassname('Permission.Rule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonCommunication', VersionTypeMap::getTypeClassname('Person.Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink', VersionTypeMap::getTypeClassname('Person.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction', VersionTypeMap::getTypeClassname('PlanDefinition.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionActor', VersionTypeMap::getTypeClassname('PlanDefinition.Actor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition', VersionTypeMap::getTypeClassname('PlanDefinition.Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue', VersionTypeMap::getTypeClassname('PlanDefinition.DynamicValue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal', VersionTypeMap::getTypeClassname('PlanDefinition.Goal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionInput', VersionTypeMap::getTypeClassname('PlanDefinition.Input'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOption', VersionTypeMap::getTypeClassname('PlanDefinition.Option'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOutput', VersionTypeMap::getTypeClassname('PlanDefinition.Output'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant', VersionTypeMap::getTypeClassname('PlanDefinition.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction', VersionTypeMap::getTypeClassname('PlanDefinition.RelatedAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget', VersionTypeMap::getTypeClassname('PlanDefinition.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerCommunication', VersionTypeMap::getTypeClassname('Practitioner.Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification', VersionTypeMap::getTypeClassname('Practitioner.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice', VersionTypeMap::getTypeClassname('Procedure.FocalDevice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer', VersionTypeMap::getTypeClassname('Procedure.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent', VersionTypeMap::getTypeClassname('Provenance.Agent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity', VersionTypeMap::getTypeClassname('Provenance.Entity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer', VersionTypeMap::getTypeClassname('QuestionnaireResponse.Answer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem', VersionTypeMap::getTypeClassname('QuestionnaireResponse.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption', VersionTypeMap::getTypeClassname('Questionnaire.AnswerOption'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen', VersionTypeMap::getTypeClassname('Questionnaire.EnableWhen'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial', VersionTypeMap::getTypeClassname('Questionnaire.Initial'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem', VersionTypeMap::getTypeClassname('Questionnaire.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRegulatedAuthorization\FHIRRegulatedAuthorizationCase', VersionTypeMap::getTypeClassname('RegulatedAuthorization.Case'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication', VersionTypeMap::getTypeClassname('RelatedPerson.Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationAction', VersionTypeMap::getTypeClassname('RequestOrchestration.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationCondition', VersionTypeMap::getTypeClassname('RequestOrchestration.Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationDynamicValue', VersionTypeMap::getTypeClassname('RequestOrchestration.DynamicValue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationInput', VersionTypeMap::getTypeClassname('RequestOrchestration.Input'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationOutput', VersionTypeMap::getTypeClassname('RequestOrchestration.Output'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationParticipant', VersionTypeMap::getTypeClassname('RequestOrchestration.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationRelatedAction', VersionTypeMap::getTypeClassname('RequestOrchestration.RelatedAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequirements\FHIRRequirementsStatement', VersionTypeMap::getTypeClassname('Requirements.Statement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyAssociatedParty', VersionTypeMap::getTypeClassname('ResearchStudy.AssociatedParty'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyComparisonGroup', VersionTypeMap::getTypeClassname('ResearchStudy.ComparisonGroup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyLabel', VersionTypeMap::getTypeClassname('ResearchStudy.Label'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective', VersionTypeMap::getTypeClassname('ResearchStudy.Objective'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyOutcomeMeasure', VersionTypeMap::getTypeClassname('ResearchStudy.OutcomeMeasure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyProgressStatus', VersionTypeMap::getTypeClassname('ResearchStudy.ProgressStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyRecruitment', VersionTypeMap::getTypeClassname('ResearchStudy.Recruitment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchSubject\FHIRResearchSubjectProgress', VersionTypeMap::getTypeClassname('ResearchSubject.Progress'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction', VersionTypeMap::getTypeClassname('RiskAssessment.Prediction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent', VersionTypeMap::getTypeClassname('SearchParameter.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestOrderDetail', VersionTypeMap::getTypeClassname('ServiceRequest.OrderDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestParameter', VersionTypeMap::getTypeClassname('ServiceRequest.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestPatientInstruction', VersionTypeMap::getTypeClassname('ServiceRequest.PatientInstruction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive', VersionTypeMap::getTypeClassname('SpecimenDefinition.Additive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer', VersionTypeMap::getTypeClassname('SpecimenDefinition.Container'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling', VersionTypeMap::getTypeClassname('SpecimenDefinition.Handling'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested', VersionTypeMap::getTypeClassname('SpecimenDefinition.TypeTested'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection', VersionTypeMap::getTypeClassname('Specimen.Collection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer', VersionTypeMap::getTypeClassname('Specimen.Container'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenFeature', VersionTypeMap::getTypeClassname('Specimen.Feature'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing', VersionTypeMap::getTypeClassname('Specimen.Processing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext', VersionTypeMap::getTypeClassname('StructureDefinition.Context'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential', VersionTypeMap::getTypeClassname('StructureDefinition.Differential'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping', VersionTypeMap::getTypeClassname('StructureDefinition.Mapping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot', VersionTypeMap::getTypeClassname('StructureDefinition.Snapshot'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapConst', VersionTypeMap::getTypeClassname('StructureMap.Const'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent', VersionTypeMap::getTypeClassname('StructureMap.Dependent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup', VersionTypeMap::getTypeClassname('StructureMap.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput', VersionTypeMap::getTypeClassname('StructureMap.Input'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter', VersionTypeMap::getTypeClassname('StructureMap.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule', VersionTypeMap::getTypeClassname('StructureMap.Rule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource', VersionTypeMap::getTypeClassname('StructureMap.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure', VersionTypeMap::getTypeClassname('StructureMap.Structure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget', VersionTypeMap::getTypeClassname('StructureMap.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionStatus\FHIRSubscriptionStatusNotificationEvent', VersionTypeMap::getTypeClassname('SubscriptionStatus.NotificationEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicCanFilterBy', VersionTypeMap::getTypeClassname('SubscriptionTopic.CanFilterBy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicEventTrigger', VersionTypeMap::getTypeClassname('SubscriptionTopic.EventTrigger'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicNotificationShape', VersionTypeMap::getTypeClassname('SubscriptionTopic.NotificationShape'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicQueryCriteria', VersionTypeMap::getTypeClassname('SubscriptionTopic.QueryCriteria'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicResourceTrigger', VersionTypeMap::getTypeClassname('SubscriptionTopic.ResourceTrigger'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionFilterBy', VersionTypeMap::getTypeClassname('Subscription.FilterBy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionParameter', VersionTypeMap::getTypeClassname('Subscription.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCharacterization', VersionTypeMap::getTypeClassname('SubstanceDefinition.Characterization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCode', VersionTypeMap::getTypeClassname('SubstanceDefinition.Code'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMoiety', VersionTypeMap::getTypeClassname('SubstanceDefinition.Moiety'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMolecularWeight', VersionTypeMap::getTypeClassname('SubstanceDefinition.MolecularWeight'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionName', VersionTypeMap::getTypeClassname('SubstanceDefinition.Name'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionOfficial', VersionTypeMap::getTypeClassname('SubstanceDefinition.Official'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionProperty', VersionTypeMap::getTypeClassname('SubstanceDefinition.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRelationship', VersionTypeMap::getTypeClassname('SubstanceDefinition.Relationship'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRepresentation', VersionTypeMap::getTypeClassname('SubstanceDefinition.Representation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionSourceMaterial', VersionTypeMap::getTypeClassname('SubstanceDefinition.SourceMaterial'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionStructure', VersionTypeMap::getTypeClassname('SubstanceDefinition.Structure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidLinkage', VersionTypeMap::getTypeClassname('SubstanceNucleicAcid.Linkage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSubunit', VersionTypeMap::getTypeClassname('SubstanceNucleicAcid.Subunit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSugar', VersionTypeMap::getTypeClassname('SubstanceNucleicAcid.Sugar'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerDegreeOfPolymerisation', VersionTypeMap::getTypeClassname('SubstancePolymer.DegreeOfPolymerisation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerMonomerSet', VersionTypeMap::getTypeClassname('SubstancePolymer.MonomerSet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeat', VersionTypeMap::getTypeClassname('SubstancePolymer.Repeat'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeatUnit', VersionTypeMap::getTypeClassname('SubstancePolymer.RepeatUnit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStartingMaterial', VersionTypeMap::getTypeClassname('SubstancePolymer.StartingMaterial'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStructuralRepresentation', VersionTypeMap::getTypeClassname('SubstancePolymer.StructuralRepresentation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceProtein\FHIRSubstanceProteinSubunit', VersionTypeMap::getTypeClassname('SubstanceProtein.Subunit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGene', VersionTypeMap::getTypeClassname('SubstanceReferenceInformation.Gene'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGeneElement', VersionTypeMap::getTypeClassname('SubstanceReferenceInformation.GeneElement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationTarget', VersionTypeMap::getTypeClassname('SubstanceReferenceInformation.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialAuthor', VersionTypeMap::getTypeClassname('SubstanceSourceMaterial.Author'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialFractionDescription', VersionTypeMap::getTypeClassname('SubstanceSourceMaterial.FractionDescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialHybrid', VersionTypeMap::getTypeClassname('SubstanceSourceMaterial.Hybrid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganism', VersionTypeMap::getTypeClassname('SubstanceSourceMaterial.Organism'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganismGeneral', VersionTypeMap::getTypeClassname('SubstanceSourceMaterial.OrganismGeneral'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialPartDescription', VersionTypeMap::getTypeClassname('SubstanceSourceMaterial.PartDescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient', VersionTypeMap::getTypeClassname('Substance.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem', VersionTypeMap::getTypeClassname('SupplyDelivery.SuppliedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter', VersionTypeMap::getTypeClassname('SupplyRequest.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput', VersionTypeMap::getTypeClassname('Task.Input'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput', VersionTypeMap::getTypeClassname('Task.Output'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskPerformer', VersionTypeMap::getTypeClassname('Task.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction', VersionTypeMap::getTypeClassname('Task.Restriction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure', VersionTypeMap::getTypeClassname('TerminologyCapabilities.Closure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem', VersionTypeMap::getTypeClassname('TerminologyCapabilities.CodeSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion', VersionTypeMap::getTypeClassname('TerminologyCapabilities.Expansion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter', VersionTypeMap::getTypeClassname('TerminologyCapabilities.Filter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation', VersionTypeMap::getTypeClassname('TerminologyCapabilities.Implementation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter', VersionTypeMap::getTypeClassname('TerminologyCapabilities.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware', VersionTypeMap::getTypeClassname('TerminologyCapabilities.Software'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation', VersionTypeMap::getTypeClassname('TerminologyCapabilities.Translation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode', VersionTypeMap::getTypeClassname('TerminologyCapabilities.ValidateCode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion', VersionTypeMap::getTypeClassname('TerminologyCapabilities.Version'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanAssertion', VersionTypeMap::getTypeClassname('TestPlan.Assertion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency', VersionTypeMap::getTypeClassname('TestPlan.Dependency'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency1', VersionTypeMap::getTypeClassname('TestPlan.Dependency1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanScript', VersionTypeMap::getTypeClassname('TestPlan.Script'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestCase', VersionTypeMap::getTypeClassname('TestPlan.TestCase'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestData', VersionTypeMap::getTypeClassname('TestPlan.TestData'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestRun', VersionTypeMap::getTypeClassname('TestPlan.TestRun'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction', VersionTypeMap::getTypeClassname('TestReport.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1', VersionTypeMap::getTypeClassname('TestReport.Action1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2', VersionTypeMap::getTypeClassname('TestReport.Action2'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert', VersionTypeMap::getTypeClassname('TestReport.Assert'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation', VersionTypeMap::getTypeClassname('TestReport.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant', VersionTypeMap::getTypeClassname('TestReport.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportRequirement', VersionTypeMap::getTypeClassname('TestReport.Requirement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup', VersionTypeMap::getTypeClassname('TestReport.Setup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown', VersionTypeMap::getTypeClassname('TestReport.Teardown'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest', VersionTypeMap::getTypeClassname('TestReport.Test'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction', VersionTypeMap::getTypeClassname('TestScript.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1', VersionTypeMap::getTypeClassname('TestScript.Action1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2', VersionTypeMap::getTypeClassname('TestScript.Action2'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert', VersionTypeMap::getTypeClassname('TestScript.Assert'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability', VersionTypeMap::getTypeClassname('TestScript.Capability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination', VersionTypeMap::getTypeClassname('TestScript.Destination'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture', VersionTypeMap::getTypeClassname('TestScript.Fixture'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink', VersionTypeMap::getTypeClassname('TestScript.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata', VersionTypeMap::getTypeClassname('TestScript.Metadata'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation', VersionTypeMap::getTypeClassname('TestScript.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin', VersionTypeMap::getTypeClassname('TestScript.Origin'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader', VersionTypeMap::getTypeClassname('TestScript.RequestHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequirement', VersionTypeMap::getTypeClassname('TestScript.Requirement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptScope', VersionTypeMap::getTypeClassname('TestScript.Scope'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup', VersionTypeMap::getTypeClassname('TestScript.Setup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown', VersionTypeMap::getTypeClassname('TestScript.Teardown'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest', VersionTypeMap::getTypeClassname('TestScript.Test'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable', VersionTypeMap::getTypeClassname('TestScript.Variable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportInput', VersionTypeMap::getTypeClassname('Transport.Input'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportOutput', VersionTypeMap::getTypeClassname('Transport.Output'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportRestriction', VersionTypeMap::getTypeClassname('Transport.Restriction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose', VersionTypeMap::getTypeClassname('ValueSet.Compose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept', VersionTypeMap::getTypeClassname('ValueSet.Concept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains', VersionTypeMap::getTypeClassname('ValueSet.Contains'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation', VersionTypeMap::getTypeClassname('ValueSet.Designation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion', VersionTypeMap::getTypeClassname('ValueSet.Expansion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter', VersionTypeMap::getTypeClassname('ValueSet.Filter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude', VersionTypeMap::getTypeClassname('ValueSet.Include'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter', VersionTypeMap::getTypeClassname('ValueSet.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty', VersionTypeMap::getTypeClassname('ValueSet.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty1', VersionTypeMap::getTypeClassname('ValueSet.Property1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetScope', VersionTypeMap::getTypeClassname('ValueSet.Scope'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetSubProperty', VersionTypeMap::getTypeClassname('ValueSet.SubProperty'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation', VersionTypeMap::getTypeClassname('VerificationResult.Attestation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource', VersionTypeMap::getTypeClassname('VerificationResult.PrimarySource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator', VersionTypeMap::getTypeClassname('VerificationResult.Validator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification', VersionTypeMap::getTypeClassname('VisionPrescription.LensSpecification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism', VersionTypeMap::getTypeClassname('VisionPrescription.Prism'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBase64Binary', VersionTypeMap::getTypeClassname('base64Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBindingStrength', VersionTypeMap::getTypeClassname('BindingStrength'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBiologicallyDerivedProductDispenseCodes', VersionTypeMap::getTypeClassname('BiologicallyDerivedProductDispenseCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBoolean', VersionTypeMap::getTypeClassname('boolean'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBundleType', VersionTypeMap::getTypeClassname('BundleType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCanonical', VersionTypeMap::getTypeClassname('canonical'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCapabilityStatementKind', VersionTypeMap::getTypeClassname('CapabilityStatementKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCarePlanIntent', VersionTypeMap::getTypeClassname('CarePlanIntent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCareTeamStatus', VersionTypeMap::getTypeClassname('CareTeamStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCharacteristicCombination', VersionTypeMap::getTypeClassname('CharacteristicCombination'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRChargeItemStatus', VersionTypeMap::getTypeClassname('ChargeItemStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRClaimProcessingCodes', VersionTypeMap::getTypeClassname('ClaimProcessingCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRClinicalUseDefinitionType', VersionTypeMap::getTypeClassname('ClinicalUseDefinitionType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCode', VersionTypeMap::getTypeClassname('code'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSearchSupport', VersionTypeMap::getTypeClassname('CodeSearchSupport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSystemContentMode', VersionTypeMap::getTypeClassname('CodeSystemContentMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSystemHierarchyMeaning', VersionTypeMap::getTypeClassname('CodeSystemHierarchyMeaning'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRColorCodesOrRGB', VersionTypeMap::getTypeClassname('ColorCodesOrRGB'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCommonLanguages', VersionTypeMap::getTypeClassname('CommonLanguages'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCompartmentType', VersionTypeMap::getTypeClassname('CompartmentType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCompositionStatus', VersionTypeMap::getTypeClassname('CompositionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapAttributeType', VersionTypeMap::getTypeClassname('ConceptMapAttributeType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapGroupUnmappedMode', VersionTypeMap::getTypeClassname('ConceptMapGroupUnmappedMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapPropertyType', VersionTypeMap::getTypeClassname('ConceptMapPropertyType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapRelationship', VersionTypeMap::getTypeClassname('ConceptMapRelationship'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConcreteFHIRTypes', VersionTypeMap::getTypeClassname('ConcreteFHIRTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionalDeleteStatus', VersionTypeMap::getTypeClassname('ConditionalDeleteStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionalReadStatus', VersionTypeMap::getTypeClassname('ConditionalReadStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionPreconditionType', VersionTypeMap::getTypeClassname('ConditionPreconditionType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionQuestionnairePurpose', VersionTypeMap::getTypeClassname('ConditionQuestionnairePurpose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConformanceExpectation', VersionTypeMap::getTypeClassname('ConformanceExpectation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentDataMeaning', VersionTypeMap::getTypeClassname('ConsentDataMeaning'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentProvisionType', VersionTypeMap::getTypeClassname('ConsentProvisionType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentState', VersionTypeMap::getTypeClassname('ConsentState'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConstraintSeverity', VersionTypeMap::getTypeClassname('ConstraintSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContactPointSystem', VersionTypeMap::getTypeClassname('ContactPointSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContactPointUse', VersionTypeMap::getTypeClassname('ContactPointUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContractResourcePublicationStatusCodes', VersionTypeMap::getTypeClassname('ContractResourcePublicationStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContractResourceStatusCodes', VersionTypeMap::getTypeClassname('ContractResourceStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContributorType', VersionTypeMap::getTypeClassname('ContributorType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCriteriaNotExistsBehavior', VersionTypeMap::getTypeClassname('CriteriaNotExistsBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType', VersionTypeMap::getTypeClassname('DataType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAddress', VersionTypeMap::getTypeClassname('Address'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAnnotation', VersionTypeMap::getTypeClassname('Annotation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAttachment', VersionTypeMap::getTypeClassname('Attachment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability', VersionTypeMap::getTypeClassname('Availability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityAvailableTime', VersionTypeMap::getTypeClassname('Availability.AvailableTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityNotAvailableTime', VersionTypeMap::getTypeClassname('Availability.NotAvailableTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType', VersionTypeMap::getTypeClassname('BackboneType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage', VersionTypeMap::getTypeClassname('Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage\FHIRDosageDoseAndRate', VersionTypeMap::getTypeClassname('Dosage.DoseAndRate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition', VersionTypeMap::getTypeClassname('ElementDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionAdditional', VersionTypeMap::getTypeClassname('ElementDefinition.Additional'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBase', VersionTypeMap::getTypeClassname('ElementDefinition.Base'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBinding', VersionTypeMap::getTypeClassname('ElementDefinition.Binding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionConstraint', VersionTypeMap::getTypeClassname('ElementDefinition.Constraint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionDiscriminator', VersionTypeMap::getTypeClassname('ElementDefinition.Discriminator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionExample', VersionTypeMap::getTypeClassname('ElementDefinition.Example'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionMapping', VersionTypeMap::getTypeClassname('ElementDefinition.Mapping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionSlicing', VersionTypeMap::getTypeClassname('ElementDefinition.Slicing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionType', VersionTypeMap::getTypeClassname('ElementDefinition.Type'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRMarketingStatus', VersionTypeMap::getTypeClassname('MarketingStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRProductShelfLife', VersionTypeMap::getTypeClassname('ProductShelfLife'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming', VersionTypeMap::getTypeClassname('Timing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming\FHIRTimingRepeat', VersionTypeMap::getTypeClassname('Timing.Repeat'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableConcept', VersionTypeMap::getTypeClassname('CodeableConcept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableReference', VersionTypeMap::getTypeClassname('CodeableReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCoding', VersionTypeMap::getTypeClassname('Coding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContactDetail', VersionTypeMap::getTypeClassname('ContactDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContactPoint', VersionTypeMap::getTypeClassname('ContactPoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContributor', VersionTypeMap::getTypeClassname('Contributor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement', VersionTypeMap::getTypeClassname('DataRequirement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementCodeFilter', VersionTypeMap::getTypeClassname('DataRequirement.CodeFilter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementDateFilter', VersionTypeMap::getTypeClassname('DataRequirement.DateFilter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementSort', VersionTypeMap::getTypeClassname('DataRequirement.Sort'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementValueFilter', VersionTypeMap::getTypeClassname('DataRequirement.ValueFilter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExpression', VersionTypeMap::getTypeClassname('Expression'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExtendedContactDetail', VersionTypeMap::getTypeClassname('ExtendedContactDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExtension', VersionTypeMap::getTypeClassname('Extension'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRHumanName', VersionTypeMap::getTypeClassname('HumanName'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRIdentifier', VersionTypeMap::getTypeClassname('Identifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMeta', VersionTypeMap::getTypeClassname('Meta'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMonetaryComponent', VersionTypeMap::getTypeClassname('MonetaryComponent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMoney', VersionTypeMap::getTypeClassname('Money'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRNarrative', VersionTypeMap::getTypeClassname('Narrative'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRParameterDefinition', VersionTypeMap::getTypeClassname('ParameterDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRPeriod', VersionTypeMap::getTypeClassname('Period'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRPrimitiveType', VersionTypeMap::getTypeClassname('PrimitiveType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity', VersionTypeMap::getTypeClassname('Quantity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRAge', VersionTypeMap::getTypeClassname('Age'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRCount', VersionTypeMap::getTypeClassname('Count'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDistance', VersionTypeMap::getTypeClassname('Distance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDuration', VersionTypeMap::getTypeClassname('Duration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRange', VersionTypeMap::getTypeClassname('Range'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRatio', VersionTypeMap::getTypeClassname('Ratio'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRatioRange', VersionTypeMap::getTypeClassname('RatioRange'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRReference', VersionTypeMap::getTypeClassname('Reference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRelatedArtifact', VersionTypeMap::getTypeClassname('RelatedArtifact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRSampledData', VersionTypeMap::getTypeClassname('SampledData'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRSignature', VersionTypeMap::getTypeClassname('Signature'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRTriggerDefinition', VersionTypeMap::getTypeClassname('TriggerDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRUsageContext', VersionTypeMap::getTypeClassname('UsageContext'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRVirtualServiceDetail', VersionTypeMap::getTypeClassname('VirtualServiceDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDate', VersionTypeMap::getTypeClassname('date'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDateTime', VersionTypeMap::getTypeClassname('dateTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDecimal', VersionTypeMap::getTypeClassname('decimal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDefinitionResourceTypes', VersionTypeMap::getTypeClassname('DefinitionResourceTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDetectedIssueSeverity', VersionTypeMap::getTypeClassname('DetectedIssueSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDetectedIssueStatus', VersionTypeMap::getTypeClassname('DetectedIssueStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceCorrectiveActionScope', VersionTypeMap::getTypeClassname('DeviceCorrectiveActionScope'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceDefinitionRegulatoryIdentifierType', VersionTypeMap::getTypeClassname('DeviceDefinitionRegulatoryIdentifierType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceDispenseStatusCodes', VersionTypeMap::getTypeClassname('DeviceDispenseStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationState', VersionTypeMap::getTypeClassname('DeviceMetricCalibrationState'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationType', VersionTypeMap::getTypeClassname('DeviceMetricCalibrationType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCategory', VersionTypeMap::getTypeClassname('DeviceMetricCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricOperationalStatus', VersionTypeMap::getTypeClassname('DeviceMetricOperationalStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceNameType', VersionTypeMap::getTypeClassname('DeviceNameType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceProductionIdentifierInUDI', VersionTypeMap::getTypeClassname('DeviceProductionIdentifierInUDI'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceUsageStatus', VersionTypeMap::getTypeClassname('DeviceUsageStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDiagnosticReportStatus', VersionTypeMap::getTypeClassname('DiagnosticReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDiscriminatorType', VersionTypeMap::getTypeClassname('DiscriminatorType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDocumentMode', VersionTypeMap::getTypeClassname('DocumentMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDocumentReferenceStatus', VersionTypeMap::getTypeClassname('DocumentReferenceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityOutcome', VersionTypeMap::getTypeClassname('EligibilityOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityRequestPurpose', VersionTypeMap::getTypeClassname('EligibilityRequestPurpose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityResponsePurpose', VersionTypeMap::getTypeClassname('EligibilityResponsePurpose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREnableWhenBehavior', VersionTypeMap::getTypeClassname('EnableWhenBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREncounterLocationStatus', VersionTypeMap::getTypeClassname('EncounterLocationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREncounterStatus', VersionTypeMap::getTypeClassname('EncounterStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREndpointStatus', VersionTypeMap::getTypeClassname('EndpointStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREnrollmentOutcome', VersionTypeMap::getTypeClassname('EnrollmentOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREpisodeOfCareStatus', VersionTypeMap::getTypeClassname('EpisodeOfCareStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventCapabilityMode', VersionTypeMap::getTypeClassname('EventCapabilityMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventResourceTypes', VersionTypeMap::getTypeClassname('EventResourceTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventStatus', VersionTypeMap::getTypeClassname('EventStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventTiming', VersionTypeMap::getTypeClassname('EventTiming'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREvidenceVariableHandling', VersionTypeMap::getTypeClassname('EvidenceVariableHandling'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExampleScenarioActorType', VersionTypeMap::getTypeClassname('ExampleScenarioActorType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExplanationOfBenefitStatus', VersionTypeMap::getTypeClassname('ExplanationOfBenefitStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExtensionContextType', VersionTypeMap::getTypeClassname('ExtensionContextType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFamilyHistoryStatus', VersionTypeMap::getTypeClassname('FamilyHistoryStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRDeviceStatus', VersionTypeMap::getTypeClassname('FHIRDeviceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRPathTypes', VersionTypeMap::getTypeClassname('FHIRPathTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRSubstanceStatus', VersionTypeMap::getTypeClassname('FHIRSubstanceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRTypes', VersionTypeMap::getTypeClassname('FHIRTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRVersion', VersionTypeMap::getTypeClassname('FHIRVersion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFilterOperator', VersionTypeMap::getTypeClassname('FilterOperator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFinancialResourceStatusCodes', VersionTypeMap::getTypeClassname('FinancialResourceStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFlagStatus', VersionTypeMap::getTypeClassname('FlagStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFormularyItemStatusCodes', VersionTypeMap::getTypeClassname('FormularyItemStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGenomicStudyStatus', VersionTypeMap::getTypeClassname('GenomicStudyStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGoalLifecycleStatus', VersionTypeMap::getTypeClassname('GoalLifecycleStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGraphCompartmentRule', VersionTypeMap::getTypeClassname('GraphCompartmentRule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGraphCompartmentUse', VersionTypeMap::getTypeClassname('GraphCompartmentUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGroupMembershipBasis', VersionTypeMap::getTypeClassname('GroupMembershipBasis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGroupType', VersionTypeMap::getTypeClassname('GroupType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGuidanceResponseStatus', VersionTypeMap::getTypeClassname('GuidanceResponseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGuidePageGeneration', VersionTypeMap::getTypeClassname('GuidePageGeneration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRHTTPVerb', VersionTypeMap::getTypeClassname('HTTPVerb'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRId', VersionTypeMap::getTypeClassname('id'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIdentifierUse', VersionTypeMap::getTypeClassname('IdentifierUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIdentityAssuranceLevel', VersionTypeMap::getTypeClassname('IdentityAssuranceLevel'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingSelectionDGraphicType', VersionTypeMap::getTypeClassname('ImagingSelectionDGraphicType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingSelectionStatus', VersionTypeMap::getTypeClassname('ImagingSelectionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingStudyStatus', VersionTypeMap::getTypeClassname('ImagingStudyStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImmunizationEvaluationStatusCodes', VersionTypeMap::getTypeClassname('ImmunizationEvaluationStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImmunizationStatusCodes', VersionTypeMap::getTypeClassname('ImmunizationStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIngredientManufacturerRole', VersionTypeMap::getTypeClassname('IngredientManufacturerRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInstant', VersionTypeMap::getTypeClassname('instant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteger', VersionTypeMap::getTypeClassname('integer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteger64', VersionTypeMap::getTypeClassname('integer64'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteractionTrigger', VersionTypeMap::getTypeClassname('InteractionTrigger'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryCountType', VersionTypeMap::getTypeClassname('InventoryCountType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryItemStatusCodes', VersionTypeMap::getTypeClassname('InventoryItemStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryReportStatus', VersionTypeMap::getTypeClassname('InventoryReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInvoiceStatus', VersionTypeMap::getTypeClassname('InvoiceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIssueSeverity', VersionTypeMap::getTypeClassname('IssueSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIssueType', VersionTypeMap::getTypeClassname('IssueType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRJurisdictionValueSet', VersionTypeMap::getTypeClassname('JurisdictionValueSet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRKind', VersionTypeMap::getTypeClassname('Kind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkageType', VersionTypeMap::getTypeClassname('LinkageType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkRelationTypes', VersionTypeMap::getTypeClassname('LinkRelationTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkType', VersionTypeMap::getTypeClassname('LinkType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRListMode', VersionTypeMap::getTypeClassname('ListMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRListStatus', VersionTypeMap::getTypeClassname('ListStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLocationMode', VersionTypeMap::getTypeClassname('LocationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLocationStatus', VersionTypeMap::getTypeClassname('LocationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMarkdown', VersionTypeMap::getTypeClassname('markdown'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMeasureReportStatus', VersionTypeMap::getTypeClassname('MeasureReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMeasureReportType', VersionTypeMap::getTypeClassname('MeasureReportType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationAdministrationStatusCodes', VersionTypeMap::getTypeClassname('MedicationAdministrationStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationDispenseStatusCodes', VersionTypeMap::getTypeClassname('MedicationDispenseStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationKnowledgeStatusCodes', VersionTypeMap::getTypeClassname('MedicationKnowledgeStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationRequestIntent', VersionTypeMap::getTypeClassname('MedicationRequestIntent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationrequestStatus', VersionTypeMap::getTypeClassname('MedicationrequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationStatementStatusCodes', VersionTypeMap::getTypeClassname('MedicationStatementStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationStatusCodes', VersionTypeMap::getTypeClassname('MedicationStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMessageheaderResponseRequest', VersionTypeMap::getTypeClassname('MessageheaderResponseRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMessageSignificanceCategory', VersionTypeMap::getTypeClassname('MessageSignificanceCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNameUse', VersionTypeMap::getTypeClassname('NameUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNamingSystemIdentifierType', VersionTypeMap::getTypeClassname('NamingSystemIdentifierType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNamingSystemType', VersionTypeMap::getTypeClassname('NamingSystemType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNarrativeStatus', VersionTypeMap::getTypeClassname('NarrativeStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNoteType', VersionTypeMap::getTypeClassname('NoteType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNutritionProductStatus', VersionTypeMap::getTypeClassname('NutritionProductStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationDataType', VersionTypeMap::getTypeClassname('ObservationDataType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationRangeCategory', VersionTypeMap::getTypeClassname('ObservationRangeCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationStatus', VersionTypeMap::getTypeClassname('ObservationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROid', VersionTypeMap::getTypeClassname('oid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationKind', VersionTypeMap::getTypeClassname('OperationKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationOutcomeCodes', VersionTypeMap::getTypeClassname('OperationOutcomeCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationParameterScope', VersionTypeMap::getTypeClassname('OperationParameterScope'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationParameterUse', VersionTypeMap::getTypeClassname('OperationParameterUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROrientationType', VersionTypeMap::getTypeClassname('OrientationType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRParticipantResourceTypes', VersionTypeMap::getTypeClassname('ParticipantResourceTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRParticipationStatus', VersionTypeMap::getTypeClassname('ParticipationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPaymentOutcome', VersionTypeMap::getTypeClassname('PaymentOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPermissionRuleCombining', VersionTypeMap::getTypeClassname('PermissionRuleCombining'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPermissionStatus', VersionTypeMap::getTypeClassname('PermissionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPositiveInt', VersionTypeMap::getTypeClassname('positiveInt'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPropertyRepresentation', VersionTypeMap::getTypeClassname('PropertyRepresentation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPropertyType', VersionTypeMap::getTypeClassname('PropertyType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRProvenanceEntityRole', VersionTypeMap::getTypeClassname('ProvenanceEntityRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPublicationStatus', VersionTypeMap::getTypeClassname('PublicationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuantityComparator', VersionTypeMap::getTypeClassname('QuantityComparator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireAnswerConstraint', VersionTypeMap::getTypeClassname('QuestionnaireAnswerConstraint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemDisabledDisplay', VersionTypeMap::getTypeClassname('QuestionnaireItemDisabledDisplay'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemOperator', VersionTypeMap::getTypeClassname('QuestionnaireItemOperator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemType', VersionTypeMap::getTypeClassname('QuestionnaireItemType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireResponseStatus', VersionTypeMap::getTypeClassname('QuestionnaireResponseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReferenceHandlingPolicy', VersionTypeMap::getTypeClassname('ReferenceHandlingPolicy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReferenceVersionRules', VersionTypeMap::getTypeClassname('ReferenceVersionRules'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRelatedArtifactType', VersionTypeMap::getTypeClassname('RelatedArtifactType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRelatedArtifactTypeExpanded', VersionTypeMap::getTypeClassname('RelatedArtifactTypeExpanded'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRemittanceOutcome', VersionTypeMap::getTypeClassname('RemittanceOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReportRelationshipType', VersionTypeMap::getTypeClassname('ReportRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestIntent', VersionTypeMap::getTypeClassname('RequestIntent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestPriority', VersionTypeMap::getTypeClassname('RequestPriority'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestResourceTypes', VersionTypeMap::getTypeClassname('RequestResourceTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestStatus', VersionTypeMap::getTypeClassname('RequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResourceType', VersionTypeMap::getTypeClassname('ResourceType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResourceVersionPolicy', VersionTypeMap::getTypeClassname('ResourceVersionPolicy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResponseType', VersionTypeMap::getTypeClassname('ResponseType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRestfulCapabilityMode', VersionTypeMap::getTypeClassname('RestfulCapabilityMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSampledDataDataType', VersionTypeMap::getTypeClassname('SampledDataDataType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchComparator', VersionTypeMap::getTypeClassname('SearchComparator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchEntryMode', VersionTypeMap::getTypeClassname('SearchEntryMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchModifierCode', VersionTypeMap::getTypeClassname('SearchModifierCode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchParamType', VersionTypeMap::getTypeClassname('SearchParamType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchProcessingModeType', VersionTypeMap::getTypeClassname('SearchProcessingModeType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSequenceType', VersionTypeMap::getTypeClassname('SequenceType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSlicingRules', VersionTypeMap::getTypeClassname('SlicingRules'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSlotStatus', VersionTypeMap::getTypeClassname('SlotStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSortDirection', VersionTypeMap::getTypeClassname('SortDirection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSPDXLicense', VersionTypeMap::getTypeClassname('SPDXLicense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenCombined', VersionTypeMap::getTypeClassname('SpecimenCombined'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenContainedPreference', VersionTypeMap::getTypeClassname('SpecimenContainedPreference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenStatus', VersionTypeMap::getTypeClassname('SpecimenStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStrandType', VersionTypeMap::getTypeClassname('StrandType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRString', VersionTypeMap::getTypeClassname('string'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureDefinitionKind', VersionTypeMap::getTypeClassname('StructureDefinitionKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapGroupTypeMode', VersionTypeMap::getTypeClassname('StructureMapGroupTypeMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapInputMode', VersionTypeMap::getTypeClassname('StructureMapInputMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapModelMode', VersionTypeMap::getTypeClassname('StructureMapModelMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapSourceListMode', VersionTypeMap::getTypeClassname('StructureMapSourceListMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapTargetListMode', VersionTypeMap::getTypeClassname('StructureMapTargetListMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapTransform', VersionTypeMap::getTypeClassname('StructureMapTransform'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubmitDataUpdateType', VersionTypeMap::getTypeClassname('SubmitDataUpdateType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionNotificationType', VersionTypeMap::getTypeClassname('SubscriptionNotificationType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionPayloadContent', VersionTypeMap::getTypeClassname('SubscriptionPayloadContent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionStatusCodes', VersionTypeMap::getTypeClassname('SubscriptionStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSupplyDeliveryStatus', VersionTypeMap::getTypeClassname('SupplyDeliveryStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSupplyRequestStatus', VersionTypeMap::getTypeClassname('SupplyRequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSystemRestfulInteraction', VersionTypeMap::getTypeClassname('SystemRestfulInteraction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTaskIntent', VersionTypeMap::getTypeClassname('TaskIntent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTaskStatus', VersionTypeMap::getTypeClassname('TaskStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportActionResult', VersionTypeMap::getTypeClassname('TestReportActionResult'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportParticipantType', VersionTypeMap::getTypeClassname('TestReportParticipantType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportResult', VersionTypeMap::getTypeClassname('TestReportResult'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportStatus', VersionTypeMap::getTypeClassname('TestReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestScriptRequestMethodCode', VersionTypeMap::getTypeClassname('TestScriptRequestMethodCode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTime', VersionTypeMap::getTypeClassname('time'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTransportIntent', VersionTypeMap::getTypeClassname('TransportIntent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTransportStatus', VersionTypeMap::getTypeClassname('TransportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTriggeredBytype', VersionTypeMap::getTypeClassname('TriggeredBytype'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTriggerType', VersionTypeMap::getTypeClassname('TriggerType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTypeDerivationRule', VersionTypeMap::getTypeClassname('TypeDerivationRule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTypeRestfulInteraction', VersionTypeMap::getTypeClassname('TypeRestfulInteraction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUDIEntryType', VersionTypeMap::getTypeClassname('UDIEntryType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUnitsOfTime', VersionTypeMap::getTypeClassname('UnitsOfTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUnsignedInt', VersionTypeMap::getTypeClassname('unsignedInt'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUri', VersionTypeMap::getTypeClassname('uri'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUrl', VersionTypeMap::getTypeClassname('url'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUse', VersionTypeMap::getTypeClassname('Use'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUuid', VersionTypeMap::getTypeClassname('uuid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVerificationResultStatus', VersionTypeMap::getTypeClassname('VerificationResultStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVersionIndependentResourceTypesAll', VersionTypeMap::getTypeClassname('VersionIndependentResourceTypesAll'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVisionBase', VersionTypeMap::getTypeClassname('VisionBase'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVisionEyes', VersionTypeMap::getTypeClassname('VisionEyes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource', VersionTypeMap::getTypeClassname('Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRBinary', VersionTypeMap::getTypeClassname('Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRBundle', VersionTypeMap::getTypeClassname('Bundle'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource', VersionTypeMap::getTypeClassname('DomainResource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAccount', VersionTypeMap::getTypeClassname('Account'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdministrableProductDefinition', VersionTypeMap::getTypeClassname('AdministrableProductDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdverseEvent', VersionTypeMap::getTypeClassname('AdverseEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', VersionTypeMap::getTypeClassname('AllergyIntolerance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointment', VersionTypeMap::getTypeClassname('Appointment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', VersionTypeMap::getTypeClassname('AppointmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRArtifactAssessment', VersionTypeMap::getTypeClassname('ArtifactAssessment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAuditEvent', VersionTypeMap::getTypeClassname('AuditEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBasic', VersionTypeMap::getTypeClassname('Basic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct', VersionTypeMap::getTypeClassname('BiologicallyDerivedProduct'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProductDispense', VersionTypeMap::getTypeClassname('BiologicallyDerivedProductDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBodyStructure', VersionTypeMap::getTypeClassname('BodyStructure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource', VersionTypeMap::getTypeClassname('CanonicalResource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRActorDefinition', VersionTypeMap::getTypeClassname('ActorDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCapabilityStatement', VersionTypeMap::getTypeClassname('CapabilityStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCompartmentDefinition', VersionTypeMap::getTypeClassname('CompartmentDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRExampleScenario', VersionTypeMap::getTypeClassname('ExampleScenario'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRGraphDefinition', VersionTypeMap::getTypeClassname('GraphDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRImplementationGuide', VersionTypeMap::getTypeClassname('ImplementationGuide'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMessageDefinition', VersionTypeMap::getTypeClassname('MessageDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource', VersionTypeMap::getTypeClassname('MetadataResource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRActivityDefinition', VersionTypeMap::getTypeClassname('ActivityDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRChargeItemDefinition', VersionTypeMap::getTypeClassname('ChargeItemDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCitation', VersionTypeMap::getTypeClassname('Citation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCodeSystem', VersionTypeMap::getTypeClassname('CodeSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConceptMap', VersionTypeMap::getTypeClassname('ConceptMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConditionDefinition', VersionTypeMap::getTypeClassname('ConditionDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREventDefinition', VersionTypeMap::getTypeClassname('EventDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidence', VersionTypeMap::getTypeClassname('Evidence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceReport', VersionTypeMap::getTypeClassname('EvidenceReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceVariable', VersionTypeMap::getTypeClassname('EvidenceVariable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRLibrary', VersionTypeMap::getTypeClassname('Library'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMeasure', VersionTypeMap::getTypeClassname('Measure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMedicationKnowledge', VersionTypeMap::getTypeClassname('MedicationKnowledge'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRNamingSystem', VersionTypeMap::getTypeClassname('NamingSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRObservationDefinition', VersionTypeMap::getTypeClassname('ObservationDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRPlanDefinition', VersionTypeMap::getTypeClassname('PlanDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRQuestionnaire', VersionTypeMap::getTypeClassname('Questionnaire'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRSpecimenDefinition', VersionTypeMap::getTypeClassname('SpecimenDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRValueSet', VersionTypeMap::getTypeClassname('ValueSet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIROperationDefinition', VersionTypeMap::getTypeClassname('OperationDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRRequirements', VersionTypeMap::getTypeClassname('Requirements'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSearchParameter', VersionTypeMap::getTypeClassname('SearchParameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureDefinition', VersionTypeMap::getTypeClassname('StructureDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureMap', VersionTypeMap::getTypeClassname('StructureMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSubscriptionTopic', VersionTypeMap::getTypeClassname('SubscriptionTopic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTerminologyCapabilities', VersionTypeMap::getTypeClassname('TerminologyCapabilities'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestPlan', VersionTypeMap::getTypeClassname('TestPlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestScript', VersionTypeMap::getTypeClassname('TestScript'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCarePlan', VersionTypeMap::getTypeClassname('CarePlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCareTeam', VersionTypeMap::getTypeClassname('CareTeam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRChargeItem', VersionTypeMap::getTypeClassname('ChargeItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaim', VersionTypeMap::getTypeClassname('Claim'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaimResponse', VersionTypeMap::getTypeClassname('ClaimResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', VersionTypeMap::getTypeClassname('ClinicalImpression'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalUseDefinition', VersionTypeMap::getTypeClassname('ClinicalUseDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunication', VersionTypeMap::getTypeClassname('Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', VersionTypeMap::getTypeClassname('CommunicationRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRComposition', VersionTypeMap::getTypeClassname('Composition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCondition', VersionTypeMap::getTypeClassname('Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRConsent', VersionTypeMap::getTypeClassname('Consent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRContract', VersionTypeMap::getTypeClassname('Contract'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverage', VersionTypeMap::getTypeClassname('Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest', VersionTypeMap::getTypeClassname('CoverageEligibilityRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse', VersionTypeMap::getTypeClassname('CoverageEligibilityResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', VersionTypeMap::getTypeClassname('DetectedIssue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDevice', VersionTypeMap::getTypeClassname('Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceAssociation', VersionTypeMap::getTypeClassname('DeviceAssociation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition', VersionTypeMap::getTypeClassname('DeviceDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDispense', VersionTypeMap::getTypeClassname('DeviceDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', VersionTypeMap::getTypeClassname('DeviceMetric'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceRequest', VersionTypeMap::getTypeClassname('DeviceRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceUsage', VersionTypeMap::getTypeClassname('DeviceUsage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', VersionTypeMap::getTypeClassname('DiagnosticReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDocumentReference', VersionTypeMap::getTypeClassname('DocumentReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounter', VersionTypeMap::getTypeClassname('Encounter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounterHistory', VersionTypeMap::getTypeClassname('EncounterHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREndpoint', VersionTypeMap::getTypeClassname('Endpoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', VersionTypeMap::getTypeClassname('EnrollmentRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', VersionTypeMap::getTypeClassname('EnrollmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', VersionTypeMap::getTypeClassname('EpisodeOfCare'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', VersionTypeMap::getTypeClassname('ExplanationOfBenefit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', VersionTypeMap::getTypeClassname('FamilyMemberHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFlag', VersionTypeMap::getTypeClassname('Flag'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFormularyItem', VersionTypeMap::getTypeClassname('FormularyItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGenomicStudy', VersionTypeMap::getTypeClassname('GenomicStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGoal', VersionTypeMap::getTypeClassname('Goal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGroup', VersionTypeMap::getTypeClassname('Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse', VersionTypeMap::getTypeClassname('GuidanceResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRHealthcareService', VersionTypeMap::getTypeClassname('HealthcareService'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingSelection', VersionTypeMap::getTypeClassname('ImagingSelection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingStudy', VersionTypeMap::getTypeClassname('ImagingStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunization', VersionTypeMap::getTypeClassname('Immunization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation', VersionTypeMap::getTypeClassname('ImmunizationEvaluation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', VersionTypeMap::getTypeClassname('ImmunizationRecommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRIngredient', VersionTypeMap::getTypeClassname('Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInsurancePlan', VersionTypeMap::getTypeClassname('InsurancePlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryItem', VersionTypeMap::getTypeClassname('InventoryItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryReport', VersionTypeMap::getTypeClassname('InventoryReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInvoice', VersionTypeMap::getTypeClassname('Invoice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLinkage', VersionTypeMap::getTypeClassname('Linkage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRList', VersionTypeMap::getTypeClassname('List'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLocation', VersionTypeMap::getTypeClassname('Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRManufacturedItemDefinition', VersionTypeMap::getTypeClassname('ManufacturedItemDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMeasureReport', VersionTypeMap::getTypeClassname('MeasureReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedication', VersionTypeMap::getTypeClassname('Medication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', VersionTypeMap::getTypeClassname('MedicationAdministration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', VersionTypeMap::getTypeClassname('MedicationDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationRequest', VersionTypeMap::getTypeClassname('MedicationRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', VersionTypeMap::getTypeClassname('MedicationStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicinalProductDefinition', VersionTypeMap::getTypeClassname('MedicinalProductDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMessageHeader', VersionTypeMap::getTypeClassname('MessageHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMolecularSequence', VersionTypeMap::getTypeClassname('MolecularSequence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionIntake', VersionTypeMap::getTypeClassname('NutritionIntake'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', VersionTypeMap::getTypeClassname('NutritionOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionProduct', VersionTypeMap::getTypeClassname('NutritionProduct'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRObservation', VersionTypeMap::getTypeClassname('Observation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROperationOutcome', VersionTypeMap::getTypeClassname('OperationOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganization', VersionTypeMap::getTypeClassname('Organization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation', VersionTypeMap::getTypeClassname('OrganizationAffiliation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPackagedProductDefinition', VersionTypeMap::getTypeClassname('PackagedProductDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPatient', VersionTypeMap::getTypeClassname('Patient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', VersionTypeMap::getTypeClassname('PaymentNotice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', VersionTypeMap::getTypeClassname('PaymentReconciliation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPermission', VersionTypeMap::getTypeClassname('Permission'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPerson', VersionTypeMap::getTypeClassname('Person'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitioner', VersionTypeMap::getTypeClassname('Practitioner'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitionerRole', VersionTypeMap::getTypeClassname('PractitionerRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProcedure', VersionTypeMap::getTypeClassname('Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProvenance', VersionTypeMap::getTypeClassname('Provenance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', VersionTypeMap::getTypeClassname('QuestionnaireResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRegulatedAuthorization', VersionTypeMap::getTypeClassname('RegulatedAuthorization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', VersionTypeMap::getTypeClassname('RelatedPerson'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRequestOrchestration', VersionTypeMap::getTypeClassname('RequestOrchestration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchStudy', VersionTypeMap::getTypeClassname('ResearchStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchSubject', VersionTypeMap::getTypeClassname('ResearchSubject'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', VersionTypeMap::getTypeClassname('RiskAssessment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSchedule', VersionTypeMap::getTypeClassname('Schedule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRServiceRequest', VersionTypeMap::getTypeClassname('ServiceRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSlot', VersionTypeMap::getTypeClassname('Slot'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSpecimen', VersionTypeMap::getTypeClassname('Specimen'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscription', VersionTypeMap::getTypeClassname('Subscription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscriptionStatus', VersionTypeMap::getTypeClassname('SubscriptionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstance', VersionTypeMap::getTypeClassname('Substance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceDefinition', VersionTypeMap::getTypeClassname('SubstanceDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceNucleicAcid', VersionTypeMap::getTypeClassname('SubstanceNucleicAcid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstancePolymer', VersionTypeMap::getTypeClassname('SubstancePolymer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceProtein', VersionTypeMap::getTypeClassname('SubstanceProtein'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceReferenceInformation', VersionTypeMap::getTypeClassname('SubstanceReferenceInformation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceSourceMaterial', VersionTypeMap::getTypeClassname('SubstanceSourceMaterial'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', VersionTypeMap::getTypeClassname('SupplyDelivery'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', VersionTypeMap::getTypeClassname('SupplyRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTask', VersionTypeMap::getTypeClassname('Task'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTestReport', VersionTypeMap::getTypeClassname('TestReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTransport', VersionTypeMap::getTypeClassname('Transport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVerificationResult', VersionTypeMap::getTypeClassname('VerificationResult'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', VersionTypeMap::getTypeClassname('VisionPrescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRParameters', VersionTypeMap::getTypeClassname('Parameters'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBooleanPrimitive', VersionTypeMap::getTypeClassname('boolean-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCanonicalPrimitive', VersionTypeMap::getTypeClassname('canonical-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive', VersionTypeMap::getTypeClassname('code-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAccountStatusEnum', VersionTypeMap::getTypeClassname('AccountStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorEnum', VersionTypeMap::getTypeClassname('ActionCardinalityBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionConditionKindEnum', VersionTypeMap::getTypeClassname('ActionConditionKindEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorEnum', VersionTypeMap::getTypeClassname('ActionGroupingBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionParticipantTypeEnum', VersionTypeMap::getTypeClassname('ActionParticipantTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorEnum', VersionTypeMap::getTypeClassname('ActionPrecheckBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeEnum', VersionTypeMap::getTypeClassname('ActionRelationshipTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorEnum', VersionTypeMap::getTypeClassname('ActionRequiredBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorEnum', VersionTypeMap::getTypeClassname('ActionSelectionBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAddressTypeEnum', VersionTypeMap::getTypeClassname('AddressTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAddressUseEnum', VersionTypeMap::getTypeClassname('AddressUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdministrativeGenderEnum', VersionTypeMap::getTypeClassname('AdministrativeGenderEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdverseEventActualityEnum', VersionTypeMap::getTypeClassname('AdverseEventActualityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdverseEventStatusEnum', VersionTypeMap::getTypeClassname('AdverseEventStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAgeUnitsEnum', VersionTypeMap::getTypeClassname('AgeUnitsEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAggregationModeEnum', VersionTypeMap::getTypeClassname('AggregationModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryEnum', VersionTypeMap::getTypeClassname('AllergyIntoleranceCategoryEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityEnum', VersionTypeMap::getTypeClassname('AllergyIntoleranceCriticalityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityEnum', VersionTypeMap::getTypeClassname('AllergyIntoleranceSeverityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllResourceTypesEnum', VersionTypeMap::getTypeClassname('AllResourceTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAppointmentResponseStatusEnum', VersionTypeMap::getTypeClassname('AppointmentResponseStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAppointmentStatusEnum', VersionTypeMap::getTypeClassname('AppointmentStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentDispositionEnum', VersionTypeMap::getTypeClassname('ArtifactAssessmentDispositionEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentInformationTypeEnum', VersionTypeMap::getTypeClassname('ArtifactAssessmentInformationTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentWorkflowStatusEnum', VersionTypeMap::getTypeClassname('ArtifactAssessmentWorkflowStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeEnum', VersionTypeMap::getTypeClassname('AssertionDirectionTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionManualCompletionTypeEnum', VersionTypeMap::getTypeClassname('AssertionManualCompletionTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeEnum', VersionTypeMap::getTypeClassname('AssertionOperatorTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesEnum', VersionTypeMap::getTypeClassname('AssertionResponseTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAuditEventActionEnum', VersionTypeMap::getTypeClassname('AuditEventActionEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAuditEventSeverityEnum', VersionTypeMap::getTypeClassname('AuditEventSeverityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBindingStrengthEnum', VersionTypeMap::getTypeClassname('BindingStrengthEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductDispenseCodesEnum', VersionTypeMap::getTypeClassname('BiologicallyDerivedProductDispenseCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBundleTypeEnum', VersionTypeMap::getTypeClassname('BundleTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindEnum', VersionTypeMap::getTypeClassname('CapabilityStatementKindEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCarePlanIntentEnum', VersionTypeMap::getTypeClassname('CarePlanIntentEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCareTeamStatusEnum', VersionTypeMap::getTypeClassname('CareTeamStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCharacteristicCombinationEnum', VersionTypeMap::getTypeClassname('CharacteristicCombinationEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRChargeItemStatusEnum', VersionTypeMap::getTypeClassname('ChargeItemStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRClaimProcessingCodesEnum', VersionTypeMap::getTypeClassname('ClaimProcessingCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRClinicalUseDefinitionTypeEnum', VersionTypeMap::getTypeClassname('ClinicalUseDefinitionTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSearchSupportEnum', VersionTypeMap::getTypeClassname('CodeSearchSupportEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeEnum', VersionTypeMap::getTypeClassname('CodeSystemContentModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningEnum', VersionTypeMap::getTypeClassname('CodeSystemHierarchyMeaningEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCommonLanguagesEnum', VersionTypeMap::getTypeClassname('CommonLanguagesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCompartmentTypeEnum', VersionTypeMap::getTypeClassname('CompartmentTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCompositionStatusEnum', VersionTypeMap::getTypeClassname('CompositionStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapAttributeTypeEnum', VersionTypeMap::getTypeClassname('ConceptMapAttributeTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeEnum', VersionTypeMap::getTypeClassname('ConceptMapGroupUnmappedModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapPropertyTypeEnum', VersionTypeMap::getTypeClassname('ConceptMapPropertyTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapRelationshipEnum', VersionTypeMap::getTypeClassname('ConceptMapRelationshipEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConcreteFHIRTypesEnum', VersionTypeMap::getTypeClassname('ConcreteFHIRTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusEnum', VersionTypeMap::getTypeClassname('ConditionalDeleteStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionalReadStatusEnum', VersionTypeMap::getTypeClassname('ConditionalReadStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionPreconditionTypeEnum', VersionTypeMap::getTypeClassname('ConditionPreconditionTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionQuestionnairePurposeEnum', VersionTypeMap::getTypeClassname('ConditionQuestionnairePurposeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConformanceExpectationEnum', VersionTypeMap::getTypeClassname('ConformanceExpectationEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentDataMeaningEnum', VersionTypeMap::getTypeClassname('ConsentDataMeaningEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentProvisionTypeEnum', VersionTypeMap::getTypeClassname('ConsentProvisionTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentStateEnum', VersionTypeMap::getTypeClassname('ConsentStateEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConstraintSeverityEnum', VersionTypeMap::getTypeClassname('ConstraintSeverityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContactPointSystemEnum', VersionTypeMap::getTypeClassname('ContactPointSystemEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContactPointUseEnum', VersionTypeMap::getTypeClassname('ContactPointUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContractResourcePublicationStatusCodesEnum', VersionTypeMap::getTypeClassname('ContractResourcePublicationStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesEnum', VersionTypeMap::getTypeClassname('ContractResourceStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContributorTypeEnum', VersionTypeMap::getTypeClassname('ContributorTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCriteriaNotExistsBehaviorEnum', VersionTypeMap::getTypeClassname('CriteriaNotExistsBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDefinitionResourceTypesEnum', VersionTypeMap::getTypeClassname('DefinitionResourceTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityEnum', VersionTypeMap::getTypeClassname('DetectedIssueSeverityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDetectedIssueStatusEnum', VersionTypeMap::getTypeClassname('DetectedIssueStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceCorrectiveActionScopeEnum', VersionTypeMap::getTypeClassname('DeviceCorrectiveActionScopeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceDefinitionRegulatoryIdentifierTypeEnum', VersionTypeMap::getTypeClassname('DeviceDefinitionRegulatoryIdentifierTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceDispenseStatusCodesEnum', VersionTypeMap::getTypeClassname('DeviceDispenseStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateEnum', VersionTypeMap::getTypeClassname('DeviceMetricCalibrationStateEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeEnum', VersionTypeMap::getTypeClassname('DeviceMetricCalibrationTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryEnum', VersionTypeMap::getTypeClassname('DeviceMetricCategoryEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusEnum', VersionTypeMap::getTypeClassname('DeviceMetricOperationalStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceNameTypeEnum', VersionTypeMap::getTypeClassname('DeviceNameTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceProductionIdentifierInUDIEnum', VersionTypeMap::getTypeClassname('DeviceProductionIdentifierInUDIEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceUsageStatusEnum', VersionTypeMap::getTypeClassname('DeviceUsageStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusEnum', VersionTypeMap::getTypeClassname('DiagnosticReportStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeEnum', VersionTypeMap::getTypeClassname('DiscriminatorTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDocumentModeEnum', VersionTypeMap::getTypeClassname('DocumentModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusEnum', VersionTypeMap::getTypeClassname('DocumentReferenceStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityOutcomeEnum', VersionTypeMap::getTypeClassname('EligibilityOutcomeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityRequestPurposeEnum', VersionTypeMap::getTypeClassname('EligibilityRequestPurposeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityResponsePurposeEnum', VersionTypeMap::getTypeClassname('EligibilityResponsePurposeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREnableWhenBehaviorEnum', VersionTypeMap::getTypeClassname('EnableWhenBehaviorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREncounterLocationStatusEnum', VersionTypeMap::getTypeClassname('EncounterLocationStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREncounterStatusEnum', VersionTypeMap::getTypeClassname('EncounterStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREndpointStatusEnum', VersionTypeMap::getTypeClassname('EndpointStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREnrollmentOutcomeEnum', VersionTypeMap::getTypeClassname('EnrollmentOutcomeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusEnum', VersionTypeMap::getTypeClassname('EpisodeOfCareStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventCapabilityModeEnum', VersionTypeMap::getTypeClassname('EventCapabilityModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventResourceTypesEnum', VersionTypeMap::getTypeClassname('EventResourceTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventStatusEnum', VersionTypeMap::getTypeClassname('EventStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventTimingEnum', VersionTypeMap::getTypeClassname('EventTimingEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREvidenceVariableHandlingEnum', VersionTypeMap::getTypeClassname('EvidenceVariableHandlingEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExampleScenarioActorTypeEnum', VersionTypeMap::getTypeClassname('ExampleScenarioActorTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusEnum', VersionTypeMap::getTypeClassname('ExplanationOfBenefitStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExtensionContextTypeEnum', VersionTypeMap::getTypeClassname('ExtensionContextTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusEnum', VersionTypeMap::getTypeClassname('FamilyHistoryStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusEnum', VersionTypeMap::getTypeClassname('FHIRDeviceStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRPathTypesEnum', VersionTypeMap::getTypeClassname('FHIRPathTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusEnum', VersionTypeMap::getTypeClassname('FHIRSubstanceStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRTypesEnum', VersionTypeMap::getTypeClassname('FHIRTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRVersionEnum', VersionTypeMap::getTypeClassname('FHIRVersionEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFilterOperatorEnum', VersionTypeMap::getTypeClassname('FilterOperatorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesEnum', VersionTypeMap::getTypeClassname('FinancialResourceStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFlagStatusEnum', VersionTypeMap::getTypeClassname('FlagStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFormularyItemStatusCodesEnum', VersionTypeMap::getTypeClassname('FormularyItemStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGenomicStudyStatusEnum', VersionTypeMap::getTypeClassname('GenomicStudyStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGoalLifecycleStatusEnum', VersionTypeMap::getTypeClassname('GoalLifecycleStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleEnum', VersionTypeMap::getTypeClassname('GraphCompartmentRuleEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGraphCompartmentUseEnum', VersionTypeMap::getTypeClassname('GraphCompartmentUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGroupMembershipBasisEnum', VersionTypeMap::getTypeClassname('GroupMembershipBasisEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGroupTypeEnum', VersionTypeMap::getTypeClassname('GroupTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusEnum', VersionTypeMap::getTypeClassname('GuidanceResponseStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGuidePageGenerationEnum', VersionTypeMap::getTypeClassname('GuidePageGenerationEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRHTTPVerbEnum', VersionTypeMap::getTypeClassname('HTTPVerbEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIdentifierUseEnum', VersionTypeMap::getTypeClassname('IdentifierUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelEnum', VersionTypeMap::getTypeClassname('IdentityAssuranceLevelEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingSelectionDGraphicTypeEnum', VersionTypeMap::getTypeClassname('ImagingSelectionDGraphicTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingSelectionStatusEnum', VersionTypeMap::getTypeClassname('ImagingSelectionStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingStudyStatusEnum', VersionTypeMap::getTypeClassname('ImagingStudyStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImmunizationEvaluationStatusCodesEnum', VersionTypeMap::getTypeClassname('ImmunizationEvaluationStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesEnum', VersionTypeMap::getTypeClassname('ImmunizationStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIngredientManufacturerRoleEnum', VersionTypeMap::getTypeClassname('IngredientManufacturerRoleEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInteractionTriggerEnum', VersionTypeMap::getTypeClassname('InteractionTriggerEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryCountTypeEnum', VersionTypeMap::getTypeClassname('InventoryCountTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryItemStatusCodesEnum', VersionTypeMap::getTypeClassname('InventoryItemStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryReportStatusEnum', VersionTypeMap::getTypeClassname('InventoryReportStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInvoiceStatusEnum', VersionTypeMap::getTypeClassname('InvoiceStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIssueSeverityEnum', VersionTypeMap::getTypeClassname('IssueSeverityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIssueTypeEnum', VersionTypeMap::getTypeClassname('IssueTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRJurisdictionValueSetEnum', VersionTypeMap::getTypeClassname('JurisdictionValueSetEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRKindEnum', VersionTypeMap::getTypeClassname('KindEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkageTypeEnum', VersionTypeMap::getTypeClassname('LinkageTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkRelationTypesEnum', VersionTypeMap::getTypeClassname('LinkRelationTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkTypeEnum', VersionTypeMap::getTypeClassname('LinkTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRListModeEnum', VersionTypeMap::getTypeClassname('ListModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRListStatusEnum', VersionTypeMap::getTypeClassname('ListStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLocationModeEnum', VersionTypeMap::getTypeClassname('LocationModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLocationStatusEnum', VersionTypeMap::getTypeClassname('LocationStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMeasureReportStatusEnum', VersionTypeMap::getTypeClassname('MeasureReportStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMeasureReportTypeEnum', VersionTypeMap::getTypeClassname('MeasureReportTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationAdministrationStatusCodesEnum', VersionTypeMap::getTypeClassname('MedicationAdministrationStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationDispenseStatusCodesEnum', VersionTypeMap::getTypeClassname('MedicationDispenseStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationKnowledgeStatusCodesEnum', VersionTypeMap::getTypeClassname('MedicationKnowledgeStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentEnum', VersionTypeMap::getTypeClassname('MedicationRequestIntentEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationrequestStatusEnum', VersionTypeMap::getTypeClassname('MedicationrequestStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusCodesEnum', VersionTypeMap::getTypeClassname('MedicationStatementStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationStatusCodesEnum', VersionTypeMap::getTypeClassname('MedicationStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMessageheaderResponseRequestEnum', VersionTypeMap::getTypeClassname('MessageheaderResponseRequestEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryEnum', VersionTypeMap::getTypeClassname('MessageSignificanceCategoryEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNameUseEnum', VersionTypeMap::getTypeClassname('NameUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeEnum', VersionTypeMap::getTypeClassname('NamingSystemIdentifierTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNamingSystemTypeEnum', VersionTypeMap::getTypeClassname('NamingSystemTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNarrativeStatusEnum', VersionTypeMap::getTypeClassname('NarrativeStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNoteTypeEnum', VersionTypeMap::getTypeClassname('NoteTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNutritionProductStatusEnum', VersionTypeMap::getTypeClassname('NutritionProductStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationDataTypeEnum', VersionTypeMap::getTypeClassname('ObservationDataTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationRangeCategoryEnum', VersionTypeMap::getTypeClassname('ObservationRangeCategoryEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationStatusEnum', VersionTypeMap::getTypeClassname('ObservationStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationKindEnum', VersionTypeMap::getTypeClassname('OperationKindEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationOutcomeCodesEnum', VersionTypeMap::getTypeClassname('OperationOutcomeCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationParameterScopeEnum', VersionTypeMap::getTypeClassname('OperationParameterScopeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationParameterUseEnum', VersionTypeMap::getTypeClassname('OperationParameterUseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROrientationTypeEnum', VersionTypeMap::getTypeClassname('OrientationTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRParticipantResourceTypesEnum', VersionTypeMap::getTypeClassname('ParticipantResourceTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRParticipationStatusEnum', VersionTypeMap::getTypeClassname('ParticipationStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPaymentOutcomeEnum', VersionTypeMap::getTypeClassname('PaymentOutcomeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPermissionRuleCombiningEnum', VersionTypeMap::getTypeClassname('PermissionRuleCombiningEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPermissionStatusEnum', VersionTypeMap::getTypeClassname('PermissionStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPropertyRepresentationEnum', VersionTypeMap::getTypeClassname('PropertyRepresentationEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPropertyTypeEnum', VersionTypeMap::getTypeClassname('PropertyTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleEnum', VersionTypeMap::getTypeClassname('ProvenanceEntityRoleEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPublicationStatusEnum', VersionTypeMap::getTypeClassname('PublicationStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuantityComparatorEnum', VersionTypeMap::getTypeClassname('QuantityComparatorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireAnswerConstraintEnum', VersionTypeMap::getTypeClassname('QuestionnaireAnswerConstraintEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemDisabledDisplayEnum', VersionTypeMap::getTypeClassname('QuestionnaireItemDisabledDisplayEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemOperatorEnum', VersionTypeMap::getTypeClassname('QuestionnaireItemOperatorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeEnum', VersionTypeMap::getTypeClassname('QuestionnaireItemTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusEnum', VersionTypeMap::getTypeClassname('QuestionnaireResponseStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyEnum', VersionTypeMap::getTypeClassname('ReferenceHandlingPolicyEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesEnum', VersionTypeMap::getTypeClassname('ReferenceVersionRulesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeEnum', VersionTypeMap::getTypeClassname('RelatedArtifactTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeExpandedEnum', VersionTypeMap::getTypeClassname('RelatedArtifactTypeExpandedEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeEnum', VersionTypeMap::getTypeClassname('RemittanceOutcomeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReportRelationshipTypeEnum', VersionTypeMap::getTypeClassname('ReportRelationshipTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestIntentEnum', VersionTypeMap::getTypeClassname('RequestIntentEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestPriorityEnum', VersionTypeMap::getTypeClassname('RequestPriorityEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestResourceTypesEnum', VersionTypeMap::getTypeClassname('RequestResourceTypesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestStatusEnum', VersionTypeMap::getTypeClassname('RequestStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResourceTypeEnum', VersionTypeMap::getTypeClassname('ResourceTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyEnum', VersionTypeMap::getTypeClassname('ResourceVersionPolicyEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResponseTypeEnum', VersionTypeMap::getTypeClassname('ResponseTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeEnum', VersionTypeMap::getTypeClassname('RestfulCapabilityModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchComparatorEnum', VersionTypeMap::getTypeClassname('SearchComparatorEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchEntryModeEnum', VersionTypeMap::getTypeClassname('SearchEntryModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchModifierCodeEnum', VersionTypeMap::getTypeClassname('SearchModifierCodeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchParamTypeEnum', VersionTypeMap::getTypeClassname('SearchParamTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchProcessingModeTypeEnum', VersionTypeMap::getTypeClassname('SearchProcessingModeTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSequenceTypeEnum', VersionTypeMap::getTypeClassname('SequenceTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSlicingRulesEnum', VersionTypeMap::getTypeClassname('SlicingRulesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSlotStatusEnum', VersionTypeMap::getTypeClassname('SlotStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSortDirectionEnum', VersionTypeMap::getTypeClassname('SortDirectionEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSPDXLicenseEnum', VersionTypeMap::getTypeClassname('SPDXLicenseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenCombinedEnum', VersionTypeMap::getTypeClassname('SpecimenCombinedEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenContainedPreferenceEnum', VersionTypeMap::getTypeClassname('SpecimenContainedPreferenceEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenStatusEnum', VersionTypeMap::getTypeClassname('SpecimenStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStrandTypeEnum', VersionTypeMap::getTypeClassname('StrandTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindEnum', VersionTypeMap::getTypeClassname('StructureDefinitionKindEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeEnum', VersionTypeMap::getTypeClassname('StructureMapGroupTypeModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapInputModeEnum', VersionTypeMap::getTypeClassname('StructureMapInputModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapModelModeEnum', VersionTypeMap::getTypeClassname('StructureMapModelModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeEnum', VersionTypeMap::getTypeClassname('StructureMapSourceListModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeEnum', VersionTypeMap::getTypeClassname('StructureMapTargetListModeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapTransformEnum', VersionTypeMap::getTypeClassname('StructureMapTransformEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubmitDataUpdateTypeEnum', VersionTypeMap::getTypeClassname('SubmitDataUpdateTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionNotificationTypeEnum', VersionTypeMap::getTypeClassname('SubscriptionNotificationTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionPayloadContentEnum', VersionTypeMap::getTypeClassname('SubscriptionPayloadContentEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionStatusCodesEnum', VersionTypeMap::getTypeClassname('SubscriptionStatusCodesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusEnum', VersionTypeMap::getTypeClassname('SupplyDeliveryStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusEnum', VersionTypeMap::getTypeClassname('SupplyRequestStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionEnum', VersionTypeMap::getTypeClassname('SystemRestfulInteractionEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTaskIntentEnum', VersionTypeMap::getTypeClassname('TaskIntentEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTaskStatusEnum', VersionTypeMap::getTypeClassname('TaskStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportActionResultEnum', VersionTypeMap::getTypeClassname('TestReportActionResultEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeEnum', VersionTypeMap::getTypeClassname('TestReportParticipantTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportResultEnum', VersionTypeMap::getTypeClassname('TestReportResultEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportStatusEnum', VersionTypeMap::getTypeClassname('TestReportStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeEnum', VersionTypeMap::getTypeClassname('TestScriptRequestMethodCodeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTransportIntentEnum', VersionTypeMap::getTypeClassname('TransportIntentEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTransportStatusEnum', VersionTypeMap::getTypeClassname('TransportStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTriggeredBytypeEnum', VersionTypeMap::getTypeClassname('TriggeredBytypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTriggerTypeEnum', VersionTypeMap::getTypeClassname('TriggerTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleEnum', VersionTypeMap::getTypeClassname('TypeDerivationRuleEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionEnum', VersionTypeMap::getTypeClassname('TypeRestfulInteractionEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUDIEntryTypeEnum', VersionTypeMap::getTypeClassname('UDIEntryTypeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUnitsOfTimeEnum', VersionTypeMap::getTypeClassname('UnitsOfTimeEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUseEnum', VersionTypeMap::getTypeClassname('UseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVerificationResultStatusEnum', VersionTypeMap::getTypeClassname('VerificationResultStatusEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVersionIndependentResourceTypesAllEnum', VersionTypeMap::getTypeClassname('VersionIndependentResourceTypesAllEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVisionBaseEnum', VersionTypeMap::getTypeClassname('VisionBaseEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVisionEyesEnum', VersionTypeMap::getTypeClassname('VisionEyesEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDatePrimitive', VersionTypeMap::getTypeClassname('date-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDateTimePrimitive', VersionTypeMap::getTypeClassname('dateTime-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDecimalPrimitive', VersionTypeMap::getTypeClassname('decimal-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRIdPrimitive', VersionTypeMap::getTypeClassname('id-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRInstantPrimitive', VersionTypeMap::getTypeClassname('instant-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRInteger64Primitive', VersionTypeMap::getTypeClassname('integer64-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRIntegerPrimitive', VersionTypeMap::getTypeClassname('integer-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRMarkdownPrimitive', VersionTypeMap::getTypeClassname('markdown-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIROidPrimitive', VersionTypeMap::getTypeClassname('oid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRPositiveIntPrimitive', VersionTypeMap::getTypeClassname('positiveInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRResourceContainer', VersionTypeMap::getTypeClassname('ResourceContainer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRSampledDataDataTypePrimitive', VersionTypeMap::getTypeClassname('SampledDataDataType-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRStringPrimitive', VersionTypeMap::getTypeClassname('string-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRStringPrimitive\FHIRColorCodesOrRGBEnum', VersionTypeMap::getTypeClassname('ColorCodesOrRGBEnum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRTimePrimitive', VersionTypeMap::getTypeClassname('time-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUnsignedIntPrimitive', VersionTypeMap::getTypeClassname('unsignedInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUriPrimitive', VersionTypeMap::getTypeClassname('uri-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUrlPrimitive', VersionTypeMap::getTypeClassname('url-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUuidPrimitive', VersionTypeMap::getTypeClassname('uuid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRXHTML', VersionTypeMap::getTypeClassname('XHTML'));
    }

    public function testGetContainedTypeClassnameWithTypeName()
    {
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Base'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('base64Binary-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Element'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AccountStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionCardinalityBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionConditionKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionGroupingBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionParticipantType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionPrecheckBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionRequiredBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionSelectionBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AddressType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AddressUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdministrativeGender'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseEventActuality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseEventStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AgeUnits'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AggregationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceCriticality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllResourceTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AppointmentResponseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AppointmentStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ArtifactAssessmentDisposition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ArtifactAssessmentInformationType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ArtifactAssessmentWorkflowStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionDirectionType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionManualCompletionType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionOperatorType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionResponseTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEventAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEventSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BackboneElement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Account.Balance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Account.Coverage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Account.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Account.Guarantor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Account.Procedure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Account.RelatedAccount'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActivityDefinition.DynamicValue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActivityDefinition.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdministrableProductDefinition.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdministrableProductDefinition.RouteOfAdministration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdministrableProductDefinition.TargetSpecies'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdministrableProductDefinition.WithdrawalPeriod'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseEvent.Causality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseEvent.ContributingFactor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseEvent.MitigatingAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseEvent.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseEvent.PreventiveAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseEvent.SupportingInfo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseEvent.SuspectEntity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntolerance.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntolerance.Reaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Appointment.MonthlyTemplate'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Appointment.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Appointment.RecurrenceTemplate'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Appointment.WeeklyTemplate'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Appointment.YearlyTemplate'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ArtifactAssessment.Content'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEvent.Agent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEvent.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEvent.Entity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEvent.Outcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEvent.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BiologicallyDerivedProductDispense.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BiologicallyDerivedProduct.Collection'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BiologicallyDerivedProduct.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BodyStructure.BodyLandmarkOrientation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BodyStructure.DistanceFromLandmark'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BodyStructure.IncludedStructure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Bundle.Entry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Bundle.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Bundle.Request'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Bundle.Response'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Bundle.Search'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Document'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Endpoint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Implementation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Interaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Interaction1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Messaging'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Rest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.SearchParam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Security'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Software'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.SupportedMessage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlan.Activity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CareTeam.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ChargeItemDefinition.Applicability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ChargeItemDefinition.PropertyGroup'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ChargeItem.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.Abstract'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.CitedArtifact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.Classification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.Classification1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.ContributionInstance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.Contributorship'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.Entry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.Part'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.PublicationForm'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.PublishedIn'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.RelatesTo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.StatusDate'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.StatusDate1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.Summary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.Summary1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.Title'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.Version'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Citation.WebLocation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.AddItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Adjudication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.BodySite'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Detail1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Error'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Insurance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Payment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.ProcessNote'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.ReviewOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.SubDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.SubDetail1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Total'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Accident'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.BodySite'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.CareTeam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Insurance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Payee'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Procedure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.SubDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.SupportingInfo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalImpression.Finding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalUseDefinition.Contraindication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalUseDefinition.Indication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalUseDefinition.Interactant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalUseDefinition.Interaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalUseDefinition.OtherTherapy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalUseDefinition.UndesirableEffect'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalUseDefinition.Warning'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystem.Concept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystem.Designation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystem.Filter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystem.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystem.Property1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CommunicationRequest.Payload'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Communication.Payload'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompartmentDefinition.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Composition.Attester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Composition.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Composition.Section'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.AdditionalAttribute'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.DependsOn'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.Element'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.Property1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.Unmapped'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionDefinition.Medication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionDefinition.Observation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionDefinition.Plan'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionDefinition.Precondition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionDefinition.Questionnaire'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Condition.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Condition.Stage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Consent.Actor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Consent.Data'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Consent.PolicyBasis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Consent.Provision'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Consent.Verification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Answer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Asset'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.ContentDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Context'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Friendly'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Legal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Offer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Party'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Rule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.SecurityLabel'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Signer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Subject'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Term'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.ValuedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CoverageEligibilityRequest.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CoverageEligibilityRequest.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CoverageEligibilityRequest.Insurance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CoverageEligibilityRequest.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CoverageEligibilityRequest.SupportingInfo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CoverageEligibilityResponse.Benefit'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CoverageEligibilityResponse.Error'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CoverageEligibilityResponse.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CoverageEligibilityResponse.Insurance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CoverageEligibilityResponse.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Coverage.Class'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Coverage.CostToBeneficiary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Coverage.Exception'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Coverage.PaymentBy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DetectedIssue.Evidence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DetectedIssue.Mitigation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceAssociation.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinition.ChargeItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinition.Classification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinition.ConformsTo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinition.CorrectiveAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinition.DeviceName'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinition.Distributor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinition.Guideline'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinition.HasPart'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinition.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinition.MarketDistribution'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinition.Material'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinition.Packaging'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinition.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinition.RegulatoryIdentifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinition.UdiDeviceIdentifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinition.Version'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDispense.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetric.Calibration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceRequest.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceUsage.Adherence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Device.ConformsTo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Device.Name'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Device.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Device.UdiCarrier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Device.Version'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticReport.Media'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticReport.SupportingInfo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReference.Attester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReference.Content'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReference.Profile'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReference.RelatesTo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterHistory.Location'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.Admission'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.Location'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.Reason'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Endpoint.Payload'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EpisodeOfCare.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EpisodeOfCare.Reason'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EpisodeOfCare.StatusHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EvidenceReport.Characteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EvidenceReport.RelatesTo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EvidenceReport.Section'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EvidenceReport.Subject'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EvidenceReport.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EvidenceVariable.Category'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EvidenceVariable.Characteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EvidenceVariable.DefinitionByCombination'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EvidenceVariable.DefinitionByTypeAndValue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EvidenceVariable.TimeFromEvent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Evidence.AttributeEstimate'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Evidence.Certainty'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Evidence.ModelCharacteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Evidence.SampleSize'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Evidence.Statistic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Evidence.Variable'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Evidence.VariableDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExampleScenario.Actor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExampleScenario.Alternative'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExampleScenario.ContainedInstance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExampleScenario.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExampleScenario.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExampleScenario.Process'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExampleScenario.Step'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExampleScenario.Version'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Accident'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.AddItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Adjudication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.BenefitBalance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.BodySite'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.BodySite1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.CareTeam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Detail1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Financial'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Insurance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Payee'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Payment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Procedure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.ProcessNote'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.ReviewOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.SubDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.SubDetail1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.SupportingInfo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Total'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FamilyMemberHistory.Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FamilyMemberHistory.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FamilyMemberHistory.Procedure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GenomicStudy.Analysis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GenomicStudy.Device'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GenomicStudy.Input'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GenomicStudy.Output'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GenomicStudy.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Goal.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GraphDefinition.Compartment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GraphDefinition.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GraphDefinition.Node'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Group.Characteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Group.Member'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HealthcareService.Eligibility'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingSelection.ImageRegion2D'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingSelection.ImageRegion3D'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingSelection.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingSelection.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingStudy.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingStudy.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingStudy.Series'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImmunizationRecommendation.DateCriterion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImmunizationRecommendation.Recommendation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Immunization.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Immunization.ProgramEligibility'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Immunization.ProtocolApplied'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Immunization.Reaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Definition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.DependsOn'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Global'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Grouping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Manifest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Page'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Page1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Resource1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Template'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Ingredient.Manufacturer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Ingredient.ReferenceStrength'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Ingredient.Strength'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Ingredient.Substance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InsurancePlan.Benefit'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InsurancePlan.Benefit1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InsurancePlan.Cost'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InsurancePlan.Coverage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InsurancePlan.GeneralCost'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InsurancePlan.Limit'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InsurancePlan.Plan'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InsurancePlan.SpecificCost'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InventoryItem.Association'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InventoryItem.Characteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InventoryItem.Description'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InventoryItem.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InventoryItem.Name'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InventoryItem.ResponsibleOrganization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InventoryReport.InventoryListing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InventoryReport.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Invoice.LineItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Invoice.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Linkage.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('List.Entry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Location.Position'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ManufacturedItemDefinition.Component'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ManufacturedItemDefinition.Constituent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ManufacturedItemDefinition.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReport.Component'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReport.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReport.Population'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReport.Population1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReport.Stratifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReport.Stratum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Measure.Component'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Measure.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Measure.Population'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Measure.Stratifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Measure.SupplementalData'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Measure.Term'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationAdministration.Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationAdministration.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationDispense.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationDispense.Substitution'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.Cost'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.Definitional'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.DosingGuideline'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.DrugCharacteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.EnvironmentalSetting'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.IndicationGuideline'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.MaxDispense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.MedicineClassification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.MonitoringProgram'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.Monograph'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.Packaging'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.PatientCharacteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.Regulatory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.RelatedMedicationKnowledge'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.StorageGuideline'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledge.Substitution'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationRequest.DispenseRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationRequest.InitialFill'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationRequest.Substitution'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationStatement.Adherence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Medication.Batch'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Medication.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicinalProductDefinition.Characteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicinalProductDefinition.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicinalProductDefinition.CrossReference'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicinalProductDefinition.Name'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicinalProductDefinition.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicinalProductDefinition.Part'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicinalProductDefinition.Usage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageDefinition.AllowedResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageDefinition.Focus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageHeader.Destination'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageHeader.Response'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageHeader.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MolecularSequence.Edit'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MolecularSequence.Relative'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MolecularSequence.StartingSequence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NamingSystem.UniqueId'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionIntake.ConsumedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionIntake.IngredientLabel'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionIntake.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.Additive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.Administration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.EnteralFormula'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.Nutrient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.OralDiet'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.Schedule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.Schedule1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.Schedule2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.Supplement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.Texture'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionProduct.Characteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionProduct.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionProduct.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionProduct.Nutrient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationDefinition.Component'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationDefinition.QualifiedValue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Observation.Component'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Observation.ReferenceRange'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Observation.TriggeredBy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationDefinition.Binding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationDefinition.Overload'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationDefinition.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationDefinition.ReferencedFrom'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationOutcome.Issue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Organization.Qualification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PackagedProductDefinition.ContainedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PackagedProductDefinition.LegalStatusOfSupply'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PackagedProductDefinition.Packaging'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PackagedProductDefinition.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Parameters.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Patient.Communication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Patient.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Patient.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PaymentReconciliation.Allocation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PaymentReconciliation.ProcessNote'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Permission.Activity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Permission.Data'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Permission.Justification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Permission.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Permission.Rule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Person.Communication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Person.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.Actor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.DynamicValue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.Goal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.Input'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.Option'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.Output'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.RelatedAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Practitioner.Communication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Practitioner.Qualification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Procedure.FocalDevice'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Procedure.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Provenance.Agent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Provenance.Entity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireResponse.Answer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireResponse.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Questionnaire.AnswerOption'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Questionnaire.EnableWhen'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Questionnaire.Initial'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Questionnaire.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RegulatedAuthorization.Case'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RelatedPerson.Communication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestOrchestration.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestOrchestration.Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestOrchestration.DynamicValue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestOrchestration.Input'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestOrchestration.Output'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestOrchestration.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestOrchestration.RelatedAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Requirements.Statement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResearchStudy.AssociatedParty'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResearchStudy.ComparisonGroup'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResearchStudy.Label'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResearchStudy.Objective'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResearchStudy.OutcomeMeasure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResearchStudy.ProgressStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResearchStudy.Recruitment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResearchSubject.Progress'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RiskAssessment.Prediction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchParameter.Component'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ServiceRequest.OrderDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ServiceRequest.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ServiceRequest.PatientInstruction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SpecimenDefinition.Additive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SpecimenDefinition.Container'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SpecimenDefinition.Handling'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SpecimenDefinition.TypeTested'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Specimen.Collection'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Specimen.Container'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Specimen.Feature'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Specimen.Processing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureDefinition.Context'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureDefinition.Differential'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureDefinition.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureDefinition.Snapshot'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMap.Const'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMap.Dependent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMap.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMap.Input'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMap.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMap.Rule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMap.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMap.Structure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMap.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionStatus.NotificationEvent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionTopic.CanFilterBy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionTopic.EventTrigger'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionTopic.NotificationShape'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionTopic.QueryCriteria'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionTopic.ResourceTrigger'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Subscription.FilterBy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Subscription.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceDefinition.Characterization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceDefinition.Code'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceDefinition.Moiety'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceDefinition.MolecularWeight'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceDefinition.Name'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceDefinition.Official'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceDefinition.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceDefinition.Relationship'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceDefinition.Representation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceDefinition.SourceMaterial'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceDefinition.Structure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceNucleicAcid.Linkage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceNucleicAcid.Subunit'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceNucleicAcid.Sugar'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstancePolymer.DegreeOfPolymerisation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstancePolymer.MonomerSet'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstancePolymer.Repeat'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstancePolymer.RepeatUnit'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstancePolymer.StartingMaterial'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstancePolymer.StructuralRepresentation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceProtein.Subunit'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceReferenceInformation.Gene'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceReferenceInformation.GeneElement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceReferenceInformation.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceSourceMaterial.Author'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceSourceMaterial.FractionDescription'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceSourceMaterial.Hybrid'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceSourceMaterial.Organism'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceSourceMaterial.OrganismGeneral'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubstanceSourceMaterial.PartDescription'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Substance.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyDelivery.SuppliedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyRequest.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Task.Input'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Task.Output'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Task.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Task.Restriction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TerminologyCapabilities.Closure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TerminologyCapabilities.CodeSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TerminologyCapabilities.Expansion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TerminologyCapabilities.Filter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TerminologyCapabilities.Implementation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TerminologyCapabilities.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TerminologyCapabilities.Software'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TerminologyCapabilities.Translation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TerminologyCapabilities.ValidateCode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TerminologyCapabilities.Version'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestPlan.Assertion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestPlan.Dependency'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestPlan.Dependency1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestPlan.Script'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestPlan.TestCase'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestPlan.TestData'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestPlan.TestRun'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Action1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Action2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Assert'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Requirement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Setup'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Teardown'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Test'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Action1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Action2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Assert'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Capability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Destination'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Fixture'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Metadata'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Origin'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.RequestHeader'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Requirement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Scope'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Setup'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Teardown'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Test'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Variable'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Transport.Input'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Transport.Output'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Transport.Restriction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Compose'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Concept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Contains'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Designation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Expansion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Filter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Include'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Property1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Scope'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.SubProperty'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VerificationResult.Attestation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VerificationResult.PrimarySource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VerificationResult.Validator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VisionPrescription.LensSpecification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VisionPrescription.Prism'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('base64Binary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BindingStrength'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BiologicallyDerivedProductDispenseCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('boolean'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BundleType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('canonical'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatementKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanIntent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CareTeamStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CharacteristicCombination'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ChargeItemStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimProcessingCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalUseDefinitionType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('code'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSearchSupport'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystemContentMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystemHierarchyMeaning'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ColorCodesOrRGB'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CommonLanguages'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompartmentType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompositionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMapAttributeType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMapGroupUnmappedMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMapPropertyType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMapRelationship'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConcreteFHIRTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionalDeleteStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionalReadStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionPreconditionType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionQuestionnairePurpose'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConformanceExpectation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConsentDataMeaning'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConsentProvisionType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConsentState'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConstraintSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactPointSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactPointUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContractResourcePublicationStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContractResourceStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContributorType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CriteriaNotExistsBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DataType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Address'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Annotation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Attachment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Availability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Availability.AvailableTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Availability.NotAvailableTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BackboneType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Dosage.DoseAndRate'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Additional'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Base'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Binding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Constraint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Discriminator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Example'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Slicing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Type'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MarketingStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProductShelfLife'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Timing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Timing.Repeat'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeableConcept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeableReference'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Coding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactPoint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contributor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DataRequirement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DataRequirement.CodeFilter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DataRequirement.DateFilter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DataRequirement.Sort'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DataRequirement.ValueFilter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Expression'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExtendedContactDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Extension'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HumanName'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Identifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Meta'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MonetaryComponent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Money'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Narrative'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ParameterDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Period'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PrimitiveType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Quantity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Age'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Count'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Distance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Duration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Range'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Ratio'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RatioRange'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Reference'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RelatedArtifact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SampledData'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Signature'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TriggerDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UsageContext'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VirtualServiceDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('date'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('dateTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('decimal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DefinitionResourceTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DetectedIssueSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DetectedIssueStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceCorrectiveActionScope'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinitionRegulatoryIdentifierType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDispenseStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCalibrationState'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCalibrationType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricOperationalStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceNameType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceProductionIdentifierInUDI'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceUsageStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticReportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiscriminatorType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReferenceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EligibilityOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EligibilityRequestPurpose'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EligibilityResponsePurpose'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EnableWhenBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterLocationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EndpointStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EnrollmentOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EpisodeOfCareStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventCapabilityMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventResourceTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventTiming'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EvidenceVariableHandling'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExampleScenarioActorType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefitStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExtensionContextType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FamilyHistoryStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRDeviceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRPathTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRSubstanceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRVersion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FilterOperator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FinancialResourceStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FlagStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FormularyItemStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GenomicStudyStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GoalLifecycleStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GraphCompartmentRule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GraphCompartmentUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GroupMembershipBasis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GroupType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GuidanceResponseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GuidePageGeneration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HTTPVerb'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('id'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IdentifierUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IdentityAssuranceLevel'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingSelectionDGraphicType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingSelectionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingStudyStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImmunizationEvaluationStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImmunizationStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IngredientManufacturerRole'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('instant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('integer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('integer64'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InteractionTrigger'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InventoryCountType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InventoryItemStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InventoryReportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InvoiceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IssueSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IssueType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('JurisdictionValueSet'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Kind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LinkageType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LinkRelationTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LinkType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ListMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ListStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LocationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LocationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('markdown'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReportType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationAdministrationStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationDispenseStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledgeStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationRequestIntent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationrequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationStatementStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageheaderResponseRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageSignificanceCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NameUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NamingSystemIdentifierType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NamingSystemType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NarrativeStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NoteType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionProductStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationDataType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationRangeCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('oid'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationOutcomeCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationParameterScope'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationParameterUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OrientationType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ParticipantResourceTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ParticipationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PaymentOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PermissionRuleCombining'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PermissionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('positiveInt'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PropertyRepresentation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PropertyType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProvenanceEntityRole'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PublicationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuantityComparator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireAnswerConstraint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireItemDisabledDisplay'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireItemOperator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireItemType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireResponseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ReferenceHandlingPolicy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ReferenceVersionRules'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RelatedArtifactType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RelatedArtifactTypeExpanded'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RemittanceOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ReportRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestIntent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestPriority'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestResourceTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceVersionPolicy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResponseType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RestfulCapabilityMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SampledDataDataType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchComparator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchEntryMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchModifierCode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchParamType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchProcessingModeType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SequenceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SlicingRules'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SlotStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SortDirection'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SPDXLicense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SpecimenCombined'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SpecimenContainedPreference'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SpecimenStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StrandType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('string'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureDefinitionKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapGroupTypeMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapInputMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapModelMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapSourceListMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapTargetListMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapTransform'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubmitDataUpdateType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionNotificationType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionPayloadContent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyDeliveryStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyRequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SystemRestfulInteraction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TaskIntent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TaskStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReportActionResult'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReportParticipantType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReportResult'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScriptRequestMethodCode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('time'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TransportIntent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TransportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TriggeredBytype'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TriggerType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TypeDerivationRule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TypeRestfulInteraction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UDIEntryType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UnitsOfTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('unsignedInt'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('uri'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('url'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Use'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('uuid'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VerificationResultStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VersionIndependentResourceTypesAll'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VisionBase'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VisionEyes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRBinary', VersionTypeMap::getContainedTypeClassname('Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRBundle', VersionTypeMap::getContainedTypeClassname('Bundle'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DomainResource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAccount', VersionTypeMap::getContainedTypeClassname('Account'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdministrableProductDefinition', VersionTypeMap::getContainedTypeClassname('AdministrableProductDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdverseEvent', VersionTypeMap::getContainedTypeClassname('AdverseEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', VersionTypeMap::getContainedTypeClassname('AllergyIntolerance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointment', VersionTypeMap::getContainedTypeClassname('Appointment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', VersionTypeMap::getContainedTypeClassname('AppointmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRArtifactAssessment', VersionTypeMap::getContainedTypeClassname('ArtifactAssessment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAuditEvent', VersionTypeMap::getContainedTypeClassname('AuditEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBasic', VersionTypeMap::getContainedTypeClassname('Basic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct', VersionTypeMap::getContainedTypeClassname('BiologicallyDerivedProduct'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProductDispense', VersionTypeMap::getContainedTypeClassname('BiologicallyDerivedProductDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBodyStructure', VersionTypeMap::getContainedTypeClassname('BodyStructure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CanonicalResource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRActorDefinition', VersionTypeMap::getContainedTypeClassname('ActorDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCapabilityStatement', VersionTypeMap::getContainedTypeClassname('CapabilityStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCompartmentDefinition', VersionTypeMap::getContainedTypeClassname('CompartmentDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRExampleScenario', VersionTypeMap::getContainedTypeClassname('ExampleScenario'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRGraphDefinition', VersionTypeMap::getContainedTypeClassname('GraphDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRImplementationGuide', VersionTypeMap::getContainedTypeClassname('ImplementationGuide'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMessageDefinition', VersionTypeMap::getContainedTypeClassname('MessageDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MetadataResource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRActivityDefinition', VersionTypeMap::getContainedTypeClassname('ActivityDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRChargeItemDefinition', VersionTypeMap::getContainedTypeClassname('ChargeItemDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCitation', VersionTypeMap::getContainedTypeClassname('Citation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCodeSystem', VersionTypeMap::getContainedTypeClassname('CodeSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConceptMap', VersionTypeMap::getContainedTypeClassname('ConceptMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConditionDefinition', VersionTypeMap::getContainedTypeClassname('ConditionDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREventDefinition', VersionTypeMap::getContainedTypeClassname('EventDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidence', VersionTypeMap::getContainedTypeClassname('Evidence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceReport', VersionTypeMap::getContainedTypeClassname('EvidenceReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceVariable', VersionTypeMap::getContainedTypeClassname('EvidenceVariable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRLibrary', VersionTypeMap::getContainedTypeClassname('Library'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMeasure', VersionTypeMap::getContainedTypeClassname('Measure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMedicationKnowledge', VersionTypeMap::getContainedTypeClassname('MedicationKnowledge'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRNamingSystem', VersionTypeMap::getContainedTypeClassname('NamingSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRObservationDefinition', VersionTypeMap::getContainedTypeClassname('ObservationDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRPlanDefinition', VersionTypeMap::getContainedTypeClassname('PlanDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRQuestionnaire', VersionTypeMap::getContainedTypeClassname('Questionnaire'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRSpecimenDefinition', VersionTypeMap::getContainedTypeClassname('SpecimenDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRValueSet', VersionTypeMap::getContainedTypeClassname('ValueSet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIROperationDefinition', VersionTypeMap::getContainedTypeClassname('OperationDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRRequirements', VersionTypeMap::getContainedTypeClassname('Requirements'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSearchParameter', VersionTypeMap::getContainedTypeClassname('SearchParameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureDefinition', VersionTypeMap::getContainedTypeClassname('StructureDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureMap', VersionTypeMap::getContainedTypeClassname('StructureMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSubscriptionTopic', VersionTypeMap::getContainedTypeClassname('SubscriptionTopic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTerminologyCapabilities', VersionTypeMap::getContainedTypeClassname('TerminologyCapabilities'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestPlan', VersionTypeMap::getContainedTypeClassname('TestPlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestScript', VersionTypeMap::getContainedTypeClassname('TestScript'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCarePlan', VersionTypeMap::getContainedTypeClassname('CarePlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCareTeam', VersionTypeMap::getContainedTypeClassname('CareTeam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRChargeItem', VersionTypeMap::getContainedTypeClassname('ChargeItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaim', VersionTypeMap::getContainedTypeClassname('Claim'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaimResponse', VersionTypeMap::getContainedTypeClassname('ClaimResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', VersionTypeMap::getContainedTypeClassname('ClinicalImpression'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalUseDefinition', VersionTypeMap::getContainedTypeClassname('ClinicalUseDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunication', VersionTypeMap::getContainedTypeClassname('Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', VersionTypeMap::getContainedTypeClassname('CommunicationRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRComposition', VersionTypeMap::getContainedTypeClassname('Composition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCondition', VersionTypeMap::getContainedTypeClassname('Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRConsent', VersionTypeMap::getContainedTypeClassname('Consent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRContract', VersionTypeMap::getContainedTypeClassname('Contract'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverage', VersionTypeMap::getContainedTypeClassname('Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest', VersionTypeMap::getContainedTypeClassname('CoverageEligibilityRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse', VersionTypeMap::getContainedTypeClassname('CoverageEligibilityResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', VersionTypeMap::getContainedTypeClassname('DetectedIssue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDevice', VersionTypeMap::getContainedTypeClassname('Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceAssociation', VersionTypeMap::getContainedTypeClassname('DeviceAssociation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition', VersionTypeMap::getContainedTypeClassname('DeviceDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDispense', VersionTypeMap::getContainedTypeClassname('DeviceDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', VersionTypeMap::getContainedTypeClassname('DeviceMetric'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceRequest', VersionTypeMap::getContainedTypeClassname('DeviceRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceUsage', VersionTypeMap::getContainedTypeClassname('DeviceUsage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', VersionTypeMap::getContainedTypeClassname('DiagnosticReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDocumentReference', VersionTypeMap::getContainedTypeClassname('DocumentReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounter', VersionTypeMap::getContainedTypeClassname('Encounter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounterHistory', VersionTypeMap::getContainedTypeClassname('EncounterHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREndpoint', VersionTypeMap::getContainedTypeClassname('Endpoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', VersionTypeMap::getContainedTypeClassname('EnrollmentRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', VersionTypeMap::getContainedTypeClassname('EnrollmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', VersionTypeMap::getContainedTypeClassname('EpisodeOfCare'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', VersionTypeMap::getContainedTypeClassname('FamilyMemberHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFlag', VersionTypeMap::getContainedTypeClassname('Flag'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFormularyItem', VersionTypeMap::getContainedTypeClassname('FormularyItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGenomicStudy', VersionTypeMap::getContainedTypeClassname('GenomicStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGoal', VersionTypeMap::getContainedTypeClassname('Goal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGroup', VersionTypeMap::getContainedTypeClassname('Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse', VersionTypeMap::getContainedTypeClassname('GuidanceResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRHealthcareService', VersionTypeMap::getContainedTypeClassname('HealthcareService'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingSelection', VersionTypeMap::getContainedTypeClassname('ImagingSelection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingStudy', VersionTypeMap::getContainedTypeClassname('ImagingStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunization', VersionTypeMap::getContainedTypeClassname('Immunization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation', VersionTypeMap::getContainedTypeClassname('ImmunizationEvaluation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', VersionTypeMap::getContainedTypeClassname('ImmunizationRecommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRIngredient', VersionTypeMap::getContainedTypeClassname('Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInsurancePlan', VersionTypeMap::getContainedTypeClassname('InsurancePlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryItem', VersionTypeMap::getContainedTypeClassname('InventoryItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryReport', VersionTypeMap::getContainedTypeClassname('InventoryReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInvoice', VersionTypeMap::getContainedTypeClassname('Invoice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLinkage', VersionTypeMap::getContainedTypeClassname('Linkage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRList', VersionTypeMap::getContainedTypeClassname('List'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLocation', VersionTypeMap::getContainedTypeClassname('Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRManufacturedItemDefinition', VersionTypeMap::getContainedTypeClassname('ManufacturedItemDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMeasureReport', VersionTypeMap::getContainedTypeClassname('MeasureReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedication', VersionTypeMap::getContainedTypeClassname('Medication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', VersionTypeMap::getContainedTypeClassname('MedicationAdministration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', VersionTypeMap::getContainedTypeClassname('MedicationDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationRequest', VersionTypeMap::getContainedTypeClassname('MedicationRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', VersionTypeMap::getContainedTypeClassname('MedicationStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicinalProductDefinition', VersionTypeMap::getContainedTypeClassname('MedicinalProductDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMessageHeader', VersionTypeMap::getContainedTypeClassname('MessageHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMolecularSequence', VersionTypeMap::getContainedTypeClassname('MolecularSequence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionIntake', VersionTypeMap::getContainedTypeClassname('NutritionIntake'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', VersionTypeMap::getContainedTypeClassname('NutritionOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionProduct', VersionTypeMap::getContainedTypeClassname('NutritionProduct'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRObservation', VersionTypeMap::getContainedTypeClassname('Observation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROperationOutcome', VersionTypeMap::getContainedTypeClassname('OperationOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganization', VersionTypeMap::getContainedTypeClassname('Organization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation', VersionTypeMap::getContainedTypeClassname('OrganizationAffiliation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPackagedProductDefinition', VersionTypeMap::getContainedTypeClassname('PackagedProductDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPatient', VersionTypeMap::getContainedTypeClassname('Patient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', VersionTypeMap::getContainedTypeClassname('PaymentNotice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', VersionTypeMap::getContainedTypeClassname('PaymentReconciliation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPermission', VersionTypeMap::getContainedTypeClassname('Permission'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPerson', VersionTypeMap::getContainedTypeClassname('Person'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitioner', VersionTypeMap::getContainedTypeClassname('Practitioner'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitionerRole', VersionTypeMap::getContainedTypeClassname('PractitionerRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProcedure', VersionTypeMap::getContainedTypeClassname('Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProvenance', VersionTypeMap::getContainedTypeClassname('Provenance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', VersionTypeMap::getContainedTypeClassname('QuestionnaireResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRegulatedAuthorization', VersionTypeMap::getContainedTypeClassname('RegulatedAuthorization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', VersionTypeMap::getContainedTypeClassname('RelatedPerson'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRequestOrchestration', VersionTypeMap::getContainedTypeClassname('RequestOrchestration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchStudy', VersionTypeMap::getContainedTypeClassname('ResearchStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchSubject', VersionTypeMap::getContainedTypeClassname('ResearchSubject'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', VersionTypeMap::getContainedTypeClassname('RiskAssessment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSchedule', VersionTypeMap::getContainedTypeClassname('Schedule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRServiceRequest', VersionTypeMap::getContainedTypeClassname('ServiceRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSlot', VersionTypeMap::getContainedTypeClassname('Slot'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSpecimen', VersionTypeMap::getContainedTypeClassname('Specimen'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscription', VersionTypeMap::getContainedTypeClassname('Subscription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscriptionStatus', VersionTypeMap::getContainedTypeClassname('SubscriptionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstance', VersionTypeMap::getContainedTypeClassname('Substance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceDefinition', VersionTypeMap::getContainedTypeClassname('SubstanceDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceNucleicAcid', VersionTypeMap::getContainedTypeClassname('SubstanceNucleicAcid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstancePolymer', VersionTypeMap::getContainedTypeClassname('SubstancePolymer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceProtein', VersionTypeMap::getContainedTypeClassname('SubstanceProtein'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceReferenceInformation', VersionTypeMap::getContainedTypeClassname('SubstanceReferenceInformation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceSourceMaterial', VersionTypeMap::getContainedTypeClassname('SubstanceSourceMaterial'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', VersionTypeMap::getContainedTypeClassname('SupplyDelivery'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', VersionTypeMap::getContainedTypeClassname('SupplyRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTask', VersionTypeMap::getContainedTypeClassname('Task'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTestReport', VersionTypeMap::getContainedTypeClassname('TestReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTransport', VersionTypeMap::getContainedTypeClassname('Transport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVerificationResult', VersionTypeMap::getContainedTypeClassname('VerificationResult'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', VersionTypeMap::getContainedTypeClassname('VisionPrescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRParameters', VersionTypeMap::getContainedTypeClassname('Parameters'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('boolean-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('canonical-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('code-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AccountStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionCardinalityBehaviorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionConditionKindEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionGroupingBehaviorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionParticipantTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionPrecheckBehaviorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionRelationshipTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionRequiredBehaviorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionSelectionBehaviorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AddressTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AddressUseEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdministrativeGenderEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseEventActualityEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseEventStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AgeUnitsEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AggregationModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceCategoryEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceCriticalityEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceSeverityEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllResourceTypesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AppointmentResponseStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AppointmentStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ArtifactAssessmentDispositionEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ArtifactAssessmentInformationTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ArtifactAssessmentWorkflowStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionDirectionTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionManualCompletionTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionOperatorTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionResponseTypesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEventActionEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEventSeverityEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BindingStrengthEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BiologicallyDerivedProductDispenseCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BundleTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatementKindEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanIntentEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CareTeamStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CharacteristicCombinationEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ChargeItemStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimProcessingCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalUseDefinitionTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSearchSupportEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystemContentModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystemHierarchyMeaningEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CommonLanguagesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompartmentTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompositionStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMapAttributeTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMapGroupUnmappedModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMapPropertyTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMapRelationshipEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConcreteFHIRTypesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionalDeleteStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionalReadStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionPreconditionTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionQuestionnairePurposeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConformanceExpectationEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConsentDataMeaningEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConsentProvisionTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConsentStateEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConstraintSeverityEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactPointSystemEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactPointUseEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContractResourcePublicationStatusCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContractResourceStatusCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContributorTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CriteriaNotExistsBehaviorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DefinitionResourceTypesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DetectedIssueSeverityEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DetectedIssueStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceCorrectiveActionScopeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDefinitionRegulatoryIdentifierTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceDispenseStatusCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCalibrationStateEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCalibrationTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCategoryEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricOperationalStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceNameTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceProductionIdentifierInUDIEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceUsageStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticReportStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiscriminatorTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReferenceStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EligibilityOutcomeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EligibilityRequestPurposeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EligibilityResponsePurposeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EnableWhenBehaviorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterLocationStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EndpointStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EnrollmentOutcomeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EpisodeOfCareStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventCapabilityModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventResourceTypesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventTimingEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EvidenceVariableHandlingEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExampleScenarioActorTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefitStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExtensionContextTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FamilyHistoryStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRDeviceStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRPathTypesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRSubstanceStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRTypesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRVersionEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FilterOperatorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FinancialResourceStatusCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FlagStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FormularyItemStatusCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GenomicStudyStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GoalLifecycleStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GraphCompartmentRuleEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GraphCompartmentUseEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GroupMembershipBasisEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GroupTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GuidanceResponseStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GuidePageGenerationEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HTTPVerbEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IdentifierUseEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IdentityAssuranceLevelEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingSelectionDGraphicTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingSelectionStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingStudyStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImmunizationEvaluationStatusCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImmunizationStatusCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IngredientManufacturerRoleEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InteractionTriggerEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InventoryCountTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InventoryItemStatusCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InventoryReportStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InvoiceStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IssueSeverityEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IssueTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('JurisdictionValueSetEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('KindEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LinkageTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LinkRelationTypesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LinkTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ListModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ListStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LocationModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LocationStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReportStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReportTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationAdministrationStatusCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationDispenseStatusCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKnowledgeStatusCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationRequestIntentEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationrequestStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationStatementStatusCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationStatusCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageheaderResponseRequestEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageSignificanceCategoryEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NameUseEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NamingSystemIdentifierTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NamingSystemTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NarrativeStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NoteTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionProductStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationDataTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationRangeCategoryEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationKindEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationOutcomeCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationParameterScopeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationParameterUseEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OrientationTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ParticipantResourceTypesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ParticipationStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PaymentOutcomeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PermissionRuleCombiningEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PermissionStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PropertyRepresentationEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PropertyTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProvenanceEntityRoleEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PublicationStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuantityComparatorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireAnswerConstraintEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireItemDisabledDisplayEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireItemOperatorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireItemTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireResponseStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ReferenceHandlingPolicyEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ReferenceVersionRulesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RelatedArtifactTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RelatedArtifactTypeExpandedEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RemittanceOutcomeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ReportRelationshipTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestIntentEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestPriorityEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestResourceTypesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceVersionPolicyEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResponseTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RestfulCapabilityModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchComparatorEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchEntryModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchModifierCodeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchParamTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchProcessingModeTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SequenceTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SlicingRulesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SlotStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SortDirectionEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SPDXLicenseEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SpecimenCombinedEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SpecimenContainedPreferenceEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SpecimenStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StrandTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureDefinitionKindEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapGroupTypeModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapInputModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapModelModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapSourceListModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapTargetListModeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapTransformEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubmitDataUpdateTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionNotificationTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionPayloadContentEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionStatusCodesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyDeliveryStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyRequestStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SystemRestfulInteractionEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TaskIntentEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TaskStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReportActionResultEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReportParticipantTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReportResultEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReportStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScriptRequestMethodCodeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TransportIntentEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TransportStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TriggeredBytypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TriggerTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TypeDerivationRuleEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TypeRestfulInteractionEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UDIEntryTypeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UnitsOfTimeEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UseEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VerificationResultStatusEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VersionIndependentResourceTypesAllEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VisionBaseEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VisionEyesEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('date-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('dateTime-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('decimal-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('id-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('instant-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('integer64-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('integer-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('markdown-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('oid-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('positiveInt-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceContainer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SampledDataDataType-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('string-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ColorCodesOrRGBEnum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('time-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('unsignedInt-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('uri-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('url-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('uuid-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('XHTML'));
    }

    public function testIsContainableResourceWithClassname()
    {
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase64BinaryPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase64BinaryPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase64BinaryPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase64BinaryPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAccountStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAccountStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionCardinalityBehavior'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionCardinalityBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionCardinalityBehavior'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionCardinalityBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionConditionKind'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionConditionKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionConditionKind'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionConditionKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionGroupingBehavior'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionGroupingBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionGroupingBehavior'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionGroupingBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionParticipantType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionParticipantType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionPrecheckBehavior'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionPrecheckBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionPrecheckBehavior'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionPrecheckBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionRelationshipType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionRelationshipType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionRequiredBehavior'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionRequiredBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionRequiredBehavior'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionRequiredBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionSelectionBehavior'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionSelectionBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionSelectionBehavior'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionSelectionBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAddressType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAddressType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAddressType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAddressType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAddressUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAddressUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdministrativeGender'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdministrativeGender'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdverseEventActuality'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdverseEventActuality'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdverseEventActuality'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdverseEventActuality'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdverseEventStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdverseEventStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdverseEventStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdverseEventStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAgeUnits'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAgeUnits'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAgeUnits'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAgeUnits'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAggregationMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAggregationMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCategory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCategory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCriticality'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCriticality'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceSeverity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceSeverity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllResourceTypes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllResourceTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllResourceTypes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllResourceTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAppointmentResponseStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAppointmentResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAppointmentResponseStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAppointmentResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAppointmentStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAppointmentStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentDisposition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentDisposition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentDisposition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentDisposition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentInformationType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentInformationType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentInformationType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentInformationType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentWorkflowStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentWorkflowStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentWorkflowStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentWorkflowStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionDirectionType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionDirectionType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionManualCompletionType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionManualCompletionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionManualCompletionType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionManualCompletionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionOperatorType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionOperatorType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionResponseTypes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionResponseTypes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAuditEventAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAuditEventAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAuditEventSeverity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAuditEventSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAuditEventSeverity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAuditEventSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountBalance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountBalance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountBalance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountBalance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountDiagnosis'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountDiagnosis'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountProcedure'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountProcedure'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountRelatedAccount'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountRelatedAccount'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountRelatedAccount'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountRelatedAccount'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionProperty'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionProperty'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionRouteOfAdministration'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionRouteOfAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionRouteOfAdministration'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionRouteOfAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionTargetSpecies'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionTargetSpecies'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionTargetSpecies'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionTargetSpecies'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionWithdrawalPeriod'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionWithdrawalPeriod'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionWithdrawalPeriod'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionWithdrawalPeriod'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventContributingFactor'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventContributingFactor'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventContributingFactor'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventContributingFactor'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventMitigatingAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventMitigatingAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventMitigatingAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventMitigatingAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventPreventiveAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventPreventiveAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventPreventiveAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventPreventiveAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSupportingInfo'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSupportingInfo'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSupportingInfo'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSupportingInfo'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentMonthlyTemplate'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentMonthlyTemplate'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentMonthlyTemplate'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentMonthlyTemplate'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentRecurrenceTemplate'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentRecurrenceTemplate'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentRecurrenceTemplate'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentRecurrenceTemplate'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentWeeklyTemplate'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentWeeklyTemplate'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentWeeklyTemplate'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentWeeklyTemplate'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentYearlyTemplate'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentYearlyTemplate'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentYearlyTemplate'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentYearlyTemplate'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRArtifactAssessment\FHIRArtifactAssessmentContent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRArtifactAssessment\FHIRArtifactAssessmentContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRArtifactAssessment\FHIRArtifactAssessmentContent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRArtifactAssessment\FHIRArtifactAssessmentContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventOutcome'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventOutcome'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProductDispense\FHIRBiologicallyDerivedProductDispensePerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProductDispense\FHIRBiologicallyDerivedProductDispensePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProductDispense\FHIRBiologicallyDerivedProductDispensePerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProductDispense\FHIRBiologicallyDerivedProductDispensePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProperty'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProperty'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureBodyLandmarkOrientation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureBodyLandmarkOrientation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureBodyLandmarkOrientation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureBodyLandmarkOrientation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureDistanceFromLandmark'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureDistanceFromLandmark'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureDistanceFromLandmark'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureDistanceFromLandmark'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureIncludedStructure'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureIncludedStructure'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureIncludedStructure'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureIncludedStructure'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAbstract'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAbstract'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAbstract'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAbstract'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationCitedArtifact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationCitedArtifact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationCitedArtifact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationCitedArtifact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributionInstance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributionInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributionInstance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributionInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributorship'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributorship'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributorship'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributorship'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationEntry'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationEntry'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationEntry'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationEntry'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPart'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPart'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPart'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPart'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublicationForm'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublicationForm'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublicationForm'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublicationForm'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublishedIn'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublishedIn'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublishedIn'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublishedIn'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationTitle'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationTitle'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationTitle'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationTitle'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationVersion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationVersion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationVersion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationVersion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWebLocation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWebLocation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWebLocation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWebLocation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseBodySite'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseBodySite'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseBodySite'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseBodySite'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseReviewOutcome'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseReviewOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseReviewOutcome'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseReviewOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimBodySite'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimBodySite'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimBodySite'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimBodySite'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionContraindication'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionContraindication'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionContraindication'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionContraindication'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionIndication'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionIndication'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionIndication'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionIndication'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteractant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteractant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteractant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteractant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteraction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteraction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionOtherTherapy'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionOtherTherapy'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionOtherTherapy'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionOtherTherapy'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionUndesirableEffect'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionUndesirableEffect'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionUndesirableEffect'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionUndesirableEffect'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionWarning'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionWarning'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionWarning'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionWarning'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapAdditionalAttribute'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapAdditionalAttribute'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapAdditionalAttribute'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapAdditionalAttribute'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionMedication'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionMedication'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionMedication'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionMedication'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionObservation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionObservation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionObservation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionObservation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPlan'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPlan'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPlan'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPlan'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPrecondition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPrecondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPrecondition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPrecondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionQuestionnaire'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionQuestionnaire'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionQuestionnaire'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionQuestionnaire'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicyBasis'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicyBasis'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicyBasis'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicyBasis'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoveragePaymentBy'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoveragePaymentBy'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoveragePaymentBy'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoveragePaymentBy'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceAssociation\FHIRDeviceAssociationOperation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceAssociation\FHIRDeviceAssociationOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceAssociation\FHIRDeviceAssociationOperation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceAssociation\FHIRDeviceAssociationOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionChargeItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionChargeItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionChargeItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionChargeItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionClassification'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionClassification'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionClassification'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionClassification'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionConformsTo'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionConformsTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionConformsTo'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionConformsTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCorrectiveAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCorrectiveAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCorrectiveAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCorrectiveAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDistributor'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDistributor'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDistributor'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDistributor'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionGuideline'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionGuideline'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionGuideline'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionGuideline'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionHasPart'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionHasPart'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionHasPart'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionHasPart'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionLink'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionLink'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMarketDistribution'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMarketDistribution'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMarketDistribution'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMarketDistribution'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionPackaging'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionPackaging'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionPackaging'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionPackaging'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionRegulatoryIdentifier'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionRegulatoryIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionRegulatoryIdentifier'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionRegulatoryIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionVersion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionVersion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionVersion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionVersion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDispense\FHIRDeviceDispensePerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDispense\FHIRDeviceDispensePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDispense\FHIRDeviceDispensePerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDispense\FHIRDeviceDispensePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceUsage\FHIRDeviceUsageAdherence'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceUsage\FHIRDeviceUsageAdherence'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceUsage\FHIRDeviceUsageAdherence'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceUsage\FHIRDeviceUsageAdherence'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceConformsTo'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceConformsTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceConformsTo'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceConformsTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceName'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceName'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceName'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceName'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportSupportingInfo'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportSupportingInfo'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportSupportingInfo'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportSupportingInfo'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceAttester'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceAttester'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceAttester'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceAttester'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceProfile'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceProfile'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceProfile'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceProfile'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounterHistory\FHIREncounterHistoryLocation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounterHistory\FHIREncounterHistoryLocation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounterHistory\FHIREncounterHistoryLocation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounterHistory\FHIREncounterHistoryLocation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAdmission'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAdmission'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAdmission'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAdmission'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterReason'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterReason'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterReason'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterReason'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREndpoint\FHIREndpointPayload'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREndpoint\FHIREndpointPayload'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREndpoint\FHIREndpointPayload'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREndpoint\FHIREndpointPayload'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareReason'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareReason'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareReason'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareReason'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportCharacteristic'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportCharacteristic'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportRelatesTo'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportRelatesTo'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSection'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSection'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSection'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSection'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSubject'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSubject'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSubject'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSubject'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportTarget'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportTarget'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCategory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCategory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByCombination'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByCombination'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByCombination'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByCombination'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByTypeAndValue'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByTypeAndValue'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByTypeAndValue'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByTypeAndValue'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableTimeFromEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableTimeFromEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableTimeFromEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableTimeFromEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceAttributeEstimate'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceAttributeEstimate'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceAttributeEstimate'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceAttributeEstimate'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceCertainty'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceCertainty'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceCertainty'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceCertainty'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceModelCharacteristic'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceModelCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceModelCharacteristic'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceModelCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceSampleSize'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceSampleSize'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceSampleSize'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceSampleSize'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceStatistic'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceStatistic'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceStatistic'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceStatistic'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariable'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariable'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariable'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariable'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariableDefinition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariableDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariableDefinition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariableDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitReviewOutcome'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitReviewOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitReviewOutcome'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitReviewOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryProcedure'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryProcedure'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyAnalysis'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyAnalysis'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyAnalysis'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyAnalysis'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyDevice'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyDevice'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyDevice'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyDevice'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyInput'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyInput'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyInput'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyInput'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyOutput'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyOutput'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyOutput'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyOutput'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyPerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyPerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionNode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionNode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionNode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionNode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion2D'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion2D'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion2D'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion2D'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion3D'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion3D'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion3D'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion3D'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionInstance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionInstance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionPerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionPerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProgramEligibility'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProgramEligibility'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProgramEligibility'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProgramEligibility'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientManufacturer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientManufacturer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientManufacturer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientManufacturer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientReferenceStrength'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientReferenceStrength'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientReferenceStrength'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientReferenceStrength'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientStrength'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientStrength'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientStrength'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientStrength'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientSubstance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientSubstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientSubstance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientSubstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemAssociation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemAssociation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemAssociation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemAssociation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemCharacteristic'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemCharacteristic'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemDescription'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemDescription'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemDescription'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemDescription'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemInstance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemInstance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemName'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemName'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemName'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemName'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemResponsibleOrganization'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemResponsibleOrganization'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemResponsibleOrganization'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemResponsibleOrganization'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportInventoryListing'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportInventoryListing'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportInventoryListing'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportInventoryListing'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionComponent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionComponent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionConstituent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionConstituent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionConstituent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionConstituent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionProperty'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionProperty'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureTerm'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureTerm'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureTerm'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureTerm'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDefinitional'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDefinitional'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDefinitional'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDefinitional'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosingGuideline'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosingGuideline'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosingGuideline'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosingGuideline'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeEnvironmentalSetting'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeEnvironmentalSetting'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeEnvironmentalSetting'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeEnvironmentalSetting'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIndicationGuideline'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIndicationGuideline'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIndicationGuideline'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIndicationGuideline'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristic'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristic'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeStorageGuideline'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeStorageGuideline'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeStorageGuideline'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeStorageGuideline'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementAdherence'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementAdherence'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementAdherence'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementAdherence'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCharacteristic'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCharacteristic'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCrossReference'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCrossReference'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCrossReference'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCrossReference'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionName'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionName'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionName'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionName'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionOperation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionOperation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionPart'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionPart'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionPart'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionPart'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionUsage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionUsage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionUsage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionUsage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceEdit'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceEdit'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceEdit'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceEdit'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRelative'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRelative'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRelative'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRelative'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStartingSequence'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStartingSequence'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStartingSequence'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStartingSequence'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeConsumedItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeConsumedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeConsumedItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeConsumedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeIngredientLabel'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeIngredientLabel'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeIngredientLabel'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeIngredientLabel'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakePerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakePerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdditive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdditive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdditive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdditive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule2'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule2'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule2'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule2'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductCharacteristic'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductCharacteristic'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductIngredient'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductIngredient'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductInstance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductInstance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductNutrient'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductNutrient'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductNutrient'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductNutrient'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionComponent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionComponent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedValue'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedValue'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedValue'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedValue'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationTriggeredBy'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationTriggeredBy'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationTriggeredBy'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationTriggeredBy'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationQualification'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationQualification'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationQualification'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationQualification'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionContainedItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionContainedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionContainedItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionContainedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionLegalStatusOfSupply'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionLegalStatusOfSupply'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionLegalStatusOfSupply'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionLegalStatusOfSupply'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionPackaging'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionPackaging'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionPackaging'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionPackaging'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionProperty'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionProperty'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationAllocation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationAllocation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationAllocation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationAllocation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionActivity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionActivity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionActivity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionActivity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionData'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionData'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionData'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionData'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionJustification'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionJustification'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionJustification'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionJustification'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionRule'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionRule'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonCommunication'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonCommunication'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionActor'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionActor'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionActor'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionActor'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionInput'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionInput'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionInput'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionInput'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOption'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOption'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOption'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOption'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOutput'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOutput'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOutput'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOutput'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerCommunication'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerCommunication'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRegulatedAuthorization\FHIRRegulatedAuthorizationCase'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRegulatedAuthorization\FHIRRegulatedAuthorizationCase'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRegulatedAuthorization\FHIRRegulatedAuthorizationCase'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRegulatedAuthorization\FHIRRegulatedAuthorizationCase'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationCondition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationCondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationCondition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationCondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationDynamicValue'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationDynamicValue'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationInput'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationInput'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationInput'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationInput'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationOutput'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationOutput'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationOutput'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationOutput'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationRelatedAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationRelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationRelatedAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationRelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequirements\FHIRRequirementsStatement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequirements\FHIRRequirementsStatement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequirements\FHIRRequirementsStatement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequirements\FHIRRequirementsStatement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyAssociatedParty'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyAssociatedParty'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyAssociatedParty'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyAssociatedParty'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyComparisonGroup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyComparisonGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyComparisonGroup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyComparisonGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyLabel'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyLabel'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyLabel'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyLabel'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyOutcomeMeasure'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyOutcomeMeasure'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyOutcomeMeasure'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyOutcomeMeasure'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyProgressStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyProgressStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyProgressStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyProgressStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyRecruitment'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyRecruitment'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyRecruitment'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyRecruitment'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchSubject\FHIRResearchSubjectProgress'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchSubject\FHIRResearchSubjectProgress'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchSubject\FHIRResearchSubjectProgress'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchSubject\FHIRResearchSubjectProgress'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestOrderDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestOrderDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestOrderDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestOrderDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestPatientInstruction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestPatientInstruction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestPatientInstruction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestPatientInstruction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenFeature'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenFeature'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenFeature'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenFeature'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapConst'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapConst'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapConst'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapConst'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionStatus\FHIRSubscriptionStatusNotificationEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionStatus\FHIRSubscriptionStatusNotificationEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionStatus\FHIRSubscriptionStatusNotificationEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionStatus\FHIRSubscriptionStatusNotificationEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicCanFilterBy'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicCanFilterBy'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicCanFilterBy'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicCanFilterBy'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicEventTrigger'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicEventTrigger'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicEventTrigger'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicEventTrigger'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicNotificationShape'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicNotificationShape'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicNotificationShape'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicNotificationShape'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicQueryCriteria'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicQueryCriteria'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicQueryCriteria'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicQueryCriteria'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicResourceTrigger'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicResourceTrigger'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicResourceTrigger'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicResourceTrigger'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionFilterBy'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionFilterBy'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionFilterBy'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionFilterBy'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCharacterization'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCharacterization'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCharacterization'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCharacterization'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMoiety'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMoiety'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMoiety'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMoiety'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMolecularWeight'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMolecularWeight'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMolecularWeight'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMolecularWeight'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionName'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionName'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionName'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionName'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionOfficial'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionOfficial'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionOfficial'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionOfficial'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionProperty'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionProperty'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRelationship'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRelationship'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRelationship'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRelationship'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRepresentation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRepresentation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionSourceMaterial'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionSourceMaterial'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionSourceMaterial'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionSourceMaterial'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionStructure'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionStructure'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionStructure'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionStructure'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidLinkage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidLinkage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidLinkage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidLinkage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSubunit'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSubunit'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSubunit'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSubunit'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSugar'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSugar'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSugar'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSugar'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerDegreeOfPolymerisation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerDegreeOfPolymerisation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerDegreeOfPolymerisation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerDegreeOfPolymerisation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerMonomerSet'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerMonomerSet'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerMonomerSet'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerMonomerSet'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeat'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeat'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeatUnit'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeatUnit'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeatUnit'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeatUnit'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStartingMaterial'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStartingMaterial'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStartingMaterial'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStartingMaterial'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStructuralRepresentation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStructuralRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStructuralRepresentation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStructuralRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceProtein\FHIRSubstanceProteinSubunit'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceProtein\FHIRSubstanceProteinSubunit'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceProtein\FHIRSubstanceProteinSubunit'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceProtein\FHIRSubstanceProteinSubunit'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGene'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGene'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGene'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGene'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGeneElement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGeneElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGeneElement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGeneElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationTarget'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationTarget'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialAuthor'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialAuthor'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialAuthor'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialAuthor'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialFractionDescription'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialFractionDescription'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialFractionDescription'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialFractionDescription'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialHybrid'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialHybrid'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialHybrid'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialHybrid'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganism'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganism'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganism'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganism'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganismGeneral'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganismGeneral'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganismGeneral'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganismGeneral'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialPartDescription'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialPartDescription'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialPartDescription'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialPartDescription'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskPerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskPerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanAssertion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanAssertion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanAssertion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanAssertion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanScript'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanScript'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanScript'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanScript'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestCase'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestCase'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestCase'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestCase'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestData'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestData'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestData'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestData'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestRun'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestRun'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestRun'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestRun'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportRequirement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportRequirement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportRequirement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportRequirement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequirement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequirement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequirement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequirement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptScope'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptScope'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptScope'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptScope'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportInput'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportInput'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportInput'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportInput'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportOutput'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportOutput'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportOutput'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportOutput'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportRestriction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportRestriction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportRestriction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportRestriction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetScope'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetScope'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetScope'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetScope'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetSubProperty'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetSubProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetSubProperty'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetSubProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBase64Binary'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBase64Binary'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBindingStrength'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBindingStrength'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBiologicallyDerivedProductDispenseCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBiologicallyDerivedProductDispenseCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBiologicallyDerivedProductDispenseCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBiologicallyDerivedProductDispenseCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBoolean'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBoolean'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBoolean'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBoolean'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBundleType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBundleType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBundleType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBundleType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCanonical'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCanonical'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCanonical'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCanonical'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCapabilityStatementKind'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCapabilityStatementKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCapabilityStatementKind'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCapabilityStatementKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCarePlanIntent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCarePlanIntent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCarePlanIntent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCarePlanIntent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCareTeamStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCareTeamStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCareTeamStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCareTeamStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCharacteristicCombination'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCharacteristicCombination'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCharacteristicCombination'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCharacteristicCombination'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRChargeItemStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRChargeItemStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRChargeItemStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRChargeItemStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRClaimProcessingCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRClaimProcessingCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRClaimProcessingCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRClaimProcessingCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRClinicalUseDefinitionType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRClinicalUseDefinitionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRClinicalUseDefinitionType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRClinicalUseDefinitionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSearchSupport'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSearchSupport'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSearchSupport'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSearchSupport'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSystemContentMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSystemContentMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSystemContentMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSystemContentMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSystemHierarchyMeaning'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSystemHierarchyMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSystemHierarchyMeaning'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSystemHierarchyMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRColorCodesOrRGB'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRColorCodesOrRGB'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRColorCodesOrRGB'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRColorCodesOrRGB'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCommonLanguages'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCommonLanguages'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCommonLanguages'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCommonLanguages'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCompartmentType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCompartmentType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCompartmentType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCompartmentType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCompositionStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCompositionStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapAttributeType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapAttributeType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapAttributeType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapAttributeType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapGroupUnmappedMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapGroupUnmappedMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapGroupUnmappedMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapGroupUnmappedMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapPropertyType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapPropertyType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapPropertyType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapPropertyType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapRelationship'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapRelationship'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapRelationship'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapRelationship'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConcreteFHIRTypes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConcreteFHIRTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConcreteFHIRTypes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConcreteFHIRTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionalDeleteStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionalDeleteStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionalReadStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionalReadStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionalReadStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionalReadStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionPreconditionType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionPreconditionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionPreconditionType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionPreconditionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionQuestionnairePurpose'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionQuestionnairePurpose'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionQuestionnairePurpose'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionQuestionnairePurpose'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConformanceExpectation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConformanceExpectation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConformanceExpectation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConformanceExpectation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentDataMeaning'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentDataMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentDataMeaning'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentDataMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentProvisionType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentProvisionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentProvisionType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentProvisionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentState'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentState'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentState'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentState'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConstraintSeverity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConstraintSeverity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContactPointSystem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContactPointSystem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContactPointUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContactPointUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContractResourcePublicationStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContractResourcePublicationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContractResourcePublicationStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContractResourcePublicationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContractResourceStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContractResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContractResourceStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContractResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContributorType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContributorType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContributorType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContributorType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCriteriaNotExistsBehavior'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCriteriaNotExistsBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCriteriaNotExistsBehavior'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCriteriaNotExistsBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAddress'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAddress'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAddress'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAddress'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAnnotation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAnnotation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAnnotation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAnnotation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAttachment'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAttachment'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAttachment'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAttachment'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityAvailableTime'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityAvailableTime'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityNotAvailableTime'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityNotAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityNotAvailableTime'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityNotAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage\FHIRDosageDoseAndRate'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage\FHIRDosageDoseAndRate'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage\FHIRDosageDoseAndRate'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage\FHIRDosageDoseAndRate'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionAdditional'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionAdditional'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionAdditional'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionAdditional'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBase'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBase'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBinding'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBinding'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionConstraint'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionConstraint'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionDiscriminator'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionDiscriminator'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionDiscriminator'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionDiscriminator'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionExample'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionExample'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionExample'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionExample'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionMapping'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionMapping'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionSlicing'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionSlicing'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRMarketingStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRMarketingStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRMarketingStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRMarketingStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRProductShelfLife'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRProductShelfLife'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRProductShelfLife'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRProductShelfLife'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming\FHIRTimingRepeat'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming\FHIRTimingRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming\FHIRTimingRepeat'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming\FHIRTimingRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableConcept'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableConcept'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableReference'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableReference'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableReference'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableReference'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCoding'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCoding'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCoding'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCoding'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContactDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContactDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContactDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContactDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContactPoint'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContactPoint'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContactPoint'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContactPoint'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContributor'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContributor'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContributor'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContributor'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementCodeFilter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementCodeFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementCodeFilter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementCodeFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementDateFilter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementDateFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementDateFilter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementDateFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementSort'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementSort'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementSort'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementSort'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementValueFilter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementValueFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementValueFilter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementValueFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExpression'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExpression'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExpression'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExpression'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExtendedContactDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExtendedContactDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExtendedContactDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExtendedContactDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExtension'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExtension'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExtension'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExtension'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRHumanName'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRHumanName'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRHumanName'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRHumanName'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRIdentifier'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRIdentifier'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMeta'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMeta'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMeta'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMeta'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMonetaryComponent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMonetaryComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMonetaryComponent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMonetaryComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMoney'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMoney'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMoney'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMoney'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRNarrative'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRNarrative'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRNarrative'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRNarrative'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRParameterDefinition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRParameterDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRParameterDefinition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRParameterDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRPeriod'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRPeriod'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRPeriod'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRPeriod'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRPrimitiveType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRPrimitiveType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRPrimitiveType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRPrimitiveType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRAge'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRAge'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRAge'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRAge'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRCount'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRCount'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRCount'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRCount'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDistance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDistance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDistance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDistance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDuration'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDuration'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRange'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRange'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRatio'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRatio'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRatio'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRatio'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRatioRange'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRatioRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRatioRange'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRatioRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRReference'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRReference'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRReference'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRReference'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRelatedArtifact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRelatedArtifact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRelatedArtifact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRelatedArtifact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRSampledData'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRSampledData'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRSampledData'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRSampledData'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRSignature'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRSignature'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRSignature'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRSignature'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRTriggerDefinition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRTriggerDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRTriggerDefinition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRTriggerDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRUsageContext'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRUsageContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRUsageContext'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRUsageContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRVirtualServiceDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRVirtualServiceDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRVirtualServiceDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRVirtualServiceDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDate'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDate'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDate'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDate'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDateTime'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDateTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDateTime'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDateTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDecimal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDecimal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDecimal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDecimal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDefinitionResourceTypes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDefinitionResourceTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDefinitionResourceTypes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDefinitionResourceTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDetectedIssueSeverity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDetectedIssueSeverity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDetectedIssueStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDetectedIssueStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDetectedIssueStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDetectedIssueStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceCorrectiveActionScope'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceCorrectiveActionScope'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceCorrectiveActionScope'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceCorrectiveActionScope'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceDefinitionRegulatoryIdentifierType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceDefinitionRegulatoryIdentifierType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceDefinitionRegulatoryIdentifierType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceDefinitionRegulatoryIdentifierType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceDispenseStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceDispenseStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceDispenseStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceDispenseStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationState'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationState'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCategory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCategory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricOperationalStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricOperationalStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceNameType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceNameType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceNameType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceNameType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceProductionIdentifierInUDI'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceProductionIdentifierInUDI'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceProductionIdentifierInUDI'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceProductionIdentifierInUDI'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceUsageStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceUsageStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceUsageStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceUsageStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDiagnosticReportStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDiagnosticReportStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDiscriminatorType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDiscriminatorType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDiscriminatorType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDiscriminatorType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDocumentMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDocumentMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDocumentReferenceStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDocumentReferenceStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityOutcome'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityOutcome'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityRequestPurpose'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityRequestPurpose'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityRequestPurpose'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityRequestPurpose'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityResponsePurpose'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityResponsePurpose'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityResponsePurpose'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityResponsePurpose'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREnableWhenBehavior'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREnableWhenBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREnableWhenBehavior'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREnableWhenBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREncounterLocationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREncounterLocationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREncounterStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREncounterStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREncounterStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREncounterStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREndpointStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREndpointStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREndpointStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREndpointStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREnrollmentOutcome'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREnrollmentOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREnrollmentOutcome'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREnrollmentOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREpisodeOfCareStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREpisodeOfCareStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventCapabilityMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventCapabilityMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventResourceTypes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventResourceTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventResourceTypes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventResourceTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventTiming'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventTiming'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREvidenceVariableHandling'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREvidenceVariableHandling'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREvidenceVariableHandling'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREvidenceVariableHandling'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExampleScenarioActorType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExampleScenarioActorType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExampleScenarioActorType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExampleScenarioActorType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExplanationOfBenefitStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExplanationOfBenefitStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExplanationOfBenefitStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExplanationOfBenefitStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExtensionContextType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExtensionContextType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExtensionContextType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExtensionContextType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFamilyHistoryStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFamilyHistoryStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRDeviceStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRDeviceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRDeviceStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRDeviceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRPathTypes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRPathTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRPathTypes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRPathTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRSubstanceStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRSubstanceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRSubstanceStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRSubstanceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRTypes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRTypes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRVersion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRVersion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRVersion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRVersion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFilterOperator'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFilterOperator'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFinancialResourceStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFinancialResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFinancialResourceStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFinancialResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFlagStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFlagStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFormularyItemStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFormularyItemStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFormularyItemStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFormularyItemStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGenomicStudyStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGenomicStudyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGenomicStudyStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGenomicStudyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGoalLifecycleStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGoalLifecycleStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGoalLifecycleStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGoalLifecycleStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGraphCompartmentRule'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGraphCompartmentRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGraphCompartmentRule'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGraphCompartmentRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGraphCompartmentUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGraphCompartmentUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGraphCompartmentUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGraphCompartmentUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGroupMembershipBasis'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGroupMembershipBasis'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGroupMembershipBasis'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGroupMembershipBasis'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGroupType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGroupType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGroupType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGroupType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGuidanceResponseStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGuidanceResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGuidanceResponseStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGuidanceResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGuidePageGeneration'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGuidePageGeneration'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGuidePageGeneration'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGuidePageGeneration'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRHTTPVerb'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRHTTPVerb'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRId'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRId'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRId'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRId'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIdentifierUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIdentifierUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIdentityAssuranceLevel'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIdentityAssuranceLevel'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingSelectionDGraphicType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingSelectionDGraphicType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingSelectionDGraphicType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingSelectionDGraphicType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingSelectionStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingSelectionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingSelectionStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingSelectionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingStudyStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingStudyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingStudyStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingStudyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImmunizationEvaluationStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImmunizationEvaluationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImmunizationEvaluationStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImmunizationEvaluationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImmunizationStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImmunizationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImmunizationStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImmunizationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIngredientManufacturerRole'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIngredientManufacturerRole'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIngredientManufacturerRole'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIngredientManufacturerRole'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInstant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInstant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInstant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInstant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteger'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteger'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteger'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteger'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteger64'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteger64'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteger64'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteger64'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteractionTrigger'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteractionTrigger'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteractionTrigger'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteractionTrigger'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryCountType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryCountType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryCountType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryCountType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryItemStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryItemStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryItemStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryItemStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryReportStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryReportStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInvoiceStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInvoiceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInvoiceStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInvoiceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIssueSeverity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIssueSeverity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIssueType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIssueType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIssueType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIssueType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRJurisdictionValueSet'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRJurisdictionValueSet'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRJurisdictionValueSet'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRJurisdictionValueSet'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRKind'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRKind'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkageType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkageType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkageType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkageType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkRelationTypes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkRelationTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkRelationTypes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkRelationTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRListMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRListMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRListMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRListMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRListStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRListStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRListStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRListStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLocationMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLocationMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLocationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLocationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMarkdown'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMarkdown'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMeasureReportStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMeasureReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMeasureReportStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMeasureReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMeasureReportType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMeasureReportType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMeasureReportType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMeasureReportType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationAdministrationStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationAdministrationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationAdministrationStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationAdministrationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationDispenseStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationDispenseStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationDispenseStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationDispenseStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationKnowledgeStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationKnowledgeStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationKnowledgeStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationKnowledgeStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationRequestIntent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationRequestIntent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationrequestStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationrequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationrequestStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationrequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationStatementStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationStatementStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationStatementStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationStatementStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMessageheaderResponseRequest'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMessageheaderResponseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMessageheaderResponseRequest'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMessageheaderResponseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMessageSignificanceCategory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMessageSignificanceCategory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNameUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNameUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNameUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNameUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNamingSystemIdentifierType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNamingSystemIdentifierType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNamingSystemType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNamingSystemType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNarrativeStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNarrativeStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNoteType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNoteType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNoteType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNoteType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNutritionProductStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNutritionProductStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNutritionProductStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNutritionProductStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationDataType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationDataType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationDataType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationDataType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationRangeCategory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationRangeCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationRangeCategory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationRangeCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROid'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROid'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROid'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROid'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationKind'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationKind'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationOutcomeCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationOutcomeCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationOutcomeCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationOutcomeCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationParameterScope'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationParameterScope'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationParameterScope'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationParameterScope'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationParameterUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationParameterUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROrientationType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROrientationType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROrientationType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROrientationType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRParticipantResourceTypes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRParticipantResourceTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRParticipantResourceTypes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRParticipantResourceTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRParticipationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRParticipationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPaymentOutcome'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPaymentOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPaymentOutcome'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPaymentOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPermissionRuleCombining'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPermissionRuleCombining'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPermissionRuleCombining'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPermissionRuleCombining'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPermissionStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPermissionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPermissionStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPermissionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPositiveInt'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPositiveInt'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPropertyRepresentation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPropertyRepresentation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPropertyType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPropertyType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPropertyType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPropertyType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRProvenanceEntityRole'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRProvenanceEntityRole'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPublicationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPublicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPublicationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPublicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuantityComparator'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuantityComparator'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireAnswerConstraint'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireAnswerConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireAnswerConstraint'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireAnswerConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemDisabledDisplay'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemDisabledDisplay'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemDisabledDisplay'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemDisabledDisplay'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemOperator'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemOperator'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemOperator'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemOperator'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireResponseStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireResponseStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReferenceHandlingPolicy'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReferenceHandlingPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReferenceHandlingPolicy'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReferenceHandlingPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReferenceVersionRules'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReferenceVersionRules'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReferenceVersionRules'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReferenceVersionRules'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRelatedArtifactType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRelatedArtifactType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRelatedArtifactType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRelatedArtifactType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRelatedArtifactTypeExpanded'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRelatedArtifactTypeExpanded'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRelatedArtifactTypeExpanded'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRelatedArtifactTypeExpanded'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRemittanceOutcome'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRemittanceOutcome'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReportRelationshipType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReportRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReportRelationshipType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReportRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestIntent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestIntent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestPriority'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestPriority'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestResourceTypes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestResourceTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestResourceTypes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestResourceTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResourceType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResourceType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResourceVersionPolicy'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResourceVersionPolicy'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResponseType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResponseType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRestfulCapabilityMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRestfulCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRestfulCapabilityMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRestfulCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSampledDataDataType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSampledDataDataType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchComparator'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchComparator'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchComparator'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchComparator'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchEntryMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchEntryMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchModifierCode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchModifierCode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchParamType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchParamType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchProcessingModeType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchProcessingModeType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchProcessingModeType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchProcessingModeType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSequenceType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSequenceType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSequenceType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSequenceType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSlicingRules'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSlicingRules'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSlotStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSlotStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSortDirection'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSortDirection'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSortDirection'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSortDirection'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSPDXLicense'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSPDXLicense'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSPDXLicense'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSPDXLicense'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenCombined'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenCombined'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenCombined'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenCombined'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenContainedPreference'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenContainedPreference'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenContainedPreference'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenContainedPreference'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStrandType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStrandType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStrandType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStrandType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRString'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRString'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRString'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRString'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureDefinitionKind'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureDefinitionKind'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapGroupTypeMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapGroupTypeMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapGroupTypeMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapGroupTypeMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapInputMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapInputMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapInputMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapInputMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapModelMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapModelMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapModelMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapModelMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapSourceListMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapSourceListMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapSourceListMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapSourceListMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapTargetListMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapTargetListMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapTargetListMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapTargetListMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapTransform'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapTransform'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapTransform'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapTransform'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubmitDataUpdateType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubmitDataUpdateType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubmitDataUpdateType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubmitDataUpdateType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionNotificationType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionNotificationType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionNotificationType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionNotificationType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionPayloadContent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionPayloadContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionPayloadContent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionPayloadContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSupplyDeliveryStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSupplyDeliveryStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSupplyRequestStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSupplyRequestStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSystemRestfulInteraction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSystemRestfulInteraction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTaskIntent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTaskIntent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTaskIntent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTaskIntent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTaskStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTaskStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTaskStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTaskStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportActionResult'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportActionResult'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportActionResult'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportActionResult'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportParticipantType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportParticipantType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportResult'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportResult'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportResult'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportResult'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestScriptRequestMethodCode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestScriptRequestMethodCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestScriptRequestMethodCode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestScriptRequestMethodCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTime'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTime'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTransportIntent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTransportIntent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTransportIntent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTransportIntent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTransportStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTransportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTransportStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTransportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTriggeredBytype'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTriggeredBytype'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTriggeredBytype'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTriggeredBytype'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTriggerType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTriggerType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTriggerType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTriggerType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTypeDerivationRule'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTypeDerivationRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTypeDerivationRule'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTypeDerivationRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTypeRestfulInteraction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTypeRestfulInteraction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUDIEntryType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUDIEntryType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUDIEntryType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUDIEntryType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUnitsOfTime'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUnitsOfTime'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUnsignedInt'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUnsignedInt'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUri'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUri'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUri'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUri'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUrl'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUrl'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUrl'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUrl'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUuid'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUuid'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUuid'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUuid'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVerificationResultStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVerificationResultStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVerificationResultStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVerificationResultStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVersionIndependentResourceTypesAll'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVersionIndependentResourceTypesAll'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVersionIndependentResourceTypesAll'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVersionIndependentResourceTypesAll'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVisionBase'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVisionBase'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVisionEyes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVisionEyes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRBinary'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRBinary'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRBinary'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRBinary'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRBundle'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRBundle'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRBundle'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRBundle'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAccount'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAccount'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdministrableProductDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdministrableProductDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdministrableProductDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdministrableProductDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdverseEvent'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdverseEvent'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdverseEvent'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdverseEvent'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointment'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointment'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRArtifactAssessment'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRArtifactAssessment'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRArtifactAssessment'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRArtifactAssessment'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAuditEvent'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAuditEvent'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBasic'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBasic'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProductDispense'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProductDispense'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProductDispense'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProductDispense'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBodyStructure'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBodyStructure'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBodyStructure'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBodyStructure'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRActorDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRActorDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRActorDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRActorDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCapabilityStatement'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCapabilityStatement'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCapabilityStatement'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCapabilityStatement'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCompartmentDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCompartmentDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCompartmentDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCompartmentDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRExampleScenario'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRExampleScenario'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRExampleScenario'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRExampleScenario'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRGraphDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRGraphDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRGraphDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRGraphDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRImplementationGuide'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRImplementationGuide'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRImplementationGuide'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRImplementationGuide'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMessageDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMessageDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMessageDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMessageDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRActivityDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRActivityDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRActivityDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRActivityDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRChargeItemDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRChargeItemDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRChargeItemDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRChargeItemDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCitation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCitation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCitation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCitation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCodeSystem'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCodeSystem'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCodeSystem'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCodeSystem'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConceptMap'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConceptMap'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConceptMap'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConceptMap'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConditionDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConditionDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConditionDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConditionDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREventDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREventDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREventDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREventDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidence'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidence'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidence'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidence'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceReport'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceReport'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceVariable'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceVariable'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceVariable'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceVariable'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRLibrary'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRLibrary'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRLibrary'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRLibrary'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMeasure'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMeasure'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMeasure'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMeasure'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMedicationKnowledge'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMedicationKnowledge'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMedicationKnowledge'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMedicationKnowledge'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRNamingSystem'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRNamingSystem'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRNamingSystem'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRNamingSystem'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRObservationDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRObservationDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRObservationDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRObservationDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRPlanDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRPlanDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRPlanDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRPlanDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRQuestionnaire'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRQuestionnaire'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRQuestionnaire'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRQuestionnaire'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRSpecimenDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRSpecimenDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRSpecimenDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRSpecimenDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRValueSet'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRValueSet'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRValueSet'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRValueSet'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIROperationDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIROperationDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIROperationDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIROperationDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRRequirements'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRRequirements'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRRequirements'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRRequirements'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSearchParameter'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSearchParameter'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSearchParameter'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSearchParameter'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureMap'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureMap'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureMap'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureMap'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSubscriptionTopic'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSubscriptionTopic'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSubscriptionTopic'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSubscriptionTopic'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTerminologyCapabilities'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTerminologyCapabilities'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTerminologyCapabilities'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTerminologyCapabilities'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestPlan'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestPlan'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestPlan'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestPlan'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestScript'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestScript'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestScript'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestScript'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCarePlan'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCarePlan'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCareTeam'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCareTeam'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCareTeam'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCareTeam'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRChargeItem'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRChargeItem'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRChargeItem'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRChargeItem'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaim'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaim'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaimResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaimResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalUseDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalUseDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalUseDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalUseDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunication'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunication'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRComposition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRComposition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCondition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCondition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRConsent'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRConsent'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRConsent'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRConsent'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRContract'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRContract'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverage'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverage'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDevice'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDevice'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceAssociation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceAssociation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceAssociation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceAssociation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDispense'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDispense'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDispense'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDispense'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceUsage'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceUsage'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceUsage'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceUsage'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDocumentReference'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDocumentReference'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounter'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounter'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounterHistory'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounterHistory'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounterHistory'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounterHistory'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREndpoint'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREndpoint'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREndpoint'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREndpoint'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFlag'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFlag'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFormularyItem'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFormularyItem'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFormularyItem'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFormularyItem'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGenomicStudy'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGenomicStudy'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGenomicStudy'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGenomicStudy'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGoal'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGoal'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGroup'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGroup'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRHealthcareService'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRHealthcareService'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingSelection'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingSelection'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingSelection'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingSelection'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingStudy'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingStudy'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunization'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunization'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRIngredient'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRIngredient'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRIngredient'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRIngredient'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInsurancePlan'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInsurancePlan'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInsurancePlan'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInsurancePlan'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryItem'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryItem'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryItem'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryItem'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryReport'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryReport'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInvoice'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInvoice'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInvoice'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInvoice'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLinkage'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLinkage'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLinkage'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLinkage'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRList'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRList'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLocation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLocation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRManufacturedItemDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRManufacturedItemDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRManufacturedItemDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRManufacturedItemDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMeasureReport'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMeasureReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMeasureReport'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMeasureReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedication'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedication'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicinalProductDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicinalProductDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicinalProductDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicinalProductDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMessageHeader'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMessageHeader'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMolecularSequence'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMolecularSequence'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMolecularSequence'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMolecularSequence'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionIntake'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionIntake'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionIntake'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionIntake'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionProduct'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionProduct'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionProduct'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionProduct'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRObservation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRObservation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROperationOutcome'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROperationOutcome'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganization'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganization'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPackagedProductDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPackagedProductDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPackagedProductDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPackagedProductDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPatient'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPatient'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPermission'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPermission'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPermission'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPermission'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPerson'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPerson'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitioner'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitioner'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitionerRole'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitionerRole'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitionerRole'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitionerRole'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProcedure'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProcedure'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProvenance'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProvenance'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRegulatedAuthorization'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRegulatedAuthorization'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRegulatedAuthorization'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRegulatedAuthorization'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRequestOrchestration'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRequestOrchestration'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRequestOrchestration'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRequestOrchestration'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchStudy'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchStudy'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchStudy'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchStudy'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchSubject'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchSubject'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchSubject'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchSubject'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSchedule'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSchedule'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRServiceRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRServiceRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRServiceRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRServiceRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSlot'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSlot'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSpecimen'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSpecimen'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscription'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscription'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscriptionStatus'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscriptionStatus'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscriptionStatus'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscriptionStatus'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstance'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstance'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceNucleicAcid'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceNucleicAcid'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceNucleicAcid'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceNucleicAcid'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstancePolymer'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstancePolymer'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstancePolymer'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstancePolymer'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceProtein'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceProtein'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceProtein'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceProtein'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceReferenceInformation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceReferenceInformation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceReferenceInformation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceReferenceInformation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceSourceMaterial'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceSourceMaterial'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceSourceMaterial'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceSourceMaterial'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTask'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTask'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTask'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTask'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTestReport'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTestReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTestReport'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTestReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTransport'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTransport'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTransport'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTransport'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVerificationResult'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVerificationResult'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVerificationResult'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVerificationResult'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRParameters'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRParameters'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRParameters'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRParameters'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBooleanPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBooleanPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBooleanPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBooleanPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCanonicalPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCanonicalPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCanonicalPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCanonicalPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAccountStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAccountStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAccountStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAccountStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionConditionKindEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionConditionKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionConditionKindEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionConditionKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionParticipantTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionParticipantTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionParticipantTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionParticipantTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAddressTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAddressTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAddressTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAddressTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAddressUseEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAddressUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAddressUseEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAddressUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdministrativeGenderEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdministrativeGenderEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdministrativeGenderEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdministrativeGenderEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdverseEventActualityEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdverseEventActualityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdverseEventActualityEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdverseEventActualityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdverseEventStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdverseEventStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdverseEventStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdverseEventStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAgeUnitsEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAgeUnitsEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAgeUnitsEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAgeUnitsEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAggregationModeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAggregationModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAggregationModeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAggregationModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllResourceTypesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllResourceTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllResourceTypesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllResourceTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAppointmentResponseStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAppointmentResponseStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAppointmentResponseStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAppointmentResponseStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAppointmentStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAppointmentStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAppointmentStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAppointmentStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentDispositionEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentDispositionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentDispositionEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentDispositionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentInformationTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentInformationTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentInformationTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentInformationTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentWorkflowStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentWorkflowStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentWorkflowStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentWorkflowStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionManualCompletionTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionManualCompletionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionManualCompletionTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionManualCompletionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAuditEventActionEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAuditEventActionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAuditEventActionEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAuditEventActionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAuditEventSeverityEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAuditEventSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAuditEventSeverityEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAuditEventSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBindingStrengthEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBindingStrengthEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBindingStrengthEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBindingStrengthEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductDispenseCodesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductDispenseCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductDispenseCodesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductDispenseCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBundleTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBundleTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBundleTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBundleTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCarePlanIntentEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCarePlanIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCarePlanIntentEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCarePlanIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCareTeamStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCareTeamStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCareTeamStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCareTeamStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCharacteristicCombinationEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCharacteristicCombinationEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCharacteristicCombinationEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCharacteristicCombinationEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRChargeItemStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRChargeItemStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRChargeItemStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRChargeItemStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRClaimProcessingCodesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRClaimProcessingCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRClaimProcessingCodesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRClaimProcessingCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRClinicalUseDefinitionTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRClinicalUseDefinitionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRClinicalUseDefinitionTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRClinicalUseDefinitionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSearchSupportEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSearchSupportEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSearchSupportEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSearchSupportEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCommonLanguagesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCommonLanguagesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCommonLanguagesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCommonLanguagesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCompartmentTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCompartmentTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCompartmentTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCompartmentTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCompositionStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCompositionStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCompositionStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCompositionStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapAttributeTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapAttributeTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapAttributeTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapAttributeTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapPropertyTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapPropertyTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapPropertyTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapPropertyTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapRelationshipEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapRelationshipEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapRelationshipEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapRelationshipEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConcreteFHIRTypesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConcreteFHIRTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConcreteFHIRTypesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConcreteFHIRTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionalReadStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionalReadStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionalReadStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionalReadStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionPreconditionTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionPreconditionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionPreconditionTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionPreconditionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionQuestionnairePurposeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionQuestionnairePurposeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionQuestionnairePurposeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionQuestionnairePurposeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConformanceExpectationEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConformanceExpectationEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConformanceExpectationEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConformanceExpectationEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentDataMeaningEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentDataMeaningEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentDataMeaningEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentDataMeaningEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentProvisionTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentProvisionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentProvisionTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentProvisionTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentStateEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentStateEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentStateEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentStateEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConstraintSeverityEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConstraintSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConstraintSeverityEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConstraintSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContactPointSystemEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContactPointSystemEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContactPointSystemEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContactPointSystemEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContactPointUseEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContactPointUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContactPointUseEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContactPointUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContractResourcePublicationStatusCodesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContractResourcePublicationStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContractResourcePublicationStatusCodesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContractResourcePublicationStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContributorTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContributorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContributorTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContributorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCriteriaNotExistsBehaviorEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCriteriaNotExistsBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCriteriaNotExistsBehaviorEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCriteriaNotExistsBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDefinitionResourceTypesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDefinitionResourceTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDefinitionResourceTypesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDefinitionResourceTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDetectedIssueStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDetectedIssueStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDetectedIssueStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDetectedIssueStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceCorrectiveActionScopeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceCorrectiveActionScopeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceCorrectiveActionScopeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceCorrectiveActionScopeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceDefinitionRegulatoryIdentifierTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceDefinitionRegulatoryIdentifierTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceDefinitionRegulatoryIdentifierTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceDefinitionRegulatoryIdentifierTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceDispenseStatusCodesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceDispenseStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceDispenseStatusCodesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceDispenseStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceNameTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceNameTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceNameTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceNameTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceProductionIdentifierInUDIEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceProductionIdentifierInUDIEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceProductionIdentifierInUDIEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceProductionIdentifierInUDIEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceUsageStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceUsageStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceUsageStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceUsageStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDocumentModeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDocumentModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDocumentModeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDocumentModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityOutcomeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityOutcomeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityOutcomeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityOutcomeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityRequestPurposeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityRequestPurposeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityRequestPurposeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityRequestPurposeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityResponsePurposeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityResponsePurposeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityResponsePurposeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityResponsePurposeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREnableWhenBehaviorEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREnableWhenBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREnableWhenBehaviorEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREnableWhenBehaviorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREncounterLocationStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREncounterLocationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREncounterLocationStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREncounterLocationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREncounterStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREncounterStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREncounterStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREncounterStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREndpointStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREndpointStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREndpointStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREndpointStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREnrollmentOutcomeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREnrollmentOutcomeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREnrollmentOutcomeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREnrollmentOutcomeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventCapabilityModeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventCapabilityModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventCapabilityModeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventCapabilityModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventResourceTypesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventResourceTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventResourceTypesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventResourceTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventTimingEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventTimingEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventTimingEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventTimingEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREvidenceVariableHandlingEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREvidenceVariableHandlingEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREvidenceVariableHandlingEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREvidenceVariableHandlingEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExampleScenarioActorTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExampleScenarioActorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExampleScenarioActorTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExampleScenarioActorTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExtensionContextTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExtensionContextTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExtensionContextTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExtensionContextTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRPathTypesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRPathTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRPathTypesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRPathTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRTypesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRTypesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRVersionEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRVersionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRVersionEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRVersionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFilterOperatorEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFilterOperatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFilterOperatorEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFilterOperatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFlagStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFlagStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFlagStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFlagStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFormularyItemStatusCodesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFormularyItemStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFormularyItemStatusCodesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFormularyItemStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGenomicStudyStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGenomicStudyStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGenomicStudyStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGenomicStudyStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGoalLifecycleStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGoalLifecycleStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGoalLifecycleStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGoalLifecycleStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGraphCompartmentUseEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGraphCompartmentUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGraphCompartmentUseEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGraphCompartmentUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGroupMembershipBasisEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGroupMembershipBasisEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGroupMembershipBasisEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGroupMembershipBasisEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGroupTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGroupTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGroupTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGroupTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGuidePageGenerationEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGuidePageGenerationEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGuidePageGenerationEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGuidePageGenerationEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRHTTPVerbEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRHTTPVerbEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRHTTPVerbEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRHTTPVerbEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIdentifierUseEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIdentifierUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIdentifierUseEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIdentifierUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingSelectionDGraphicTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingSelectionDGraphicTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingSelectionDGraphicTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingSelectionDGraphicTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingSelectionStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingSelectionStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingSelectionStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingSelectionStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingStudyStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingStudyStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingStudyStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingStudyStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImmunizationEvaluationStatusCodesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImmunizationEvaluationStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImmunizationEvaluationStatusCodesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImmunizationEvaluationStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIngredientManufacturerRoleEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIngredientManufacturerRoleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIngredientManufacturerRoleEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIngredientManufacturerRoleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInteractionTriggerEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInteractionTriggerEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInteractionTriggerEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInteractionTriggerEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryCountTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryCountTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryCountTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryCountTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryItemStatusCodesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryItemStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryItemStatusCodesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryItemStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryReportStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryReportStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryReportStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryReportStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInvoiceStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInvoiceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInvoiceStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInvoiceStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIssueSeverityEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIssueSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIssueSeverityEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIssueSeverityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIssueTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIssueTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIssueTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIssueTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRJurisdictionValueSetEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRJurisdictionValueSetEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRJurisdictionValueSetEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRJurisdictionValueSetEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRKindEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRKindEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkageTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkageTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkageTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkageTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkRelationTypesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkRelationTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkRelationTypesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkRelationTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRListModeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRListModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRListModeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRListModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRListStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRListStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRListStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRListStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLocationModeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLocationModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLocationModeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLocationModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLocationStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLocationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLocationStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLocationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMeasureReportStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMeasureReportStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMeasureReportStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMeasureReportStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMeasureReportTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMeasureReportTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMeasureReportTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMeasureReportTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationAdministrationStatusCodesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationAdministrationStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationAdministrationStatusCodesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationAdministrationStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationDispenseStatusCodesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationDispenseStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationDispenseStatusCodesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationDispenseStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationKnowledgeStatusCodesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationKnowledgeStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationKnowledgeStatusCodesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationKnowledgeStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationrequestStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationrequestStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationrequestStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationrequestStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusCodesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusCodesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationStatusCodesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationStatusCodesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMessageheaderResponseRequestEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMessageheaderResponseRequestEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMessageheaderResponseRequestEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMessageheaderResponseRequestEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNameUseEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNameUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNameUseEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNameUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNamingSystemTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNamingSystemTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNamingSystemTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNamingSystemTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNarrativeStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNarrativeStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNarrativeStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNarrativeStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNoteTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNoteTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNoteTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNoteTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNutritionProductStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNutritionProductStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNutritionProductStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNutritionProductStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationDataTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationDataTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationDataTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationDataTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationRangeCategoryEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationRangeCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationRangeCategoryEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationRangeCategoryEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationKindEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationKindEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationOutcomeCodesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationOutcomeCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationOutcomeCodesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationOutcomeCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationParameterScopeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationParameterScopeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationParameterScopeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationParameterScopeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationParameterUseEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationParameterUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationParameterUseEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationParameterUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROrientationTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROrientationTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROrientationTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROrientationTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRParticipantResourceTypesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRParticipantResourceTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRParticipantResourceTypesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRParticipantResourceTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRParticipationStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRParticipationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRParticipationStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRParticipationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPaymentOutcomeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPaymentOutcomeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPaymentOutcomeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPaymentOutcomeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPermissionRuleCombiningEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPermissionRuleCombiningEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPermissionRuleCombiningEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPermissionRuleCombiningEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPermissionStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPermissionStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPermissionStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPermissionStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPropertyRepresentationEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPropertyRepresentationEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPropertyRepresentationEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPropertyRepresentationEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPropertyTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPropertyTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPropertyTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPropertyTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPublicationStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPublicationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPublicationStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPublicationStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuantityComparatorEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuantityComparatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuantityComparatorEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuantityComparatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireAnswerConstraintEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireAnswerConstraintEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireAnswerConstraintEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireAnswerConstraintEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemDisabledDisplayEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemDisabledDisplayEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemDisabledDisplayEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemDisabledDisplayEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemOperatorEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemOperatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemOperatorEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemOperatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeExpandedEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeExpandedEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeExpandedEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeExpandedEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReportRelationshipTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReportRelationshipTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReportRelationshipTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReportRelationshipTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestIntentEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestIntentEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestPriorityEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestPriorityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestPriorityEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestPriorityEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestResourceTypesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestResourceTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestResourceTypesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestResourceTypesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResourceTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResourceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResourceTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResourceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResponseTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResponseTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResponseTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResponseTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchComparatorEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchComparatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchComparatorEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchComparatorEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchEntryModeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchEntryModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchEntryModeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchEntryModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchModifierCodeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchModifierCodeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchModifierCodeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchModifierCodeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchParamTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchParamTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchParamTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchParamTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchProcessingModeTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchProcessingModeTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchProcessingModeTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchProcessingModeTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSequenceTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSequenceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSequenceTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSequenceTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSlicingRulesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSlicingRulesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSlicingRulesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSlicingRulesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSlotStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSlotStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSlotStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSlotStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSortDirectionEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSortDirectionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSortDirectionEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSortDirectionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSPDXLicenseEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSPDXLicenseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSPDXLicenseEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSPDXLicenseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenCombinedEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenCombinedEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenCombinedEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenCombinedEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenContainedPreferenceEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenContainedPreferenceEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenContainedPreferenceEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenContainedPreferenceEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStrandTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStrandTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStrandTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStrandTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapInputModeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapInputModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapInputModeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapInputModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapModelModeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapModelModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapModelModeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapModelModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapTransformEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapTransformEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapTransformEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapTransformEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubmitDataUpdateTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubmitDataUpdateTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubmitDataUpdateTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubmitDataUpdateTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionNotificationTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionNotificationTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionNotificationTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionNotificationTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionPayloadContentEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionPayloadContentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionPayloadContentEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionPayloadContentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionStatusCodesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionStatusCodesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionStatusCodesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTaskIntentEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTaskIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTaskIntentEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTaskIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTaskStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTaskStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTaskStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTaskStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportActionResultEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportActionResultEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportActionResultEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportActionResultEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportResultEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportResultEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportResultEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportResultEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTransportIntentEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTransportIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTransportIntentEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTransportIntentEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTransportStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTransportStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTransportStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTransportStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTriggeredBytypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTriggeredBytypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTriggeredBytypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTriggeredBytypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTriggerTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTriggerTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTriggerTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTriggerTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUDIEntryTypeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUDIEntryTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUDIEntryTypeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUDIEntryTypeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUnitsOfTimeEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUnitsOfTimeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUnitsOfTimeEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUnitsOfTimeEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUseEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUseEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVerificationResultStatusEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVerificationResultStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVerificationResultStatusEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVerificationResultStatusEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVersionIndependentResourceTypesAllEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVersionIndependentResourceTypesAllEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVersionIndependentResourceTypesAllEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVersionIndependentResourceTypesAllEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVisionBaseEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVisionBaseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVisionBaseEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVisionBaseEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVisionEyesEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVisionEyesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVisionEyesEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVisionEyesEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDatePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDatePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDatePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDatePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDateTimePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDateTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDateTimePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDateTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDecimalPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDecimalPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDecimalPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDecimalPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRIdPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRIdPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRIdPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRIdPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRInstantPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRInstantPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRInstantPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRInstantPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRInteger64Primitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRInteger64Primitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRInteger64Primitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRInteger64Primitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRIntegerPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRIntegerPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRIntegerPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRIntegerPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRMarkdownPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRMarkdownPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRMarkdownPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRMarkdownPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIROidPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIROidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIROidPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIROidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRPositiveIntPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRPositiveIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRPositiveIntPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRPositiveIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRResourceContainer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRResourceContainer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRResourceContainer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRResourceContainer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRSampledDataDataTypePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRSampledDataDataTypePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRStringPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRStringPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRStringPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRStringPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRStringPrimitive\FHIRColorCodesOrRGBEnum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRStringPrimitive\FHIRColorCodesOrRGBEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRStringPrimitive\FHIRColorCodesOrRGBEnum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRStringPrimitive\FHIRColorCodesOrRGBEnum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRTimePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRTimePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUnsignedIntPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUnsignedIntPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUriPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUriPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUriPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUriPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUrlPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUrlPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUrlPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUrlPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUuidPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUuidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUuidPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUuidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRXHTML'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRXHTML'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRXHTML'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRXHTML'));
    }

    public function testIsContainableResourceWithInstance()
    {
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase64BinaryPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAccountStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionCardinalityBehavior;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionConditionKind;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionGroupingBehavior;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionParticipantType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionPrecheckBehavior;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionRequiredBehavior;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRActionSelectionBehavior;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAddressType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAddressUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdministrativeGender;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdverseEventActuality;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAdverseEventStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAgeUnits;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAggregationMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCategory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceCriticality;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllergyIntoleranceSeverity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAllResourceTypes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAppointmentResponseStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAppointmentStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentDisposition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentInformationType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRArtifactAssessmentWorkflowStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionDirectionType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionManualCompletionType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionOperatorType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAssertionResponseTypes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAuditEventAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRAuditEventSeverity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountBalance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountProcedure;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountRelatedAccount;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionProperty;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionRouteOfAdministration;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionTargetSpecies;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdministrableProductDefinition\FHIRAdministrableProductDefinitionWithdrawalPeriod;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventCausality;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventContributingFactor;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventMitigatingAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventPreventiveAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSupportingInfo;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentMonthlyTemplate;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentRecurrenceTemplate;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentWeeklyTemplate;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentYearlyTemplate;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRArtifactAssessment\FHIRArtifactAssessmentContent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventOutcome;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProductDispense\FHIRBiologicallyDerivedProductDispensePerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductCollection;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBiologicallyDerivedProduct\FHIRBiologicallyDerivedProductProperty;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureBodyLandmarkOrientation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureDistanceFromLandmark;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBodyStructure\FHIRBodyStructureIncludedStructure;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionApplicability;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItemDefinition\FHIRChargeItemDefinitionPropertyGroup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemPerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationAbstract;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationCitedArtifact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationClassification1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributionInstance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationContributorship;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationEntry;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPart;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublicationForm;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationPublishedIn;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationRelatesTo;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationStatusDate1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationSummary1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationTitle;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationVersion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCitation\FHIRCitationWebLocation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseBodySite;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseReviewOutcome;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseTotal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimBodySite;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSupportingInfo;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionContraindication;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionIndication;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteractant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionInteraction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionOtherTherapy;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionUndesirableEffect;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRClinicalUseDefinition\FHIRClinicalUseDefinitionWarning;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapAdditionalAttribute;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapProperty1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionMedication;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionObservation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPlan;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionPrecondition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConditionDefinition\FHIRConditionDefinitionQuestionnaire;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicyBasis;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentProvision;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentVerification;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAnswer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAsset;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContentDefinition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractContext;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractOffer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractParty;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSecurityLabel;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSubject;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestInsurance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityRequest\FHIRCoverageEligibilityRequestSupportingInfo;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseBenefit;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseError;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseInsurance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverageEligibilityResponse\FHIRCoverageEligibilityResponseItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageClass;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageCostToBeneficiary;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageException;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoveragePaymentBy;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueEvidence;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceAssociation\FHIRDeviceAssociationOperation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionChargeItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionClassification;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionConformsTo;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionCorrectiveAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDeviceName;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionDistributor;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionGuideline;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionHasPart;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionLink;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMarketDistribution;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionMaterial;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionPackaging;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionProperty;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionRegulatoryIdentifier;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionUdiDeviceIdentifier;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDefinition\FHIRDeviceDefinitionVersion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceDispense\FHIRDeviceDispensePerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDeviceUsage\FHIRDeviceUsageAdherence;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceConformsTo;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceName;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceProperty;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdiCarrier;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceVersion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportMedia;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportSupportingInfo;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceAttester;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceProfile;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounterHistory\FHIREncounterHistoryLocation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAdmission;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterReason;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREndpoint\FHIREndpointPayload;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareReason;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportRelatesTo;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSection;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportSubject;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceReport\FHIREvidenceReportTarget;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCategory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByCombination;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableDefinitionByTypeAndValue;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidenceVariable\FHIREvidenceVariableTimeFromEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceAttributeEstimate;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceCertainty;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceModelCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceSampleSize;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceStatistic;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariable;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIREvidence\FHIREvidenceVariableDefinition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioActor;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioAlternative;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioContainedInstance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioInstance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioOperation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioProcess;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioStep;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExampleScenario\FHIRExampleScenarioVersion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBodySite1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitReviewOutcome;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSupportingInfo;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitTotal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryProcedure;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyAnalysis;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyDevice;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyInput;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyOutput;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGenomicStudy\FHIRGenomicStudyPerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionNode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceEligibility;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion2D;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionImageRegion3D;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionInstance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingSelection\FHIRImagingSelectionPerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyPerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProgramEligibility;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationProtocolApplied;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDefinition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependsOn;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGrouping;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideManifest;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideTemplate;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientManufacturer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientReferenceStrength;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientStrength;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRIngredient\FHIRIngredientSubstance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanBenefit1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCost;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanCoverage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanGeneralCost;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanLimit;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanPlan;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInsurancePlan\FHIRInsurancePlanSpecificCost;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemAssociation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemDescription;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemInstance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemName;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryItem\FHIRInventoryItemResponsibleOrganization;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportInventoryListing;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInventoryReport\FHIRInventoryReportItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceLineItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRInvoice\FHIRInvoiceParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionComponent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionConstituent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRManufacturedItemDefinition\FHIRManufacturedItemDefinitionProperty;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportComponent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureComponent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureTerm;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeCost;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDefinitional;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDosingGuideline;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeDrugCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeEnvironmentalSetting;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIndicationGuideline;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeIngredient;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMaxDispense;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMedicineClassification;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonitoringProgram;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeMonograph;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePackaging;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgePatientCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRegulatory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeRelatedMedicationKnowledge;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeStorageGuideline;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationKnowledge\FHIRMedicationKnowledgeSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestInitialFill;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementAdherence;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionCrossReference;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionName;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionOperation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionPart;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMedicinalProductDefinition\FHIRMedicinalProductDefinitionUsage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceEdit;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceRelative;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRMolecularSequence\FHIRMolecularSequenceStartingSequence;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeConsumedItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakeIngredientLabel;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionIntake\FHIRNutritionIntakePerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdditive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSchedule2;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductIngredient;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductInstance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRNutritionProduct\FHIRNutritionProductNutrient;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionComponent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservationDefinition\FHIRObservationDefinitionQualifiedValue;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationTriggeredBy;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionReferencedFrom;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationQualification;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionContainedItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionLegalStatusOfSupply;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionPackaging;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPackagedProductDefinition\FHIRPackagedProductDefinitionProperty;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationAllocation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionActivity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionData;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionJustification;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPermission\FHIRPermissionRule;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonCommunication;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionActor;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionInput;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOption;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionOutput;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerCommunication;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireAnswerOption;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireInitial;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRegulatedAuthorization\FHIRRegulatedAuthorizationCase;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRelatedPerson\FHIRRelatedPersonCommunication;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationCondition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationDynamicValue;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationInput;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationOutput;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequestOrchestration\FHIRRequestOrchestrationRelatedAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRequirements\FHIRRequirementsStatement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyAssociatedParty;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyComparisonGroup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyLabel;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyObjective;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyOutcomeMeasure;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyProgressStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyRecruitment;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRResearchSubject\FHIRResearchSubjectProgress;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestOrderDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRServiceRequest\FHIRServiceRequestPatientInstruction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionAdditive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionContainer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionHandling;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimenDefinition\FHIRSpecimenDefinitionTypeTested;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenFeature;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContext;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapConst;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionStatus\FHIRSubscriptionStatusNotificationEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicCanFilterBy;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicEventTrigger;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicNotificationShape;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicQueryCriteria;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscriptionTopic\FHIRSubscriptionTopicResourceTrigger;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionFilterBy;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCharacterization;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionCode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMoiety;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionMolecularWeight;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionName;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionOfficial;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionProperty;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRelationship;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionRepresentation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionSourceMaterial;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceDefinition\FHIRSubstanceDefinitionStructure;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidLinkage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSubunit;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceNucleicAcid\FHIRSubstanceNucleicAcidSugar;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerDegreeOfPolymerisation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerMonomerSet;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeat;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerRepeatUnit;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStartingMaterial;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstancePolymer\FHIRSubstancePolymerStructuralRepresentation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceProtein\FHIRSubstanceProteinSubunit;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGene;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationGeneElement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceReferenceInformation\FHIRSubstanceReferenceInformationTarget;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialAuthor;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialFractionDescription;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialHybrid;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganism;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialOrganismGeneral;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstanceSourceMaterial\FHIRSubstanceSourceMaterialPartDescription;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskPerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesClosure;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesCodeSystem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesExpansion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesFilter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesImplementation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesSoftware;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesTranslation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesValidateCode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTerminologyCapabilities\FHIRTerminologyCapabilitiesVersion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanAssertion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanDependency1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanScript;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestCase;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestData;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestPlan\FHIRTestPlanTestRun;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportRequirement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequirement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptScope;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportInput;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportOutput;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRTransport\FHIRTransportRestriction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetProperty1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetScope;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetSubProperty;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultAttestation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultPrimarySource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVerificationResult\FHIRVerificationResultValidator;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionLensSpecification;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionPrism;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBase64Binary;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBindingStrength;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBiologicallyDerivedProductDispenseCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBoolean;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRBundleType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCanonical;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCapabilityStatementKind;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCarePlanIntent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCareTeamStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCharacteristicCombination;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRChargeItemStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRClaimProcessingCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRClinicalUseDefinitionType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSearchSupport;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSystemContentMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCodeSystemHierarchyMeaning;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRColorCodesOrRGB;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCommonLanguages;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCompartmentType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCompositionStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapAttributeType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapGroupUnmappedMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapPropertyType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConceptMapRelationship;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConcreteFHIRTypes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionalDeleteStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionalReadStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionPreconditionType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConditionQuestionnairePurpose;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConformanceExpectation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentDataMeaning;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentProvisionType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConsentState;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRConstraintSeverity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContactPointSystem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContactPointUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContractResourcePublicationStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContractResourceStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRContributorType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRCriteriaNotExistsBehavior;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAddress;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAnnotation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAttachment;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityAvailableTime;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRAvailability\FHIRAvailabilityNotAvailableTime;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRDosage\FHIRDosageDoseAndRate;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionAdditional;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBase;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionBinding;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionConstraint;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionDiscriminator;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionExample;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionMapping;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionSlicing;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRElementDefinition\FHIRElementDefinitionType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRMarketingStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRProductShelfLife;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRBackboneType\FHIRTiming\FHIRTimingRepeat;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableConcept;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCodeableReference;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRCoding;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContactDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContactPoint;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRContributor;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementCodeFilter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementDateFilter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementSort;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRDataRequirement\FHIRDataRequirementValueFilter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExpression;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExtendedContactDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRExtension;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRHumanName;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRIdentifier;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMeta;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMonetaryComponent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRMoney;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRNarrative;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRParameterDefinition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRPeriod;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRPrimitiveType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRAge;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRCount;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDistance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRQuantity\FHIRDuration;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRange;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRatio;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRatioRange;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRReference;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRRelatedArtifact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRSampledData;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRSignature;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRTriggerDefinition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRUsageContext;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDataType\FHIRVirtualServiceDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDate;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDateTime;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDecimal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDefinitionResourceTypes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDetectedIssueSeverity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDetectedIssueStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceCorrectiveActionScope;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceDefinitionRegulatoryIdentifierType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceDispenseStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationState;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCalibrationType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricCategory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceMetricOperationalStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceNameType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceProductionIdentifierInUDI;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDeviceUsageStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDiagnosticReportStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDiscriminatorType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDocumentMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRDocumentReferenceStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityOutcome;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityRequestPurpose;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREligibilityResponsePurpose;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREnableWhenBehavior;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREncounterLocationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREncounterStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREndpointStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREnrollmentOutcome;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREpisodeOfCareStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventCapabilityMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventResourceTypes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREventTiming;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIREvidenceVariableHandling;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExampleScenarioActorType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExplanationOfBenefitStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRExtensionContextType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFamilyHistoryStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRDeviceStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRPathTypes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRSubstanceStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRTypes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFHIRVersion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFilterOperator;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFinancialResourceStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFlagStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRFormularyItemStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGenomicStudyStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGoalLifecycleStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGraphCompartmentRule;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGraphCompartmentUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGroupMembershipBasis;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGroupType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGuidanceResponseStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRGuidePageGeneration;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRHTTPVerb;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRId;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIdentifierUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIdentityAssuranceLevel;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingSelectionDGraphicType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingSelectionStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImagingStudyStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImmunizationEvaluationStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRImmunizationStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIngredientManufacturerRole;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInstant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteger;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteger64;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInteractionTrigger;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryCountType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryItemStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInventoryReportStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRInvoiceStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIssueSeverity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRIssueType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRJurisdictionValueSet;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRKind;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkageType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkRelationTypes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLinkType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRListMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRListStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLocationMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRLocationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMarkdown;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMeasureReportStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMeasureReportType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationAdministrationStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationDispenseStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationKnowledgeStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationRequestIntent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationrequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationStatementStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMedicationStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMessageheaderResponseRequest;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRMessageSignificanceCategory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNameUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNamingSystemIdentifierType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNamingSystemType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNarrativeStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNoteType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRNutritionProductStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationDataType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationRangeCategory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRObservationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROid;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationKind;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationOutcomeCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationParameterScope;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROperationParameterUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIROrientationType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRParticipantResourceTypes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRParticipationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPaymentOutcome;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPermissionRuleCombining;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPermissionStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPositiveInt;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPropertyRepresentation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPropertyType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRProvenanceEntityRole;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRPublicationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuantityComparator;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireAnswerConstraint;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemDisabledDisplay;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemOperator;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireItemType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRQuestionnaireResponseStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReferenceHandlingPolicy;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReferenceVersionRules;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRelatedArtifactType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRelatedArtifactTypeExpanded;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRemittanceOutcome;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRReportRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestIntent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestPriority;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestResourceTypes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResourceType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResourceVersionPolicy;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRResponseType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRRestfulCapabilityMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSampledDataDataType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchComparator;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchEntryMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchModifierCode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchParamType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSearchProcessingModeType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSequenceType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSlicingRules;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSlotStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSortDirection;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSPDXLicense;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenCombined;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenContainedPreference;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSpecimenStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStrandType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRString;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureDefinitionKind;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapGroupTypeMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapInputMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapModelMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapSourceListMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapTargetListMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRStructureMapTransform;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubmitDataUpdateType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionNotificationType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionPayloadContent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSubscriptionStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSupplyDeliveryStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSupplyRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRSystemRestfulInteraction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTaskIntent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTaskStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportActionResult;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportParticipantType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportResult;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestReportStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTestScriptRequestMethodCode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTime;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTransportIntent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTransportStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTriggeredBytype;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTriggerType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTypeDerivationRule;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRTypeRestfulInteraction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUDIEntryType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUnitsOfTime;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUnsignedInt;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUri;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUrl;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRUuid;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVerificationResultStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVersionIndependentResourceTypesAll;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVisionBase;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRElement\FHIRVisionEyes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRBinary;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRBundle;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAccount;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdministrableProductDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAdverseEvent;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointment;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRArtifactAssessment;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRAuditEvent;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBasic;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProduct;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBiologicallyDerivedProductDispense;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRBodyStructure;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRActorDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCapabilityStatement;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRCompartmentDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRExampleScenario;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRGraphDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRImplementationGuide;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMessageDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRActivityDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRChargeItemDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCitation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRCodeSystem;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConceptMap;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRConditionDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREventDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidence;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceReport;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIREvidenceVariable;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRLibrary;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMeasure;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRMedicationKnowledge;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRNamingSystem;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRObservationDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRPlanDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRQuestionnaire;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRSpecimenDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRMetadataResource\FHIRValueSet;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIROperationDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRRequirements;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSearchParameter;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRStructureMap;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRSubscriptionTopic;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTerminologyCapabilities;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestPlan;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCanonicalResource\FHIRTestScript;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCarePlan;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCareTeam;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRChargeItem;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaim;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClaimResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalImpression;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRClinicalUseDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunication;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRComposition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCondition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRConsent;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRContract;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverage;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRCoverageEligibilityResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDetectedIssue;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDevice;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceAssociation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceDispense;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceMetric;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDeviceUsage;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRDocumentReference;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounter;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREncounterHistory;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREndpoint;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFlag;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRFormularyItem;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGenomicStudy;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGoal;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGroup;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRHealthcareService;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingSelection;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImagingStudy;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunization;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationEvaluation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRIngredient;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInsurancePlan;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryItem;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInventoryReport;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRInvoice;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLinkage;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRList;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRLocation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRManufacturedItemDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMeasureReport;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedication;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationDispense;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicationStatement;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMedicinalProductDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMessageHeader;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRMolecularSequence;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionIntake;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionOrder;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRNutritionProduct;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRObservation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROperationOutcome;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganization;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIROrganizationAffiliation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPackagedProductDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPatient;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentNotice;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPermission;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPerson;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitioner;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRPractitionerRole;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProcedure;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRProvenance;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRegulatedAuthorization;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRelatedPerson;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRequestOrchestration;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchStudy;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRResearchSubject;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRRiskAssessment;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSchedule;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRServiceRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSlot;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSpecimen;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscription;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubscriptionStatus;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstance;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceNucleicAcid;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstancePolymer;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceProtein;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceReferenceInformation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSubstanceSourceMaterial;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRSupplyRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTask;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTestReport;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRTransport;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVerificationResult;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRDomainResource\FHIRVisionPrescription;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBase\FHIRResource\FHIRParameters;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRBooleanPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCanonicalPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAccountStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionConditionKindEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionParticipantTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAddressTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAddressUseEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdministrativeGenderEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdverseEventActualityEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAdverseEventStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAgeUnitsEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAggregationModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAllResourceTypesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAppointmentResponseStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAppointmentStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentDispositionEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentInformationTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRArtifactAssessmentWorkflowStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionManualCompletionTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAuditEventActionEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRAuditEventSeverityEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBindingStrengthEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBiologicallyDerivedProductDispenseCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRBundleTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCarePlanIntentEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCareTeamStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCharacteristicCombinationEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRChargeItemStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRClaimProcessingCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRClinicalUseDefinitionTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSearchSupportEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCommonLanguagesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCompartmentTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCompositionStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapAttributeTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapPropertyTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConceptMapRelationshipEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConcreteFHIRTypesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionalReadStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionPreconditionTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConditionQuestionnairePurposeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConformanceExpectationEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentDataMeaningEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentProvisionTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConsentStateEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRConstraintSeverityEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContactPointSystemEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContactPointUseEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContractResourcePublicationStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRContributorTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRCriteriaNotExistsBehaviorEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDefinitionResourceTypesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDetectedIssueStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceCorrectiveActionScopeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceDefinitionRegulatoryIdentifierTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceDispenseStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceNameTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceProductionIdentifierInUDIEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDeviceUsageStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDocumentModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityOutcomeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityRequestPurposeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREligibilityResponsePurposeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREnableWhenBehaviorEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREncounterLocationStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREncounterStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREndpointStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREnrollmentOutcomeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventCapabilityModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventResourceTypesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREventTimingEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIREvidenceVariableHandlingEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExampleScenarioActorTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRExtensionContextTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRPathTypesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRTypesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFHIRVersionEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFilterOperatorEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFlagStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRFormularyItemStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGenomicStudyStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGoalLifecycleStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGraphCompartmentUseEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGroupMembershipBasisEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGroupTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRGuidePageGenerationEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRHTTPVerbEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIdentifierUseEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingSelectionDGraphicTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingSelectionStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImagingStudyStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImmunizationEvaluationStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIngredientManufacturerRoleEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInteractionTriggerEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryCountTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryItemStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInventoryReportStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRInvoiceStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIssueSeverityEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRIssueTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRJurisdictionValueSetEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRKindEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkageTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkRelationTypesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLinkTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRListModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRListStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLocationModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRLocationStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMeasureReportStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMeasureReportTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationAdministrationStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationDispenseStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationKnowledgeStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationrequestStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMedicationStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMessageheaderResponseRequestEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNameUseEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNamingSystemTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNarrativeStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNoteTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRNutritionProductStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationDataTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationRangeCategoryEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRObservationStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationKindEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationOutcomeCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationParameterScopeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROperationParameterUseEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIROrientationTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRParticipantResourceTypesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRParticipationStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPaymentOutcomeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPermissionRuleCombiningEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPermissionStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPropertyRepresentationEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPropertyTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRPublicationStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuantityComparatorEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireAnswerConstraintEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemDisabledDisplayEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemOperatorEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeExpandedEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRReportRelationshipTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestIntentEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestPriorityEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestResourceTypesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRequestStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResourceTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRResponseTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchComparatorEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchEntryModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchModifierCodeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchParamTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSearchProcessingModeTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSequenceTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSlicingRulesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSlotStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSortDirectionEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSPDXLicenseEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenCombinedEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenContainedPreferenceEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSpecimenStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStrandTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapInputModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapModelModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRStructureMapTransformEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubmitDataUpdateTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionNotificationTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionPayloadContentEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSubscriptionStatusCodesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTaskIntentEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTaskStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportActionResultEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportResultEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestReportStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTransportIntentEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTransportStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTriggeredBytypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTriggerTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUDIEntryTypeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUnitsOfTimeEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRUseEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVerificationResultStatusEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVersionIndependentResourceTypesAllEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVisionBaseEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRCodePrimitive\FHIRVisionEyesEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDatePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDateTimePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRDecimalPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRIdPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRInstantPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRInteger64Primitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRIntegerPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRMarkdownPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIROidPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRPositiveIntPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRResourceContainer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRSampledDataDataTypePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRStringPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRStringPrimitive\FHIRColorCodesOrRGBEnum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRTimePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUnsignedIntPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUriPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUrlPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRUuidPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\R5\Types\FHIRXHTML;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
    }

    public function testIsContainableTypeWithXML()
    {
        $sxe = new \SimpleXMLElement('<Account></Account>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Account.Balance></Account.Balance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Account.Coverage></Account.Coverage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Account.Diagnosis></Account.Diagnosis>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Account.Guarantor></Account.Guarantor>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Account.Procedure></Account.Procedure>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Account.RelatedAccount></Account.RelatedAccount>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AccountStatus></AccountStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AccountStatusEnum></AccountStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionCardinalityBehavior></ActionCardinalityBehavior>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionCardinalityBehaviorEnum></ActionCardinalityBehaviorEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionConditionKind></ActionConditionKind>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionConditionKindEnum></ActionConditionKindEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionGroupingBehavior></ActionGroupingBehavior>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionGroupingBehaviorEnum></ActionGroupingBehaviorEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionParticipantType></ActionParticipantType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionParticipantTypeEnum></ActionParticipantTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionPrecheckBehavior></ActionPrecheckBehavior>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionPrecheckBehaviorEnum></ActionPrecheckBehaviorEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionRelationshipType></ActionRelationshipType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionRelationshipTypeEnum></ActionRelationshipTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionRequiredBehavior></ActionRequiredBehavior>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionRequiredBehaviorEnum></ActionRequiredBehaviorEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionSelectionBehavior></ActionSelectionBehavior>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionSelectionBehaviorEnum></ActionSelectionBehaviorEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActivityDefinition></ActivityDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActivityDefinition.DynamicValue></ActivityDefinition.DynamicValue>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActivityDefinition.Participant></ActivityDefinition.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActorDefinition></ActorDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Address></Address>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AddressType></AddressType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AddressTypeEnum></AddressTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AddressUse></AddressUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AddressUseEnum></AddressUseEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdministrableProductDefinition></AdministrableProductDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdministrableProductDefinition.Property></AdministrableProductDefinition.Property>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdministrableProductDefinition.RouteOfAdministration></AdministrableProductDefinition.RouteOfAdministration>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdministrableProductDefinition.TargetSpecies></AdministrableProductDefinition.TargetSpecies>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdministrableProductDefinition.WithdrawalPeriod></AdministrableProductDefinition.WithdrawalPeriod>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdministrativeGender></AdministrativeGender>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdministrativeGenderEnum></AdministrativeGenderEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEvent></AdverseEvent>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEvent.Causality></AdverseEvent.Causality>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEvent.ContributingFactor></AdverseEvent.ContributingFactor>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEvent.MitigatingAction></AdverseEvent.MitigatingAction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEvent.Participant></AdverseEvent.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEvent.PreventiveAction></AdverseEvent.PreventiveAction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEvent.SupportingInfo></AdverseEvent.SupportingInfo>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEvent.SuspectEntity></AdverseEvent.SuspectEntity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEventActuality></AdverseEventActuality>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEventActualityEnum></AdverseEventActualityEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEventStatus></AdverseEventStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEventStatusEnum></AdverseEventStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Age></Age>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AgeUnits></AgeUnits>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AgeUnitsEnum></AgeUnitsEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AggregationMode></AggregationMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AggregationModeEnum></AggregationModeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntolerance></AllergyIntolerance>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntolerance.Participant></AllergyIntolerance.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntolerance.Reaction></AllergyIntolerance.Reaction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceCategory></AllergyIntoleranceCategory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceCategoryEnum></AllergyIntoleranceCategoryEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceCriticality></AllergyIntoleranceCriticality>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceCriticalityEnum></AllergyIntoleranceCriticalityEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceSeverity></AllergyIntoleranceSeverity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceSeverityEnum></AllergyIntoleranceSeverityEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllResourceTypes></AllResourceTypes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllResourceTypesEnum></AllResourceTypesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Annotation></Annotation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Appointment></Appointment>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Appointment.MonthlyTemplate></Appointment.MonthlyTemplate>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Appointment.Participant></Appointment.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Appointment.RecurrenceTemplate></Appointment.RecurrenceTemplate>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Appointment.WeeklyTemplate></Appointment.WeeklyTemplate>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Appointment.YearlyTemplate></Appointment.YearlyTemplate>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AppointmentResponse></AppointmentResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AppointmentResponseStatus></AppointmentResponseStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AppointmentResponseStatusEnum></AppointmentResponseStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AppointmentStatus></AppointmentStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AppointmentStatusEnum></AppointmentStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ArtifactAssessment></ArtifactAssessment>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ArtifactAssessment.Content></ArtifactAssessment.Content>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ArtifactAssessmentDisposition></ArtifactAssessmentDisposition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ArtifactAssessmentDispositionEnum></ArtifactAssessmentDispositionEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ArtifactAssessmentInformationType></ArtifactAssessmentInformationType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ArtifactAssessmentInformationTypeEnum></ArtifactAssessmentInformationTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ArtifactAssessmentWorkflowStatus></ArtifactAssessmentWorkflowStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ArtifactAssessmentWorkflowStatusEnum></ArtifactAssessmentWorkflowStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionDirectionType></AssertionDirectionType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionDirectionTypeEnum></AssertionDirectionTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionManualCompletionType></AssertionManualCompletionType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionManualCompletionTypeEnum></AssertionManualCompletionTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionOperatorType></AssertionOperatorType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionOperatorTypeEnum></AssertionOperatorTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionResponseTypes></AssertionResponseTypes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionResponseTypesEnum></AssertionResponseTypesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Attachment></Attachment>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent></AuditEvent>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent.Agent></AuditEvent.Agent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent.Detail></AuditEvent.Detail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent.Entity></AuditEvent.Entity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent.Outcome></AuditEvent.Outcome>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent.Source></AuditEvent.Source>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEventAction></AuditEventAction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEventActionEnum></AuditEventActionEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEventSeverity></AuditEventSeverity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEventSeverityEnum></AuditEventSeverityEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Availability></Availability>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Availability.AvailableTime></Availability.AvailableTime>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Availability.NotAvailableTime></Availability.NotAvailableTime>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BackboneElement></BackboneElement>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BackboneType></BackboneType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<base64Binary></base64Binary>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<base64Binary-primitive></base64Binary-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Basic></Basic>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Binary></Binary>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BindingStrength></BindingStrength>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BindingStrengthEnum></BindingStrengthEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BiologicallyDerivedProduct></BiologicallyDerivedProduct>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BiologicallyDerivedProduct.Collection></BiologicallyDerivedProduct.Collection>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BiologicallyDerivedProduct.Property></BiologicallyDerivedProduct.Property>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BiologicallyDerivedProductDispense></BiologicallyDerivedProductDispense>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BiologicallyDerivedProductDispense.Performer></BiologicallyDerivedProductDispense.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BiologicallyDerivedProductDispenseCodes></BiologicallyDerivedProductDispenseCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BiologicallyDerivedProductDispenseCodesEnum></BiologicallyDerivedProductDispenseCodesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BodyStructure></BodyStructure>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BodyStructure.BodyLandmarkOrientation></BodyStructure.BodyLandmarkOrientation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BodyStructure.DistanceFromLandmark></BodyStructure.DistanceFromLandmark>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BodyStructure.IncludedStructure></BodyStructure.IncludedStructure>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<boolean></boolean>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<boolean-primitive></boolean-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle></Bundle>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle.Entry></Bundle.Entry>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle.Link></Bundle.Link>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle.Request></Bundle.Request>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle.Response></Bundle.Response>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle.Search></Bundle.Search>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BundleType></BundleType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BundleTypeEnum></BundleTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<canonical></canonical>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<canonical-primitive></canonical-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CanonicalResource></CanonicalResource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement></CapabilityStatement>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Document></CapabilityStatement.Document>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Endpoint></CapabilityStatement.Endpoint>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Implementation></CapabilityStatement.Implementation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Interaction></CapabilityStatement.Interaction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Interaction1></CapabilityStatement.Interaction1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Messaging></CapabilityStatement.Messaging>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Operation></CapabilityStatement.Operation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Resource></CapabilityStatement.Resource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Rest></CapabilityStatement.Rest>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.SearchParam></CapabilityStatement.SearchParam>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Security></CapabilityStatement.Security>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Software></CapabilityStatement.Software>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.SupportedMessage></CapabilityStatement.SupportedMessage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatementKind></CapabilityStatementKind>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatementKindEnum></CapabilityStatementKindEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlan></CarePlan>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlan.Activity></CarePlan.Activity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanIntent></CarePlanIntent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanIntentEnum></CarePlanIntentEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CareTeam></CareTeam>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CareTeam.Participant></CareTeam.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CareTeamStatus></CareTeamStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CareTeamStatusEnum></CareTeamStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CharacteristicCombination></CharacteristicCombination>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CharacteristicCombinationEnum></CharacteristicCombinationEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ChargeItem></ChargeItem>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ChargeItem.Performer></ChargeItem.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ChargeItemDefinition></ChargeItemDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ChargeItemDefinition.Applicability></ChargeItemDefinition.Applicability>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ChargeItemDefinition.PropertyGroup></ChargeItemDefinition.PropertyGroup>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ChargeItemStatus></ChargeItemStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ChargeItemStatusEnum></ChargeItemStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation></Citation>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.Abstract></Citation.Abstract>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.CitedArtifact></Citation.CitedArtifact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.Classification></Citation.Classification>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.Classification1></Citation.Classification1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.ContributionInstance></Citation.ContributionInstance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.Contributorship></Citation.Contributorship>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.Entry></Citation.Entry>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.Part></Citation.Part>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.PublicationForm></Citation.PublicationForm>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.PublishedIn></Citation.PublishedIn>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.RelatesTo></Citation.RelatesTo>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.StatusDate></Citation.StatusDate>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.StatusDate1></Citation.StatusDate1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.Summary></Citation.Summary>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.Summary1></Citation.Summary1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.Title></Citation.Title>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.Version></Citation.Version>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Citation.WebLocation></Citation.WebLocation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim></Claim>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Accident></Claim.Accident>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.BodySite></Claim.BodySite>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.CareTeam></Claim.CareTeam>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Detail></Claim.Detail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Diagnosis></Claim.Diagnosis>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Event></Claim.Event>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Insurance></Claim.Insurance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Item></Claim.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Payee></Claim.Payee>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Procedure></Claim.Procedure>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Related></Claim.Related>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.SubDetail></Claim.SubDetail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.SupportingInfo></Claim.SupportingInfo>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimProcessingCodes></ClaimProcessingCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimProcessingCodesEnum></ClaimProcessingCodesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse></ClaimResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.AddItem></ClaimResponse.AddItem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Adjudication></ClaimResponse.Adjudication>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.BodySite></ClaimResponse.BodySite>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Detail></ClaimResponse.Detail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Detail1></ClaimResponse.Detail1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Error></ClaimResponse.Error>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Event></ClaimResponse.Event>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Insurance></ClaimResponse.Insurance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Item></ClaimResponse.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Payment></ClaimResponse.Payment>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.ProcessNote></ClaimResponse.ProcessNote>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.ReviewOutcome></ClaimResponse.ReviewOutcome>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.SubDetail></ClaimResponse.SubDetail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.SubDetail1></ClaimResponse.SubDetail1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Total></ClaimResponse.Total>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalImpression></ClinicalImpression>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalImpression.Finding></ClinicalImpression.Finding>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalUseDefinition></ClinicalUseDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalUseDefinition.Contraindication></ClinicalUseDefinition.Contraindication>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalUseDefinition.Indication></ClinicalUseDefinition.Indication>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalUseDefinition.Interactant></ClinicalUseDefinition.Interactant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalUseDefinition.Interaction></ClinicalUseDefinition.Interaction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalUseDefinition.OtherTherapy></ClinicalUseDefinition.OtherTherapy>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalUseDefinition.UndesirableEffect></ClinicalUseDefinition.UndesirableEffect>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalUseDefinition.Warning></ClinicalUseDefinition.Warning>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalUseDefinitionType></ClinicalUseDefinitionType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalUseDefinitionTypeEnum></ClinicalUseDefinitionTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<code></code>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<code-primitive></code-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeableConcept></CodeableConcept>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeableReference></CodeableReference>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSearchSupport></CodeSearchSupport>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSearchSupportEnum></CodeSearchSupportEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystem></CodeSystem>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystem.Concept></CodeSystem.Concept>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystem.Designation></CodeSystem.Designation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystem.Filter></CodeSystem.Filter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystem.Property></CodeSystem.Property>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystem.Property1></CodeSystem.Property1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystemContentMode></CodeSystemContentMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystemContentModeEnum></CodeSystemContentModeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystemHierarchyMeaning></CodeSystemHierarchyMeaning>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystemHierarchyMeaningEnum></CodeSystemHierarchyMeaningEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Coding></Coding>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ColorCodesOrRGB></ColorCodesOrRGB>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ColorCodesOrRGBEnum></ColorCodesOrRGBEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CommonLanguages></CommonLanguages>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CommonLanguagesEnum></CommonLanguagesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Communication></Communication>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Communication.Payload></Communication.Payload>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CommunicationRequest></CommunicationRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CommunicationRequest.Payload></CommunicationRequest.Payload>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompartmentDefinition></CompartmentDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompartmentDefinition.Resource></CompartmentDefinition.Resource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompartmentType></CompartmentType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompartmentTypeEnum></CompartmentTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Composition></Composition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Composition.Attester></Composition.Attester>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Composition.Event></Composition.Event>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Composition.Section></Composition.Section>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompositionStatus></CompositionStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompositionStatusEnum></CompositionStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap></ConceptMap>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.AdditionalAttribute></ConceptMap.AdditionalAttribute>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.DependsOn></ConceptMap.DependsOn>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.Element></ConceptMap.Element>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.Group></ConceptMap.Group>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.Property></ConceptMap.Property>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.Property1></ConceptMap.Property1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.Target></ConceptMap.Target>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.Unmapped></ConceptMap.Unmapped>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMapAttributeType></ConceptMapAttributeType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMapAttributeTypeEnum></ConceptMapAttributeTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMapGroupUnmappedMode></ConceptMapGroupUnmappedMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMapGroupUnmappedModeEnum></ConceptMapGroupUnmappedModeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMapPropertyType></ConceptMapPropertyType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMapPropertyTypeEnum></ConceptMapPropertyTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMapRelationship></ConceptMapRelationship>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMapRelationshipEnum></ConceptMapRelationshipEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConcreteFHIRTypes></ConcreteFHIRTypes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConcreteFHIRTypesEnum></ConcreteFHIRTypesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Condition></Condition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Condition.Participant></Condition.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Condition.Stage></Condition.Stage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionalDeleteStatus></ConditionalDeleteStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionalDeleteStatusEnum></ConditionalDeleteStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionalReadStatus></ConditionalReadStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionalReadStatusEnum></ConditionalReadStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionDefinition></ConditionDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionDefinition.Medication></ConditionDefinition.Medication>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionDefinition.Observation></ConditionDefinition.Observation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionDefinition.Plan></ConditionDefinition.Plan>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionDefinition.Precondition></ConditionDefinition.Precondition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionDefinition.Questionnaire></ConditionDefinition.Questionnaire>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionPreconditionType></ConditionPreconditionType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionPreconditionTypeEnum></ConditionPreconditionTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionQuestionnairePurpose></ConditionQuestionnairePurpose>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionQuestionnairePurposeEnum></ConditionQuestionnairePurposeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConformanceExpectation></ConformanceExpectation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConformanceExpectationEnum></ConformanceExpectationEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Consent></Consent>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Consent.Actor></Consent.Actor>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Consent.Data></Consent.Data>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Consent.PolicyBasis></Consent.PolicyBasis>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Consent.Provision></Consent.Provision>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Consent.Verification></Consent.Verification>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConsentDataMeaning></ConsentDataMeaning>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConsentDataMeaningEnum></ConsentDataMeaningEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConsentProvisionType></ConsentProvisionType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConsentProvisionTypeEnum></ConsentProvisionTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConsentState></ConsentState>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConsentStateEnum></ConsentStateEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConstraintSeverity></ConstraintSeverity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConstraintSeverityEnum></ConstraintSeverityEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactDetail></ContactDetail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactPoint></ContactPoint>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactPointSystem></ContactPointSystem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactPointSystemEnum></ContactPointSystemEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactPointUse></ContactPointUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactPointUseEnum></ContactPointUseEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract></Contract>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Action></Contract.Action>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Answer></Contract.Answer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Asset></Contract.Asset>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.ContentDefinition></Contract.ContentDefinition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Context></Contract.Context>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Friendly></Contract.Friendly>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Legal></Contract.Legal>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Offer></Contract.Offer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Party></Contract.Party>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Rule></Contract.Rule>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.SecurityLabel></Contract.SecurityLabel>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Signer></Contract.Signer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Subject></Contract.Subject>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Term></Contract.Term>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.ValuedItem></Contract.ValuedItem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContractResourcePublicationStatusCodes></ContractResourcePublicationStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContractResourcePublicationStatusCodesEnum></ContractResourcePublicationStatusCodesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContractResourceStatusCodes></ContractResourceStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContractResourceStatusCodesEnum></ContractResourceStatusCodesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contributor></Contributor>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContributorType></ContributorType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContributorTypeEnum></ContributorTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Count></Count>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Coverage></Coverage>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Coverage.Class></Coverage.Class>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Coverage.CostToBeneficiary></Coverage.CostToBeneficiary>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Coverage.Exception></Coverage.Exception>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Coverage.PaymentBy></Coverage.PaymentBy>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CoverageEligibilityRequest></CoverageEligibilityRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CoverageEligibilityRequest.Diagnosis></CoverageEligibilityRequest.Diagnosis>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CoverageEligibilityRequest.Event></CoverageEligibilityRequest.Event>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CoverageEligibilityRequest.Insurance></CoverageEligibilityRequest.Insurance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CoverageEligibilityRequest.Item></CoverageEligibilityRequest.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CoverageEligibilityRequest.SupportingInfo></CoverageEligibilityRequest.SupportingInfo>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CoverageEligibilityResponse></CoverageEligibilityResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CoverageEligibilityResponse.Benefit></CoverageEligibilityResponse.Benefit>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CoverageEligibilityResponse.Error></CoverageEligibilityResponse.Error>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CoverageEligibilityResponse.Event></CoverageEligibilityResponse.Event>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CoverageEligibilityResponse.Insurance></CoverageEligibilityResponse.Insurance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CoverageEligibilityResponse.Item></CoverageEligibilityResponse.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CriteriaNotExistsBehavior></CriteriaNotExistsBehavior>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CriteriaNotExistsBehaviorEnum></CriteriaNotExistsBehaviorEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataRequirement></DataRequirement>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataRequirement.CodeFilter></DataRequirement.CodeFilter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataRequirement.DateFilter></DataRequirement.DateFilter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataRequirement.Sort></DataRequirement.Sort>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataRequirement.ValueFilter></DataRequirement.ValueFilter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataType></DataType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<date></date>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<date-primitive></date-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<dateTime></dateTime>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<dateTime-primitive></dateTime-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<decimal></decimal>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<decimal-primitive></decimal-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DefinitionResourceTypes></DefinitionResourceTypes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DefinitionResourceTypesEnum></DefinitionResourceTypesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DetectedIssue></DetectedIssue>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DetectedIssue.Evidence></DetectedIssue.Evidence>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DetectedIssue.Mitigation></DetectedIssue.Mitigation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DetectedIssueSeverity></DetectedIssueSeverity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DetectedIssueSeverityEnum></DetectedIssueSeverityEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DetectedIssueStatus></DetectedIssueStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DetectedIssueStatusEnum></DetectedIssueStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Device></Device>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Device.ConformsTo></Device.ConformsTo>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Device.Name></Device.Name>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Device.Property></Device.Property>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Device.UdiCarrier></Device.UdiCarrier>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Device.Version></Device.Version>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceAssociation></DeviceAssociation>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceAssociation.Operation></DeviceAssociation.Operation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceCorrectiveActionScope></DeviceCorrectiveActionScope>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceCorrectiveActionScopeEnum></DeviceCorrectiveActionScopeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinition></DeviceDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinition.ChargeItem></DeviceDefinition.ChargeItem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinition.Classification></DeviceDefinition.Classification>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinition.ConformsTo></DeviceDefinition.ConformsTo>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinition.CorrectiveAction></DeviceDefinition.CorrectiveAction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinition.DeviceName></DeviceDefinition.DeviceName>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinition.Distributor></DeviceDefinition.Distributor>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinition.Guideline></DeviceDefinition.Guideline>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinition.HasPart></DeviceDefinition.HasPart>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinition.Link></DeviceDefinition.Link>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinition.MarketDistribution></DeviceDefinition.MarketDistribution>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinition.Material></DeviceDefinition.Material>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinition.Packaging></DeviceDefinition.Packaging>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinition.Property></DeviceDefinition.Property>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinition.RegulatoryIdentifier></DeviceDefinition.RegulatoryIdentifier>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinition.UdiDeviceIdentifier></DeviceDefinition.UdiDeviceIdentifier>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinition.Version></DeviceDefinition.Version>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinitionRegulatoryIdentifierType></DeviceDefinitionRegulatoryIdentifierType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDefinitionRegulatoryIdentifierTypeEnum></DeviceDefinitionRegulatoryIdentifierTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDispense></DeviceDispense>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDispense.Performer></DeviceDispense.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDispenseStatusCodes></DeviceDispenseStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceDispenseStatusCodesEnum></DeviceDispenseStatusCodesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetric></DeviceMetric>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetric.Calibration></DeviceMetric.Calibration>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCalibrationState></DeviceMetricCalibrationState>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCalibrationStateEnum></DeviceMetricCalibrationStateEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCalibrationType></DeviceMetricCalibrationType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCalibrationTypeEnum></DeviceMetricCalibrationTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCategory></DeviceMetricCategory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCategoryEnum></DeviceMetricCategoryEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricOperationalStatus></DeviceMetricOperationalStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricOperationalStatusEnum></DeviceMetricOperationalStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceNameType></DeviceNameType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceNameTypeEnum></DeviceNameTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceProductionIdentifierInUDI></DeviceProductionIdentifierInUDI>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceProductionIdentifierInUDIEnum></DeviceProductionIdentifierInUDIEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceRequest></DeviceRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceRequest.Parameter></DeviceRequest.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceUsage></DeviceUsage>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceUsage.Adherence></DeviceUsage.Adherence>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceUsageStatus></DeviceUsageStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceUsageStatusEnum></DeviceUsageStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReport></DiagnosticReport>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReport.Media></DiagnosticReport.Media>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReport.SupportingInfo></DiagnosticReport.SupportingInfo>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReportStatus></DiagnosticReportStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReportStatusEnum></DiagnosticReportStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiscriminatorType></DiscriminatorType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiscriminatorTypeEnum></DiscriminatorTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Distance></Distance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentMode></DocumentMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentModeEnum></DocumentModeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference></DocumentReference>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference.Attester></DocumentReference.Attester>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference.Content></DocumentReference.Content>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference.Profile></DocumentReference.Profile>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference.RelatesTo></DocumentReference.RelatesTo>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReferenceStatus></DocumentReferenceStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReferenceStatusEnum></DocumentReferenceStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DomainResource></DomainResource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Dosage></Dosage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Dosage.DoseAndRate></Dosage.DoseAndRate>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Duration></Duration>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Element></Element>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition></ElementDefinition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Additional></ElementDefinition.Additional>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Base></ElementDefinition.Base>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Binding></ElementDefinition.Binding>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Constraint></ElementDefinition.Constraint>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Discriminator></ElementDefinition.Discriminator>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Example></ElementDefinition.Example>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Mapping></ElementDefinition.Mapping>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Slicing></ElementDefinition.Slicing>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Type></ElementDefinition.Type>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EligibilityOutcome></EligibilityOutcome>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EligibilityOutcomeEnum></EligibilityOutcomeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EligibilityRequestPurpose></EligibilityRequestPurpose>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EligibilityRequestPurposeEnum></EligibilityRequestPurposeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EligibilityResponsePurpose></EligibilityResponsePurpose>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EligibilityResponsePurposeEnum></EligibilityResponsePurposeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EnableWhenBehavior></EnableWhenBehavior>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EnableWhenBehaviorEnum></EnableWhenBehaviorEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter></Encounter>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.Admission></Encounter.Admission>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.Diagnosis></Encounter.Diagnosis>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.Location></Encounter.Location>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.Participant></Encounter.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.Reason></Encounter.Reason>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterHistory></EncounterHistory>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterHistory.Location></EncounterHistory.Location>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterLocationStatus></EncounterLocationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterLocationStatusEnum></EncounterLocationStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterStatus></EncounterStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterStatusEnum></EncounterStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Endpoint></Endpoint>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Endpoint.Payload></Endpoint.Payload>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EndpointStatus></EndpointStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EndpointStatusEnum></EndpointStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EnrollmentOutcome></EnrollmentOutcome>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EnrollmentOutcomeEnum></EnrollmentOutcomeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EnrollmentRequest></EnrollmentRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EnrollmentResponse></EnrollmentResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EpisodeOfCare></EpisodeOfCare>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EpisodeOfCare.Diagnosis></EpisodeOfCare.Diagnosis>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EpisodeOfCare.Reason></EpisodeOfCare.Reason>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EpisodeOfCare.StatusHistory></EpisodeOfCare.StatusHistory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EpisodeOfCareStatus></EpisodeOfCareStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EpisodeOfCareStatusEnum></EpisodeOfCareStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventCapabilityMode></EventCapabilityMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventCapabilityModeEnum></EventCapabilityModeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventDefinition></EventDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventResourceTypes></EventResourceTypes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventResourceTypesEnum></EventResourceTypesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventStatus></EventStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventStatusEnum></EventStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventTiming></EventTiming>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventTimingEnum></EventTimingEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Evidence></Evidence>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Evidence.AttributeEstimate></Evidence.AttributeEstimate>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Evidence.Certainty></Evidence.Certainty>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Evidence.ModelCharacteristic></Evidence.ModelCharacteristic>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Evidence.SampleSize></Evidence.SampleSize>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Evidence.Statistic></Evidence.Statistic>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Evidence.Variable></Evidence.Variable>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Evidence.VariableDefinition></Evidence.VariableDefinition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EvidenceReport></EvidenceReport>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EvidenceReport.Characteristic></EvidenceReport.Characteristic>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EvidenceReport.RelatesTo></EvidenceReport.RelatesTo>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EvidenceReport.Section></EvidenceReport.Section>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EvidenceReport.Subject></EvidenceReport.Subject>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EvidenceReport.Target></EvidenceReport.Target>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EvidenceVariable></EvidenceVariable>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EvidenceVariable.Category></EvidenceVariable.Category>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EvidenceVariable.Characteristic></EvidenceVariable.Characteristic>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EvidenceVariable.DefinitionByCombination></EvidenceVariable.DefinitionByCombination>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EvidenceVariable.DefinitionByTypeAndValue></EvidenceVariable.DefinitionByTypeAndValue>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EvidenceVariable.TimeFromEvent></EvidenceVariable.TimeFromEvent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EvidenceVariableHandling></EvidenceVariableHandling>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EvidenceVariableHandlingEnum></EvidenceVariableHandlingEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExampleScenario></ExampleScenario>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExampleScenario.Actor></ExampleScenario.Actor>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExampleScenario.Alternative></ExampleScenario.Alternative>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExampleScenario.ContainedInstance></ExampleScenario.ContainedInstance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExampleScenario.Instance></ExampleScenario.Instance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExampleScenario.Operation></ExampleScenario.Operation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExampleScenario.Process></ExampleScenario.Process>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExampleScenario.Step></ExampleScenario.Step>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExampleScenario.Version></ExampleScenario.Version>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExampleScenarioActorType></ExampleScenarioActorType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExampleScenarioActorTypeEnum></ExampleScenarioActorTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit></ExplanationOfBenefit>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Accident></ExplanationOfBenefit.Accident>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.AddItem></ExplanationOfBenefit.AddItem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Adjudication></ExplanationOfBenefit.Adjudication>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.BenefitBalance></ExplanationOfBenefit.BenefitBalance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.BodySite></ExplanationOfBenefit.BodySite>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.BodySite1></ExplanationOfBenefit.BodySite1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.CareTeam></ExplanationOfBenefit.CareTeam>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Detail></ExplanationOfBenefit.Detail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Detail1></ExplanationOfBenefit.Detail1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Diagnosis></ExplanationOfBenefit.Diagnosis>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Event></ExplanationOfBenefit.Event>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Financial></ExplanationOfBenefit.Financial>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Insurance></ExplanationOfBenefit.Insurance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Item></ExplanationOfBenefit.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Payee></ExplanationOfBenefit.Payee>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Payment></ExplanationOfBenefit.Payment>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Procedure></ExplanationOfBenefit.Procedure>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.ProcessNote></ExplanationOfBenefit.ProcessNote>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Related></ExplanationOfBenefit.Related>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.ReviewOutcome></ExplanationOfBenefit.ReviewOutcome>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.SubDetail></ExplanationOfBenefit.SubDetail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.SubDetail1></ExplanationOfBenefit.SubDetail1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.SupportingInfo></ExplanationOfBenefit.SupportingInfo>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Total></ExplanationOfBenefit.Total>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefitStatus></ExplanationOfBenefitStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefitStatusEnum></ExplanationOfBenefitStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Expression></Expression>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExtendedContactDetail></ExtendedContactDetail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Extension></Extension>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExtensionContextType></ExtensionContextType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExtensionContextTypeEnum></ExtensionContextTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FamilyHistoryStatus></FamilyHistoryStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FamilyHistoryStatusEnum></FamilyHistoryStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FamilyMemberHistory></FamilyMemberHistory>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FamilyMemberHistory.Condition></FamilyMemberHistory.Condition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FamilyMemberHistory.Participant></FamilyMemberHistory.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FamilyMemberHistory.Procedure></FamilyMemberHistory.Procedure>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRDeviceStatus></FHIRDeviceStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRDeviceStatusEnum></FHIRDeviceStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRPathTypes></FHIRPathTypes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRPathTypesEnum></FHIRPathTypesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRSubstanceStatus></FHIRSubstanceStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRSubstanceStatusEnum></FHIRSubstanceStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRTypes></FHIRTypes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRTypesEnum></FHIRTypesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRVersion></FHIRVersion>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRVersionEnum></FHIRVersionEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FilterOperator></FilterOperator>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FilterOperatorEnum></FilterOperatorEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FinancialResourceStatusCodes></FinancialResourceStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FinancialResourceStatusCodesEnum></FinancialResourceStatusCodesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Flag></Flag>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FlagStatus></FlagStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FlagStatusEnum></FlagStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FormularyItem></FormularyItem>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FormularyItemStatusCodes></FormularyItemStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FormularyItemStatusCodesEnum></FormularyItemStatusCodesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GenomicStudy></GenomicStudy>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GenomicStudy.Analysis></GenomicStudy.Analysis>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GenomicStudy.Device></GenomicStudy.Device>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GenomicStudy.Input></GenomicStudy.Input>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GenomicStudy.Output></GenomicStudy.Output>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GenomicStudy.Performer></GenomicStudy.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GenomicStudyStatus></GenomicStudyStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GenomicStudyStatusEnum></GenomicStudyStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Goal></Goal>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Goal.Target></Goal.Target>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GoalLifecycleStatus></GoalLifecycleStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GoalLifecycleStatusEnum></GoalLifecycleStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GraphCompartmentRule></GraphCompartmentRule>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GraphCompartmentRuleEnum></GraphCompartmentRuleEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GraphCompartmentUse></GraphCompartmentUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GraphCompartmentUseEnum></GraphCompartmentUseEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GraphDefinition></GraphDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GraphDefinition.Compartment></GraphDefinition.Compartment>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GraphDefinition.Link></GraphDefinition.Link>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GraphDefinition.Node></GraphDefinition.Node>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Group></Group>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Group.Characteristic></Group.Characteristic>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Group.Member></Group.Member>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GroupMembershipBasis></GroupMembershipBasis>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GroupMembershipBasisEnum></GroupMembershipBasisEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GroupType></GroupType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GroupTypeEnum></GroupTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuidanceResponse></GuidanceResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuidanceResponseStatus></GuidanceResponseStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuidanceResponseStatusEnum></GuidanceResponseStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuidePageGeneration></GuidePageGeneration>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuidePageGenerationEnum></GuidePageGenerationEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HealthcareService></HealthcareService>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HealthcareService.Eligibility></HealthcareService.Eligibility>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HTTPVerb></HTTPVerb>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HTTPVerbEnum></HTTPVerbEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HumanName></HumanName>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<id></id>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<id-primitive></id-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Identifier></Identifier>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IdentifierUse></IdentifierUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IdentifierUseEnum></IdentifierUseEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IdentityAssuranceLevel></IdentityAssuranceLevel>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IdentityAssuranceLevelEnum></IdentityAssuranceLevelEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingSelection></ImagingSelection>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingSelection.ImageRegion2D></ImagingSelection.ImageRegion2D>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingSelection.ImageRegion3D></ImagingSelection.ImageRegion3D>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingSelection.Instance></ImagingSelection.Instance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingSelection.Performer></ImagingSelection.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingSelectionDGraphicType></ImagingSelectionDGraphicType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingSelectionDGraphicTypeEnum></ImagingSelectionDGraphicTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingSelectionStatus></ImagingSelectionStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingSelectionStatusEnum></ImagingSelectionStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingStudy></ImagingStudy>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingStudy.Instance></ImagingStudy.Instance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingStudy.Performer></ImagingStudy.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingStudy.Series></ImagingStudy.Series>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingStudyStatus></ImagingStudyStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingStudyStatusEnum></ImagingStudyStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization></Immunization>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization.Performer></Immunization.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization.ProgramEligibility></Immunization.ProgramEligibility>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization.ProtocolApplied></Immunization.ProtocolApplied>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization.Reaction></Immunization.Reaction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationEvaluation></ImmunizationEvaluation>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationEvaluationStatusCodes></ImmunizationEvaluationStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationEvaluationStatusCodesEnum></ImmunizationEvaluationStatusCodesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationRecommendation></ImmunizationRecommendation>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationRecommendation.DateCriterion></ImmunizationRecommendation.DateCriterion>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationRecommendation.Recommendation></ImmunizationRecommendation.Recommendation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationStatusCodes></ImmunizationStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationStatusCodesEnum></ImmunizationStatusCodesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide></ImplementationGuide>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Definition></ImplementationGuide.Definition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.DependsOn></ImplementationGuide.DependsOn>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Global></ImplementationGuide.Global>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Grouping></ImplementationGuide.Grouping>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Manifest></ImplementationGuide.Manifest>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Page></ImplementationGuide.Page>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Page1></ImplementationGuide.Page1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Parameter></ImplementationGuide.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Resource></ImplementationGuide.Resource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Resource1></ImplementationGuide.Resource1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Template></ImplementationGuide.Template>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Ingredient></Ingredient>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Ingredient.Manufacturer></Ingredient.Manufacturer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Ingredient.ReferenceStrength></Ingredient.ReferenceStrength>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Ingredient.Strength></Ingredient.Strength>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Ingredient.Substance></Ingredient.Substance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IngredientManufacturerRole></IngredientManufacturerRole>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IngredientManufacturerRoleEnum></IngredientManufacturerRoleEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<instant></instant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<instant-primitive></instant-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InsurancePlan></InsurancePlan>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InsurancePlan.Benefit></InsurancePlan.Benefit>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InsurancePlan.Benefit1></InsurancePlan.Benefit1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InsurancePlan.Cost></InsurancePlan.Cost>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InsurancePlan.Coverage></InsurancePlan.Coverage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InsurancePlan.GeneralCost></InsurancePlan.GeneralCost>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InsurancePlan.Limit></InsurancePlan.Limit>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InsurancePlan.Plan></InsurancePlan.Plan>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InsurancePlan.SpecificCost></InsurancePlan.SpecificCost>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<integer></integer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<integer-primitive></integer-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<integer64></integer64>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<integer64-primitive></integer64-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InteractionTrigger></InteractionTrigger>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InteractionTriggerEnum></InteractionTriggerEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InventoryCountType></InventoryCountType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InventoryCountTypeEnum></InventoryCountTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InventoryItem></InventoryItem>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InventoryItem.Association></InventoryItem.Association>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InventoryItem.Characteristic></InventoryItem.Characteristic>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InventoryItem.Description></InventoryItem.Description>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InventoryItem.Instance></InventoryItem.Instance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InventoryItem.Name></InventoryItem.Name>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InventoryItem.ResponsibleOrganization></InventoryItem.ResponsibleOrganization>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InventoryItemStatusCodes></InventoryItemStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InventoryItemStatusCodesEnum></InventoryItemStatusCodesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InventoryReport></InventoryReport>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InventoryReport.InventoryListing></InventoryReport.InventoryListing>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InventoryReport.Item></InventoryReport.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InventoryReportStatus></InventoryReportStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InventoryReportStatusEnum></InventoryReportStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Invoice></Invoice>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Invoice.LineItem></Invoice.LineItem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Invoice.Participant></Invoice.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InvoiceStatus></InvoiceStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InvoiceStatusEnum></InvoiceStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IssueSeverity></IssueSeverity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IssueSeverityEnum></IssueSeverityEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IssueType></IssueType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IssueTypeEnum></IssueTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<JurisdictionValueSet></JurisdictionValueSet>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<JurisdictionValueSetEnum></JurisdictionValueSetEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Kind></Kind>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<KindEnum></KindEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Library></Library>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Linkage></Linkage>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Linkage.Item></Linkage.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LinkageType></LinkageType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LinkageTypeEnum></LinkageTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LinkRelationTypes></LinkRelationTypes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LinkRelationTypesEnum></LinkRelationTypesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LinkType></LinkType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LinkTypeEnum></LinkTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<List></List>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<List.Entry></List.Entry>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ListMode></ListMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ListModeEnum></ListModeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ListStatus></ListStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ListStatusEnum></ListStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Location></Location>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Location.Position></Location.Position>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LocationMode></LocationMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LocationModeEnum></LocationModeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LocationStatus></LocationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LocationStatusEnum></LocationStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ManufacturedItemDefinition></ManufacturedItemDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ManufacturedItemDefinition.Component></ManufacturedItemDefinition.Component>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ManufacturedItemDefinition.Constituent></ManufacturedItemDefinition.Constituent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ManufacturedItemDefinition.Property></ManufacturedItemDefinition.Property>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<markdown></markdown>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<markdown-primitive></markdown-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MarketingStatus></MarketingStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Measure></Measure>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Measure.Component></Measure.Component>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Measure.Group></Measure.Group>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Measure.Population></Measure.Population>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Measure.Stratifier></Measure.Stratifier>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Measure.SupplementalData></Measure.SupplementalData>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Measure.Term></Measure.Term>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReport></MeasureReport>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReport.Component></MeasureReport.Component>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReport.Group></MeasureReport.Group>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReport.Population></MeasureReport.Population>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReport.Population1></MeasureReport.Population1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReport.Stratifier></MeasureReport.Stratifier>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReport.Stratum></MeasureReport.Stratum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReportStatus></MeasureReportStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReportStatusEnum></MeasureReportStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReportType></MeasureReportType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReportTypeEnum></MeasureReportTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication></Medication>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication.Batch></Medication.Batch>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication.Ingredient></Medication.Ingredient>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministration></MedicationAdministration>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministration.Dosage></MedicationAdministration.Dosage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministration.Performer></MedicationAdministration.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministrationStatusCodes></MedicationAdministrationStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministrationStatusCodesEnum></MedicationAdministrationStatusCodesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispense></MedicationDispense>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispense.Performer></MedicationDispense.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispense.Substitution></MedicationDispense.Substitution>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispenseStatusCodes></MedicationDispenseStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispenseStatusCodesEnum></MedicationDispenseStatusCodesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge></MedicationKnowledge>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.Cost></MedicationKnowledge.Cost>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.Definitional></MedicationKnowledge.Definitional>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.Dosage></MedicationKnowledge.Dosage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.DosingGuideline></MedicationKnowledge.DosingGuideline>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.DrugCharacteristic></MedicationKnowledge.DrugCharacteristic>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.EnvironmentalSetting></MedicationKnowledge.EnvironmentalSetting>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.IndicationGuideline></MedicationKnowledge.IndicationGuideline>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.Ingredient></MedicationKnowledge.Ingredient>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.MaxDispense></MedicationKnowledge.MaxDispense>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.MedicineClassification></MedicationKnowledge.MedicineClassification>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.MonitoringProgram></MedicationKnowledge.MonitoringProgram>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.Monograph></MedicationKnowledge.Monograph>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.Packaging></MedicationKnowledge.Packaging>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.PatientCharacteristic></MedicationKnowledge.PatientCharacteristic>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.Regulatory></MedicationKnowledge.Regulatory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.RelatedMedicationKnowledge></MedicationKnowledge.RelatedMedicationKnowledge>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.StorageGuideline></MedicationKnowledge.StorageGuideline>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledge.Substitution></MedicationKnowledge.Substitution>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledgeStatusCodes></MedicationKnowledgeStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKnowledgeStatusCodesEnum></MedicationKnowledgeStatusCodesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationRequest></MedicationRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationRequest.DispenseRequest></MedicationRequest.DispenseRequest>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationRequest.InitialFill></MedicationRequest.InitialFill>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationRequest.Substitution></MedicationRequest.Substitution>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationRequestIntent></MedicationRequestIntent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationRequestIntentEnum></MedicationRequestIntentEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationrequestStatus></MedicationrequestStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationrequestStatusEnum></MedicationrequestStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatement></MedicationStatement>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatement.Adherence></MedicationStatement.Adherence>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatementStatusCodes></MedicationStatementStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatementStatusCodesEnum></MedicationStatementStatusCodesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatusCodes></MedicationStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatusCodesEnum></MedicationStatusCodesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicinalProductDefinition></MedicinalProductDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicinalProductDefinition.Characteristic></MedicinalProductDefinition.Characteristic>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicinalProductDefinition.Contact></MedicinalProductDefinition.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicinalProductDefinition.CrossReference></MedicinalProductDefinition.CrossReference>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicinalProductDefinition.Name></MedicinalProductDefinition.Name>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicinalProductDefinition.Operation></MedicinalProductDefinition.Operation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicinalProductDefinition.Part></MedicinalProductDefinition.Part>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicinalProductDefinition.Usage></MedicinalProductDefinition.Usage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageDefinition></MessageDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageDefinition.AllowedResponse></MessageDefinition.AllowedResponse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageDefinition.Focus></MessageDefinition.Focus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageHeader></MessageHeader>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageHeader.Destination></MessageHeader.Destination>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageHeader.Response></MessageHeader.Response>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageHeader.Source></MessageHeader.Source>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageheaderResponseRequest></MessageheaderResponseRequest>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageheaderResponseRequestEnum></MessageheaderResponseRequestEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageSignificanceCategory></MessageSignificanceCategory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageSignificanceCategoryEnum></MessageSignificanceCategoryEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Meta></Meta>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MetadataResource></MetadataResource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MolecularSequence></MolecularSequence>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MolecularSequence.Edit></MolecularSequence.Edit>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MolecularSequence.Relative></MolecularSequence.Relative>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MolecularSequence.StartingSequence></MolecularSequence.StartingSequence>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MonetaryComponent></MonetaryComponent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Money></Money>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NameUse></NameUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NameUseEnum></NameUseEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystem></NamingSystem>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystem.UniqueId></NamingSystem.UniqueId>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystemIdentifierType></NamingSystemIdentifierType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystemIdentifierTypeEnum></NamingSystemIdentifierTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystemType></NamingSystemType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystemTypeEnum></NamingSystemTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Narrative></Narrative>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NarrativeStatus></NarrativeStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NarrativeStatusEnum></NarrativeStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NoteType></NoteType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NoteTypeEnum></NoteTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionIntake></NutritionIntake>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionIntake.ConsumedItem></NutritionIntake.ConsumedItem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionIntake.IngredientLabel></NutritionIntake.IngredientLabel>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionIntake.Performer></NutritionIntake.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder></NutritionOrder>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.Additive></NutritionOrder.Additive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.Administration></NutritionOrder.Administration>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.EnteralFormula></NutritionOrder.EnteralFormula>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.Nutrient></NutritionOrder.Nutrient>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.OralDiet></NutritionOrder.OralDiet>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.Schedule></NutritionOrder.Schedule>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.Schedule1></NutritionOrder.Schedule1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.Schedule2></NutritionOrder.Schedule2>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.Supplement></NutritionOrder.Supplement>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.Texture></NutritionOrder.Texture>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionProduct></NutritionProduct>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionProduct.Characteristic></NutritionProduct.Characteristic>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionProduct.Ingredient></NutritionProduct.Ingredient>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionProduct.Instance></NutritionProduct.Instance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionProduct.Nutrient></NutritionProduct.Nutrient>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionProductStatus></NutritionProductStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionProductStatusEnum></NutritionProductStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Observation></Observation>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Observation.Component></Observation.Component>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Observation.ReferenceRange></Observation.ReferenceRange>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Observation.TriggeredBy></Observation.TriggeredBy>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationDataType></ObservationDataType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationDataTypeEnum></ObservationDataTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationDefinition></ObservationDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationDefinition.Component></ObservationDefinition.Component>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationDefinition.QualifiedValue></ObservationDefinition.QualifiedValue>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationRangeCategory></ObservationRangeCategory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationRangeCategoryEnum></ObservationRangeCategoryEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationStatus></ObservationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationStatusEnum></ObservationStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<oid></oid>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<oid-primitive></oid-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationDefinition></OperationDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationDefinition.Binding></OperationDefinition.Binding>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationDefinition.Overload></OperationDefinition.Overload>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationDefinition.Parameter></OperationDefinition.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationDefinition.ReferencedFrom></OperationDefinition.ReferencedFrom>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationKind></OperationKind>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationKindEnum></OperationKindEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationOutcome></OperationOutcome>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationOutcome.Issue></OperationOutcome.Issue>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationOutcomeCodes></OperationOutcomeCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationOutcomeCodesEnum></OperationOutcomeCodesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationParameterScope></OperationParameterScope>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationParameterScopeEnum></OperationParameterScopeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationParameterUse></OperationParameterUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationParameterUseEnum></OperationParameterUseEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Organization></Organization>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Organization.Qualification></Organization.Qualification>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OrganizationAffiliation></OrganizationAffiliation>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OrientationType></OrientationType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OrientationTypeEnum></OrientationTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PackagedProductDefinition></PackagedProductDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PackagedProductDefinition.ContainedItem></PackagedProductDefinition.ContainedItem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PackagedProductDefinition.LegalStatusOfSupply></PackagedProductDefinition.LegalStatusOfSupply>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PackagedProductDefinition.Packaging></PackagedProductDefinition.Packaging>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PackagedProductDefinition.Property></PackagedProductDefinition.Property>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ParameterDefinition></ParameterDefinition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Parameters></Parameters>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Parameters.Parameter></Parameters.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ParticipantResourceTypes></ParticipantResourceTypes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ParticipantResourceTypesEnum></ParticipantResourceTypesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ParticipationStatus></ParticipationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ParticipationStatusEnum></ParticipationStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient></Patient>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient.Communication></Patient.Communication>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient.Contact></Patient.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient.Link></Patient.Link>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PaymentNotice></PaymentNotice>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PaymentOutcome></PaymentOutcome>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PaymentOutcomeEnum></PaymentOutcomeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PaymentReconciliation></PaymentReconciliation>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PaymentReconciliation.Allocation></PaymentReconciliation.Allocation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PaymentReconciliation.ProcessNote></PaymentReconciliation.ProcessNote>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Period></Period>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Permission></Permission>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Permission.Activity></Permission.Activity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Permission.Data></Permission.Data>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Permission.Justification></Permission.Justification>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Permission.Resource></Permission.Resource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Permission.Rule></Permission.Rule>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PermissionRuleCombining></PermissionRuleCombining>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PermissionRuleCombiningEnum></PermissionRuleCombiningEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PermissionStatus></PermissionStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PermissionStatusEnum></PermissionStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Person></Person>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Person.Communication></Person.Communication>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Person.Link></Person.Link>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition></PlanDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.Action></PlanDefinition.Action>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.Actor></PlanDefinition.Actor>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.Condition></PlanDefinition.Condition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.DynamicValue></PlanDefinition.DynamicValue>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.Goal></PlanDefinition.Goal>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.Input></PlanDefinition.Input>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.Option></PlanDefinition.Option>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.Output></PlanDefinition.Output>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.Participant></PlanDefinition.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.RelatedAction></PlanDefinition.RelatedAction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.Target></PlanDefinition.Target>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<positiveInt></positiveInt>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<positiveInt-primitive></positiveInt-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Practitioner></Practitioner>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Practitioner.Communication></Practitioner.Communication>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Practitioner.Qualification></Practitioner.Qualification>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PractitionerRole></PractitionerRole>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PrimitiveType></PrimitiveType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Procedure></Procedure>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Procedure.FocalDevice></Procedure.FocalDevice>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Procedure.Performer></Procedure.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProductShelfLife></ProductShelfLife>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PropertyRepresentation></PropertyRepresentation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PropertyRepresentationEnum></PropertyRepresentationEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PropertyType></PropertyType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PropertyTypeEnum></PropertyTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Provenance></Provenance>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Provenance.Agent></Provenance.Agent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Provenance.Entity></Provenance.Entity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProvenanceEntityRole></ProvenanceEntityRole>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProvenanceEntityRoleEnum></ProvenanceEntityRoleEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PublicationStatus></PublicationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PublicationStatusEnum></PublicationStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Quantity></Quantity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuantityComparator></QuantityComparator>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuantityComparatorEnum></QuantityComparatorEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Questionnaire></Questionnaire>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Questionnaire.AnswerOption></Questionnaire.AnswerOption>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Questionnaire.EnableWhen></Questionnaire.EnableWhen>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Questionnaire.Initial></Questionnaire.Initial>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Questionnaire.Item></Questionnaire.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireAnswerConstraint></QuestionnaireAnswerConstraint>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireAnswerConstraintEnum></QuestionnaireAnswerConstraintEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireItemDisabledDisplay></QuestionnaireItemDisabledDisplay>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireItemDisabledDisplayEnum></QuestionnaireItemDisabledDisplayEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireItemOperator></QuestionnaireItemOperator>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireItemOperatorEnum></QuestionnaireItemOperatorEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireItemType></QuestionnaireItemType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireItemTypeEnum></QuestionnaireItemTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireResponse></QuestionnaireResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireResponse.Answer></QuestionnaireResponse.Answer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireResponse.Item></QuestionnaireResponse.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireResponseStatus></QuestionnaireResponseStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireResponseStatusEnum></QuestionnaireResponseStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Range></Range>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Ratio></Ratio>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RatioRange></RatioRange>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Reference></Reference>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ReferenceHandlingPolicy></ReferenceHandlingPolicy>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ReferenceHandlingPolicyEnum></ReferenceHandlingPolicyEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ReferenceVersionRules></ReferenceVersionRules>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ReferenceVersionRulesEnum></ReferenceVersionRulesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RegulatedAuthorization></RegulatedAuthorization>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RegulatedAuthorization.Case></RegulatedAuthorization.Case>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RelatedArtifact></RelatedArtifact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RelatedArtifactType></RelatedArtifactType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RelatedArtifactTypeEnum></RelatedArtifactTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RelatedArtifactTypeExpanded></RelatedArtifactTypeExpanded>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RelatedArtifactTypeExpandedEnum></RelatedArtifactTypeExpandedEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RelatedPerson></RelatedPerson>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RelatedPerson.Communication></RelatedPerson.Communication>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RemittanceOutcome></RemittanceOutcome>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RemittanceOutcomeEnum></RemittanceOutcomeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ReportRelationshipType></ReportRelationshipType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ReportRelationshipTypeEnum></ReportRelationshipTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestIntent></RequestIntent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestIntentEnum></RequestIntentEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestOrchestration></RequestOrchestration>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestOrchestration.Action></RequestOrchestration.Action>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestOrchestration.Condition></RequestOrchestration.Condition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestOrchestration.DynamicValue></RequestOrchestration.DynamicValue>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestOrchestration.Input></RequestOrchestration.Input>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestOrchestration.Output></RequestOrchestration.Output>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestOrchestration.Participant></RequestOrchestration.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestOrchestration.RelatedAction></RequestOrchestration.RelatedAction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestPriority></RequestPriority>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestPriorityEnum></RequestPriorityEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestResourceTypes></RequestResourceTypes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestResourceTypesEnum></RequestResourceTypesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestStatus></RequestStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestStatusEnum></RequestStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Requirements></Requirements>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Requirements.Statement></Requirements.Statement>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResearchStudy></ResearchStudy>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResearchStudy.AssociatedParty></ResearchStudy.AssociatedParty>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResearchStudy.ComparisonGroup></ResearchStudy.ComparisonGroup>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResearchStudy.Label></ResearchStudy.Label>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResearchStudy.Objective></ResearchStudy.Objective>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResearchStudy.OutcomeMeasure></ResearchStudy.OutcomeMeasure>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResearchStudy.ProgressStatus></ResearchStudy.ProgressStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResearchStudy.Recruitment></ResearchStudy.Recruitment>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResearchSubject></ResearchSubject>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResearchSubject.Progress></ResearchSubject.Progress>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Resource></Resource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceContainer></ResourceContainer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceType></ResourceType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceTypeEnum></ResourceTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceVersionPolicy></ResourceVersionPolicy>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceVersionPolicyEnum></ResourceVersionPolicyEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResponseType></ResponseType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResponseTypeEnum></ResponseTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RestfulCapabilityMode></RestfulCapabilityMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RestfulCapabilityModeEnum></RestfulCapabilityModeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RiskAssessment></RiskAssessment>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RiskAssessment.Prediction></RiskAssessment.Prediction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SampledData></SampledData>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SampledDataDataType></SampledDataDataType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SampledDataDataType-primitive></SampledDataDataType-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Schedule></Schedule>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchComparator></SearchComparator>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchComparatorEnum></SearchComparatorEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchEntryMode></SearchEntryMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchEntryModeEnum></SearchEntryModeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchModifierCode></SearchModifierCode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchModifierCodeEnum></SearchModifierCodeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchParameter></SearchParameter>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchParameter.Component></SearchParameter.Component>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchParamType></SearchParamType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchParamTypeEnum></SearchParamTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchProcessingModeType></SearchProcessingModeType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchProcessingModeTypeEnum></SearchProcessingModeTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SequenceType></SequenceType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SequenceTypeEnum></SequenceTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ServiceRequest></ServiceRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ServiceRequest.OrderDetail></ServiceRequest.OrderDetail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ServiceRequest.Parameter></ServiceRequest.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ServiceRequest.PatientInstruction></ServiceRequest.PatientInstruction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Signature></Signature>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SlicingRules></SlicingRules>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SlicingRulesEnum></SlicingRulesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Slot></Slot>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SlotStatus></SlotStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SlotStatusEnum></SlotStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SortDirection></SortDirection>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SortDirectionEnum></SortDirectionEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SPDXLicense></SPDXLicense>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SPDXLicenseEnum></SPDXLicenseEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen></Specimen>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen.Collection></Specimen.Collection>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen.Container></Specimen.Container>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen.Feature></Specimen.Feature>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen.Processing></Specimen.Processing>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SpecimenCombined></SpecimenCombined>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SpecimenCombinedEnum></SpecimenCombinedEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SpecimenContainedPreference></SpecimenContainedPreference>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SpecimenContainedPreferenceEnum></SpecimenContainedPreferenceEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SpecimenDefinition></SpecimenDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SpecimenDefinition.Additive></SpecimenDefinition.Additive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SpecimenDefinition.Container></SpecimenDefinition.Container>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SpecimenDefinition.Handling></SpecimenDefinition.Handling>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SpecimenDefinition.TypeTested></SpecimenDefinition.TypeTested>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SpecimenStatus></SpecimenStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SpecimenStatusEnum></SpecimenStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StrandType></StrandType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StrandTypeEnum></StrandTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<string></string>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<string-primitive></string-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinition></StructureDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinition.Context></StructureDefinition.Context>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinition.Differential></StructureDefinition.Differential>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinition.Mapping></StructureDefinition.Mapping>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinition.Snapshot></StructureDefinition.Snapshot>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinitionKind></StructureDefinitionKind>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinitionKindEnum></StructureDefinitionKindEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap></StructureMap>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap.Const></StructureMap.Const>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap.Dependent></StructureMap.Dependent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap.Group></StructureMap.Group>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap.Input></StructureMap.Input>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap.Parameter></StructureMap.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap.Rule></StructureMap.Rule>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap.Source></StructureMap.Source>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap.Structure></StructureMap.Structure>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap.Target></StructureMap.Target>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapGroupTypeMode></StructureMapGroupTypeMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapGroupTypeModeEnum></StructureMapGroupTypeModeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapInputMode></StructureMapInputMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapInputModeEnum></StructureMapInputModeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapModelMode></StructureMapModelMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapModelModeEnum></StructureMapModelModeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapSourceListMode></StructureMapSourceListMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapSourceListModeEnum></StructureMapSourceListModeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapTargetListMode></StructureMapTargetListMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapTargetListModeEnum></StructureMapTargetListModeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapTransform></StructureMapTransform>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapTransformEnum></StructureMapTransformEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubmitDataUpdateType></SubmitDataUpdateType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubmitDataUpdateTypeEnum></SubmitDataUpdateTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Subscription></Subscription>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Subscription.FilterBy></Subscription.FilterBy>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Subscription.Parameter></Subscription.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionNotificationType></SubscriptionNotificationType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionNotificationTypeEnum></SubscriptionNotificationTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionPayloadContent></SubscriptionPayloadContent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionPayloadContentEnum></SubscriptionPayloadContentEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionStatus></SubscriptionStatus>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionStatus.NotificationEvent></SubscriptionStatus.NotificationEvent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionStatusCodes></SubscriptionStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionStatusCodesEnum></SubscriptionStatusCodesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionTopic></SubscriptionTopic>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionTopic.CanFilterBy></SubscriptionTopic.CanFilterBy>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionTopic.EventTrigger></SubscriptionTopic.EventTrigger>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionTopic.NotificationShape></SubscriptionTopic.NotificationShape>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionTopic.QueryCriteria></SubscriptionTopic.QueryCriteria>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionTopic.ResourceTrigger></SubscriptionTopic.ResourceTrigger>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Substance></Substance>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Substance.Ingredient></Substance.Ingredient>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceDefinition></SubstanceDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceDefinition.Characterization></SubstanceDefinition.Characterization>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceDefinition.Code></SubstanceDefinition.Code>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceDefinition.Moiety></SubstanceDefinition.Moiety>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceDefinition.MolecularWeight></SubstanceDefinition.MolecularWeight>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceDefinition.Name></SubstanceDefinition.Name>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceDefinition.Official></SubstanceDefinition.Official>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceDefinition.Property></SubstanceDefinition.Property>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceDefinition.Relationship></SubstanceDefinition.Relationship>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceDefinition.Representation></SubstanceDefinition.Representation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceDefinition.SourceMaterial></SubstanceDefinition.SourceMaterial>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceDefinition.Structure></SubstanceDefinition.Structure>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceNucleicAcid></SubstanceNucleicAcid>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceNucleicAcid.Linkage></SubstanceNucleicAcid.Linkage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceNucleicAcid.Subunit></SubstanceNucleicAcid.Subunit>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceNucleicAcid.Sugar></SubstanceNucleicAcid.Sugar>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstancePolymer></SubstancePolymer>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstancePolymer.DegreeOfPolymerisation></SubstancePolymer.DegreeOfPolymerisation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstancePolymer.MonomerSet></SubstancePolymer.MonomerSet>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstancePolymer.Repeat></SubstancePolymer.Repeat>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstancePolymer.RepeatUnit></SubstancePolymer.RepeatUnit>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstancePolymer.StartingMaterial></SubstancePolymer.StartingMaterial>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstancePolymer.StructuralRepresentation></SubstancePolymer.StructuralRepresentation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceProtein></SubstanceProtein>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceProtein.Subunit></SubstanceProtein.Subunit>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceReferenceInformation></SubstanceReferenceInformation>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceReferenceInformation.Gene></SubstanceReferenceInformation.Gene>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceReferenceInformation.GeneElement></SubstanceReferenceInformation.GeneElement>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceReferenceInformation.Target></SubstanceReferenceInformation.Target>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceSourceMaterial></SubstanceSourceMaterial>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceSourceMaterial.Author></SubstanceSourceMaterial.Author>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceSourceMaterial.FractionDescription></SubstanceSourceMaterial.FractionDescription>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceSourceMaterial.Hybrid></SubstanceSourceMaterial.Hybrid>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceSourceMaterial.Organism></SubstanceSourceMaterial.Organism>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceSourceMaterial.OrganismGeneral></SubstanceSourceMaterial.OrganismGeneral>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubstanceSourceMaterial.PartDescription></SubstanceSourceMaterial.PartDescription>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyDelivery></SupplyDelivery>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyDelivery.SuppliedItem></SupplyDelivery.SuppliedItem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyDeliveryStatus></SupplyDeliveryStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyDeliveryStatusEnum></SupplyDeliveryStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyRequest></SupplyRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyRequest.Parameter></SupplyRequest.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyRequestStatus></SupplyRequestStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyRequestStatusEnum></SupplyRequestStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SystemRestfulInteraction></SystemRestfulInteraction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SystemRestfulInteractionEnum></SystemRestfulInteractionEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Task></Task>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Task.Input></Task.Input>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Task.Output></Task.Output>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Task.Performer></Task.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Task.Restriction></Task.Restriction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TaskIntent></TaskIntent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TaskIntentEnum></TaskIntentEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TaskStatus></TaskStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TaskStatusEnum></TaskStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TerminologyCapabilities></TerminologyCapabilities>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TerminologyCapabilities.Closure></TerminologyCapabilities.Closure>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TerminologyCapabilities.CodeSystem></TerminologyCapabilities.CodeSystem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TerminologyCapabilities.Expansion></TerminologyCapabilities.Expansion>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TerminologyCapabilities.Filter></TerminologyCapabilities.Filter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TerminologyCapabilities.Implementation></TerminologyCapabilities.Implementation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TerminologyCapabilities.Parameter></TerminologyCapabilities.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TerminologyCapabilities.Software></TerminologyCapabilities.Software>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TerminologyCapabilities.Translation></TerminologyCapabilities.Translation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TerminologyCapabilities.ValidateCode></TerminologyCapabilities.ValidateCode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TerminologyCapabilities.Version></TerminologyCapabilities.Version>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestPlan></TestPlan>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestPlan.Assertion></TestPlan.Assertion>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestPlan.Dependency></TestPlan.Dependency>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestPlan.Dependency1></TestPlan.Dependency1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestPlan.Script></TestPlan.Script>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestPlan.TestCase></TestPlan.TestCase>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestPlan.TestData></TestPlan.TestData>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestPlan.TestRun></TestPlan.TestRun>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport></TestReport>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Action></TestReport.Action>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Action1></TestReport.Action1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Action2></TestReport.Action2>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Assert></TestReport.Assert>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Operation></TestReport.Operation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Participant></TestReport.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Requirement></TestReport.Requirement>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Setup></TestReport.Setup>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Teardown></TestReport.Teardown>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Test></TestReport.Test>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReportActionResult></TestReportActionResult>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReportActionResultEnum></TestReportActionResultEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReportParticipantType></TestReportParticipantType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReportParticipantTypeEnum></TestReportParticipantTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReportResult></TestReportResult>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReportResultEnum></TestReportResultEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReportStatus></TestReportStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReportStatusEnum></TestReportStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript></TestScript>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Action></TestScript.Action>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Action1></TestScript.Action1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Action2></TestScript.Action2>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Assert></TestScript.Assert>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Capability></TestScript.Capability>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Destination></TestScript.Destination>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Fixture></TestScript.Fixture>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Link></TestScript.Link>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Metadata></TestScript.Metadata>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Operation></TestScript.Operation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Origin></TestScript.Origin>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.RequestHeader></TestScript.RequestHeader>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Requirement></TestScript.Requirement>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Scope></TestScript.Scope>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Setup></TestScript.Setup>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Teardown></TestScript.Teardown>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Test></TestScript.Test>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Variable></TestScript.Variable>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScriptRequestMethodCode></TestScriptRequestMethodCode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScriptRequestMethodCodeEnum></TestScriptRequestMethodCodeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<time></time>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<time-primitive></time-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Timing></Timing>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Timing.Repeat></Timing.Repeat>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Transport></Transport>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Transport.Input></Transport.Input>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Transport.Output></Transport.Output>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Transport.Restriction></Transport.Restriction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TransportIntent></TransportIntent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TransportIntentEnum></TransportIntentEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TransportStatus></TransportStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TransportStatusEnum></TransportStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TriggerDefinition></TriggerDefinition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TriggeredBytype></TriggeredBytype>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TriggeredBytypeEnum></TriggeredBytypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TriggerType></TriggerType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TriggerTypeEnum></TriggerTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TypeDerivationRule></TypeDerivationRule>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TypeDerivationRuleEnum></TypeDerivationRuleEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TypeRestfulInteraction></TypeRestfulInteraction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TypeRestfulInteractionEnum></TypeRestfulInteractionEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UDIEntryType></UDIEntryType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UDIEntryTypeEnum></UDIEntryTypeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UnitsOfTime></UnitsOfTime>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UnitsOfTimeEnum></UnitsOfTimeEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<unsignedInt></unsignedInt>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<unsignedInt-primitive></unsignedInt-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<uri></uri>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<uri-primitive></uri-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<url></url>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<url-primitive></url-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UsageContext></UsageContext>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Use></Use>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UseEnum></UseEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<uuid></uuid>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<uuid-primitive></uuid-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet></ValueSet>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Compose></ValueSet.Compose>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Concept></ValueSet.Concept>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Contains></ValueSet.Contains>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Designation></ValueSet.Designation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Expansion></ValueSet.Expansion>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Filter></ValueSet.Filter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Include></ValueSet.Include>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Parameter></ValueSet.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Property></ValueSet.Property>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Property1></ValueSet.Property1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Scope></ValueSet.Scope>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.SubProperty></ValueSet.SubProperty>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VerificationResult></VerificationResult>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VerificationResult.Attestation></VerificationResult.Attestation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VerificationResult.PrimarySource></VerificationResult.PrimarySource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VerificationResult.Validator></VerificationResult.Validator>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VerificationResultStatus></VerificationResultStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VerificationResultStatusEnum></VerificationResultStatusEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VersionIndependentResourceTypesAll></VersionIndependentResourceTypesAll>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VersionIndependentResourceTypesAllEnum></VersionIndependentResourceTypesAllEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VirtualServiceDetail></VirtualServiceDetail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionBase></VisionBase>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionBaseEnum></VisionBaseEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionEyes></VisionEyes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionEyesEnum></VisionEyesEnum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionPrescription></VisionPrescription>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionPrescription.LensSpecification></VisionPrescription.LensSpecification>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionPrescription.Prism></VisionPrescription.Prism>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<XHTML></XHTML>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
    }

    public function testIsContainableTypeWithJSON()
    {
        $json = new \stdClass();
        $json->resourceType = 'Account';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Account.Balance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Account.Coverage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Account.Diagnosis';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Account.Guarantor';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Account.Procedure';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Account.RelatedAccount';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AccountStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AccountStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionCardinalityBehavior';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionCardinalityBehaviorEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionConditionKind';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionConditionKindEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionGroupingBehavior';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionGroupingBehaviorEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionParticipantType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionParticipantTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionPrecheckBehavior';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionPrecheckBehaviorEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionRelationshipType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionRelationshipTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionRequiredBehavior';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionRequiredBehaviorEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionSelectionBehavior';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionSelectionBehaviorEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActivityDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActivityDefinition.DynamicValue';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActivityDefinition.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActorDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Address';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AddressType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AddressTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AddressUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AddressUseEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdministrableProductDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdministrableProductDefinition.Property';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdministrableProductDefinition.RouteOfAdministration';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdministrableProductDefinition.TargetSpecies';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdministrableProductDefinition.WithdrawalPeriod';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdministrativeGender';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdministrativeGenderEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEvent';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEvent.Causality';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEvent.ContributingFactor';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEvent.MitigatingAction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEvent.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEvent.PreventiveAction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEvent.SupportingInfo';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEvent.SuspectEntity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEventActuality';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEventActualityEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEventStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEventStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Age';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AgeUnits';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AgeUnitsEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AggregationMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AggregationModeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntolerance';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntolerance.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntolerance.Reaction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceCategory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceCategoryEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceCriticality';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceCriticalityEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceSeverity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceSeverityEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllResourceTypes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllResourceTypesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Annotation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Appointment';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Appointment.MonthlyTemplate';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Appointment.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Appointment.RecurrenceTemplate';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Appointment.WeeklyTemplate';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Appointment.YearlyTemplate';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AppointmentResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AppointmentResponseStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AppointmentResponseStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AppointmentStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AppointmentStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ArtifactAssessment';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ArtifactAssessment.Content';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ArtifactAssessmentDisposition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ArtifactAssessmentDispositionEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ArtifactAssessmentInformationType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ArtifactAssessmentInformationTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ArtifactAssessmentWorkflowStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ArtifactAssessmentWorkflowStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionDirectionType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionDirectionTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionManualCompletionType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionManualCompletionTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionOperatorType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionOperatorTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionResponseTypes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionResponseTypesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Attachment';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent.Agent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent.Detail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent.Entity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent.Outcome';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent.Source';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEventAction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEventActionEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEventSeverity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEventSeverityEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Availability';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Availability.AvailableTime';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Availability.NotAvailableTime';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BackboneElement';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BackboneType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'base64Binary';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'base64Binary-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Basic';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Binary';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BindingStrength';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BindingStrengthEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BiologicallyDerivedProduct';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BiologicallyDerivedProduct.Collection';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BiologicallyDerivedProduct.Property';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BiologicallyDerivedProductDispense';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BiologicallyDerivedProductDispense.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BiologicallyDerivedProductDispenseCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BiologicallyDerivedProductDispenseCodesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BodyStructure';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BodyStructure.BodyLandmarkOrientation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BodyStructure.DistanceFromLandmark';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BodyStructure.IncludedStructure';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'boolean';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'boolean-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle.Entry';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle.Link';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle.Request';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle.Response';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle.Search';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BundleType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BundleTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'canonical';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'canonical-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CanonicalResource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Document';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Endpoint';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Implementation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Interaction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Interaction1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Messaging';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Operation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Resource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Rest';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.SearchParam';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Security';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Software';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.SupportedMessage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatementKind';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatementKindEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlan';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlan.Activity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanIntent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanIntentEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CareTeam';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CareTeam.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CareTeamStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CareTeamStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CharacteristicCombination';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CharacteristicCombinationEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ChargeItem';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ChargeItem.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ChargeItemDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ChargeItemDefinition.Applicability';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ChargeItemDefinition.PropertyGroup';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ChargeItemStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ChargeItemStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.Abstract';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.CitedArtifact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.Classification';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.Classification1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.ContributionInstance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.Contributorship';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.Entry';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.Part';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.PublicationForm';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.PublishedIn';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.RelatesTo';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.StatusDate';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.StatusDate1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.Summary';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.Summary1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.Title';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.Version';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Citation.WebLocation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Accident';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.BodySite';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.CareTeam';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Detail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Diagnosis';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Event';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Insurance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Payee';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Procedure';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Related';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.SubDetail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.SupportingInfo';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimProcessingCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimProcessingCodesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.AddItem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Adjudication';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.BodySite';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Detail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Detail1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Error';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Event';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Insurance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Payment';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.ProcessNote';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.ReviewOutcome';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.SubDetail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.SubDetail1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Total';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalImpression';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalImpression.Finding';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalUseDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalUseDefinition.Contraindication';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalUseDefinition.Indication';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalUseDefinition.Interactant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalUseDefinition.Interaction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalUseDefinition.OtherTherapy';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalUseDefinition.UndesirableEffect';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalUseDefinition.Warning';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalUseDefinitionType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalUseDefinitionTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'code';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'code-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeableConcept';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeableReference';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSearchSupport';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSearchSupportEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystem';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystem.Concept';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystem.Designation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystem.Filter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystem.Property';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystem.Property1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystemContentMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystemContentModeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystemHierarchyMeaning';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystemHierarchyMeaningEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Coding';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ColorCodesOrRGB';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ColorCodesOrRGBEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CommonLanguages';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CommonLanguagesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Communication';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Communication.Payload';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CommunicationRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CommunicationRequest.Payload';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompartmentDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompartmentDefinition.Resource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompartmentType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompartmentTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Composition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Composition.Attester';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Composition.Event';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Composition.Section';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompositionStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompositionStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.AdditionalAttribute';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.DependsOn';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.Element';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.Group';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.Property';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.Property1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.Target';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.Unmapped';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMapAttributeType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMapAttributeTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMapGroupUnmappedMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMapGroupUnmappedModeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMapPropertyType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMapPropertyTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMapRelationship';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMapRelationshipEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConcreteFHIRTypes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConcreteFHIRTypesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Condition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Condition.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Condition.Stage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionalDeleteStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionalDeleteStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionalReadStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionalReadStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionDefinition.Medication';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionDefinition.Observation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionDefinition.Plan';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionDefinition.Precondition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionDefinition.Questionnaire';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionPreconditionType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionPreconditionTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionQuestionnairePurpose';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionQuestionnairePurposeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConformanceExpectation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConformanceExpectationEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Consent';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Consent.Actor';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Consent.Data';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Consent.PolicyBasis';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Consent.Provision';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Consent.Verification';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConsentDataMeaning';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConsentDataMeaningEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConsentProvisionType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConsentProvisionTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConsentState';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConsentStateEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConstraintSeverity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConstraintSeverityEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactDetail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactPoint';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactPointSystem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactPointSystemEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactPointUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactPointUseEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Action';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Answer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Asset';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.ContentDefinition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Context';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Friendly';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Legal';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Offer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Party';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Rule';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.SecurityLabel';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Signer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Subject';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Term';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.ValuedItem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContractResourcePublicationStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContractResourcePublicationStatusCodesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContractResourceStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContractResourceStatusCodesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contributor';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContributorType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContributorTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Count';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Coverage';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Coverage.Class';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Coverage.CostToBeneficiary';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Coverage.Exception';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Coverage.PaymentBy';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CoverageEligibilityRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CoverageEligibilityRequest.Diagnosis';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CoverageEligibilityRequest.Event';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CoverageEligibilityRequest.Insurance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CoverageEligibilityRequest.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CoverageEligibilityRequest.SupportingInfo';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CoverageEligibilityResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CoverageEligibilityResponse.Benefit';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CoverageEligibilityResponse.Error';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CoverageEligibilityResponse.Event';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CoverageEligibilityResponse.Insurance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CoverageEligibilityResponse.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CriteriaNotExistsBehavior';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CriteriaNotExistsBehaviorEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataRequirement';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataRequirement.CodeFilter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataRequirement.DateFilter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataRequirement.Sort';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataRequirement.ValueFilter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'date';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'date-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'dateTime';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'dateTime-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'decimal';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'decimal-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DefinitionResourceTypes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DefinitionResourceTypesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DetectedIssue';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DetectedIssue.Evidence';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DetectedIssue.Mitigation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DetectedIssueSeverity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DetectedIssueSeverityEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DetectedIssueStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DetectedIssueStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Device';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Device.ConformsTo';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Device.Name';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Device.Property';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Device.UdiCarrier';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Device.Version';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceAssociation';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceAssociation.Operation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceCorrectiveActionScope';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceCorrectiveActionScopeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinition.ChargeItem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinition.Classification';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinition.ConformsTo';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinition.CorrectiveAction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinition.DeviceName';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinition.Distributor';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinition.Guideline';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinition.HasPart';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinition.Link';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinition.MarketDistribution';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinition.Material';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinition.Packaging';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinition.Property';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinition.RegulatoryIdentifier';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinition.UdiDeviceIdentifier';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinition.Version';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinitionRegulatoryIdentifierType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDefinitionRegulatoryIdentifierTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDispense';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDispense.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDispenseStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceDispenseStatusCodesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetric';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetric.Calibration';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCalibrationState';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCalibrationStateEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCalibrationType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCalibrationTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCategory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCategoryEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricOperationalStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricOperationalStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceNameType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceNameTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceProductionIdentifierInUDI';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceProductionIdentifierInUDIEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceRequest.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceUsage';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceUsage.Adherence';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceUsageStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceUsageStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReport';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReport.Media';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReport.SupportingInfo';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReportStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReportStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiscriminatorType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiscriminatorTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Distance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentModeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference.Attester';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference.Content';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference.Profile';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference.RelatesTo';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReferenceStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReferenceStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DomainResource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Dosage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Dosage.DoseAndRate';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Duration';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Element';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Additional';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Base';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Binding';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Constraint';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Discriminator';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Example';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Mapping';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Slicing';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Type';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EligibilityOutcome';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EligibilityOutcomeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EligibilityRequestPurpose';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EligibilityRequestPurposeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EligibilityResponsePurpose';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EligibilityResponsePurposeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EnableWhenBehavior';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EnableWhenBehaviorEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.Admission';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.Diagnosis';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.Location';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.Reason';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterHistory';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterHistory.Location';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterLocationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterLocationStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Endpoint';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Endpoint.Payload';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EndpointStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EndpointStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EnrollmentOutcome';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EnrollmentOutcomeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EnrollmentRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EnrollmentResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EpisodeOfCare';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EpisodeOfCare.Diagnosis';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EpisodeOfCare.Reason';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EpisodeOfCare.StatusHistory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EpisodeOfCareStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EpisodeOfCareStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventCapabilityMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventCapabilityModeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventResourceTypes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventResourceTypesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventTiming';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventTimingEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Evidence';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Evidence.AttributeEstimate';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Evidence.Certainty';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Evidence.ModelCharacteristic';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Evidence.SampleSize';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Evidence.Statistic';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Evidence.Variable';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Evidence.VariableDefinition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EvidenceReport';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EvidenceReport.Characteristic';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EvidenceReport.RelatesTo';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EvidenceReport.Section';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EvidenceReport.Subject';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EvidenceReport.Target';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EvidenceVariable';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EvidenceVariable.Category';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EvidenceVariable.Characteristic';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EvidenceVariable.DefinitionByCombination';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EvidenceVariable.DefinitionByTypeAndValue';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EvidenceVariable.TimeFromEvent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EvidenceVariableHandling';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EvidenceVariableHandlingEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExampleScenario';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExampleScenario.Actor';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExampleScenario.Alternative';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExampleScenario.ContainedInstance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExampleScenario.Instance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExampleScenario.Operation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExampleScenario.Process';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExampleScenario.Step';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExampleScenario.Version';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExampleScenarioActorType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExampleScenarioActorTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Accident';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.AddItem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Adjudication';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.BenefitBalance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.BodySite';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.BodySite1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.CareTeam';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Detail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Detail1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Diagnosis';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Event';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Financial';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Insurance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Payee';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Payment';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Procedure';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.ProcessNote';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Related';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.ReviewOutcome';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.SubDetail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.SubDetail1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.SupportingInfo';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Total';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefitStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefitStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Expression';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExtendedContactDetail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Extension';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExtensionContextType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExtensionContextTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FamilyHistoryStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FamilyHistoryStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FamilyMemberHistory';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FamilyMemberHistory.Condition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FamilyMemberHistory.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FamilyMemberHistory.Procedure';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRDeviceStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRDeviceStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRPathTypes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRPathTypesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRSubstanceStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRSubstanceStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRTypes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRTypesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRVersion';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRVersionEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FilterOperator';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FilterOperatorEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FinancialResourceStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FinancialResourceStatusCodesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Flag';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FlagStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FlagStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FormularyItem';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FormularyItemStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FormularyItemStatusCodesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GenomicStudy';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GenomicStudy.Analysis';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GenomicStudy.Device';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GenomicStudy.Input';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GenomicStudy.Output';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GenomicStudy.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GenomicStudyStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GenomicStudyStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Goal';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Goal.Target';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GoalLifecycleStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GoalLifecycleStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GraphCompartmentRule';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GraphCompartmentRuleEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GraphCompartmentUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GraphCompartmentUseEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GraphDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GraphDefinition.Compartment';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GraphDefinition.Link';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GraphDefinition.Node';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Group';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Group.Characteristic';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Group.Member';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GroupMembershipBasis';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GroupMembershipBasisEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GroupType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GroupTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuidanceResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuidanceResponseStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuidanceResponseStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuidePageGeneration';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuidePageGenerationEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HealthcareService';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HealthcareService.Eligibility';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HTTPVerb';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HTTPVerbEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HumanName';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'id';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'id-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Identifier';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IdentifierUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IdentifierUseEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IdentityAssuranceLevel';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IdentityAssuranceLevelEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingSelection';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingSelection.ImageRegion2D';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingSelection.ImageRegion3D';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingSelection.Instance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingSelection.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingSelectionDGraphicType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingSelectionDGraphicTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingSelectionStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingSelectionStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingStudy';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingStudy.Instance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingStudy.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingStudy.Series';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingStudyStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingStudyStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization.ProgramEligibility';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization.ProtocolApplied';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization.Reaction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationEvaluation';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationEvaluationStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationEvaluationStatusCodesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationRecommendation';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationRecommendation.DateCriterion';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationRecommendation.Recommendation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationStatusCodesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Definition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.DependsOn';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Global';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Grouping';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Manifest';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Page';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Page1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Resource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Resource1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Template';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Ingredient';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Ingredient.Manufacturer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Ingredient.ReferenceStrength';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Ingredient.Strength';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Ingredient.Substance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IngredientManufacturerRole';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IngredientManufacturerRoleEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'instant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'instant-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InsurancePlan';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InsurancePlan.Benefit';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InsurancePlan.Benefit1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InsurancePlan.Cost';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InsurancePlan.Coverage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InsurancePlan.GeneralCost';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InsurancePlan.Limit';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InsurancePlan.Plan';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InsurancePlan.SpecificCost';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'integer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'integer-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'integer64';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'integer64-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InteractionTrigger';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InteractionTriggerEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InventoryCountType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InventoryCountTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InventoryItem';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InventoryItem.Association';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InventoryItem.Characteristic';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InventoryItem.Description';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InventoryItem.Instance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InventoryItem.Name';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InventoryItem.ResponsibleOrganization';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InventoryItemStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InventoryItemStatusCodesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InventoryReport';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InventoryReport.InventoryListing';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InventoryReport.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InventoryReportStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InventoryReportStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Invoice';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Invoice.LineItem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Invoice.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InvoiceStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InvoiceStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IssueSeverity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IssueSeverityEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IssueType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IssueTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'JurisdictionValueSet';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'JurisdictionValueSetEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Kind';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'KindEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Library';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Linkage';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Linkage.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LinkageType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LinkageTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LinkRelationTypes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LinkRelationTypesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LinkType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LinkTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'List';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'List.Entry';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ListMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ListModeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ListStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ListStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Location';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Location.Position';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LocationMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LocationModeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LocationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LocationStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ManufacturedItemDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ManufacturedItemDefinition.Component';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ManufacturedItemDefinition.Constituent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ManufacturedItemDefinition.Property';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'markdown';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'markdown-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MarketingStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Measure';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Measure.Component';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Measure.Group';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Measure.Population';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Measure.Stratifier';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Measure.SupplementalData';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Measure.Term';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReport';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReport.Component';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReport.Group';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReport.Population';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReport.Population1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReport.Stratifier';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReport.Stratum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReportStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReportStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReportType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReportTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication.Batch';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication.Ingredient';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministration';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministration.Dosage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministration.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministrationStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministrationStatusCodesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispense';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispense.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispense.Substitution';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispenseStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispenseStatusCodesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.Cost';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.Definitional';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.Dosage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.DosingGuideline';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.DrugCharacteristic';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.EnvironmentalSetting';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.IndicationGuideline';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.Ingredient';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.MaxDispense';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.MedicineClassification';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.MonitoringProgram';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.Monograph';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.Packaging';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.PatientCharacteristic';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.Regulatory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.RelatedMedicationKnowledge';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.StorageGuideline';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledge.Substitution';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledgeStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKnowledgeStatusCodesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationRequest.DispenseRequest';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationRequest.InitialFill';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationRequest.Substitution';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationRequestIntent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationRequestIntentEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationrequestStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationrequestStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatement';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatement.Adherence';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatementStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatementStatusCodesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatusCodesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicinalProductDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicinalProductDefinition.Characteristic';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicinalProductDefinition.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicinalProductDefinition.CrossReference';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicinalProductDefinition.Name';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicinalProductDefinition.Operation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicinalProductDefinition.Part';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicinalProductDefinition.Usage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageDefinition.AllowedResponse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageDefinition.Focus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageHeader';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageHeader.Destination';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageHeader.Response';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageHeader.Source';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageheaderResponseRequest';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageheaderResponseRequestEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageSignificanceCategory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageSignificanceCategoryEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Meta';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MetadataResource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MolecularSequence';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MolecularSequence.Edit';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MolecularSequence.Relative';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MolecularSequence.StartingSequence';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MonetaryComponent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Money';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NameUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NameUseEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystem';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystem.UniqueId';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystemIdentifierType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystemIdentifierTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystemType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystemTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Narrative';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NarrativeStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NarrativeStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NoteType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NoteTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionIntake';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionIntake.ConsumedItem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionIntake.IngredientLabel';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionIntake.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.Additive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.Administration';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.EnteralFormula';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.Nutrient';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.OralDiet';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.Schedule';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.Schedule1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.Schedule2';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.Supplement';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.Texture';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionProduct';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionProduct.Characteristic';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionProduct.Ingredient';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionProduct.Instance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionProduct.Nutrient';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionProductStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionProductStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Observation';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Observation.Component';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Observation.ReferenceRange';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Observation.TriggeredBy';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationDataType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationDataTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationDefinition.Component';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationDefinition.QualifiedValue';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationRangeCategory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationRangeCategoryEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'oid';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'oid-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationDefinition.Binding';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationDefinition.Overload';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationDefinition.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationDefinition.ReferencedFrom';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationKind';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationKindEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationOutcome';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationOutcome.Issue';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationOutcomeCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationOutcomeCodesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationParameterScope';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationParameterScopeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationParameterUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationParameterUseEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Organization';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Organization.Qualification';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OrganizationAffiliation';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OrientationType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OrientationTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PackagedProductDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PackagedProductDefinition.ContainedItem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PackagedProductDefinition.LegalStatusOfSupply';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PackagedProductDefinition.Packaging';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PackagedProductDefinition.Property';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ParameterDefinition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Parameters';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Parameters.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ParticipantResourceTypes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ParticipantResourceTypesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ParticipationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ParticipationStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient.Communication';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient.Link';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PaymentNotice';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PaymentOutcome';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PaymentOutcomeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PaymentReconciliation';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PaymentReconciliation.Allocation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PaymentReconciliation.ProcessNote';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Period';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Permission';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Permission.Activity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Permission.Data';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Permission.Justification';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Permission.Resource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Permission.Rule';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PermissionRuleCombining';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PermissionRuleCombiningEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PermissionStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PermissionStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Person';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Person.Communication';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Person.Link';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.Action';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.Actor';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.Condition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.DynamicValue';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.Goal';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.Input';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.Option';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.Output';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.RelatedAction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.Target';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'positiveInt';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'positiveInt-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Practitioner';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Practitioner.Communication';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Practitioner.Qualification';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PractitionerRole';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PrimitiveType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Procedure';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Procedure.FocalDevice';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Procedure.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProductShelfLife';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PropertyRepresentation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PropertyRepresentationEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PropertyType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PropertyTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Provenance';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Provenance.Agent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Provenance.Entity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProvenanceEntityRole';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProvenanceEntityRoleEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PublicationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PublicationStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Quantity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuantityComparator';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuantityComparatorEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Questionnaire';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Questionnaire.AnswerOption';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Questionnaire.EnableWhen';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Questionnaire.Initial';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Questionnaire.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireAnswerConstraint';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireAnswerConstraintEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireItemDisabledDisplay';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireItemDisabledDisplayEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireItemOperator';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireItemOperatorEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireItemType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireItemTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireResponse.Answer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireResponse.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireResponseStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireResponseStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Range';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Ratio';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RatioRange';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Reference';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ReferenceHandlingPolicy';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ReferenceHandlingPolicyEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ReferenceVersionRules';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ReferenceVersionRulesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RegulatedAuthorization';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RegulatedAuthorization.Case';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RelatedArtifact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RelatedArtifactType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RelatedArtifactTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RelatedArtifactTypeExpanded';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RelatedArtifactTypeExpandedEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RelatedPerson';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RelatedPerson.Communication';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RemittanceOutcome';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RemittanceOutcomeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ReportRelationshipType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ReportRelationshipTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestIntent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestIntentEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestOrchestration';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestOrchestration.Action';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestOrchestration.Condition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestOrchestration.DynamicValue';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestOrchestration.Input';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestOrchestration.Output';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestOrchestration.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestOrchestration.RelatedAction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestPriority';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestPriorityEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestResourceTypes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestResourceTypesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Requirements';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Requirements.Statement';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResearchStudy';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResearchStudy.AssociatedParty';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResearchStudy.ComparisonGroup';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResearchStudy.Label';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResearchStudy.Objective';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResearchStudy.OutcomeMeasure';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResearchStudy.ProgressStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResearchStudy.Recruitment';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResearchSubject';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResearchSubject.Progress';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Resource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceContainer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceVersionPolicy';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceVersionPolicyEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResponseType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResponseTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RestfulCapabilityMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RestfulCapabilityModeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RiskAssessment';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RiskAssessment.Prediction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SampledData';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SampledDataDataType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SampledDataDataType-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Schedule';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchComparator';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchComparatorEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchEntryMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchEntryModeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchModifierCode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchModifierCodeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchParameter';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchParameter.Component';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchParamType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchParamTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchProcessingModeType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchProcessingModeTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SequenceType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SequenceTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ServiceRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ServiceRequest.OrderDetail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ServiceRequest.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ServiceRequest.PatientInstruction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Signature';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SlicingRules';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SlicingRulesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Slot';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SlotStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SlotStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SortDirection';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SortDirectionEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SPDXLicense';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SPDXLicenseEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen.Collection';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen.Container';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen.Feature';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen.Processing';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SpecimenCombined';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SpecimenCombinedEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SpecimenContainedPreference';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SpecimenContainedPreferenceEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SpecimenDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SpecimenDefinition.Additive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SpecimenDefinition.Container';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SpecimenDefinition.Handling';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SpecimenDefinition.TypeTested';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SpecimenStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SpecimenStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StrandType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StrandTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'string';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'string-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinition.Context';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinition.Differential';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinition.Mapping';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinition.Snapshot';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinitionKind';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinitionKindEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap.Const';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap.Dependent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap.Group';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap.Input';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap.Rule';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap.Source';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap.Structure';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap.Target';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapGroupTypeMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapGroupTypeModeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapInputMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapInputModeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapModelMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapModelModeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapSourceListMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapSourceListModeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapTargetListMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapTargetListModeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapTransform';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapTransformEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubmitDataUpdateType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubmitDataUpdateTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Subscription';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Subscription.FilterBy';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Subscription.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionNotificationType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionNotificationTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionPayloadContent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionPayloadContentEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionStatus';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionStatus.NotificationEvent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionStatusCodesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionTopic';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionTopic.CanFilterBy';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionTopic.EventTrigger';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionTopic.NotificationShape';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionTopic.QueryCriteria';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionTopic.ResourceTrigger';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Substance';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Substance.Ingredient';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceDefinition.Characterization';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceDefinition.Code';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceDefinition.Moiety';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceDefinition.MolecularWeight';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceDefinition.Name';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceDefinition.Official';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceDefinition.Property';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceDefinition.Relationship';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceDefinition.Representation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceDefinition.SourceMaterial';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceDefinition.Structure';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceNucleicAcid';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceNucleicAcid.Linkage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceNucleicAcid.Subunit';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceNucleicAcid.Sugar';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstancePolymer';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstancePolymer.DegreeOfPolymerisation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstancePolymer.MonomerSet';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstancePolymer.Repeat';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstancePolymer.RepeatUnit';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstancePolymer.StartingMaterial';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstancePolymer.StructuralRepresentation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceProtein';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceProtein.Subunit';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceReferenceInformation';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceReferenceInformation.Gene';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceReferenceInformation.GeneElement';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceReferenceInformation.Target';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceSourceMaterial';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceSourceMaterial.Author';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceSourceMaterial.FractionDescription';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceSourceMaterial.Hybrid';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceSourceMaterial.Organism';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceSourceMaterial.OrganismGeneral';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubstanceSourceMaterial.PartDescription';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyDelivery';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyDelivery.SuppliedItem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyDeliveryStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyDeliveryStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyRequest.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyRequestStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyRequestStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SystemRestfulInteraction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SystemRestfulInteractionEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Task';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Task.Input';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Task.Output';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Task.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Task.Restriction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TaskIntent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TaskIntentEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TaskStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TaskStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TerminologyCapabilities';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TerminologyCapabilities.Closure';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TerminologyCapabilities.CodeSystem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TerminologyCapabilities.Expansion';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TerminologyCapabilities.Filter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TerminologyCapabilities.Implementation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TerminologyCapabilities.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TerminologyCapabilities.Software';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TerminologyCapabilities.Translation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TerminologyCapabilities.ValidateCode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TerminologyCapabilities.Version';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestPlan';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestPlan.Assertion';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestPlan.Dependency';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestPlan.Dependency1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestPlan.Script';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestPlan.TestCase';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestPlan.TestData';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestPlan.TestRun';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Action';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Action1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Action2';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Assert';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Operation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Requirement';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Setup';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Teardown';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Test';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReportActionResult';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReportActionResultEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReportParticipantType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReportParticipantTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReportResult';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReportResultEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReportStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReportStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Action';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Action1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Action2';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Assert';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Capability';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Destination';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Fixture';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Link';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Metadata';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Operation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Origin';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.RequestHeader';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Requirement';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Scope';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Setup';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Teardown';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Test';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Variable';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScriptRequestMethodCode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScriptRequestMethodCodeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'time';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'time-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Timing';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Timing.Repeat';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Transport';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Transport.Input';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Transport.Output';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Transport.Restriction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TransportIntent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TransportIntentEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TransportStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TransportStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TriggerDefinition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TriggeredBytype';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TriggeredBytypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TriggerType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TriggerTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TypeDerivationRule';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TypeDerivationRuleEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TypeRestfulInteraction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TypeRestfulInteractionEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UDIEntryType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UDIEntryTypeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UnitsOfTime';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UnitsOfTimeEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'unsignedInt';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'unsignedInt-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'uri';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'uri-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'url';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'url-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UsageContext';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Use';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UseEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'uuid';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'uuid-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Compose';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Concept';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Contains';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Designation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Expansion';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Filter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Include';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Property';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Property1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Scope';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.SubProperty';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VerificationResult';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VerificationResult.Attestation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VerificationResult.PrimarySource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VerificationResult.Validator';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VerificationResultStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VerificationResultStatusEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VersionIndependentResourceTypesAll';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VersionIndependentResourceTypesAllEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VirtualServiceDetail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionBase';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionBaseEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionEyes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionEyesEnum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionPrescription';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionPrescription.LensSpecification';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionPrescription.Prism';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'XHTML';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
    }
}
