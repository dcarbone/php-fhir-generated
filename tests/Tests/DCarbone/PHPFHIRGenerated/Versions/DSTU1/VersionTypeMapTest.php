<?php /** @noinspection PhpFullyQualifiedNameUsageInspection */

namespace Tests\DCarbone\PHPFHIRGenerated\Versions\DSTU1;

/*!
 * This class was generated with the PHPFHIR library (https://github.com/dcarbone/php-fhir) using
 * class definitions from HL7 FHIR (https://www.hl7.org/fhir/)
 * 
 * Class creation date: February 12th, 2025 19:32+0000
 * 
 * PHPFHIR Copyright:
 * 
 * Copyright 2016-2025 Daniel Carbone (daniel.p.carbone@gmail.com)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 *
 * FHIR Copyright Notice:
 *
 *   Copyright (c) 2011-2013, HL7, Inc.
 *   All rights reserved.
 * 
 *   Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *    * Neither the name of HL7 nor the names of its contributors may be used to
 *      endorse or promote products derived from this software without specific
 *      prior written permission.
 * 
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *   IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 * 
 * 
 *   Generated on Tue, Sep 30, 2014 18:08+1000 for FHIR v0.0.82
 */

use DCarbone\PHPFHIRGenerated\Versions\DSTU1\VersionTypeMap;
use PHPUnit\Framework\TestCase;

class VersionTypeMapTest extends TestCase
{
    public function testGetTypeClassnameWithInvalidString()
    {
        $this->assertNull(VersionTypeMap::getTypeClassname('\\stdClass'));
    }

    public function testGetTypeClassnameWithInvalidXML()
    {
        $sxe = new \SimpleXMLElement('<NotAResource></NotAResource>');
        $this->assertNull(VersionTypeMap::getTypeClassname($sxe));
    }

    public function testGetTypeClassnameWithJSONMissingResourceType()
    {
        $json = new \stdClass();
        $json->jimmy = 'Observation';
        $this->assertNull(VersionTypeMap::getTypeClassname($json));
    }

    public function testGetTypeClassnameWithJSONInvalidResourceType()
    {
        $json = new \stdClass();
        $json->resourceType = 'Steve';
        $this->assertNull(VersionTypeMap::getTypeClassname($json));
    }

    public function testGetTypeClassnameWithTypeName()
    {
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBase64BinaryPrimitive', VersionTypeMap::getTypeClassname('base64Binary-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBooleanPrimitive', VersionTypeMap::getTypeClassname('boolean-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRCodePrimitive', VersionTypeMap::getTypeClassname('code-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDatePrimitive', VersionTypeMap::getTypeClassname('date-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDateTimePrimitive', VersionTypeMap::getTypeClassname('dateTime-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDecimalPrimitive', VersionTypeMap::getTypeClassname('decimal-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement', VersionTypeMap::getTypeClassname('Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddress', VersionTypeMap::getTypeClassname('Address'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddressUse', VersionTypeMap::getTypeClassname('AddressUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAggregationMode', VersionTypeMap::getTypeClassname('AggregationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAlertStatus', VersionTypeMap::getTypeClassname('AlertStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAttachment', VersionTypeMap::getTypeClassname('Attachment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement', VersionTypeMap::getTypeClassname('BackboneElement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionExposure', VersionTypeMap::getTypeClassname('AdverseReaction.Exposure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionSymptom', VersionTypeMap::getTypeClassname('AdverseReaction.Symptom'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity', VersionTypeMap::getTypeClassname('CarePlan.Activity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanGoal', VersionTypeMap::getTypeClassname('CarePlan.Goal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant', VersionTypeMap::getTypeClassname('CarePlan.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanSimple', VersionTypeMap::getTypeClassname('CarePlan.Simple'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester', VersionTypeMap::getTypeClassname('Composition.Attester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent', VersionTypeMap::getTypeClassname('Composition.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection', VersionTypeMap::getTypeClassname('Composition.Section'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapConcept', VersionTypeMap::getTypeClassname('ConceptMap.Concept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn', VersionTypeMap::getTypeClassname('ConceptMap.DependsOn'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapMap', VersionTypeMap::getTypeClassname('ConceptMap.Map'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence', VersionTypeMap::getTypeClassname('Condition.Evidence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionLocation', VersionTypeMap::getTypeClassname('Condition.Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionRelatedItem', VersionTypeMap::getTypeClassname('Condition.RelatedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage', VersionTypeMap::getTypeClassname('Condition.Stage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate', VersionTypeMap::getTypeClassname('Conformance.Certificate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument', VersionTypeMap::getTypeClassname('Conformance.Document'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent', VersionTypeMap::getTypeClassname('Conformance.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation', VersionTypeMap::getTypeClassname('Conformance.Implementation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging', VersionTypeMap::getTypeClassname('Conformance.Messaging'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation', VersionTypeMap::getTypeClassname('Conformance.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation1', VersionTypeMap::getTypeClassname('Conformance.Operation1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceQuery', VersionTypeMap::getTypeClassname('Conformance.Query'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource', VersionTypeMap::getTypeClassname('Conformance.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest', VersionTypeMap::getTypeClassname('Conformance.Rest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam', VersionTypeMap::getTypeClassname('Conformance.SearchParam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity', VersionTypeMap::getTypeClassname('Conformance.Security'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware', VersionTypeMap::getTypeClassname('Conformance.Software'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportChannel', VersionTypeMap::getTypeClassname('DeviceObservationReport.Channel'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportMetric', VersionTypeMap::getTypeClassname('DeviceObservationReport.Metric'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportVirtualDevice', VersionTypeMap::getTypeClassname('DeviceObservationReport.VirtualDevice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent', VersionTypeMap::getTypeClassname('DiagnosticOrder.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem', VersionTypeMap::getTypeClassname('DiagnosticOrder.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage', VersionTypeMap::getTypeClassname('DiagnosticReport.Image'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext', VersionTypeMap::getTypeClassname('DocumentReference.Context'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceParameter', VersionTypeMap::getTypeClassname('DocumentReference.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo', VersionTypeMap::getTypeClassname('DocumentReference.RelatesTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceService', VersionTypeMap::getTypeClassname('DocumentReference.Service'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAccomodation', VersionTypeMap::getTypeClassname('Encounter.Accomodation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization', VersionTypeMap::getTypeClassname('Encounter.Hospitalization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation', VersionTypeMap::getTypeClassname('Encounter.Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant', VersionTypeMap::getTypeClassname('Encounter.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryCondition', VersionTypeMap::getTypeClassname('FamilyHistory.Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryRelation', VersionTypeMap::getTypeClassname('FamilyHistory.Relation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic', VersionTypeMap::getTypeClassname('Group.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance', VersionTypeMap::getTypeClassname('ImagingStudy.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries', VersionTypeMap::getTypeClassname('ImagingStudy.Series'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion', VersionTypeMap::getTypeClassname('ImmunizationRecommendation.DateCriterion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol', VersionTypeMap::getTypeClassname('ImmunizationRecommendation.Protocol'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation', VersionTypeMap::getTypeClassname('ImmunizationRecommendation.Recommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation', VersionTypeMap::getTypeClassname('Immunization.Explanation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction', VersionTypeMap::getTypeClassname('Immunization.Reaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol', VersionTypeMap::getTypeClassname('Immunization.VaccinationProtocol'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry', VersionTypeMap::getTypeClassname('List.Entry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition', VersionTypeMap::getTypeClassname('Location.Position'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage', VersionTypeMap::getTypeClassname('MedicationAdministration.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDispense', VersionTypeMap::getTypeClassname('MedicationDispense.Dispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosage', VersionTypeMap::getTypeClassname('MedicationDispense.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution', VersionTypeMap::getTypeClassname('MedicationDispense.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDispense', VersionTypeMap::getTypeClassname('MedicationPrescription.Dispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDosageInstruction', VersionTypeMap::getTypeClassname('MedicationPrescription.DosageInstruction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionSubstitution', VersionTypeMap::getTypeClassname('MedicationPrescription.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage', VersionTypeMap::getTypeClassname('MedicationStatement.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent', VersionTypeMap::getTypeClassname('Medication.Content'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient', VersionTypeMap::getTypeClassname('Medication.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage', VersionTypeMap::getTypeClassname('Medication.Package'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct', VersionTypeMap::getTypeClassname('Medication.Product'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination', VersionTypeMap::getTypeClassname('MessageHeader.Destination'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse', VersionTypeMap::getTypeClassname('MessageHeader.Response'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource', VersionTypeMap::getTypeClassname('MessageHeader.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange', VersionTypeMap::getTypeClassname('Observation.ReferenceRange'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated', VersionTypeMap::getTypeClassname('Observation.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue', VersionTypeMap::getTypeClassname('OperationOutcome.Issue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen', VersionTypeMap::getTypeClassname('Order.When'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact', VersionTypeMap::getTypeClassname('Organization.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal', VersionTypeMap::getTypeClassname('Patient.Animal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact', VersionTypeMap::getTypeClassname('Patient.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink', VersionTypeMap::getTypeClassname('Patient.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification', VersionTypeMap::getTypeClassname('Practitioner.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer', VersionTypeMap::getTypeClassname('Procedure.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureRelatedItem', VersionTypeMap::getTypeClassname('Procedure.RelatedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileBinding', VersionTypeMap::getTypeClassname('Profile.Binding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileConstraint', VersionTypeMap::getTypeClassname('Profile.Constraint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileDefinition', VersionTypeMap::getTypeClassname('Profile.Definition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileElement', VersionTypeMap::getTypeClassname('Profile.Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileExtensionDefn', VersionTypeMap::getTypeClassname('Profile.ExtensionDefn'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping', VersionTypeMap::getTypeClassname('Profile.Mapping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping1', VersionTypeMap::getTypeClassname('Profile.Mapping1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileQuery', VersionTypeMap::getTypeClassname('Profile.Query'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSearchParam', VersionTypeMap::getTypeClassname('Profile.SearchParam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSlicing', VersionTypeMap::getTypeClassname('Profile.Slicing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileStructure', VersionTypeMap::getTypeClassname('Profile.Structure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileType', VersionTypeMap::getTypeClassname('Profile.Type'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent', VersionTypeMap::getTypeClassname('Provenance.Agent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity', VersionTypeMap::getTypeClassname('Provenance.Entity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuery\FHIRQueryResponse', VersionTypeMap::getTypeClassname('Query.Response'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup', VersionTypeMap::getTypeClassname('Questionnaire.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion', VersionTypeMap::getTypeClassname('Questionnaire.Question'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource', VersionTypeMap::getTypeClassname('Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAdverseReaction', VersionTypeMap::getTypeClassname('AdverseReaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAlert', VersionTypeMap::getTypeClassname('Alert'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAllergyIntolerance', VersionTypeMap::getTypeClassname('AllergyIntolerance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCarePlan', VersionTypeMap::getTypeClassname('CarePlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRComposition', VersionTypeMap::getTypeClassname('Composition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConceptMap', VersionTypeMap::getTypeClassname('ConceptMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCondition', VersionTypeMap::getTypeClassname('Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConformance', VersionTypeMap::getTypeClassname('Conformance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDevice', VersionTypeMap::getTypeClassname('Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDeviceObservationReport', VersionTypeMap::getTypeClassname('DeviceObservationReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticOrder', VersionTypeMap::getTypeClassname('DiagnosticOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticReport', VersionTypeMap::getTypeClassname('DiagnosticReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentManifest', VersionTypeMap::getTypeClassname('DocumentManifest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentReference', VersionTypeMap::getTypeClassname('DocumentReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIREncounter', VersionTypeMap::getTypeClassname('Encounter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRFamilyHistory', VersionTypeMap::getTypeClassname('FamilyHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRGroup', VersionTypeMap::getTypeClassname('Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImagingStudy', VersionTypeMap::getTypeClassname('ImagingStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunization', VersionTypeMap::getTypeClassname('Immunization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunizationRecommendation', VersionTypeMap::getTypeClassname('ImmunizationRecommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRList', VersionTypeMap::getTypeClassname('List'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRLocation', VersionTypeMap::getTypeClassname('Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedia', VersionTypeMap::getTypeClassname('Media'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedication', VersionTypeMap::getTypeClassname('Medication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationAdministration', VersionTypeMap::getTypeClassname('MedicationAdministration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationDispense', VersionTypeMap::getTypeClassname('MedicationDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationPrescription', VersionTypeMap::getTypeClassname('MedicationPrescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationStatement', VersionTypeMap::getTypeClassname('MedicationStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMessageHeader', VersionTypeMap::getTypeClassname('MessageHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRObservation', VersionTypeMap::getTypeClassname('Observation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROperationOutcome', VersionTypeMap::getTypeClassname('OperationOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrder', VersionTypeMap::getTypeClassname('Order'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrderResponse', VersionTypeMap::getTypeClassname('OrderResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrganization', VersionTypeMap::getTypeClassname('Organization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROther', VersionTypeMap::getTypeClassname('Other'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPatient', VersionTypeMap::getTypeClassname('Patient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPractitioner', VersionTypeMap::getTypeClassname('Practitioner'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProcedure', VersionTypeMap::getTypeClassname('Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProfile', VersionTypeMap::getTypeClassname('Profile'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProvenance', VersionTypeMap::getTypeClassname('Provenance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuery', VersionTypeMap::getTypeClassname('Query'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuestionnaire', VersionTypeMap::getTypeClassname('Questionnaire'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRRelatedPerson', VersionTypeMap::getTypeClassname('RelatedPerson'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSecurityEvent', VersionTypeMap::getTypeClassname('SecurityEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSpecimen', VersionTypeMap::getTypeClassname('Specimen'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSubstance', VersionTypeMap::getTypeClassname('Substance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSupply', VersionTypeMap::getTypeClassname('Supply'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRValueSet', VersionTypeMap::getTypeClassname('ValueSet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventDetail', VersionTypeMap::getTypeClassname('SecurityEvent.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventEvent', VersionTypeMap::getTypeClassname('SecurityEvent.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventNetwork', VersionTypeMap::getTypeClassname('SecurityEvent.Network'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventObject', VersionTypeMap::getTypeClassname('SecurityEvent.Object'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventParticipant', VersionTypeMap::getTypeClassname('SecurityEvent.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventSource', VersionTypeMap::getTypeClassname('SecurityEvent.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection', VersionTypeMap::getTypeClassname('Specimen.Collection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer', VersionTypeMap::getTypeClassname('Specimen.Container'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenSource', VersionTypeMap::getTypeClassname('Specimen.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment', VersionTypeMap::getTypeClassname('Specimen.Treatment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient', VersionTypeMap::getTypeClassname('Substance.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance', VersionTypeMap::getTypeClassname('Substance.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSupply\FHIRSupplyDispense', VersionTypeMap::getTypeClassname('Supply.Dispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose', VersionTypeMap::getTypeClassname('ValueSet.Compose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept', VersionTypeMap::getTypeClassname('ValueSet.Concept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains', VersionTypeMap::getTypeClassname('ValueSet.Contains'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDefine', VersionTypeMap::getTypeClassname('ValueSet.Define'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion', VersionTypeMap::getTypeClassname('ValueSet.Expansion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter', VersionTypeMap::getTypeClassname('ValueSet.Filter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude', VersionTypeMap::getTypeClassname('ValueSet.Include'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary', VersionTypeMap::getTypeClassname('base64Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary\FHIRBinary', VersionTypeMap::getTypeClassname('Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBindingConformance', VersionTypeMap::getTypeClassname('BindingConformance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBoolean', VersionTypeMap::getTypeClassname('boolean'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityCategory', VersionTypeMap::getTypeClassname('CarePlanActivityCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityStatus', VersionTypeMap::getTypeClassname('CarePlanActivityStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanGoalStatus', VersionTypeMap::getTypeClassname('CarePlanGoalStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanStatus', VersionTypeMap::getTypeClassname('CarePlanStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCausalityExpectation', VersionTypeMap::getTypeClassname('CausalityExpectation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCode', VersionTypeMap::getTypeClassname('code'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCodeableConcept', VersionTypeMap::getTypeClassname('CodeableConcept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCoding', VersionTypeMap::getTypeClassname('Coding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionAttestationMode', VersionTypeMap::getTypeClassname('CompositionAttestationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionStatus', VersionTypeMap::getTypeClassname('CompositionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConceptMapEquivalence', VersionTypeMap::getTypeClassname('ConceptMapEquivalence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionRelationshipType', VersionTypeMap::getTypeClassname('ConditionRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionStatus', VersionTypeMap::getTypeClassname('ConditionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceEventMode', VersionTypeMap::getTypeClassname('ConformanceEventMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceStatementStatus', VersionTypeMap::getTypeClassname('ConformanceStatementStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConstraintSeverity', VersionTypeMap::getTypeClassname('ConstraintSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContact', VersionTypeMap::getTypeClassname('Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactSystem', VersionTypeMap::getTypeClassname('ContactSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactUse', VersionTypeMap::getTypeClassname('ContactUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCriticality', VersionTypeMap::getTypeClassname('Criticality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDate', VersionTypeMap::getTypeClassname('date'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDateTime', VersionTypeMap::getTypeClassname('dateTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal', VersionTypeMap::getTypeClassname('decimal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal\FHIRScore', VersionTypeMap::getTypeClassname('score'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderPriority', VersionTypeMap::getTypeClassname('DiagnosticOrderPriority'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderStatus', VersionTypeMap::getTypeClassname('DiagnosticOrderStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticReportStatus', VersionTypeMap::getTypeClassname('DiagnosticReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentMode', VersionTypeMap::getTypeClassname('DocumentMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentReferenceStatus', VersionTypeMap::getTypeClassname('DocumentReferenceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentRelationshipType', VersionTypeMap::getTypeClassname('DocumentRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterClass', VersionTypeMap::getTypeClassname('EncounterClass'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterState', VersionTypeMap::getTypeClassname('EncounterState'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREventTiming', VersionTypeMap::getTypeClassname('EventTiming'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExposureType', VersionTypeMap::getTypeClassname('ExposureType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtension', VersionTypeMap::getTypeClassname('Extension'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtensionContext', VersionTypeMap::getTypeClassname('ExtensionContext'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRFilterOperator', VersionTypeMap::getTypeClassname('FilterOperator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRGroupType', VersionTypeMap::getTypeClassname('GroupType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHierarchicalRelationshipType', VersionTypeMap::getTypeClassname('HierarchicalRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHumanName', VersionTypeMap::getTypeClassname('HumanName'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRId', VersionTypeMap::getTypeClassname('id'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifier', VersionTypeMap::getTypeClassname('Identifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifierUse', VersionTypeMap::getTypeClassname('IdentifierUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRImagingModality', VersionTypeMap::getTypeClassname('ImagingModality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstanceAvailability', VersionTypeMap::getTypeClassname('InstanceAvailability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstant', VersionTypeMap::getTypeClassname('instant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger', VersionTypeMap::getTypeClassname('integer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger\FHIRTotalResults', VersionTypeMap::getTypeClassname('totalResults'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIssueSeverity', VersionTypeMap::getTypeClassname('IssueSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLinkType', VersionTypeMap::getTypeClassname('LinkType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRListMode', VersionTypeMap::getTypeClassname('ListMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationMode', VersionTypeMap::getTypeClassname('LocationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationStatus', VersionTypeMap::getTypeClassname('LocationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMediaType', VersionTypeMap::getTypeClassname('MediaType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationAdministrationStatus', VersionTypeMap::getTypeClassname('MedicationAdministrationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationDispenseStatus', VersionTypeMap::getTypeClassname('MedicationDispenseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationKind', VersionTypeMap::getTypeClassname('MedicationKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationPrescriptionStatus', VersionTypeMap::getTypeClassname('MedicationPrescriptionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMessageSignificanceCategory', VersionTypeMap::getTypeClassname('MessageSignificanceCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRModality', VersionTypeMap::getTypeClassname('Modality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNameUse', VersionTypeMap::getTypeClassname('NameUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrative', VersionTypeMap::getTypeClassname('Narrative'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrativeStatus', VersionTypeMap::getTypeClassname('NarrativeStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationRelationshipType', VersionTypeMap::getTypeClassname('ObservationRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationReliability', VersionTypeMap::getTypeClassname('ObservationReliability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationStatus', VersionTypeMap::getTypeClassname('ObservationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROid', VersionTypeMap::getTypeClassname('oid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROrderOutcomeStatus', VersionTypeMap::getTypeClassname('OrderOutcomeStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPeriod', VersionTypeMap::getTypeClassname('Period'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProcedureRelationshipType', VersionTypeMap::getTypeClassname('ProcedureRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPropertyRepresentation', VersionTypeMap::getTypeClassname('PropertyRepresentation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProvenanceEntityRole', VersionTypeMap::getTypeClassname('ProvenanceEntityRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity', VersionTypeMap::getTypeClassname('Quantity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantityCompararator', VersionTypeMap::getTypeClassname('QuantityCompararator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRAge', VersionTypeMap::getTypeClassname('Age'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRCount', VersionTypeMap::getTypeClassname('Count'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDistance', VersionTypeMap::getTypeClassname('Distance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDuration', VersionTypeMap::getTypeClassname('Duration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRMoney', VersionTypeMap::getTypeClassname('Money'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQueryOutcome', VersionTypeMap::getTypeClassname('QueryOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuestionnaireStatus', VersionTypeMap::getTypeClassname('QuestionnaireStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRange', VersionTypeMap::getTypeClassname('Range'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRatio', VersionTypeMap::getTypeClassname('Ratio'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRReactionSeverity', VersionTypeMap::getTypeClassname('ReactionSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceProfileStatus', VersionTypeMap::getTypeClassname('ResourceProfileStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceReference', VersionTypeMap::getTypeClassname('ResourceReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResponseType', VersionTypeMap::getTypeClassname('ResponseType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulConformanceMode', VersionTypeMap::getTypeClassname('RestfulConformanceMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationSystem', VersionTypeMap::getTypeClassname('RestfulOperationSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationType', VersionTypeMap::getTypeClassname('RestfulOperationType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledData', VersionTypeMap::getTypeClassname('SampledData'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledDataDataType', VersionTypeMap::getTypeClassname('SampledDataDataType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule', VersionTypeMap::getTypeClassname('Schedule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule\FHIRScheduleRepeat', VersionTypeMap::getTypeClassname('Schedule.Repeat'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSearchParamType', VersionTypeMap::getTypeClassname('SearchParamType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventAction', VersionTypeMap::getTypeClassname('SecurityEventAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectLifecycle', VersionTypeMap::getTypeClassname('SecurityEventObjectLifecycle'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectRole', VersionTypeMap::getTypeClassname('SecurityEventObjectRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectType', VersionTypeMap::getTypeClassname('SecurityEventObjectType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventOutcome', VersionTypeMap::getTypeClassname('SecurityEventOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventParticipantNetworkType', VersionTypeMap::getTypeClassname('SecurityEventParticipantNetworkType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityStatus', VersionTypeMap::getTypeClassname('SensitivityStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityType', VersionTypeMap::getTypeClassname('SensitivityType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSlicingRules', VersionTypeMap::getTypeClassname('SlicingRules'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRString', VersionTypeMap::getTypeClassname('string'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyDispenseStatus', VersionTypeMap::getTypeClassname('SupplyDispenseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyStatus', VersionTypeMap::getTypeClassname('SupplyStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUnitsOfTime', VersionTypeMap::getTypeClassname('UnitsOfTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUri', VersionTypeMap::getTypeClassname('uri'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUuid', VersionTypeMap::getTypeClassname('uuid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRValueSetStatus', VersionTypeMap::getTypeClassname('ValueSetStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive', VersionTypeMap::getTypeClassname('id-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive\FHIRXmlIdRef', VersionTypeMap::getTypeClassname('xmlIdRef'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRInstantPrimitive', VersionTypeMap::getTypeClassname('instant-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIntegerPrimitive', VersionTypeMap::getTypeClassname('integer-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIROidPrimitive', VersionTypeMap::getTypeClassname('oid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRResource\FHIRResourceInline', VersionTypeMap::getTypeClassname('Resource.Inline'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRSampledDataDataTypePrimitive', VersionTypeMap::getTypeClassname('SampledDataDataType-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive', VersionTypeMap::getTypeClassname('string-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAddressUseList', VersionTypeMap::getTypeClassname('AddressUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAggregationModeList', VersionTypeMap::getTypeClassname('AggregationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAlertStatusList', VersionTypeMap::getTypeClassname('AlertStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRBindingConformanceList', VersionTypeMap::getTypeClassname('BindingConformance-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityCategoryList', VersionTypeMap::getTypeClassname('CarePlanActivityCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList', VersionTypeMap::getTypeClassname('CarePlanActivityStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanGoalStatusList', VersionTypeMap::getTypeClassname('CarePlanGoalStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanStatusList', VersionTypeMap::getTypeClassname('CarePlanStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCausalityExpectationList', VersionTypeMap::getTypeClassname('CausalityExpectation-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList', VersionTypeMap::getTypeClassname('CompositionAttestationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionStatusList', VersionTypeMap::getTypeClassname('CompositionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList', VersionTypeMap::getTypeClassname('ConceptMapEquivalence-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionRelationshipTypeList', VersionTypeMap::getTypeClassname('ConditionRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionStatusList', VersionTypeMap::getTypeClassname('ConditionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceEventModeList', VersionTypeMap::getTypeClassname('ConformanceEventMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceStatementStatusList', VersionTypeMap::getTypeClassname('ConformanceStatementStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConstraintSeverityList', VersionTypeMap::getTypeClassname('ConstraintSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactSystemList', VersionTypeMap::getTypeClassname('ContactSystem-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactUseList', VersionTypeMap::getTypeClassname('ContactUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCriticalityList', VersionTypeMap::getTypeClassname('Criticality-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList', VersionTypeMap::getTypeClassname('DiagnosticOrderPriority-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList', VersionTypeMap::getTypeClassname('DiagnosticOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList', VersionTypeMap::getTypeClassname('DiagnosticReportStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentModeList', VersionTypeMap::getTypeClassname('DocumentMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList', VersionTypeMap::getTypeClassname('DocumentReferenceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList', VersionTypeMap::getTypeClassname('DocumentRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterClassList', VersionTypeMap::getTypeClassname('EncounterClass-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterStateList', VersionTypeMap::getTypeClassname('EncounterState-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREventTimingList', VersionTypeMap::getTypeClassname('EventTiming-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExposureTypeList', VersionTypeMap::getTypeClassname('ExposureType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExtensionContextList', VersionTypeMap::getTypeClassname('ExtensionContext-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRFilterOperatorList', VersionTypeMap::getTypeClassname('FilterOperator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRGroupTypeList', VersionTypeMap::getTypeClassname('GroupType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRHierarchicalRelationshipTypeList', VersionTypeMap::getTypeClassname('HierarchicalRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIdentifierUseList', VersionTypeMap::getTypeClassname('IdentifierUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRImagingModalityList', VersionTypeMap::getTypeClassname('ImagingModality-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList', VersionTypeMap::getTypeClassname('InstanceAvailability-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIssueSeverityList', VersionTypeMap::getTypeClassname('IssueSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLinkTypeList', VersionTypeMap::getTypeClassname('LinkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRListModeList', VersionTypeMap::getTypeClassname('ListMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationModeList', VersionTypeMap::getTypeClassname('LocationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationStatusList', VersionTypeMap::getTypeClassname('LocationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMediaTypeList', VersionTypeMap::getTypeClassname('MediaType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList', VersionTypeMap::getTypeClassname('MedicationAdministrationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList', VersionTypeMap::getTypeClassname('MedicationDispenseStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationKindList', VersionTypeMap::getTypeClassname('MedicationKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationPrescriptionStatusList', VersionTypeMap::getTypeClassname('MedicationPrescriptionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList', VersionTypeMap::getTypeClassname('MessageSignificanceCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRModalityList', VersionTypeMap::getTypeClassname('Modality-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNameUseList', VersionTypeMap::getTypeClassname('NameUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNarrativeStatusList', VersionTypeMap::getTypeClassname('NarrativeStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList', VersionTypeMap::getTypeClassname('ObservationRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationReliabilityList', VersionTypeMap::getTypeClassname('ObservationReliability-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationStatusList', VersionTypeMap::getTypeClassname('ObservationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIROrderOutcomeStatusList', VersionTypeMap::getTypeClassname('OrderOutcomeStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProcedureRelationshipTypeList', VersionTypeMap::getTypeClassname('ProcedureRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList', VersionTypeMap::getTypeClassname('PropertyRepresentation-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList', VersionTypeMap::getTypeClassname('ProvenanceEntityRole-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuantityCompararatorList', VersionTypeMap::getTypeClassname('QuantityCompararator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQueryOutcomeList', VersionTypeMap::getTypeClassname('QueryOutcome-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList', VersionTypeMap::getTypeClassname('QuestionnaireStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRReactionSeverityList', VersionTypeMap::getTypeClassname('ReactionSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceProfileStatusList', VersionTypeMap::getTypeClassname('ResourceProfileStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType', VersionTypeMap::getTypeClassname('ResourceType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType\FHIRResourceNamesPlusBinary', VersionTypeMap::getTypeClassname('ResourceNamesPlusBinary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResponseTypeList', VersionTypeMap::getTypeClassname('ResponseType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList', VersionTypeMap::getTypeClassname('RestfulConformanceMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationSystemList', VersionTypeMap::getTypeClassname('RestfulOperationSystem-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationTypeList', VersionTypeMap::getTypeClassname('RestfulOperationType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSearchParamTypeList', VersionTypeMap::getTypeClassname('SearchParamType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventActionList', VersionTypeMap::getTypeClassname('SecurityEventAction-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectLifecycleList', VersionTypeMap::getTypeClassname('SecurityEventObjectLifecycle-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectRoleList', VersionTypeMap::getTypeClassname('SecurityEventObjectRole-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectTypeList', VersionTypeMap::getTypeClassname('SecurityEventObjectType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventOutcomeList', VersionTypeMap::getTypeClassname('SecurityEventOutcome-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventParticipantNetworkTypeList', VersionTypeMap::getTypeClassname('SecurityEventParticipantNetworkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityStatusList', VersionTypeMap::getTypeClassname('SensitivityStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityTypeList', VersionTypeMap::getTypeClassname('SensitivityType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSlicingRulesList', VersionTypeMap::getTypeClassname('SlicingRules-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyDispenseStatusList', VersionTypeMap::getTypeClassname('SupplyDispenseStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyStatusList', VersionTypeMap::getTypeClassname('SupplyStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList', VersionTypeMap::getTypeClassname('UnitsOfTime-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRValueSetStatusList', VersionTypeMap::getTypeClassname('ValueSetStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUriPrimitive', VersionTypeMap::getTypeClassname('uri-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUuidPrimitive', VersionTypeMap::getTypeClassname('uuid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRXHTML', VersionTypeMap::getTypeClassname('XHTML'));
    }

    public function testGetContainedTypeClassnameWithTypeName()
    {
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('base64Binary-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('boolean-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('code-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('date-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('dateTime-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('decimal-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Element'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Address'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AddressUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AggregationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AlertStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Attachment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BackboneElement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseReaction.Exposure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseReaction.Symptom'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlan.Activity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlan.Goal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlan.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlan.Simple'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Composition.Attester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Composition.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Composition.Section'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.Concept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.DependsOn'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.Map'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Condition.Evidence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Condition.Location'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Condition.RelatedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Condition.Stage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Certificate'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Document'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Implementation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Messaging'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Operation1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Query'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Rest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.SearchParam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Security'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Software'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceObservationReport.Channel'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceObservationReport.Metric'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceObservationReport.VirtualDevice'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticOrder.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticOrder.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticReport.Image'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReference.Context'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReference.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReference.RelatesTo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReference.Service'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.Accomodation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.Hospitalization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.Location'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FamilyHistory.Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FamilyHistory.Relation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Group.Characteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingStudy.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingStudy.Series'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImmunizationRecommendation.DateCriterion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImmunizationRecommendation.Protocol'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImmunizationRecommendation.Recommendation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Immunization.Explanation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Immunization.Reaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Immunization.VaccinationProtocol'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('List.Entry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Location.Position'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationAdministration.Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationDispense.Dispense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationDispense.Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationDispense.Substitution'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationPrescription.Dispense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationPrescription.DosageInstruction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationPrescription.Substitution'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationStatement.Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Medication.Content'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Medication.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Medication.Package'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Medication.Product'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageHeader.Destination'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageHeader.Response'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageHeader.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Observation.ReferenceRange'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Observation.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationOutcome.Issue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Order.When'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Organization.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Patient.Animal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Patient.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Patient.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Practitioner.Qualification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Procedure.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Procedure.RelatedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Profile.Binding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Profile.Constraint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Profile.Definition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Profile.Element'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Profile.ExtensionDefn'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Profile.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Profile.Mapping1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Profile.Query'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Profile.SearchParam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Profile.Slicing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Profile.Structure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Profile.Type'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Provenance.Agent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Provenance.Entity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Query.Response'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Questionnaire.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Questionnaire.Question'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAdverseReaction', VersionTypeMap::getContainedTypeClassname('AdverseReaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAlert', VersionTypeMap::getContainedTypeClassname('Alert'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAllergyIntolerance', VersionTypeMap::getContainedTypeClassname('AllergyIntolerance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCarePlan', VersionTypeMap::getContainedTypeClassname('CarePlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRComposition', VersionTypeMap::getContainedTypeClassname('Composition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConceptMap', VersionTypeMap::getContainedTypeClassname('ConceptMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCondition', VersionTypeMap::getContainedTypeClassname('Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConformance', VersionTypeMap::getContainedTypeClassname('Conformance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDevice', VersionTypeMap::getContainedTypeClassname('Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDeviceObservationReport', VersionTypeMap::getContainedTypeClassname('DeviceObservationReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticOrder', VersionTypeMap::getContainedTypeClassname('DiagnosticOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticReport', VersionTypeMap::getContainedTypeClassname('DiagnosticReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentManifest', VersionTypeMap::getContainedTypeClassname('DocumentManifest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentReference', VersionTypeMap::getContainedTypeClassname('DocumentReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIREncounter', VersionTypeMap::getContainedTypeClassname('Encounter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRFamilyHistory', VersionTypeMap::getContainedTypeClassname('FamilyHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRGroup', VersionTypeMap::getContainedTypeClassname('Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImagingStudy', VersionTypeMap::getContainedTypeClassname('ImagingStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunization', VersionTypeMap::getContainedTypeClassname('Immunization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunizationRecommendation', VersionTypeMap::getContainedTypeClassname('ImmunizationRecommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRList', VersionTypeMap::getContainedTypeClassname('List'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRLocation', VersionTypeMap::getContainedTypeClassname('Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedia', VersionTypeMap::getContainedTypeClassname('Media'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedication', VersionTypeMap::getContainedTypeClassname('Medication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationAdministration', VersionTypeMap::getContainedTypeClassname('MedicationAdministration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationDispense', VersionTypeMap::getContainedTypeClassname('MedicationDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationPrescription', VersionTypeMap::getContainedTypeClassname('MedicationPrescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationStatement', VersionTypeMap::getContainedTypeClassname('MedicationStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMessageHeader', VersionTypeMap::getContainedTypeClassname('MessageHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRObservation', VersionTypeMap::getContainedTypeClassname('Observation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROperationOutcome', VersionTypeMap::getContainedTypeClassname('OperationOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrder', VersionTypeMap::getContainedTypeClassname('Order'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrderResponse', VersionTypeMap::getContainedTypeClassname('OrderResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrganization', VersionTypeMap::getContainedTypeClassname('Organization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROther', VersionTypeMap::getContainedTypeClassname('Other'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPatient', VersionTypeMap::getContainedTypeClassname('Patient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPractitioner', VersionTypeMap::getContainedTypeClassname('Practitioner'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProcedure', VersionTypeMap::getContainedTypeClassname('Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProfile', VersionTypeMap::getContainedTypeClassname('Profile'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProvenance', VersionTypeMap::getContainedTypeClassname('Provenance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuery', VersionTypeMap::getContainedTypeClassname('Query'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuestionnaire', VersionTypeMap::getContainedTypeClassname('Questionnaire'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRRelatedPerson', VersionTypeMap::getContainedTypeClassname('RelatedPerson'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSecurityEvent', VersionTypeMap::getContainedTypeClassname('SecurityEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSpecimen', VersionTypeMap::getContainedTypeClassname('Specimen'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSubstance', VersionTypeMap::getContainedTypeClassname('Substance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSupply', VersionTypeMap::getContainedTypeClassname('Supply'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRValueSet', VersionTypeMap::getContainedTypeClassname('ValueSet'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEvent.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEvent.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEvent.Network'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEvent.Object'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEvent.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEvent.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Specimen.Collection'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Specimen.Container'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Specimen.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Specimen.Treatment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Substance.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Substance.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Supply.Dispense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Compose'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Concept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Contains'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Define'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Expansion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Filter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Include'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('base64Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary\FHIRBinary', VersionTypeMap::getContainedTypeClassname('Binary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BindingConformance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('boolean'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanActivityCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanActivityStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanGoalStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CausalityExpectation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('code'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeableConcept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Coding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompositionAttestationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompositionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMapEquivalence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConformanceEventMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConformanceStatementStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConstraintSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Criticality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('date'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('dateTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('decimal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('score'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticOrderPriority'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticOrderStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticReportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReferenceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterClass'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterState'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventTiming'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExposureType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Extension'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExtensionContext'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FilterOperator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GroupType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HierarchicalRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HumanName'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('id'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Identifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IdentifierUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingModality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InstanceAvailability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('instant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('integer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('totalResults'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IssueSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LinkType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ListMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LocationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LocationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MediaType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationAdministrationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationDispenseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationPrescriptionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageSignificanceCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Modality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NameUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Narrative'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NarrativeStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationReliability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('oid'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OrderOutcomeStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Period'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProcedureRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PropertyRepresentation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProvenanceEntityRole'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Quantity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuantityCompararator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Age'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Count'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Distance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Duration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Money'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QueryOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Range'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Ratio'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ReactionSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceProfileStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceReference'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResponseType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RestfulConformanceMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RestfulOperationSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RestfulOperationType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SampledData'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SampledDataDataType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Schedule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Schedule.Repeat'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchParamType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEventAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEventObjectLifecycle'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEventObjectRole'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEventObjectType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEventOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEventParticipantNetworkType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SensitivityStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SensitivityType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SlicingRules'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('string'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyDispenseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UnitsOfTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('uri'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('uuid'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSetStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('id-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('xmlIdRef'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('instant-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('integer-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('oid-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Resource.Inline'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SampledDataDataType-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('string-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AddressUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AggregationMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AlertStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BindingConformance-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanActivityCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanActivityStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanGoalStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CausalityExpectation-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompositionAttestationMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompositionStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMapEquivalence-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConformanceEventMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConformanceStatementStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConstraintSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactSystem-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Criticality-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticOrderPriority-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticOrderStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticReportStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReferenceStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterClass-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterState-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventTiming-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExposureType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExtensionContext-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FilterOperator-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GroupType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HierarchicalRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IdentifierUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingModality-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InstanceAvailability-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IssueSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LinkType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ListMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LocationMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LocationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MediaType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationAdministrationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationDispenseStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationKind-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationPrescriptionStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageSignificanceCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Modality-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NameUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NarrativeStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationReliability-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OrderOutcomeStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProcedureRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PropertyRepresentation-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProvenanceEntityRole-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuantityCompararator-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QueryOutcome-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ReactionSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceProfileStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceNamesPlusBinary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResponseType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RestfulConformanceMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RestfulOperationSystem-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RestfulOperationType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchParamType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEventAction-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEventObjectLifecycle-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEventObjectRole-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEventObjectType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEventOutcome-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SecurityEventParticipantNetworkType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SensitivityStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SensitivityType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SlicingRules-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyDispenseStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UnitsOfTime-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSetStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('uri-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('uuid-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('XHTML'));
    }

    public function testIsContainableResourceWithClassname()
    {
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBase64BinaryPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBase64BinaryPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBase64BinaryPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBase64BinaryPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBooleanPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBooleanPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBooleanPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBooleanPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRCodePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRCodePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRCodePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRCodePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDatePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDatePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDatePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDatePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDateTimePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDateTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDateTimePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDateTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDecimalPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDecimalPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDecimalPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDecimalPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddress'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddress'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddress'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddress'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddressUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddressUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAggregationMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAggregationMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAlertStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAlertStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAlertStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAlertStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAttachment'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAttachment'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAttachment'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAttachment'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionExposure'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionExposure'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionExposure'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionExposure'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionSymptom'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionSymptom'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionSymptom'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionSymptom'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanGoal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanGoal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanGoal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanGoal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanSimple'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanSimple'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanSimple'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanSimple'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapConcept'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapConcept'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapMap'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapMap'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapMap'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapMap'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionLocation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionLocation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionLocation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionLocation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionRelatedItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionRelatedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionRelatedItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionRelatedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceQuery'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceQuery'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceQuery'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceQuery'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportChannel'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportChannel'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportChannel'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportChannel'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportMetric'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportMetric'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportMetric'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportMetric'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportVirtualDevice'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportVirtualDevice'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportVirtualDevice'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportVirtualDevice'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceService'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceService'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceService'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceService'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAccomodation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAccomodation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAccomodation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAccomodation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryCondition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryCondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryCondition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryCondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryRelation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryRelation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryRelation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryRelation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDispense'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDispense'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDispense'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDispense'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDispense'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDispense'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDispense'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDispense'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDosageInstruction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDosageInstruction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDosageInstruction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDosageInstruction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionSubstitution'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionSubstitution'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureRelatedItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureRelatedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureRelatedItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureRelatedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileBinding'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileBinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileBinding'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileBinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileConstraint'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileConstraint'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileDefinition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileDefinition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileElement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileElement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileExtensionDefn'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileExtensionDefn'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileExtensionDefn'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileExtensionDefn'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileQuery'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileQuery'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileQuery'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileQuery'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSearchParam'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSearchParam'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSlicing'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSlicing'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSlicing'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSlicing'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileStructure'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileStructure'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileStructure'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileStructure'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuery\FHIRQueryResponse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuery\FHIRQueryResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuery\FHIRQueryResponse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuery\FHIRQueryResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAdverseReaction'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAdverseReaction'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAdverseReaction'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAdverseReaction'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAlert'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAlert'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAlert'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAlert'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAllergyIntolerance'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAllergyIntolerance'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAllergyIntolerance'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAllergyIntolerance'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCarePlan'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCarePlan'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCarePlan'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCarePlan'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRComposition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRComposition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRComposition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRComposition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConceptMap'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConceptMap'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConceptMap'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConceptMap'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCondition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCondition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCondition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCondition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConformance'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConformance'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConformance'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConformance'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDevice'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDevice'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDevice'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDevice'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDeviceObservationReport'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDeviceObservationReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDeviceObservationReport'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDeviceObservationReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticOrder'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticOrder'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticOrder'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticOrder'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticReport'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticReport'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentManifest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentManifest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentManifest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentManifest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentReference'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentReference'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentReference'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentReference'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIREncounter'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIREncounter'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIREncounter'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIREncounter'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRFamilyHistory'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRFamilyHistory'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRFamilyHistory'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRFamilyHistory'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRGroup'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRGroup'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRGroup'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRGroup'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImagingStudy'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImagingStudy'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImagingStudy'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImagingStudy'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunization'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunization'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunization'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunization'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunizationRecommendation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunizationRecommendation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunizationRecommendation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunizationRecommendation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRList'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRList'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRList'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRList'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRLocation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRLocation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRLocation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRLocation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedia'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedia'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedia'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedia'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedication'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedication'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedication'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedication'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationAdministration'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationAdministration'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationAdministration'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationAdministration'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationDispense'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationDispense'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationDispense'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationDispense'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationPrescription'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationPrescription'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationPrescription'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationPrescription'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationStatement'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationStatement'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationStatement'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationStatement'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMessageHeader'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMessageHeader'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMessageHeader'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMessageHeader'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRObservation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRObservation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRObservation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRObservation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROperationOutcome'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROperationOutcome'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROperationOutcome'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROperationOutcome'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrder'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrder'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrder'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrder'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrderResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrderResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrderResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrderResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrganization'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrganization'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrganization'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrganization'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROther'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROther'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROther'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROther'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPatient'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPatient'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPatient'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPatient'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPractitioner'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPractitioner'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPractitioner'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPractitioner'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProcedure'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProcedure'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProcedure'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProcedure'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProfile'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProfile'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProfile'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProfile'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProvenance'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProvenance'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProvenance'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProvenance'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuery'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuery'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuery'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuery'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuestionnaire'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuestionnaire'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuestionnaire'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuestionnaire'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRRelatedPerson'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRRelatedPerson'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRRelatedPerson'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRRelatedPerson'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSecurityEvent'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSecurityEvent'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSecurityEvent'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSecurityEvent'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSpecimen'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSpecimen'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSpecimen'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSpecimen'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSubstance'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSubstance'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSubstance'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSubstance'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSupply'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSupply'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSupply'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSupply'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRValueSet'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRValueSet'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRValueSet'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRValueSet'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventNetwork'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventNetwork'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventNetwork'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventNetwork'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventObject'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventObject'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventObject'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventObject'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventSource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventSource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenSource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenSource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSupply\FHIRSupplyDispense'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSupply\FHIRSupplyDispense'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSupply\FHIRSupplyDispense'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSupply\FHIRSupplyDispense'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDefine'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDefine'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDefine'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDefine'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary\FHIRBinary'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary\FHIRBinary'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary\FHIRBinary'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary\FHIRBinary'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBindingConformance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBindingConformance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBindingConformance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBindingConformance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBoolean'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBoolean'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBoolean'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBoolean'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityCategory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityCategory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanGoalStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanGoalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanGoalStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanGoalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCausalityExpectation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCausalityExpectation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCausalityExpectation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCausalityExpectation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCodeableConcept'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCodeableConcept'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCoding'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCoding'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCoding'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCoding'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionAttestationMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionAttestationMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConceptMapEquivalence'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConceptMapEquivalence'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionRelationshipType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionRelationshipType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceEventMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceEventMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceEventMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceEventMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceStatementStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceStatementStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConstraintSeverity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConstraintSeverity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactSystem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactSystem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactSystem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactSystem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCriticality'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCriticality'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDate'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDate'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDate'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDate'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDateTime'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDateTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDateTime'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDateTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal\FHIRScore'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal\FHIRScore'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal\FHIRScore'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal\FHIRScore'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderPriority'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderPriority'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderPriority'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderPriority'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticReportStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticReportStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentReferenceStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentReferenceStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentRelationshipType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentRelationshipType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterClass'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterClass'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterClass'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterClass'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterState'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterState'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterState'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterState'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREventTiming'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREventTiming'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExposureType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExposureType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExposureType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExposureType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtension'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtension'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtension'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtension'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtensionContext'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtensionContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtensionContext'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtensionContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRFilterOperator'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRFilterOperator'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRGroupType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRGroupType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRGroupType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRGroupType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHierarchicalRelationshipType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHierarchicalRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHierarchicalRelationshipType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHierarchicalRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHumanName'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHumanName'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHumanName'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHumanName'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRId'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRId'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRId'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRId'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifier'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifier'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifierUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifierUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRImagingModality'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRImagingModality'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRImagingModality'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRImagingModality'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstanceAvailability'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstanceAvailability'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstanceAvailability'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstanceAvailability'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger\FHIRTotalResults'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger\FHIRTotalResults'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger\FHIRTotalResults'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger\FHIRTotalResults'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIssueSeverity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIssueSeverity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLinkType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLinkType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLinkType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLinkType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRListMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRListMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRListMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRListMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMediaType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMediaType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMediaType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMediaType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationAdministrationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationAdministrationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationAdministrationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationAdministrationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationDispenseStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationDispenseStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationKind'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationKind'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationPrescriptionStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationPrescriptionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationPrescriptionStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationPrescriptionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMessageSignificanceCategory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMessageSignificanceCategory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRModality'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRModality'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRModality'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRModality'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNameUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNameUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNameUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNameUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrative'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrative'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrative'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrative'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrativeStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrativeStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationRelationshipType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationRelationshipType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationReliability'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationReliability'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationReliability'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationReliability'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROid'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROid'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROid'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROid'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROrderOutcomeStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROrderOutcomeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROrderOutcomeStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROrderOutcomeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPeriod'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPeriod'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPeriod'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPeriod'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProcedureRelationshipType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProcedureRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProcedureRelationshipType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProcedureRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPropertyRepresentation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPropertyRepresentation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProvenanceEntityRole'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProvenanceEntityRole'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantityCompararator'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantityCompararator'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantityCompararator'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantityCompararator'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRAge'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRAge'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRCount'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRCount'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDistance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDistance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDuration'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDuration'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRMoney'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRMoney'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRMoney'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRMoney'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQueryOutcome'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQueryOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQueryOutcome'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQueryOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuestionnaireStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuestionnaireStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuestionnaireStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuestionnaireStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRange'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRange'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRatio'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRatio'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRatio'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRatio'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRReactionSeverity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRReactionSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRReactionSeverity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRReactionSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceProfileStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceProfileStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceProfileStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceProfileStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceReference'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceReference'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceReference'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceReference'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResponseType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResponseType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulConformanceMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulConformanceMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulConformanceMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulConformanceMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationSystem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationSystem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationSystem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationSystem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledData'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledData'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledData'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledData'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledDataDataType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledDataDataType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule\FHIRScheduleRepeat'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule\FHIRScheduleRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule\FHIRScheduleRepeat'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule\FHIRScheduleRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSearchParamType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSearchParamType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectLifecycle'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectLifecycle'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectLifecycle'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectLifecycle'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectRole'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectRole'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectRole'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectRole'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventOutcome'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventOutcome'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventParticipantNetworkType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventParticipantNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventParticipantNetworkType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventParticipantNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSlicingRules'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSlicingRules'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRString'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRString'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRString'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRString'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyDispenseStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyDispenseStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUnitsOfTime'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUnitsOfTime'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUri'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUri'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUri'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUri'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUuid'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUuid'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUuid'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUuid'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRValueSetStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRValueSetStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRValueSetStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRValueSetStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive\FHIRXmlIdRef'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive\FHIRXmlIdRef'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive\FHIRXmlIdRef'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive\FHIRXmlIdRef'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRInstantPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRInstantPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRInstantPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRInstantPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIntegerPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIntegerPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIntegerPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIntegerPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIROidPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIROidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIROidPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIROidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRResource\FHIRResourceInline'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRResource\FHIRResourceInline'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRResource\FHIRResourceInline'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRResource\FHIRResourceInline'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRSampledDataDataTypePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRSampledDataDataTypePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAddressUseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAddressUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAddressUseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAddressUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAggregationModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAggregationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAggregationModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAggregationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAlertStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAlertStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAlertStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAlertStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRBindingConformanceList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRBindingConformanceList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRBindingConformanceList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRBindingConformanceList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityCategoryList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityCategoryList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanGoalStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanGoalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanGoalStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanGoalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCausalityExpectationList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCausalityExpectationList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCausalityExpectationList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCausalityExpectationList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionRelationshipTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionRelationshipTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceEventModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceEventModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceEventModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceEventModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceStatementStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceStatementStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceStatementStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceStatementStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConstraintSeverityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConstraintSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConstraintSeverityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConstraintSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactSystemList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactSystemList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactSystemList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactSystemList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactUseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactUseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCriticalityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCriticalityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCriticalityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCriticalityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterClassList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterClassList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterClassList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterClassList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterStateList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterStateList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterStateList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterStateList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREventTimingList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREventTimingList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREventTimingList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREventTimingList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExposureTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExposureTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExposureTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExposureTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExtensionContextList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExtensionContextList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExtensionContextList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExtensionContextList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRFilterOperatorList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRFilterOperatorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRFilterOperatorList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRFilterOperatorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRGroupTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRGroupTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRGroupTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRGroupTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRHierarchicalRelationshipTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRHierarchicalRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRHierarchicalRelationshipTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRHierarchicalRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIdentifierUseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIdentifierUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIdentifierUseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIdentifierUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRImagingModalityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRImagingModalityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRImagingModalityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRImagingModalityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIssueSeverityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIssueSeverityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLinkTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLinkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLinkTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLinkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRListModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRListModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMediaTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMediaTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMediaTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMediaTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationKindList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationKindList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationPrescriptionStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationPrescriptionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationPrescriptionStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationPrescriptionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRModalityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRModalityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRModalityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRModalityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNameUseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNameUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNameUseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNameUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNarrativeStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNarrativeStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNarrativeStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNarrativeStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationReliabilityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationReliabilityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationReliabilityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationReliabilityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIROrderOutcomeStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIROrderOutcomeStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIROrderOutcomeStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIROrderOutcomeStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProcedureRelationshipTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProcedureRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProcedureRelationshipTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProcedureRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuantityCompararatorList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuantityCompararatorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuantityCompararatorList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuantityCompararatorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQueryOutcomeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQueryOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQueryOutcomeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQueryOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRReactionSeverityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRReactionSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRReactionSeverityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRReactionSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceProfileStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceProfileStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceProfileStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceProfileStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType\FHIRResourceNamesPlusBinary'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType\FHIRResourceNamesPlusBinary'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType\FHIRResourceNamesPlusBinary'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType\FHIRResourceNamesPlusBinary'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResponseTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResponseTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResponseTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResponseTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationSystemList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationSystemList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationSystemList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationSystemList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSearchParamTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSearchParamTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSearchParamTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSearchParamTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventActionList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventActionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventActionList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventActionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectLifecycleList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectLifecycleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectLifecycleList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectLifecycleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectRoleList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectRoleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectRoleList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectRoleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventOutcomeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventOutcomeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventParticipantNetworkTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventParticipantNetworkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventParticipantNetworkTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventParticipantNetworkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSlicingRulesList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSlicingRulesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSlicingRulesList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSlicingRulesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyDispenseStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyDispenseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyDispenseStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyDispenseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRValueSetStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRValueSetStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRValueSetStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRValueSetStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUriPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUriPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUriPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUriPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUuidPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUuidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUuidPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUuidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRXHTML'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRXHTML'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRXHTML'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRXHTML'));
    }

    public function testIsContainableResourceWithInstance()
    {
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBase64BinaryPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBooleanPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRCodePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDatePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDateTimePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDecimalPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddress;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddressUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAggregationMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAlertStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAttachment;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionExposure;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionSymptom;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanGoal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanSimple;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapConcept;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapMap;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionLocation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionRelatedItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceQuery;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportChannel;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportMetric;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportVirtualDevice;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceService;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAccomodation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryCondition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryRelation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDispense;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDispense;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDosageInstruction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureRelatedItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileBinding;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileConstraint;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileDefinition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileElement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileExtensionDefn;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileQuery;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSearchParam;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSlicing;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileStructure;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuery\FHIRQueryResponse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAdverseReaction;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAlert;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAllergyIntolerance;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCarePlan;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRComposition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConceptMap;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCondition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConformance;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDevice;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDeviceObservationReport;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticOrder;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticReport;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentManifest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentReference;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIREncounter;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRFamilyHistory;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRGroup;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImagingStudy;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunization;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunizationRecommendation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRList;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRLocation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedia;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedication;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationAdministration;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationDispense;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationPrescription;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationStatement;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMessageHeader;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRObservation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROperationOutcome;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrder;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrderResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrganization;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROther;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPatient;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPractitioner;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProcedure;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProfile;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProvenance;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuery;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuestionnaire;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRRelatedPerson;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSecurityEvent;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSpecimen;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSubstance;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSupply;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRValueSet;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventNetwork;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventObject;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventSource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenSource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSupply\FHIRSupplyDispense;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDefine;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary\FHIRBinary;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBindingConformance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBoolean;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityCategory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanGoalStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCausalityExpectation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCodeableConcept;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCoding;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionAttestationMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConceptMapEquivalence;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceEventMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceStatementStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConstraintSeverity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactSystem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCriticality;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDate;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDateTime;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal\FHIRScore;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderPriority;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticReportStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentReferenceStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterClass;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterState;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREventTiming;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExposureType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtension;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtensionContext;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRFilterOperator;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRGroupType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHierarchicalRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHumanName;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRId;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifier;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifierUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRImagingModality;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstanceAvailability;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger\FHIRTotalResults;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIssueSeverity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLinkType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRListMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMediaType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationAdministrationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationDispenseStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationKind;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationPrescriptionStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMessageSignificanceCategory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRModality;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNameUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrative;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrativeStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationReliability;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROid;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROrderOutcomeStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPeriod;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProcedureRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPropertyRepresentation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProvenanceEntityRole;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantityCompararator;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRAge;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRCount;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDistance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDuration;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRMoney;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQueryOutcome;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuestionnaireStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRange;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRatio;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRReactionSeverity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceProfileStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceReference;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResponseType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulConformanceMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationSystem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledData;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledDataDataType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule\FHIRScheduleRepeat;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSearchParamType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectLifecycle;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectRole;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventOutcome;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventParticipantNetworkType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSlicingRules;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRString;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyDispenseStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUnitsOfTime;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUri;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUuid;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRValueSetStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive\FHIRXmlIdRef;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRInstantPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIntegerPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIROidPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRResource\FHIRResourceInline;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRSampledDataDataTypePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAddressUseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAggregationModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAlertStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRBindingConformanceList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanGoalStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCausalityExpectationList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceEventModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceStatementStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConstraintSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactSystemList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactUseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCriticalityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterClassList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterStateList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREventTimingList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExposureTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExtensionContextList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRFilterOperatorList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRGroupTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRHierarchicalRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIdentifierUseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRImagingModalityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIssueSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLinkTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRListModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMediaTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationKindList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationPrescriptionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRModalityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNameUseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNarrativeStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationReliabilityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIROrderOutcomeStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProcedureRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuantityCompararatorList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQueryOutcomeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRReactionSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceProfileStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType\FHIRResourceNamesPlusBinary;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResponseTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationSystemList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSearchParamTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventActionList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectLifecycleList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectRoleList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventOutcomeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventParticipantNetworkTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSlicingRulesList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyDispenseStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRValueSetStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUriPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUuidPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRXHTML;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
    }

    public function testIsContainableTypeWithXML()
    {
        $sxe = new \SimpleXMLElement('<Address></Address>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AddressUse></AddressUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AddressUse-list></AddressUse-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseReaction></AdverseReaction>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseReaction.Exposure></AdverseReaction.Exposure>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseReaction.Symptom></AdverseReaction.Symptom>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Age></Age>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AggregationMode></AggregationMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AggregationMode-list></AggregationMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Alert></Alert>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AlertStatus></AlertStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AlertStatus-list></AlertStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntolerance></AllergyIntolerance>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Attachment></Attachment>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BackboneElement></BackboneElement>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<base64Binary></base64Binary>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<base64Binary-primitive></base64Binary-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Binary></Binary>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BindingConformance></BindingConformance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BindingConformance-list></BindingConformance-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<boolean></boolean>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<boolean-primitive></boolean-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlan></CarePlan>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlan.Activity></CarePlan.Activity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlan.Goal></CarePlan.Goal>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlan.Participant></CarePlan.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlan.Simple></CarePlan.Simple>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanActivityCategory></CarePlanActivityCategory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanActivityCategory-list></CarePlanActivityCategory-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanActivityStatus></CarePlanActivityStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanActivityStatus-list></CarePlanActivityStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanGoalStatus></CarePlanGoalStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanGoalStatus-list></CarePlanGoalStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanStatus></CarePlanStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanStatus-list></CarePlanStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CausalityExpectation></CausalityExpectation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CausalityExpectation-list></CausalityExpectation-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<code></code>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<code-primitive></code-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeableConcept></CodeableConcept>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Coding></Coding>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Composition></Composition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Composition.Attester></Composition.Attester>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Composition.Event></Composition.Event>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Composition.Section></Composition.Section>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompositionAttestationMode></CompositionAttestationMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompositionAttestationMode-list></CompositionAttestationMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompositionStatus></CompositionStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompositionStatus-list></CompositionStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap></ConceptMap>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.Concept></ConceptMap.Concept>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.DependsOn></ConceptMap.DependsOn>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.Map></ConceptMap.Map>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMapEquivalence></ConceptMapEquivalence>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMapEquivalence-list></ConceptMapEquivalence-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Condition></Condition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Condition.Evidence></Condition.Evidence>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Condition.Location></Condition.Location>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Condition.RelatedItem></Condition.RelatedItem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Condition.Stage></Condition.Stage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionRelationshipType></ConditionRelationshipType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionRelationshipType-list></ConditionRelationshipType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionStatus></ConditionStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionStatus-list></ConditionStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance></Conformance>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Certificate></Conformance.Certificate>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Document></Conformance.Document>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Event></Conformance.Event>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Implementation></Conformance.Implementation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Messaging></Conformance.Messaging>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Operation></Conformance.Operation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Operation1></Conformance.Operation1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Query></Conformance.Query>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Resource></Conformance.Resource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Rest></Conformance.Rest>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.SearchParam></Conformance.SearchParam>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Security></Conformance.Security>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Software></Conformance.Software>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConformanceEventMode></ConformanceEventMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConformanceEventMode-list></ConformanceEventMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConformanceStatementStatus></ConformanceStatementStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConformanceStatementStatus-list></ConformanceStatementStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConstraintSeverity></ConstraintSeverity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConstraintSeverity-list></ConstraintSeverity-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contact></Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactSystem></ContactSystem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactSystem-list></ContactSystem-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactUse></ContactUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactUse-list></ContactUse-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Count></Count>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Criticality></Criticality>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Criticality-list></Criticality-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<date></date>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<date-primitive></date-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<dateTime></dateTime>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<dateTime-primitive></dateTime-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<decimal></decimal>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<decimal-primitive></decimal-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Device></Device>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceObservationReport></DeviceObservationReport>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceObservationReport.Channel></DeviceObservationReport.Channel>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceObservationReport.Metric></DeviceObservationReport.Metric>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceObservationReport.VirtualDevice></DeviceObservationReport.VirtualDevice>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticOrder></DiagnosticOrder>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticOrder.Event></DiagnosticOrder.Event>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticOrder.Item></DiagnosticOrder.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticOrderPriority></DiagnosticOrderPriority>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticOrderPriority-list></DiagnosticOrderPriority-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticOrderStatus></DiagnosticOrderStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticOrderStatus-list></DiagnosticOrderStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReport></DiagnosticReport>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReport.Image></DiagnosticReport.Image>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReportStatus></DiagnosticReportStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReportStatus-list></DiagnosticReportStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Distance></Distance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentManifest></DocumentManifest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentMode></DocumentMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentMode-list></DocumentMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference></DocumentReference>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference.Context></DocumentReference.Context>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference.Parameter></DocumentReference.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference.RelatesTo></DocumentReference.RelatesTo>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference.Service></DocumentReference.Service>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReferenceStatus></DocumentReferenceStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReferenceStatus-list></DocumentReferenceStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentRelationshipType></DocumentRelationshipType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentRelationshipType-list></DocumentRelationshipType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Duration></Duration>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Element></Element>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter></Encounter>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.Accomodation></Encounter.Accomodation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.Hospitalization></Encounter.Hospitalization>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.Location></Encounter.Location>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.Participant></Encounter.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterClass></EncounterClass>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterClass-list></EncounterClass-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterState></EncounterState>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterState-list></EncounterState-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventTiming></EventTiming>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventTiming-list></EventTiming-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExposureType></ExposureType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExposureType-list></ExposureType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Extension></Extension>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExtensionContext></ExtensionContext>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExtensionContext-list></ExtensionContext-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FamilyHistory></FamilyHistory>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FamilyHistory.Condition></FamilyHistory.Condition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FamilyHistory.Relation></FamilyHistory.Relation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FilterOperator></FilterOperator>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FilterOperator-list></FilterOperator-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Group></Group>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Group.Characteristic></Group.Characteristic>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GroupType></GroupType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GroupType-list></GroupType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HierarchicalRelationshipType></HierarchicalRelationshipType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HierarchicalRelationshipType-list></HierarchicalRelationshipType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HumanName></HumanName>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<id></id>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<id-primitive></id-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Identifier></Identifier>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IdentifierUse></IdentifierUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IdentifierUse-list></IdentifierUse-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingModality></ImagingModality>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingModality-list></ImagingModality-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingStudy></ImagingStudy>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingStudy.Instance></ImagingStudy.Instance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingStudy.Series></ImagingStudy.Series>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization></Immunization>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization.Explanation></Immunization.Explanation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization.Reaction></Immunization.Reaction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization.VaccinationProtocol></Immunization.VaccinationProtocol>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationRecommendation></ImmunizationRecommendation>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationRecommendation.DateCriterion></ImmunizationRecommendation.DateCriterion>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationRecommendation.Protocol></ImmunizationRecommendation.Protocol>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationRecommendation.Recommendation></ImmunizationRecommendation.Recommendation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InstanceAvailability></InstanceAvailability>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InstanceAvailability-list></InstanceAvailability-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<instant></instant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<instant-primitive></instant-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<integer></integer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<integer-primitive></integer-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IssueSeverity></IssueSeverity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IssueSeverity-list></IssueSeverity-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LinkType></LinkType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LinkType-list></LinkType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<List></List>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<List.Entry></List.Entry>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ListMode></ListMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ListMode-list></ListMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Location></Location>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Location.Position></Location.Position>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LocationMode></LocationMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LocationMode-list></LocationMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LocationStatus></LocationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LocationStatus-list></LocationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Media></Media>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MediaType></MediaType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MediaType-list></MediaType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication></Medication>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication.Content></Medication.Content>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication.Ingredient></Medication.Ingredient>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication.Package></Medication.Package>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication.Product></Medication.Product>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministration></MedicationAdministration>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministration.Dosage></MedicationAdministration.Dosage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministrationStatus></MedicationAdministrationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministrationStatus-list></MedicationAdministrationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispense></MedicationDispense>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispense.Dispense></MedicationDispense.Dispense>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispense.Dosage></MedicationDispense.Dosage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispense.Substitution></MedicationDispense.Substitution>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispenseStatus></MedicationDispenseStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispenseStatus-list></MedicationDispenseStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKind></MedicationKind>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationKind-list></MedicationKind-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationPrescription></MedicationPrescription>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationPrescription.Dispense></MedicationPrescription.Dispense>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationPrescription.DosageInstruction></MedicationPrescription.DosageInstruction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationPrescription.Substitution></MedicationPrescription.Substitution>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationPrescriptionStatus></MedicationPrescriptionStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationPrescriptionStatus-list></MedicationPrescriptionStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatement></MedicationStatement>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatement.Dosage></MedicationStatement.Dosage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageHeader></MessageHeader>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageHeader.Destination></MessageHeader.Destination>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageHeader.Response></MessageHeader.Response>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageHeader.Source></MessageHeader.Source>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageSignificanceCategory></MessageSignificanceCategory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageSignificanceCategory-list></MessageSignificanceCategory-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Modality></Modality>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Modality-list></Modality-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Money></Money>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NameUse></NameUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NameUse-list></NameUse-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Narrative></Narrative>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NarrativeStatus></NarrativeStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NarrativeStatus-list></NarrativeStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Observation></Observation>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Observation.ReferenceRange></Observation.ReferenceRange>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Observation.Related></Observation.Related>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationRelationshipType></ObservationRelationshipType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationRelationshipType-list></ObservationRelationshipType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationReliability></ObservationReliability>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationReliability-list></ObservationReliability-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationStatus></ObservationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationStatus-list></ObservationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<oid></oid>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<oid-primitive></oid-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationOutcome></OperationOutcome>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationOutcome.Issue></OperationOutcome.Issue>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Order></Order>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Order.When></Order.When>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OrderOutcomeStatus></OrderOutcomeStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OrderOutcomeStatus-list></OrderOutcomeStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OrderResponse></OrderResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Organization></Organization>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Organization.Contact></Organization.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Other></Other>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient></Patient>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient.Animal></Patient.Animal>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient.Contact></Patient.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient.Link></Patient.Link>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Period></Period>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Practitioner></Practitioner>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Practitioner.Qualification></Practitioner.Qualification>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Procedure></Procedure>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Procedure.Performer></Procedure.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Procedure.RelatedItem></Procedure.RelatedItem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcedureRelationshipType></ProcedureRelationshipType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcedureRelationshipType-list></ProcedureRelationshipType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Profile></Profile>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Profile.Binding></Profile.Binding>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Profile.Constraint></Profile.Constraint>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Profile.Definition></Profile.Definition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Profile.Element></Profile.Element>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Profile.ExtensionDefn></Profile.ExtensionDefn>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Profile.Mapping></Profile.Mapping>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Profile.Mapping1></Profile.Mapping1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Profile.Query></Profile.Query>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Profile.SearchParam></Profile.SearchParam>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Profile.Slicing></Profile.Slicing>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Profile.Structure></Profile.Structure>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Profile.Type></Profile.Type>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PropertyRepresentation></PropertyRepresentation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PropertyRepresentation-list></PropertyRepresentation-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Provenance></Provenance>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Provenance.Agent></Provenance.Agent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Provenance.Entity></Provenance.Entity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProvenanceEntityRole></ProvenanceEntityRole>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProvenanceEntityRole-list></ProvenanceEntityRole-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Quantity></Quantity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuantityCompararator></QuantityCompararator>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuantityCompararator-list></QuantityCompararator-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Query></Query>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Query.Response></Query.Response>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QueryOutcome></QueryOutcome>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QueryOutcome-list></QueryOutcome-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Questionnaire></Questionnaire>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Questionnaire.Group></Questionnaire.Group>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Questionnaire.Question></Questionnaire.Question>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireStatus></QuestionnaireStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireStatus-list></QuestionnaireStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Range></Range>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Ratio></Ratio>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ReactionSeverity></ReactionSeverity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ReactionSeverity-list></ReactionSeverity-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RelatedPerson></RelatedPerson>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Resource></Resource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Resource.Inline></Resource.Inline>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceNamesPlusBinary></ResourceNamesPlusBinary>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceProfileStatus></ResourceProfileStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceProfileStatus-list></ResourceProfileStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceReference></ResourceReference>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceType></ResourceType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResponseType></ResponseType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResponseType-list></ResponseType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RestfulConformanceMode></RestfulConformanceMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RestfulConformanceMode-list></RestfulConformanceMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RestfulOperationSystem></RestfulOperationSystem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RestfulOperationSystem-list></RestfulOperationSystem-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RestfulOperationType></RestfulOperationType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RestfulOperationType-list></RestfulOperationType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SampledData></SampledData>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SampledDataDataType></SampledDataDataType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SampledDataDataType-primitive></SampledDataDataType-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Schedule></Schedule>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Schedule.Repeat></Schedule.Repeat>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<score></score>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchParamType></SearchParamType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchParamType-list></SearchParamType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEvent></SecurityEvent>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEvent.Detail></SecurityEvent.Detail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEvent.Event></SecurityEvent.Event>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEvent.Network></SecurityEvent.Network>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEvent.Object></SecurityEvent.Object>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEvent.Participant></SecurityEvent.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEvent.Source></SecurityEvent.Source>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEventAction></SecurityEventAction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEventAction-list></SecurityEventAction-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEventObjectLifecycle></SecurityEventObjectLifecycle>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEventObjectLifecycle-list></SecurityEventObjectLifecycle-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEventObjectRole></SecurityEventObjectRole>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEventObjectRole-list></SecurityEventObjectRole-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEventObjectType></SecurityEventObjectType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEventObjectType-list></SecurityEventObjectType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEventOutcome></SecurityEventOutcome>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEventOutcome-list></SecurityEventOutcome-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEventParticipantNetworkType></SecurityEventParticipantNetworkType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SecurityEventParticipantNetworkType-list></SecurityEventParticipantNetworkType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SensitivityStatus></SensitivityStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SensitivityStatus-list></SensitivityStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SensitivityType></SensitivityType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SensitivityType-list></SensitivityType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SlicingRules></SlicingRules>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SlicingRules-list></SlicingRules-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen></Specimen>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen.Collection></Specimen.Collection>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen.Container></Specimen.Container>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen.Source></Specimen.Source>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen.Treatment></Specimen.Treatment>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<string></string>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<string-primitive></string-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Substance></Substance>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Substance.Ingredient></Substance.Ingredient>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Substance.Instance></Substance.Instance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Supply></Supply>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Supply.Dispense></Supply.Dispense>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyDispenseStatus></SupplyDispenseStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyDispenseStatus-list></SupplyDispenseStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyStatus></SupplyStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyStatus-list></SupplyStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<totalResults></totalResults>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UnitsOfTime></UnitsOfTime>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UnitsOfTime-list></UnitsOfTime-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<uri></uri>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<uri-primitive></uri-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<uuid></uuid>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<uuid-primitive></uuid-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet></ValueSet>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Compose></ValueSet.Compose>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Concept></ValueSet.Concept>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Contains></ValueSet.Contains>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Define></ValueSet.Define>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Expansion></ValueSet.Expansion>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Filter></ValueSet.Filter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Include></ValueSet.Include>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSetStatus></ValueSetStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSetStatus-list></ValueSetStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<XHTML></XHTML>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<xmlIdRef></xmlIdRef>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
    }

    public function testIsContainableTypeWithJSON()
    {
        $json = new \stdClass();
        $json->resourceType = 'Address';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AddressUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AddressUse-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseReaction';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseReaction.Exposure';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseReaction.Symptom';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Age';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AggregationMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AggregationMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Alert';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AlertStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AlertStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntolerance';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Attachment';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BackboneElement';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'base64Binary';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'base64Binary-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Binary';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BindingConformance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BindingConformance-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'boolean';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'boolean-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlan';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlan.Activity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlan.Goal';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlan.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlan.Simple';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanActivityCategory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanActivityCategory-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanActivityStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanActivityStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanGoalStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanGoalStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CausalityExpectation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CausalityExpectation-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'code';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'code-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeableConcept';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Coding';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Composition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Composition.Attester';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Composition.Event';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Composition.Section';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompositionAttestationMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompositionAttestationMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompositionStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompositionStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.Concept';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.DependsOn';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.Map';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMapEquivalence';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMapEquivalence-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Condition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Condition.Evidence';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Condition.Location';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Condition.RelatedItem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Condition.Stage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionRelationshipType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionRelationshipType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Certificate';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Document';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Event';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Implementation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Messaging';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Operation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Operation1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Query';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Resource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Rest';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.SearchParam';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Security';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Software';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConformanceEventMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConformanceEventMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConformanceStatementStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConformanceStatementStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConstraintSeverity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConstraintSeverity-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactSystem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactSystem-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactUse-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Count';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Criticality';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Criticality-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'date';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'date-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'dateTime';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'dateTime-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'decimal';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'decimal-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Device';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceObservationReport';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceObservationReport.Channel';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceObservationReport.Metric';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceObservationReport.VirtualDevice';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticOrder';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticOrder.Event';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticOrder.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticOrderPriority';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticOrderPriority-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticOrderStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticOrderStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReport';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReport.Image';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReportStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReportStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Distance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentManifest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference.Context';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference.RelatesTo';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference.Service';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReferenceStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReferenceStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentRelationshipType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentRelationshipType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Duration';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Element';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.Accomodation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.Hospitalization';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.Location';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterClass';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterClass-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterState';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterState-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventTiming';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventTiming-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExposureType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExposureType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Extension';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExtensionContext';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExtensionContext-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FamilyHistory';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FamilyHistory.Condition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FamilyHistory.Relation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FilterOperator';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FilterOperator-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Group';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Group.Characteristic';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GroupType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GroupType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HierarchicalRelationshipType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HierarchicalRelationshipType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HumanName';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'id';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'id-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Identifier';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IdentifierUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IdentifierUse-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingModality';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingModality-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingStudy';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingStudy.Instance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingStudy.Series';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization.Explanation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization.Reaction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization.VaccinationProtocol';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationRecommendation';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationRecommendation.DateCriterion';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationRecommendation.Protocol';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationRecommendation.Recommendation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InstanceAvailability';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InstanceAvailability-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'instant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'instant-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'integer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'integer-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IssueSeverity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IssueSeverity-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LinkType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LinkType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'List';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'List.Entry';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ListMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ListMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Location';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Location.Position';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LocationMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LocationMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LocationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LocationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Media';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MediaType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MediaType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication.Content';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication.Ingredient';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication.Package';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication.Product';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministration';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministration.Dosage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministrationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministrationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispense';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispense.Dispense';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispense.Dosage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispense.Substitution';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispenseStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispenseStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKind';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationKind-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationPrescription';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationPrescription.Dispense';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationPrescription.DosageInstruction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationPrescription.Substitution';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationPrescriptionStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationPrescriptionStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatement';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatement.Dosage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageHeader';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageHeader.Destination';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageHeader.Response';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageHeader.Source';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageSignificanceCategory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageSignificanceCategory-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Modality';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Modality-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Money';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NameUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NameUse-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Narrative';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NarrativeStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NarrativeStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Observation';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Observation.ReferenceRange';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Observation.Related';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationRelationshipType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationRelationshipType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationReliability';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationReliability-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'oid';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'oid-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationOutcome';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationOutcome.Issue';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Order';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Order.When';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OrderOutcomeStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OrderOutcomeStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OrderResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Organization';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Organization.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Other';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient.Animal';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient.Link';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Period';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Practitioner';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Practitioner.Qualification';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Procedure';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Procedure.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Procedure.RelatedItem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcedureRelationshipType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcedureRelationshipType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Profile';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Profile.Binding';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Profile.Constraint';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Profile.Definition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Profile.Element';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Profile.ExtensionDefn';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Profile.Mapping';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Profile.Mapping1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Profile.Query';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Profile.SearchParam';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Profile.Slicing';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Profile.Structure';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Profile.Type';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PropertyRepresentation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PropertyRepresentation-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Provenance';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Provenance.Agent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Provenance.Entity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProvenanceEntityRole';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProvenanceEntityRole-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Quantity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuantityCompararator';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuantityCompararator-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Query';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Query.Response';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QueryOutcome';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QueryOutcome-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Questionnaire';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Questionnaire.Group';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Questionnaire.Question';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Range';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Ratio';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ReactionSeverity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ReactionSeverity-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RelatedPerson';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Resource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Resource.Inline';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceNamesPlusBinary';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceProfileStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceProfileStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceReference';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResponseType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResponseType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RestfulConformanceMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RestfulConformanceMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RestfulOperationSystem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RestfulOperationSystem-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RestfulOperationType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RestfulOperationType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SampledData';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SampledDataDataType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SampledDataDataType-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Schedule';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Schedule.Repeat';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'score';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchParamType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchParamType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEvent';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEvent.Detail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEvent.Event';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEvent.Network';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEvent.Object';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEvent.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEvent.Source';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEventAction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEventAction-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEventObjectLifecycle';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEventObjectLifecycle-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEventObjectRole';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEventObjectRole-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEventObjectType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEventObjectType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEventOutcome';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEventOutcome-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEventParticipantNetworkType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SecurityEventParticipantNetworkType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SensitivityStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SensitivityStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SensitivityType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SensitivityType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SlicingRules';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SlicingRules-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen.Collection';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen.Container';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen.Source';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen.Treatment';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'string';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'string-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Substance';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Substance.Ingredient';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Substance.Instance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Supply';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Supply.Dispense';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyDispenseStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyDispenseStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'totalResults';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UnitsOfTime';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UnitsOfTime-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'uri';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'uri-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'uuid';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'uuid-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Compose';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Concept';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Contains';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Define';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Expansion';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Filter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Include';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSetStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSetStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'XHTML';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'xmlIdRef';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
    }
}
