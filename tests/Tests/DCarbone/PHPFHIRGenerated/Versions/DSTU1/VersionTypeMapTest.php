<?php

namespace Tests\DCarbone\PHPFHIRGenerated\Versions\DSTU1;

/*!
 * This class was generated with the PHPFHIR library (https://github.com/dcarbone/php-fhir) using
 * class definitions from HL7 FHIR (https://www.hl7.org/fhir/)
 * 
 * Class creation date: January 24th, 2025 03:11+0000
 * 
 * PHPFHIR Copyright:
 * 
 * Copyright 2016-2025 Daniel Carbone (daniel.p.carbone@gmail.com)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 *
 * FHIR Copyright Notice:
 *
 *   Copyright (c) 2011-2013, HL7, Inc.
 *   All rights reserved.
 * 
 *   Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *    * Neither the name of HL7 nor the names of its contributors may be used to
 *      endorse or promote products derived from this software without specific
 *      prior written permission.
 * 
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *   IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 * 
 * 
 *   Generated on Tue, Sep 30, 2014 18:08+1000 for FHIR v0.0.82
 */

use DCarbone\PHPFHIRGenerated\Versions\DSTU1\VersionTypeMap;
use PHPUnit\Framework\TestCase;

class VersionTypeMapTest extends TestCase
{
    public function testGetTypeClassWithNonStringReturnsNull()
    {
        $this->assertNull(VersionTypeMap::getTypeClassName(1));
    }

    public function testGetTypeClassName()
    {
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBase64BinaryPrimitive', VersionTypeMap::getTypeClassName('base64Binary-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBooleanPrimitive', VersionTypeMap::getTypeClassName('boolean-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRCodePrimitive', VersionTypeMap::getTypeClassName('code-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDatePrimitive', VersionTypeMap::getTypeClassName('date-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDateTimePrimitive', VersionTypeMap::getTypeClassName('dateTime-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDecimalPrimitive', VersionTypeMap::getTypeClassName('decimal-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement', VersionTypeMap::getTypeClassName('Element'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddress', VersionTypeMap::getTypeClassName('Address'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddressUse', VersionTypeMap::getTypeClassName('AddressUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAggregationMode', VersionTypeMap::getTypeClassName('AggregationMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAlertStatus', VersionTypeMap::getTypeClassName('AlertStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAttachment', VersionTypeMap::getTypeClassName('Attachment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement', VersionTypeMap::getTypeClassName('BackboneElement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionExposure', VersionTypeMap::getTypeClassName('AdverseReaction.Exposure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionSymptom', VersionTypeMap::getTypeClassName('AdverseReaction.Symptom'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity', VersionTypeMap::getTypeClassName('CarePlan.Activity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanGoal', VersionTypeMap::getTypeClassName('CarePlan.Goal'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant', VersionTypeMap::getTypeClassName('CarePlan.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanSimple', VersionTypeMap::getTypeClassName('CarePlan.Simple'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester', VersionTypeMap::getTypeClassName('Composition.Attester'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent', VersionTypeMap::getTypeClassName('Composition.Event'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection', VersionTypeMap::getTypeClassName('Composition.Section'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapConcept', VersionTypeMap::getTypeClassName('ConceptMap.Concept'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn', VersionTypeMap::getTypeClassName('ConceptMap.DependsOn'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapMap', VersionTypeMap::getTypeClassName('ConceptMap.Map'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence', VersionTypeMap::getTypeClassName('Condition.Evidence'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionLocation', VersionTypeMap::getTypeClassName('Condition.Location'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionRelatedItem', VersionTypeMap::getTypeClassName('Condition.RelatedItem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage', VersionTypeMap::getTypeClassName('Condition.Stage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate', VersionTypeMap::getTypeClassName('Conformance.Certificate'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument', VersionTypeMap::getTypeClassName('Conformance.Document'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent', VersionTypeMap::getTypeClassName('Conformance.Event'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation', VersionTypeMap::getTypeClassName('Conformance.Implementation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging', VersionTypeMap::getTypeClassName('Conformance.Messaging'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation', VersionTypeMap::getTypeClassName('Conformance.Operation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation1', VersionTypeMap::getTypeClassName('Conformance.Operation1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceQuery', VersionTypeMap::getTypeClassName('Conformance.Query'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource', VersionTypeMap::getTypeClassName('Conformance.Resource'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest', VersionTypeMap::getTypeClassName('Conformance.Rest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam', VersionTypeMap::getTypeClassName('Conformance.SearchParam'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity', VersionTypeMap::getTypeClassName('Conformance.Security'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware', VersionTypeMap::getTypeClassName('Conformance.Software'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportChannel', VersionTypeMap::getTypeClassName('DeviceObservationReport.Channel'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportMetric', VersionTypeMap::getTypeClassName('DeviceObservationReport.Metric'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportVirtualDevice', VersionTypeMap::getTypeClassName('DeviceObservationReport.VirtualDevice'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent', VersionTypeMap::getTypeClassName('DiagnosticOrder.Event'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem', VersionTypeMap::getTypeClassName('DiagnosticOrder.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage', VersionTypeMap::getTypeClassName('DiagnosticReport.Image'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext', VersionTypeMap::getTypeClassName('DocumentReference.Context'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceParameter', VersionTypeMap::getTypeClassName('DocumentReference.Parameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo', VersionTypeMap::getTypeClassName('DocumentReference.RelatesTo'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceService', VersionTypeMap::getTypeClassName('DocumentReference.Service'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAccomodation', VersionTypeMap::getTypeClassName('Encounter.Accomodation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization', VersionTypeMap::getTypeClassName('Encounter.Hospitalization'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation', VersionTypeMap::getTypeClassName('Encounter.Location'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant', VersionTypeMap::getTypeClassName('Encounter.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryCondition', VersionTypeMap::getTypeClassName('FamilyHistory.Condition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryRelation', VersionTypeMap::getTypeClassName('FamilyHistory.Relation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic', VersionTypeMap::getTypeClassName('Group.Characteristic'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance', VersionTypeMap::getTypeClassName('ImagingStudy.Instance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries', VersionTypeMap::getTypeClassName('ImagingStudy.Series'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion', VersionTypeMap::getTypeClassName('ImmunizationRecommendation.DateCriterion'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol', VersionTypeMap::getTypeClassName('ImmunizationRecommendation.Protocol'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation', VersionTypeMap::getTypeClassName('ImmunizationRecommendation.Recommendation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation', VersionTypeMap::getTypeClassName('Immunization.Explanation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction', VersionTypeMap::getTypeClassName('Immunization.Reaction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol', VersionTypeMap::getTypeClassName('Immunization.VaccinationProtocol'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry', VersionTypeMap::getTypeClassName('List.Entry'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition', VersionTypeMap::getTypeClassName('Location.Position'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage', VersionTypeMap::getTypeClassName('MedicationAdministration.Dosage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDispense', VersionTypeMap::getTypeClassName('MedicationDispense.Dispense'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosage', VersionTypeMap::getTypeClassName('MedicationDispense.Dosage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution', VersionTypeMap::getTypeClassName('MedicationDispense.Substitution'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDispense', VersionTypeMap::getTypeClassName('MedicationPrescription.Dispense'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDosageInstruction', VersionTypeMap::getTypeClassName('MedicationPrescription.DosageInstruction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionSubstitution', VersionTypeMap::getTypeClassName('MedicationPrescription.Substitution'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage', VersionTypeMap::getTypeClassName('MedicationStatement.Dosage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent', VersionTypeMap::getTypeClassName('Medication.Content'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient', VersionTypeMap::getTypeClassName('Medication.Ingredient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage', VersionTypeMap::getTypeClassName('Medication.Package'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct', VersionTypeMap::getTypeClassName('Medication.Product'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination', VersionTypeMap::getTypeClassName('MessageHeader.Destination'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse', VersionTypeMap::getTypeClassName('MessageHeader.Response'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource', VersionTypeMap::getTypeClassName('MessageHeader.Source'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange', VersionTypeMap::getTypeClassName('Observation.ReferenceRange'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated', VersionTypeMap::getTypeClassName('Observation.Related'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue', VersionTypeMap::getTypeClassName('OperationOutcome.Issue'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen', VersionTypeMap::getTypeClassName('Order.When'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact', VersionTypeMap::getTypeClassName('Organization.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal', VersionTypeMap::getTypeClassName('Patient.Animal'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact', VersionTypeMap::getTypeClassName('Patient.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink', VersionTypeMap::getTypeClassName('Patient.Link'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification', VersionTypeMap::getTypeClassName('Practitioner.Qualification'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer', VersionTypeMap::getTypeClassName('Procedure.Performer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureRelatedItem', VersionTypeMap::getTypeClassName('Procedure.RelatedItem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileBinding', VersionTypeMap::getTypeClassName('Profile.Binding'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileConstraint', VersionTypeMap::getTypeClassName('Profile.Constraint'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileDefinition', VersionTypeMap::getTypeClassName('Profile.Definition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileElement', VersionTypeMap::getTypeClassName('Profile.Element'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileExtensionDefn', VersionTypeMap::getTypeClassName('Profile.ExtensionDefn'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping', VersionTypeMap::getTypeClassName('Profile.Mapping'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping1', VersionTypeMap::getTypeClassName('Profile.Mapping1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileQuery', VersionTypeMap::getTypeClassName('Profile.Query'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSearchParam', VersionTypeMap::getTypeClassName('Profile.SearchParam'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSlicing', VersionTypeMap::getTypeClassName('Profile.Slicing'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileStructure', VersionTypeMap::getTypeClassName('Profile.Structure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileType', VersionTypeMap::getTypeClassName('Profile.Type'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent', VersionTypeMap::getTypeClassName('Provenance.Agent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity', VersionTypeMap::getTypeClassName('Provenance.Entity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuery\FHIRQueryResponse', VersionTypeMap::getTypeClassName('Query.Response'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup', VersionTypeMap::getTypeClassName('Questionnaire.Group'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion', VersionTypeMap::getTypeClassName('Questionnaire.Question'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource', VersionTypeMap::getTypeClassName('Resource'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAdverseReaction', VersionTypeMap::getTypeClassName('AdverseReaction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAlert', VersionTypeMap::getTypeClassName('Alert'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAllergyIntolerance', VersionTypeMap::getTypeClassName('AllergyIntolerance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCarePlan', VersionTypeMap::getTypeClassName('CarePlan'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRComposition', VersionTypeMap::getTypeClassName('Composition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConceptMap', VersionTypeMap::getTypeClassName('ConceptMap'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCondition', VersionTypeMap::getTypeClassName('Condition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConformance', VersionTypeMap::getTypeClassName('Conformance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDevice', VersionTypeMap::getTypeClassName('Device'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDeviceObservationReport', VersionTypeMap::getTypeClassName('DeviceObservationReport'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticOrder', VersionTypeMap::getTypeClassName('DiagnosticOrder'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticReport', VersionTypeMap::getTypeClassName('DiagnosticReport'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentManifest', VersionTypeMap::getTypeClassName('DocumentManifest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentReference', VersionTypeMap::getTypeClassName('DocumentReference'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIREncounter', VersionTypeMap::getTypeClassName('Encounter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRFamilyHistory', VersionTypeMap::getTypeClassName('FamilyHistory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRGroup', VersionTypeMap::getTypeClassName('Group'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImagingStudy', VersionTypeMap::getTypeClassName('ImagingStudy'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunization', VersionTypeMap::getTypeClassName('Immunization'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunizationRecommendation', VersionTypeMap::getTypeClassName('ImmunizationRecommendation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRList', VersionTypeMap::getTypeClassName('List'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRLocation', VersionTypeMap::getTypeClassName('Location'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedia', VersionTypeMap::getTypeClassName('Media'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedication', VersionTypeMap::getTypeClassName('Medication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationAdministration', VersionTypeMap::getTypeClassName('MedicationAdministration'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationDispense', VersionTypeMap::getTypeClassName('MedicationDispense'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationPrescription', VersionTypeMap::getTypeClassName('MedicationPrescription'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationStatement', VersionTypeMap::getTypeClassName('MedicationStatement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMessageHeader', VersionTypeMap::getTypeClassName('MessageHeader'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRObservation', VersionTypeMap::getTypeClassName('Observation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROperationOutcome', VersionTypeMap::getTypeClassName('OperationOutcome'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrder', VersionTypeMap::getTypeClassName('Order'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrderResponse', VersionTypeMap::getTypeClassName('OrderResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrganization', VersionTypeMap::getTypeClassName('Organization'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROther', VersionTypeMap::getTypeClassName('Other'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPatient', VersionTypeMap::getTypeClassName('Patient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPractitioner', VersionTypeMap::getTypeClassName('Practitioner'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProcedure', VersionTypeMap::getTypeClassName('Procedure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProfile', VersionTypeMap::getTypeClassName('Profile'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProvenance', VersionTypeMap::getTypeClassName('Provenance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuery', VersionTypeMap::getTypeClassName('Query'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuestionnaire', VersionTypeMap::getTypeClassName('Questionnaire'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRRelatedPerson', VersionTypeMap::getTypeClassName('RelatedPerson'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSecurityEvent', VersionTypeMap::getTypeClassName('SecurityEvent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSpecimen', VersionTypeMap::getTypeClassName('Specimen'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSubstance', VersionTypeMap::getTypeClassName('Substance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSupply', VersionTypeMap::getTypeClassName('Supply'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRValueSet', VersionTypeMap::getTypeClassName('ValueSet'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventDetail', VersionTypeMap::getTypeClassName('SecurityEvent.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventEvent', VersionTypeMap::getTypeClassName('SecurityEvent.Event'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventNetwork', VersionTypeMap::getTypeClassName('SecurityEvent.Network'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventObject', VersionTypeMap::getTypeClassName('SecurityEvent.Object'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventParticipant', VersionTypeMap::getTypeClassName('SecurityEvent.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventSource', VersionTypeMap::getTypeClassName('SecurityEvent.Source'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection', VersionTypeMap::getTypeClassName('Specimen.Collection'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer', VersionTypeMap::getTypeClassName('Specimen.Container'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenSource', VersionTypeMap::getTypeClassName('Specimen.Source'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment', VersionTypeMap::getTypeClassName('Specimen.Treatment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient', VersionTypeMap::getTypeClassName('Substance.Ingredient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance', VersionTypeMap::getTypeClassName('Substance.Instance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSupply\FHIRSupplyDispense', VersionTypeMap::getTypeClassName('Supply.Dispense'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose', VersionTypeMap::getTypeClassName('ValueSet.Compose'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept', VersionTypeMap::getTypeClassName('ValueSet.Concept'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains', VersionTypeMap::getTypeClassName('ValueSet.Contains'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDefine', VersionTypeMap::getTypeClassName('ValueSet.Define'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion', VersionTypeMap::getTypeClassName('ValueSet.Expansion'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter', VersionTypeMap::getTypeClassName('ValueSet.Filter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude', VersionTypeMap::getTypeClassName('ValueSet.Include'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary', VersionTypeMap::getTypeClassName('base64Binary'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary\FHIRBinary', VersionTypeMap::getTypeClassName('Binary'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBindingConformance', VersionTypeMap::getTypeClassName('BindingConformance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBoolean', VersionTypeMap::getTypeClassName('boolean'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityCategory', VersionTypeMap::getTypeClassName('CarePlanActivityCategory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityStatus', VersionTypeMap::getTypeClassName('CarePlanActivityStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanGoalStatus', VersionTypeMap::getTypeClassName('CarePlanGoalStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanStatus', VersionTypeMap::getTypeClassName('CarePlanStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCausalityExpectation', VersionTypeMap::getTypeClassName('CausalityExpectation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCode', VersionTypeMap::getTypeClassName('code'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCodeableConcept', VersionTypeMap::getTypeClassName('CodeableConcept'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCoding', VersionTypeMap::getTypeClassName('Coding'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionAttestationMode', VersionTypeMap::getTypeClassName('CompositionAttestationMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionStatus', VersionTypeMap::getTypeClassName('CompositionStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConceptMapEquivalence', VersionTypeMap::getTypeClassName('ConceptMapEquivalence'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionRelationshipType', VersionTypeMap::getTypeClassName('ConditionRelationshipType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionStatus', VersionTypeMap::getTypeClassName('ConditionStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceEventMode', VersionTypeMap::getTypeClassName('ConformanceEventMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceStatementStatus', VersionTypeMap::getTypeClassName('ConformanceStatementStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConstraintSeverity', VersionTypeMap::getTypeClassName('ConstraintSeverity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContact', VersionTypeMap::getTypeClassName('Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactSystem', VersionTypeMap::getTypeClassName('ContactSystem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactUse', VersionTypeMap::getTypeClassName('ContactUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCriticality', VersionTypeMap::getTypeClassName('Criticality'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDate', VersionTypeMap::getTypeClassName('date'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDateTime', VersionTypeMap::getTypeClassName('dateTime'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal', VersionTypeMap::getTypeClassName('decimal'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal\FHIRScore', VersionTypeMap::getTypeClassName('score'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderPriority', VersionTypeMap::getTypeClassName('DiagnosticOrderPriority'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderStatus', VersionTypeMap::getTypeClassName('DiagnosticOrderStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticReportStatus', VersionTypeMap::getTypeClassName('DiagnosticReportStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentMode', VersionTypeMap::getTypeClassName('DocumentMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentReferenceStatus', VersionTypeMap::getTypeClassName('DocumentReferenceStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentRelationshipType', VersionTypeMap::getTypeClassName('DocumentRelationshipType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterClass', VersionTypeMap::getTypeClassName('EncounterClass'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterState', VersionTypeMap::getTypeClassName('EncounterState'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREventTiming', VersionTypeMap::getTypeClassName('EventTiming'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExposureType', VersionTypeMap::getTypeClassName('ExposureType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtension', VersionTypeMap::getTypeClassName('Extension'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtensionContext', VersionTypeMap::getTypeClassName('ExtensionContext'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRFilterOperator', VersionTypeMap::getTypeClassName('FilterOperator'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRGroupType', VersionTypeMap::getTypeClassName('GroupType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHierarchicalRelationshipType', VersionTypeMap::getTypeClassName('HierarchicalRelationshipType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHumanName', VersionTypeMap::getTypeClassName('HumanName'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRId', VersionTypeMap::getTypeClassName('id'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifier', VersionTypeMap::getTypeClassName('Identifier'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifierUse', VersionTypeMap::getTypeClassName('IdentifierUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRImagingModality', VersionTypeMap::getTypeClassName('ImagingModality'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstanceAvailability', VersionTypeMap::getTypeClassName('InstanceAvailability'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstant', VersionTypeMap::getTypeClassName('instant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger', VersionTypeMap::getTypeClassName('integer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger\FHIRTotalResults', VersionTypeMap::getTypeClassName('totalResults'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIssueSeverity', VersionTypeMap::getTypeClassName('IssueSeverity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLinkType', VersionTypeMap::getTypeClassName('LinkType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRListMode', VersionTypeMap::getTypeClassName('ListMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationMode', VersionTypeMap::getTypeClassName('LocationMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationStatus', VersionTypeMap::getTypeClassName('LocationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMediaType', VersionTypeMap::getTypeClassName('MediaType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationAdministrationStatus', VersionTypeMap::getTypeClassName('MedicationAdministrationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationDispenseStatus', VersionTypeMap::getTypeClassName('MedicationDispenseStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationKind', VersionTypeMap::getTypeClassName('MedicationKind'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationPrescriptionStatus', VersionTypeMap::getTypeClassName('MedicationPrescriptionStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMessageSignificanceCategory', VersionTypeMap::getTypeClassName('MessageSignificanceCategory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRModality', VersionTypeMap::getTypeClassName('Modality'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNameUse', VersionTypeMap::getTypeClassName('NameUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrative', VersionTypeMap::getTypeClassName('Narrative'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrativeStatus', VersionTypeMap::getTypeClassName('NarrativeStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationRelationshipType', VersionTypeMap::getTypeClassName('ObservationRelationshipType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationReliability', VersionTypeMap::getTypeClassName('ObservationReliability'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationStatus', VersionTypeMap::getTypeClassName('ObservationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROid', VersionTypeMap::getTypeClassName('oid'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROrderOutcomeStatus', VersionTypeMap::getTypeClassName('OrderOutcomeStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPeriod', VersionTypeMap::getTypeClassName('Period'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProcedureRelationshipType', VersionTypeMap::getTypeClassName('ProcedureRelationshipType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPropertyRepresentation', VersionTypeMap::getTypeClassName('PropertyRepresentation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProvenanceEntityRole', VersionTypeMap::getTypeClassName('ProvenanceEntityRole'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity', VersionTypeMap::getTypeClassName('Quantity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantityCompararator', VersionTypeMap::getTypeClassName('QuantityCompararator'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRAge', VersionTypeMap::getTypeClassName('Age'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRCount', VersionTypeMap::getTypeClassName('Count'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDistance', VersionTypeMap::getTypeClassName('Distance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDuration', VersionTypeMap::getTypeClassName('Duration'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRMoney', VersionTypeMap::getTypeClassName('Money'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQueryOutcome', VersionTypeMap::getTypeClassName('QueryOutcome'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuestionnaireStatus', VersionTypeMap::getTypeClassName('QuestionnaireStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRange', VersionTypeMap::getTypeClassName('Range'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRatio', VersionTypeMap::getTypeClassName('Ratio'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRReactionSeverity', VersionTypeMap::getTypeClassName('ReactionSeverity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceProfileStatus', VersionTypeMap::getTypeClassName('ResourceProfileStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceReference', VersionTypeMap::getTypeClassName('ResourceReference'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResponseType', VersionTypeMap::getTypeClassName('ResponseType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulConformanceMode', VersionTypeMap::getTypeClassName('RestfulConformanceMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationSystem', VersionTypeMap::getTypeClassName('RestfulOperationSystem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationType', VersionTypeMap::getTypeClassName('RestfulOperationType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledData', VersionTypeMap::getTypeClassName('SampledData'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledDataDataType', VersionTypeMap::getTypeClassName('SampledDataDataType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule', VersionTypeMap::getTypeClassName('Schedule'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule\FHIRScheduleRepeat', VersionTypeMap::getTypeClassName('Schedule.Repeat'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSearchParamType', VersionTypeMap::getTypeClassName('SearchParamType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventAction', VersionTypeMap::getTypeClassName('SecurityEventAction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectLifecycle', VersionTypeMap::getTypeClassName('SecurityEventObjectLifecycle'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectRole', VersionTypeMap::getTypeClassName('SecurityEventObjectRole'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectType', VersionTypeMap::getTypeClassName('SecurityEventObjectType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventOutcome', VersionTypeMap::getTypeClassName('SecurityEventOutcome'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventParticipantNetworkType', VersionTypeMap::getTypeClassName('SecurityEventParticipantNetworkType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityStatus', VersionTypeMap::getTypeClassName('SensitivityStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityType', VersionTypeMap::getTypeClassName('SensitivityType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSlicingRules', VersionTypeMap::getTypeClassName('SlicingRules'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRString', VersionTypeMap::getTypeClassName('string'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyDispenseStatus', VersionTypeMap::getTypeClassName('SupplyDispenseStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyStatus', VersionTypeMap::getTypeClassName('SupplyStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUnitsOfTime', VersionTypeMap::getTypeClassName('UnitsOfTime'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUri', VersionTypeMap::getTypeClassName('uri'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUuid', VersionTypeMap::getTypeClassName('uuid'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRValueSetStatus', VersionTypeMap::getTypeClassName('ValueSetStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive', VersionTypeMap::getTypeClassName('id-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive\FHIRXmlIdRef', VersionTypeMap::getTypeClassName('xmlIdRef'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRInstantPrimitive', VersionTypeMap::getTypeClassName('instant-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIntegerPrimitive', VersionTypeMap::getTypeClassName('integer-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIROidPrimitive', VersionTypeMap::getTypeClassName('oid-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRResource\FHIRResourceInline', VersionTypeMap::getTypeClassName('Resource.Inline'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRSampledDataDataTypePrimitive', VersionTypeMap::getTypeClassName('SampledDataDataType-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive', VersionTypeMap::getTypeClassName('string-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAddressUseList', VersionTypeMap::getTypeClassName('AddressUse-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAggregationModeList', VersionTypeMap::getTypeClassName('AggregationMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAlertStatusList', VersionTypeMap::getTypeClassName('AlertStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRBindingConformanceList', VersionTypeMap::getTypeClassName('BindingConformance-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityCategoryList', VersionTypeMap::getTypeClassName('CarePlanActivityCategory-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList', VersionTypeMap::getTypeClassName('CarePlanActivityStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanGoalStatusList', VersionTypeMap::getTypeClassName('CarePlanGoalStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanStatusList', VersionTypeMap::getTypeClassName('CarePlanStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCausalityExpectationList', VersionTypeMap::getTypeClassName('CausalityExpectation-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList', VersionTypeMap::getTypeClassName('CompositionAttestationMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionStatusList', VersionTypeMap::getTypeClassName('CompositionStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList', VersionTypeMap::getTypeClassName('ConceptMapEquivalence-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionRelationshipTypeList', VersionTypeMap::getTypeClassName('ConditionRelationshipType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionStatusList', VersionTypeMap::getTypeClassName('ConditionStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceEventModeList', VersionTypeMap::getTypeClassName('ConformanceEventMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceStatementStatusList', VersionTypeMap::getTypeClassName('ConformanceStatementStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConstraintSeverityList', VersionTypeMap::getTypeClassName('ConstraintSeverity-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactSystemList', VersionTypeMap::getTypeClassName('ContactSystem-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactUseList', VersionTypeMap::getTypeClassName('ContactUse-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCriticalityList', VersionTypeMap::getTypeClassName('Criticality-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList', VersionTypeMap::getTypeClassName('DiagnosticOrderPriority-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList', VersionTypeMap::getTypeClassName('DiagnosticOrderStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList', VersionTypeMap::getTypeClassName('DiagnosticReportStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentModeList', VersionTypeMap::getTypeClassName('DocumentMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList', VersionTypeMap::getTypeClassName('DocumentReferenceStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList', VersionTypeMap::getTypeClassName('DocumentRelationshipType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterClassList', VersionTypeMap::getTypeClassName('EncounterClass-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterStateList', VersionTypeMap::getTypeClassName('EncounterState-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREventTimingList', VersionTypeMap::getTypeClassName('EventTiming-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExposureTypeList', VersionTypeMap::getTypeClassName('ExposureType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExtensionContextList', VersionTypeMap::getTypeClassName('ExtensionContext-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRFilterOperatorList', VersionTypeMap::getTypeClassName('FilterOperator-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRGroupTypeList', VersionTypeMap::getTypeClassName('GroupType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRHierarchicalRelationshipTypeList', VersionTypeMap::getTypeClassName('HierarchicalRelationshipType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIdentifierUseList', VersionTypeMap::getTypeClassName('IdentifierUse-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRImagingModalityList', VersionTypeMap::getTypeClassName('ImagingModality-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList', VersionTypeMap::getTypeClassName('InstanceAvailability-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIssueSeverityList', VersionTypeMap::getTypeClassName('IssueSeverity-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLinkTypeList', VersionTypeMap::getTypeClassName('LinkType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRListModeList', VersionTypeMap::getTypeClassName('ListMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationModeList', VersionTypeMap::getTypeClassName('LocationMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationStatusList', VersionTypeMap::getTypeClassName('LocationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMediaTypeList', VersionTypeMap::getTypeClassName('MediaType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList', VersionTypeMap::getTypeClassName('MedicationAdministrationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList', VersionTypeMap::getTypeClassName('MedicationDispenseStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationKindList', VersionTypeMap::getTypeClassName('MedicationKind-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationPrescriptionStatusList', VersionTypeMap::getTypeClassName('MedicationPrescriptionStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList', VersionTypeMap::getTypeClassName('MessageSignificanceCategory-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRModalityList', VersionTypeMap::getTypeClassName('Modality-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNameUseList', VersionTypeMap::getTypeClassName('NameUse-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNarrativeStatusList', VersionTypeMap::getTypeClassName('NarrativeStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList', VersionTypeMap::getTypeClassName('ObservationRelationshipType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationReliabilityList', VersionTypeMap::getTypeClassName('ObservationReliability-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationStatusList', VersionTypeMap::getTypeClassName('ObservationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIROrderOutcomeStatusList', VersionTypeMap::getTypeClassName('OrderOutcomeStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProcedureRelationshipTypeList', VersionTypeMap::getTypeClassName('ProcedureRelationshipType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList', VersionTypeMap::getTypeClassName('PropertyRepresentation-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList', VersionTypeMap::getTypeClassName('ProvenanceEntityRole-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuantityCompararatorList', VersionTypeMap::getTypeClassName('QuantityCompararator-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQueryOutcomeList', VersionTypeMap::getTypeClassName('QueryOutcome-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList', VersionTypeMap::getTypeClassName('QuestionnaireStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRReactionSeverityList', VersionTypeMap::getTypeClassName('ReactionSeverity-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceProfileStatusList', VersionTypeMap::getTypeClassName('ResourceProfileStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType', VersionTypeMap::getTypeClassName('ResourceType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType\FHIRResourceNamesPlusBinary', VersionTypeMap::getTypeClassName('ResourceNamesPlusBinary'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResponseTypeList', VersionTypeMap::getTypeClassName('ResponseType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList', VersionTypeMap::getTypeClassName('RestfulConformanceMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationSystemList', VersionTypeMap::getTypeClassName('RestfulOperationSystem-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationTypeList', VersionTypeMap::getTypeClassName('RestfulOperationType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSearchParamTypeList', VersionTypeMap::getTypeClassName('SearchParamType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventActionList', VersionTypeMap::getTypeClassName('SecurityEventAction-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectLifecycleList', VersionTypeMap::getTypeClassName('SecurityEventObjectLifecycle-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectRoleList', VersionTypeMap::getTypeClassName('SecurityEventObjectRole-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectTypeList', VersionTypeMap::getTypeClassName('SecurityEventObjectType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventOutcomeList', VersionTypeMap::getTypeClassName('SecurityEventOutcome-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventParticipantNetworkTypeList', VersionTypeMap::getTypeClassName('SecurityEventParticipantNetworkType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityStatusList', VersionTypeMap::getTypeClassName('SensitivityStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityTypeList', VersionTypeMap::getTypeClassName('SensitivityType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSlicingRulesList', VersionTypeMap::getTypeClassName('SlicingRules-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyDispenseStatusList', VersionTypeMap::getTypeClassName('SupplyDispenseStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyStatusList', VersionTypeMap::getTypeClassName('SupplyStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList', VersionTypeMap::getTypeClassName('UnitsOfTime-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRValueSetStatusList', VersionTypeMap::getTypeClassName('ValueSetStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUriPrimitive', VersionTypeMap::getTypeClassName('uri-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUuidPrimitive', VersionTypeMap::getTypeClassName('uuid-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRXHTML', VersionTypeMap::getTypeClassName('XHTML'));
    }

    public function testGetContainedTypeClassName()
    {
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Address'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AddressUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AddressUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAdverseReaction', VersionTypeMap::getContainedTypeClassName('AdverseReaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdverseReaction.Exposure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdverseReaction.Symptom'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Age'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AggregationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AggregationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAlert', VersionTypeMap::getContainedTypeClassName('Alert'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AlertStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AlertStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAllergyIntolerance', VersionTypeMap::getContainedTypeClassName('AllergyIntolerance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Attachment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BackboneElement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('base64Binary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('base64Binary-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary\FHIRBinary', VersionTypeMap::getContainedTypeClassName('Binary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BindingConformance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BindingConformance-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('boolean'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('boolean-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCarePlan', VersionTypeMap::getContainedTypeClassName('CarePlan'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlan.Activity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlan.Goal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlan.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlan.Simple'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanActivityCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanActivityCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanActivityStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanActivityStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanGoalStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanGoalStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CausalityExpectation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CausalityExpectation-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('code'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('code-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeableConcept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Coding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRComposition', VersionTypeMap::getContainedTypeClassName('Composition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Composition.Attester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Composition.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Composition.Section'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompositionAttestationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompositionAttestationMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompositionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompositionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConceptMap', VersionTypeMap::getContainedTypeClassName('ConceptMap'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMap.Concept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMap.DependsOn'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMap.Map'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMapEquivalence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMapEquivalence-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCondition', VersionTypeMap::getContainedTypeClassName('Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Condition.Evidence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Condition.Location'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Condition.RelatedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Condition.Stage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConformance', VersionTypeMap::getContainedTypeClassName('Conformance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Certificate'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Document'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Implementation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Messaging'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Operation1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Query'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Rest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.SearchParam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Security'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Conformance.Software'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConformanceEventMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConformanceEventMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConformanceStatementStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConformanceStatementStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConstraintSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConstraintSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactSystem-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Count'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Criticality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Criticality-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('date'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('date-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('dateTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('dateTime-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('decimal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('decimal-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDevice', VersionTypeMap::getContainedTypeClassName('Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDeviceObservationReport', VersionTypeMap::getContainedTypeClassName('DeviceObservationReport'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceObservationReport.Channel'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceObservationReport.Metric'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceObservationReport.VirtualDevice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticOrder', VersionTypeMap::getContainedTypeClassName('DiagnosticOrder'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticOrder.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticOrder.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticOrderPriority'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticOrderPriority-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticOrderStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticReport', VersionTypeMap::getContainedTypeClassName('DiagnosticReport'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticReport.Image'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticReportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticReportStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Distance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentManifest', VersionTypeMap::getContainedTypeClassName('DocumentManifest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentReference', VersionTypeMap::getContainedTypeClassName('DocumentReference'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReference.Context'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReference.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReference.RelatesTo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReference.Service'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReferenceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReferenceStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Duration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIREncounter', VersionTypeMap::getContainedTypeClassName('Encounter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.Accomodation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.Hospitalization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.Location'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterClass'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterClass-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterState'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterState-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventTiming'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventTiming-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExposureType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExposureType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Extension'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExtensionContext'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExtensionContext-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRFamilyHistory', VersionTypeMap::getContainedTypeClassName('FamilyHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FamilyHistory.Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FamilyHistory.Relation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FilterOperator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FilterOperator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRGroup', VersionTypeMap::getContainedTypeClassName('Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Group.Characteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GroupType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GroupType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HierarchicalRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HierarchicalRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HumanName'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('id'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('id-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Identifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IdentifierUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IdentifierUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingModality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingModality-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImagingStudy', VersionTypeMap::getContainedTypeClassName('ImagingStudy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingStudy.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingStudy.Series'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunization', VersionTypeMap::getContainedTypeClassName('Immunization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Immunization.Explanation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Immunization.Reaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Immunization.VaccinationProtocol'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunizationRecommendation', VersionTypeMap::getContainedTypeClassName('ImmunizationRecommendation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImmunizationRecommendation.DateCriterion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImmunizationRecommendation.Protocol'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImmunizationRecommendation.Recommendation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InstanceAvailability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InstanceAvailability-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('instant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('instant-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('integer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('integer-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IssueSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IssueSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LinkType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LinkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRList', VersionTypeMap::getContainedTypeClassName('List'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('List.Entry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ListMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ListMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRLocation', VersionTypeMap::getContainedTypeClassName('Location'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Location.Position'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LocationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LocationMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LocationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LocationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedia', VersionTypeMap::getContainedTypeClassName('Media'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MediaType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MediaType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedication', VersionTypeMap::getContainedTypeClassName('Medication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Medication.Content'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Medication.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Medication.Package'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Medication.Product'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationAdministration', VersionTypeMap::getContainedTypeClassName('MedicationAdministration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationAdministration.Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationAdministrationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationAdministrationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationDispense', VersionTypeMap::getContainedTypeClassName('MedicationDispense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationDispense.Dispense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationDispense.Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationDispense.Substitution'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationDispenseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationDispenseStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationPrescription', VersionTypeMap::getContainedTypeClassName('MedicationPrescription'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationPrescription.Dispense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationPrescription.DosageInstruction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationPrescription.Substitution'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationPrescriptionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationPrescriptionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationStatement', VersionTypeMap::getContainedTypeClassName('MedicationStatement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationStatement.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMessageHeader', VersionTypeMap::getContainedTypeClassName('MessageHeader'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageHeader.Destination'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageHeader.Response'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageHeader.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageSignificanceCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageSignificanceCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Modality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Modality-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Money'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NameUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NameUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Narrative'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NarrativeStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NarrativeStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRObservation', VersionTypeMap::getContainedTypeClassName('Observation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Observation.ReferenceRange'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Observation.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationReliability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationReliability-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('oid'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('oid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROperationOutcome', VersionTypeMap::getContainedTypeClassName('OperationOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationOutcome.Issue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrder', VersionTypeMap::getContainedTypeClassName('Order'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Order.When'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OrderOutcomeStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OrderOutcomeStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrderResponse', VersionTypeMap::getContainedTypeClassName('OrderResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrganization', VersionTypeMap::getContainedTypeClassName('Organization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Organization.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROther', VersionTypeMap::getContainedTypeClassName('Other'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPatient', VersionTypeMap::getContainedTypeClassName('Patient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Patient.Animal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Patient.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Patient.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Period'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPractitioner', VersionTypeMap::getContainedTypeClassName('Practitioner'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Practitioner.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProcedure', VersionTypeMap::getContainedTypeClassName('Procedure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Procedure.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Procedure.RelatedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProcedureRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProcedureRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProfile', VersionTypeMap::getContainedTypeClassName('Profile'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Profile.Binding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Profile.Constraint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Profile.Definition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Profile.Element'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Profile.ExtensionDefn'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Profile.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Profile.Mapping1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Profile.Query'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Profile.SearchParam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Profile.Slicing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Profile.Structure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Profile.Type'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PropertyRepresentation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PropertyRepresentation-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProvenance', VersionTypeMap::getContainedTypeClassName('Provenance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Provenance.Agent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Provenance.Entity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProvenanceEntityRole'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProvenanceEntityRole-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Quantity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuantityCompararator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuantityCompararator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuery', VersionTypeMap::getContainedTypeClassName('Query'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Query.Response'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QueryOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QueryOutcome-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuestionnaire', VersionTypeMap::getContainedTypeClassName('Questionnaire'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Questionnaire.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Questionnaire.Question'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Range'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Ratio'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ReactionSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ReactionSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRRelatedPerson', VersionTypeMap::getContainedTypeClassName('RelatedPerson'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Resource.Inline'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceNamesPlusBinary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceProfileStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceProfileStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceReference'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResponseType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResponseType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RestfulConformanceMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RestfulConformanceMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RestfulOperationSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RestfulOperationSystem-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RestfulOperationType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RestfulOperationType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SampledData'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SampledDataDataType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SampledDataDataType-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Schedule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Schedule.Repeat'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('score'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchParamType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchParamType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSecurityEvent', VersionTypeMap::getContainedTypeClassName('SecurityEvent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEvent.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEvent.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEvent.Network'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEvent.Object'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEvent.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEvent.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEventAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEventAction-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEventObjectLifecycle'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEventObjectLifecycle-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEventObjectRole'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEventObjectRole-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEventObjectType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEventObjectType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEventOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEventOutcome-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEventParticipantNetworkType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SecurityEventParticipantNetworkType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SensitivityStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SensitivityStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SensitivityType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SensitivityType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SlicingRules'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SlicingRules-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSpecimen', VersionTypeMap::getContainedTypeClassName('Specimen'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Specimen.Collection'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Specimen.Container'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Specimen.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Specimen.Treatment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('string'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('string-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSubstance', VersionTypeMap::getContainedTypeClassName('Substance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Substance.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Substance.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSupply', VersionTypeMap::getContainedTypeClassName('Supply'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Supply.Dispense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyDispenseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyDispenseStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('totalResults'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UnitsOfTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UnitsOfTime-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('uri'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('uri-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('uuid'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('uuid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRValueSet', VersionTypeMap::getContainedTypeClassName('ValueSet'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Compose'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Concept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Contains'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Define'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Expansion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Filter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Include'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSetStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSetStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('XHTML'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('xmlIdRef'));
    }

    public function testIsContainableResourceWithClassname()
    {
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddress'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddress'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAddressUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAddressUseList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAdverseReaction'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAdverseReaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionExposure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionExposure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionSymptom'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionSymptom'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAggregationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAggregationModeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAlert'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAlert'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAlertStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAlertStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAlertStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAlertStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAllergyIntolerance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAllergyIntolerance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAttachment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAttachment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBase64BinaryPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBase64BinaryPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary\FHIRBinary'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary\FHIRBinary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBindingConformance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBindingConformance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRBindingConformanceList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRBindingConformanceList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBoolean'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBoolean'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBooleanPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBooleanPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCarePlan'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCarePlan'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanGoal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanGoal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanSimple'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanSimple'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanGoalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanGoalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanGoalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanGoalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCausalityExpectation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCausalityExpectation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCausalityExpectationList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCausalityExpectationList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRCodePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRCodePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCoding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCoding'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRComposition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRComposition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConceptMap'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConceptMap'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapMap'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapMap'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCondition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionLocation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionLocation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionRelatedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionRelatedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConformance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConformance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceQuery'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceQuery'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceEventMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceEventMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceEventModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceEventModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceStatementStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceStatementStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConstraintSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConstraintSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactSystemList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactSystemList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCriticalityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCriticalityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDatePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDatePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDateTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDateTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDateTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDateTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDecimalPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDecimalPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDevice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDevice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDeviceObservationReport'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDeviceObservationReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportChannel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportChannel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportMetric'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportMetric'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportVirtualDevice'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportVirtualDevice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticOrder'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticOrder'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticReport'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentManifest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentManifest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentModeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentReference'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceService'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceService'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIREncounter'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIREncounter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAccomodation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAccomodation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterClass'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterClass'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterClassList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterClassList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterStateList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterStateList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREventTimingList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREventTimingList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExposureType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExposureType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExposureTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExposureTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtension'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtension'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtensionContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtensionContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExtensionContextList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExtensionContextList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRFamilyHistory'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRFamilyHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryRelation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryRelation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRFilterOperatorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRFilterOperatorList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRGroup'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRGroupType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRGroupType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRGroupTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRGroupTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHierarchicalRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHierarchicalRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRHierarchicalRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRHierarchicalRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHumanName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHumanName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRId'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRId'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIdentifierUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIdentifierUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRImagingModality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRImagingModality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRImagingModalityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRImagingModalityList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImagingStudy'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImagingStudy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunization'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunizationRecommendation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunizationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstanceAvailability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstanceAvailability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRInstantPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRInstantPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIntegerPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIntegerPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLinkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLinkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLinkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLinkTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRListModeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRLocation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRLocation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedia'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedia'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMediaType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMediaType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMediaTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMediaTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedication'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationAdministration'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationAdministrationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationAdministrationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationDispense'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationKindList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationKindList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationPrescription'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationPrescription'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDosageInstruction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDosageInstruction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationPrescriptionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationPrescriptionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationPrescriptionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationPrescriptionStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationStatement'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationStatement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMessageHeader'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMessageHeader'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRModality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRModality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRModalityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRModalityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRMoney'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRMoney'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNameUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNameUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNameUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNameUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrative'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrative'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNarrativeStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNarrativeStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRObservation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRObservation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationReliability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationReliability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationReliabilityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationReliabilityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIROidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIROidPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROperationOutcome'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROperationOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrder'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrder'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROrderOutcomeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROrderOutcomeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIROrderOutcomeStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIROrderOutcomeStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrderResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrderResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrganization'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrganization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROther'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROther'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPatient'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPatient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPeriod'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPeriod'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPractitioner'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPractitioner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProcedure'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureRelatedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureRelatedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProcedureRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProcedureRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProcedureRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProcedureRelationshipTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProfile'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProfile'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileBinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileBinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileExtensionDefn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileExtensionDefn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileQuery'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileQuery'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSlicing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSlicing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileStructure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileStructure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProvenance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProvenance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantityCompararator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantityCompararator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuantityCompararatorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuantityCompararatorList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuery'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuery'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuery\FHIRQueryResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuery\FHIRQueryResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQueryOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQueryOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQueryOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQueryOutcomeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuestionnaire'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuestionnaire'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuestionnaireStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuestionnaireStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRatio'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRatio'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRReactionSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRReactionSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRReactionSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRReactionSeverityList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRRelatedPerson'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRRelatedPerson'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRResource\FHIRResourceInline'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRResource\FHIRResourceInline'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType\FHIRResourceNamesPlusBinary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType\FHIRResourceNamesPlusBinary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceProfileStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceProfileStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceProfileStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceProfileStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResponseTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResponseTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulConformanceMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulConformanceMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationSystemList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationSystemList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule\FHIRScheduleRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule\FHIRScheduleRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal\FHIRScore'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal\FHIRScore'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSearchParamTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSearchParamTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSecurityEvent'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSecurityEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventNetwork'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventNetwork'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventObject'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventObject'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventActionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventActionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectLifecycle'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectLifecycle'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectLifecycleList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectLifecycleList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectRoleList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectRoleList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventParticipantNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventParticipantNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventParticipantNetworkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventParticipantNetworkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSlicingRulesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSlicingRulesList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSpecimen'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSpecimen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRString'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRString'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSubstance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSubstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSupply'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSupply'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSupply\FHIRSupplyDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSupply\FHIRSupplyDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyDispenseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyDispenseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger\FHIRTotalResults'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger\FHIRTotalResults'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUri'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUri'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUriPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUriPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUuid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUuid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUuidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUuidPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRValueSet'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRValueSet'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDefine'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDefine'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRValueSetStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRValueSetStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRValueSetStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRValueSetStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive\FHIRXmlIdRef'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive\FHIRXmlIdRef'));
    }

    public function testIsContainableResourceWithTypeName()
    {
        $this->assertFalse(VersionTypeMap::isContainableResource('Address'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AddressUse-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('AdverseReaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdverseReaction.Exposure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdverseReaction.Symptom'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Age'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AggregationMode-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Alert'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AlertStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AlertStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('AllergyIntolerance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Attachment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('base64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('base64Binary-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Binary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BindingConformance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BindingConformance-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('boolean'));
        $this->assertFalse(VersionTypeMap::isContainableResource('boolean-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CarePlan'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlan.Activity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlan.Goal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlan.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlan.Simple'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanActivityCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanActivityCategory-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanActivityStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanGoalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanGoalStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CausalityExpectation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CausalityExpectation-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('code'));
        $this->assertFalse(VersionTypeMap::isContainableResource('code-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Coding'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Composition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Composition.Attester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Composition.Event'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Composition.Section'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompositionAttestationMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompositionStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ConceptMap'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMap.Concept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMap.DependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMap.Map'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMapEquivalence-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Condition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Condition.Evidence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Condition.Location'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Condition.RelatedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Condition.Stage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionRelationshipType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Conformance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Certificate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Document'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Event'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Implementation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Messaging'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Operation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Operation1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Query'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Resource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Rest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.SearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Security'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Conformance.Software'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConformanceEventMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConformanceEventMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConformanceStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConformanceStatementStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConstraintSeverity-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactSystem-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactUse-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Count'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Criticality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Criticality-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('date'));
        $this->assertFalse(VersionTypeMap::isContainableResource('date-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('dateTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('dateTime-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('decimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('decimal-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Device'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DeviceObservationReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceObservationReport.Channel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceObservationReport.Metric'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceObservationReport.VirtualDevice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DiagnosticOrder'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticOrder.Event'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticOrder.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticOrderPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticOrderPriority-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticOrderStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DiagnosticReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticReport.Image'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticReportStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Distance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DocumentManifest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentMode-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DocumentReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReference.Context'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReference.Parameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReference.RelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReference.Service'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReferenceStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentRelationshipType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Duration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Element'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Encounter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.Accomodation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.Hospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.Location'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterClass'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterClass-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterState-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventTiming-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExposureType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExposureType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Extension'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExtensionContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExtensionContext-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('FamilyHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FamilyHistory.Condition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FamilyHistory.Relation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FilterOperator-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Group'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Group.Characteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GroupType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GroupType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HierarchicalRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HierarchicalRelationshipType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HumanName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('id'));
        $this->assertFalse(VersionTypeMap::isContainableResource('id-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Identifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IdentifierUse-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingModality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingModality-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ImagingStudy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingStudy.Instance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingStudy.Series'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Immunization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Immunization.Explanation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Immunization.Reaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Immunization.VaccinationProtocol'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ImmunizationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImmunizationRecommendation.DateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImmunizationRecommendation.Protocol'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImmunizationRecommendation.Recommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InstanceAvailability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InstanceAvailability-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('instant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('instant-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('integer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('integer-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IssueSeverity-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LinkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LinkType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('List'));
        $this->assertFalse(VersionTypeMap::isContainableResource('List.Entry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ListMode-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Location'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Location.Position'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LocationMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LocationStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Media'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MediaType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MediaType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Medication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Medication.Content'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Medication.Ingredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Medication.Package'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Medication.Product'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicationAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationAdministration.Dosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationAdministrationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationAdministrationStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicationDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationDispense.Dispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationDispense.Dosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationDispense.Substitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationDispenseStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationKind-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicationPrescription'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationPrescription.Dispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationPrescription.DosageInstruction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationPrescription.Substitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationPrescriptionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationPrescriptionStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicationStatement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationStatement.Dosage'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MessageHeader'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageHeader.Destination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageHeader.Response'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageHeader.Source'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageSignificanceCategory-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Modality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Modality-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Money'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NameUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NameUse-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Narrative'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NarrativeStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Observation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Observation.ReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Observation.Related'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationRelationshipType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationReliability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationReliability-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('oid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('oid-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('OperationOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationOutcome.Issue'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Order'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Order.When'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OrderOutcomeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OrderOutcomeStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('OrderResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Organization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Organization.Contact'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Other'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Patient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Patient.Animal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Patient.Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Patient.Link'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Period'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Practitioner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Practitioner.Qualification'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Procedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Procedure.Performer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Procedure.RelatedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProcedureRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProcedureRelationshipType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Profile'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Profile.Binding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Profile.Constraint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Profile.Definition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Profile.Element'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Profile.ExtensionDefn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Profile.Mapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Profile.Mapping1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Profile.Query'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Profile.SearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Profile.Slicing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Profile.Structure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Profile.Type'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PropertyRepresentation-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Provenance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Provenance.Agent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Provenance.Entity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProvenanceEntityRole-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Quantity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuantityCompararator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuantityCompararator-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Query'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Query.Response'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QueryOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QueryOutcome-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Questionnaire'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Questionnaire.Group'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Questionnaire.Question'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Range'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Ratio'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ReactionSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ReactionSeverity-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('RelatedPerson'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Resource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Resource.Inline'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceNamesPlusBinary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceProfileStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceProfileStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResponseType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RestfulConformanceMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RestfulConformanceMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RestfulOperationSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RestfulOperationSystem-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RestfulOperationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RestfulOperationType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SampledData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SampledDataDataType-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Schedule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Schedule.Repeat'));
        $this->assertFalse(VersionTypeMap::isContainableResource('score'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchParamType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('SecurityEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEvent.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEvent.Event'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEvent.Network'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEvent.Object'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEvent.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEvent.Source'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEventAction-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEventObjectLifecycle'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEventObjectLifecycle-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEventObjectRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEventObjectRole-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEventObjectType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEventObjectType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEventOutcome-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEventParticipantNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SecurityEventParticipantNetworkType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SensitivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SensitivityStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SensitivityType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SensitivityType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SlicingRules-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Specimen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Specimen.Collection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Specimen.Container'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Specimen.Source'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Specimen.Treatment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('string'));
        $this->assertFalse(VersionTypeMap::isContainableResource('string-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Substance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Substance.Ingredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Substance.Instance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Supply'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Supply.Dispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyDispenseStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('totalResults'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UnitsOfTime-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('uri'));
        $this->assertFalse(VersionTypeMap::isContainableResource('uri-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('uuid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('uuid-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ValueSet'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Compose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Concept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Contains'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Define'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Expansion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Filter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Include'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSetStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSetStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('xmlIdRef'));
    }

    public function testIsContainableResourceWithInstance()
    {
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddress;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAddressUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAddressUseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAdverseReaction;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionExposure;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseReaction\FHIRAdverseReactionSymptom;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRAge;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAggregationMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAggregationModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAlert;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAlertStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRAlertStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRAllergyIntolerance;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRAttachment;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBase64BinaryPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBase64Binary\FHIRBinary;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBindingConformance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRBindingConformanceList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBoolean;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRBooleanPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCarePlan;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanGoal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanSimple;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityCategory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanActivityStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanGoalStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanGoalStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCarePlanStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCarePlanStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCausalityExpectation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCausalityExpectationList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRCodePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCodeableConcept;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCoding;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRComposition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionAttestationMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCompositionStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCompositionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConceptMap;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapConcept;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapMap;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConceptMapEquivalence;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRCondition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionLocation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionRelatedItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConditionStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConditionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRConformance;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceQuery;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceEventMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceEventModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConformanceStatementStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConformanceStatementStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRConstraintSeverity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRConstraintSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactSystem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactSystemList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRContactUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRContactUseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRCount;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRCriticality;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRCriticalityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDate;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDatePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDateTime;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDateTimePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRDecimalPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDevice;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDeviceObservationReport;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportChannel;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportMetric;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceObservationReport\FHIRDeviceObservationReportVirtualDevice;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticOrder;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderPriority;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticOrderStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDiagnosticReport;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDiagnosticReportStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDistance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentManifest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRDocumentReference;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceParameter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceService;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentReferenceStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDocumentRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRDuration;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIREncounter;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterAccomodation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterClass;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterClassList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREncounterState;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREncounterStateList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIREventTiming;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIREventTimingList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExposureType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExposureTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtension;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRExtensionContext;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRExtensionContextList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRFamilyHistory;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryCondition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyHistory\FHIRFamilyHistoryRelation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRFilterOperator;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRFilterOperatorList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRGroup;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRGroupType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRGroupTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHierarchicalRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRHierarchicalRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRHumanName;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRId;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifier;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIdentifierUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIdentifierUseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRImagingModality;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRImagingModalityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImagingStudy;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunization;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRImmunizationRecommendation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstanceAvailability;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInstant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRInstantPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIntegerPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRIssueSeverity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRIssueSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLinkType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLinkTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRList;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRListMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRListModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRLocation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRLocationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRLocationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedia;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMediaType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMediaTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedication;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationAdministration;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationAdministrationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationDispense;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDispense;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationDispenseStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationKind;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationKindList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationPrescription;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDispense;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionDosageInstruction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationPrescription\FHIRMedicationPrescriptionSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMedicationPrescriptionStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMedicationPrescriptionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMedicationStatement;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRMessageHeader;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRMessageSignificanceCategory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRModality;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRModalityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity\FHIRMoney;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNameUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNameUseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrative;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRNarrativeStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRNarrativeStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRObservation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationReliability;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationReliabilityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRObservationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRObservationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROid;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIROidPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROperationOutcome;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrder;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIROrderOutcomeStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIROrderOutcomeStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrderResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROrganization;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIROther;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPatient;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPeriod;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRPractitioner;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProcedure;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureRelatedItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProcedureRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProcedureRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProfile;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileBinding;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileConstraint;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileDefinition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileElement;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileExtensionDefn;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileMapping1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileQuery;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSearchParam;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileSlicing;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileStructure;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProfile\FHIRProfileType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRPropertyRepresentation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRProvenance;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRProvenanceEntityRole;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuantityCompararator;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuantityCompararatorList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuery;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuery\FHIRQueryResponse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQueryOutcome;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQueryOutcomeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRQuestionnaire;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRQuestionnaireStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRange;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRatio;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRReactionSeverity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRReactionSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRRelatedPerson;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRResource\FHIRResourceInline;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType\FHIRResourceNamesPlusBinary;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceProfileStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceProfileStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResourceReference;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResourceType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRResponseType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRResponseTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulConformanceMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationSystem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationSystemList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRRestfulOperationType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRRestfulOperationTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledData;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSampledDataDataType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRSampledDataDataTypePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSchedule\FHIRScheduleRepeat;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRDecimal\FHIRScore;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSearchParamType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSearchParamTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSecurityEvent;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventEvent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventNetwork;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventObject;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSecurityEvent\FHIRSecurityEventSource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventActionList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectLifecycle;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectLifecycleList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectRole;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectRoleList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventObjectType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventObjectTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventOutcome;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventOutcomeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSecurityEventParticipantNetworkType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSecurityEventParticipantNetworkTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSensitivityType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSensitivityTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSlicingRules;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSlicingRulesList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSpecimen;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenSource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRString;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSubstance;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRSupply;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRSupply\FHIRSupplyDispense;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyDispenseStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyDispenseStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRSupplyStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRSupplyStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRInteger\FHIRTotalResults;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUnitsOfTime;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUri;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUriPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRUuid;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRUuidPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRResource\FHIRValueSet;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDefine;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRElement\FHIRValueSetStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRStringPrimitive\FHIRValueSetStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU1\Types\FHIRIdPrimitive\FHIRXmlIdRef;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
    }
}
